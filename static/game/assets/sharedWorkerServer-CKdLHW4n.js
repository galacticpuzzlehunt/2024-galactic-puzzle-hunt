var h=Object.defineProperty;var C=(s,t,e)=>t in s?h(s,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):s[t]=e;var n=(s,t,e)=>C(s,typeof t!="symbol"?t+"":t,e);var i=(s=>(s.INIT="init",s.HANDLE_MSG="handle_msg",s.REMOVE_CLIENT="remove_client",s))(i||{}),r=(s=>(s.INIT_ACK="init_ack",s.RESP="resp",s.CLOSE="close",s))(r||{});class M{constructor(t){n(this,"port");n(this,"handleMsg");n(this,"removeClient");n(this,"isClosed");this.port=t,this.isClosed=!1}init(){this.port.onmessage=t=>{this.handlePortMsg(t).catch(console.error)},this.port.start()}async handleInit(t,e,o){{const l=(await import("./makeMockServer-BRO0On-H.js")).default;if(o!==void 0){await l(t,o);return}const a=(await l(t)).addClient({send:c=>{this.port.postMessage({type:r.RESP,msg:c})},close:()=>{this.port.postMessage({type:r.CLOSE})}},e);this.handleMsg=a.handleMsg,this.removeClient=a.removeClient,this.port.postMessage({type:r.INIT_ACK})}}async handlePortMsg({data:t}){var e,o;if(!this.isClosed)switch(t.type){case i.INIT:{await this.handleInit(t.mockServerOpts,t.connUid,t.resetServer);break}case i.HANDLE_MSG:{(e=this.handleMsg)==null||e.call(this,t.msg);break}case i.REMOVE_CLIENT:{(o=this.removeClient)==null||o.call(this);break}}}}onconnect=s=>{new M(s.ports[0]).init()};
//# sourceMappingURL=sharedWorkerServer-CKdLHW4n.js.map
