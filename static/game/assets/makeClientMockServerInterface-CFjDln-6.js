var fs=Object.defineProperty;var gs=(s,e,n)=>e in s?fs(s,e,{enumerable:!0,configurable:!0,writable:!0,value:n}):s[e]=n;var u=(s,e,n)=>gs(s,typeof e!="symbol"?e+"":e,n);import{c as nn,g as bs,i as Wn,a as ys,S as D,B as rn,A as ln,o as Qe,n as Se,b as ae,d as yt,e as v,H as Ie,f as gn,M as qn,h as zs,G as Z,j as Un,k as Yn,P as Bt,l as jt,r as Xe,R as se,m as ws,J as vs,p as Bn,O as ye,q as je,s as Ce,t as Ts,u as Es,v as ze,w as _s,x as Is,C as Wt,y as ks,z as qt,D as de,E as Q,F as ce,I as Le,K as As,L as Yt,N as Ss,Q as oe,T as Ns,U as tn,V as Os,W as Ps,X as Cs,Y as Rs,Z as dn,_ as Ge,$ as zt,a0 as xs,a1 as Ds,a2 as Ls,a3 as Hs,a4 as Fs,a5 as Nn,a6 as Gs,a7 as me,a8 as un,a9 as Ms,aa as Us,ab as Bs,ac as On,ad as Pn,ae as wt,af as js,ag as Ke,ah as Ws,ai as ke,aj as qs,ak as Cn,al as ne,am as Vn,an as Ys,ao as Vs,ap as an,aq as sn,ar as Ks,as as ue,at as mn,au as Js,av as Zs,aw as Xs,ax as Qs,ay as $s,az as eo,aA as no,aB as Vt,aC as _e,aD as vt,aE as Rn,aF as Tt,aG as to,aH as ao,aI as Kt}from"./main-BIpTqwiy.js";class Et{constructor(e,n){u(this,"sockServer");u(this,"callbacks");u(this,"connId");u(this,"handleMsg");u(this,"disconnect");u(this,"isClosed");this.sockServer=e,this.connId=n,this.handleMsg=t=>{throw new Error("connection not initialized yet")},this.disconnect=()=>{throw new Error("connection not initialized yet")},this.isClosed=!1}init(e){this.callbacks=e,this.connect()}connect(){if(this.callbacks===void 0)throw new Error("expect callbacks to be defined");const{onOpen:e,onResp:n,afterDisconnect:t}=this.callbacks,{handleMsg:a,removeClient:o}=this.sockServer.addClient({send:r=>{this.isClosed||Promise.resolve().then(()=>{n(r)}).catch(console.error)},close:()=>{this.close()}},this.connId);this.handleMsg=a,this.disconnect=()=>{o(),t({numReconnections:0,reconnectDelayInSeconds:0})},e()}send(e){Promise.resolve().then(()=>{this.handleMsg(e)}).catch(console.error)}reconnect(){this.disconnect(),this.connect()}close(){this.disconnect(),this.isClosed=!0}}function on(s){throw new Error('Could not dynamically require "'+s+'". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.')}var Jt={exports:{}};/*!
    localForage -- Offline Storage, Improved
    Version 1.10.0
    https://localforage.github.io/localForage
    (c) 2013-2017 Mozilla, Apache License 2.0
*/(function(s,e){(function(n){s.exports=n()})(function(){return function n(t,a,o){function r(g,y){if(!a[g]){if(!t[g]){var f=typeof on=="function"&&on;if(!y&&f)return f(g,!0);if(i)return i(g,!0);var z=new Error("Cannot find module '"+g+"'");throw z.code="MODULE_NOT_FOUND",z}var w=a[g]={exports:{}};t[g][0].call(w.exports,function(E){var O=t[g][1][E];return r(O||E)},w,w.exports,n,t,a,o)}return a[g].exports}for(var i=typeof on=="function"&&on,h=0;h<o.length;h++)r(o[h]);return r}({1:[function(n,t,a){(function(o){var r=o.MutationObserver||o.WebKitMutationObserver,i;if(r){var h=0,g=new r(E),y=o.document.createTextNode("");g.observe(y,{characterData:!0}),i=function(){y.data=h=++h%2}}else if(!o.setImmediate&&typeof o.MessageChannel<"u"){var f=new o.MessageChannel;f.port1.onmessage=E,i=function(){f.port2.postMessage(0)}}else"document"in o&&"onreadystatechange"in o.document.createElement("script")?i=function(){var x=o.document.createElement("script");x.onreadystatechange=function(){E(),x.onreadystatechange=null,x.parentNode.removeChild(x),x=null},o.document.documentElement.appendChild(x)}:i=function(){setTimeout(E,0)};var z,w=[];function E(){z=!0;for(var x,F,L=w.length;L;){for(F=w,w=[],x=-1;++x<L;)F[x]();L=w.length}z=!1}t.exports=O;function O(x){w.push(x)===1&&!z&&i()}}).call(this,typeof nn<"u"?nn:typeof self<"u"?self:typeof window<"u"?window:{})},{}],2:[function(n,t,a){var o=n(1);function r(){}var i={},h=["REJECTED"],g=["FULFILLED"],y=["PENDING"];t.exports=f;function f(_){if(typeof _!="function")throw new TypeError("resolver must be a function");this.state=y,this.queue=[],this.outcome=void 0,_!==r&&O(this,_)}f.prototype.catch=function(_){return this.then(null,_)},f.prototype.then=function(_,H){if(typeof _!="function"&&this.state===g||typeof H!="function"&&this.state===h)return this;var C=new this.constructor(r);if(this.state!==y){var G=this.state===g?_:H;w(C,G,this.outcome)}else this.queue.push(new z(C,_,H));return C};function z(_,H,C){this.promise=_,typeof H=="function"&&(this.onFulfilled=H,this.callFulfilled=this.otherCallFulfilled),typeof C=="function"&&(this.onRejected=C,this.callRejected=this.otherCallRejected)}z.prototype.callFulfilled=function(_){i.resolve(this.promise,_)},z.prototype.otherCallFulfilled=function(_){w(this.promise,this.onFulfilled,_)},z.prototype.callRejected=function(_){i.reject(this.promise,_)},z.prototype.otherCallRejected=function(_){w(this.promise,this.onRejected,_)};function w(_,H,C){o(function(){var G;try{G=H(C)}catch(q){return i.reject(_,q)}G===_?i.reject(_,new TypeError("Cannot resolve promise with itself")):i.resolve(_,G)})}i.resolve=function(_,H){var C=x(E,H);if(C.status==="error")return i.reject(_,C.value);var G=C.value;if(G)O(_,G);else{_.state=g,_.outcome=H;for(var q=-1,$=_.queue.length;++q<$;)_.queue[q].callFulfilled(H)}return _},i.reject=function(_,H){_.state=h,_.outcome=H;for(var C=-1,G=_.queue.length;++C<G;)_.queue[C].callRejected(H);return _};function E(_){var H=_&&_.then;if(_&&(typeof _=="object"||typeof _=="function")&&typeof H=="function")return function(){H.apply(_,arguments)}}function O(_,H){var C=!1;function G(M){C||(C=!0,i.reject(_,M))}function q(M){C||(C=!0,i.resolve(_,M))}function $(){H(q,G)}var ee=x($);ee.status==="error"&&G(ee.value)}function x(_,H){var C={};try{C.value=_(H),C.status="success"}catch(G){C.status="error",C.value=G}return C}f.resolve=F;function F(_){return _ instanceof this?_:i.resolve(new this(r),_)}f.reject=L;function L(_){var H=new this(r);return i.reject(H,_)}f.all=j;function j(_){var H=this;if(Object.prototype.toString.call(_)!=="[object Array]")return this.reject(new TypeError("must be an array"));var C=_.length,G=!1;if(!C)return this.resolve([]);for(var q=new Array(C),$=0,ee=-1,M=new this(r);++ee<C;)K(_[ee],ee);return M;function K(ie,fe){H.resolve(ie).then(Re,function(ve){G||(G=!0,i.reject(M,ve))});function Re(ve){q[fe]=ve,++$===C&&!G&&(G=!0,i.resolve(M,q))}}}f.race=U;function U(_){var H=this;if(Object.prototype.toString.call(_)!=="[object Array]")return this.reject(new TypeError("must be an array"));var C=_.length,G=!1;if(!C)return this.resolve([]);for(var q=-1,$=new this(r);++q<C;)ee(_[q]);return $;function ee(M){H.resolve(M).then(function(K){G||(G=!0,i.resolve($,K))},function(K){G||(G=!0,i.reject($,K))})}}},{1:1}],3:[function(n,t,a){(function(o){typeof o.Promise!="function"&&(o.Promise=n(2))}).call(this,typeof nn<"u"?nn:typeof self<"u"?self:typeof window<"u"?window:{})},{2:2}],4:[function(n,t,a){var o=typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?function(l){return typeof l}:function(l){return l&&typeof Symbol=="function"&&l.constructor===Symbol&&l!==Symbol.prototype?"symbol":typeof l};function r(l,d){if(!(l instanceof d))throw new TypeError("Cannot call a class as a function")}function i(){try{if(typeof indexedDB<"u")return indexedDB;if(typeof webkitIndexedDB<"u")return webkitIndexedDB;if(typeof mozIndexedDB<"u")return mozIndexedDB;if(typeof OIndexedDB<"u")return OIndexedDB;if(typeof msIndexedDB<"u")return msIndexedDB}catch{return}}var h=i();function g(){try{if(!h||!h.open)return!1;var l=typeof openDatabase<"u"&&/(Safari|iPhone|iPad|iPod)/.test(navigator.userAgent)&&!/Chrome/.test(navigator.userAgent)&&!/BlackBerry/.test(navigator.platform),d=typeof fetch=="function"&&fetch.toString().indexOf("[native code")!==-1;return(!l||d)&&typeof indexedDB<"u"&&typeof IDBKeyRange<"u"}catch{return!1}}function y(l,d){l=l||[],d=d||{};try{return new Blob(l,d)}catch(m){if(m.name!=="TypeError")throw m;for(var c=typeof BlobBuilder<"u"?BlobBuilder:typeof MSBlobBuilder<"u"?MSBlobBuilder:typeof MozBlobBuilder<"u"?MozBlobBuilder:WebKitBlobBuilder,p=new c,b=0;b<l.length;b+=1)p.append(l[b]);return p.getBlob(d.type)}}typeof Promise>"u"&&n(3);var f=Promise;function z(l,d){d&&l.then(function(c){d(null,c)},function(c){d(c)})}function w(l,d,c){typeof d=="function"&&l.then(d),typeof c=="function"&&l.catch(c)}function E(l){return typeof l!="string"&&(console.warn(l+" used as a key, but it is not a string."),l=String(l)),l}function O(){if(arguments.length&&typeof arguments[arguments.length-1]=="function")return arguments[arguments.length-1]}var x="local-forage-detect-blob-support",F=void 0,L={},j=Object.prototype.toString,U="readonly",_="readwrite";function H(l){for(var d=l.length,c=new ArrayBuffer(d),p=new Uint8Array(c),b=0;b<d;b++)p[b]=l.charCodeAt(b);return c}function C(l){return new f(function(d){var c=l.transaction(x,_),p=y([""]);c.objectStore(x).put(p,"key"),c.onabort=function(b){b.preventDefault(),b.stopPropagation(),d(!1)},c.oncomplete=function(){var b=navigator.userAgent.match(/Chrome\/(\d+)/),m=navigator.userAgent.match(/Edge\//);d(m||!b||parseInt(b[1],10)>=43)}}).catch(function(){return!1})}function G(l){return typeof F=="boolean"?f.resolve(F):C(l).then(function(d){return F=d,F})}function q(l){var d=L[l.name],c={};c.promise=new f(function(p,b){c.resolve=p,c.reject=b}),d.deferredOperations.push(c),d.dbReady?d.dbReady=d.dbReady.then(function(){return c.promise}):d.dbReady=c.promise}function $(l){var d=L[l.name],c=d.deferredOperations.pop();if(c)return c.resolve(),c.promise}function ee(l,d){var c=L[l.name],p=c.deferredOperations.pop();if(p)return p.reject(d),p.promise}function M(l,d){return new f(function(c,p){if(L[l.name]=L[l.name]||Qn(),l.db)if(d)q(l),l.db.close();else return c(l.db);var b=[l.name];d&&b.push(l.version);var m=h.open.apply(h,b);d&&(m.onupgradeneeded=function(T){var I=m.result;try{I.createObjectStore(l.storeName),T.oldVersion<=1&&I.createObjectStore(x)}catch(k){if(k.name==="ConstraintError")console.warn('The database "'+l.name+'" has been upgraded from version '+T.oldVersion+" to version "+T.newVersion+', but the storage "'+l.storeName+'" already exists.');else throw k}}),m.onerror=function(T){T.preventDefault(),p(m.error)},m.onsuccess=function(){var T=m.result;T.onversionchange=function(I){I.target.close()},c(T),$(l)}})}function K(l){return M(l,!1)}function ie(l){return M(l,!0)}function fe(l,d){if(!l.db)return!0;var c=!l.db.objectStoreNames.contains(l.storeName),p=l.version<l.db.version,b=l.version>l.db.version;if(p&&(l.version!==d&&console.warn('The database "'+l.name+`" can't be downgraded from version `+l.db.version+" to version "+l.version+"."),l.version=l.db.version),b||c){if(c){var m=l.db.version+1;m>l.version&&(l.version=m)}return!0}return!1}function Re(l){return new f(function(d,c){var p=new FileReader;p.onerror=c,p.onloadend=function(b){var m=btoa(b.target.result||"");d({__local_forage_encoded_blob:!0,data:m,type:l.type})},p.readAsBinaryString(l)})}function ve(l){var d=H(atob(l.data));return y([d],{type:l.type})}function yn(l){return l&&l.__local_forage_encoded_blob}function zn(l){var d=this,c=d._initReady().then(function(){var p=L[d._dbInfo.name];if(p&&p.dbReady)return p.dbReady});return w(c,l,l),c}function ba(l){q(l);for(var d=L[l.name],c=d.forages,p=0;p<c.length;p++){var b=c[p];b._dbInfo.db&&(b._dbInfo.db.close(),b._dbInfo.db=null)}return l.db=null,K(l).then(function(m){return l.db=m,fe(l)?ie(l):m}).then(function(m){l.db=d.db=m;for(var T=0;T<c.length;T++)c[T]._dbInfo.db=m}).catch(function(m){throw ee(l,m),m})}function ge(l,d,c,p){p===void 0&&(p=1);try{var b=l.db.transaction(l.storeName,d);c(null,b)}catch(m){if(p>0&&(!l.db||m.name==="InvalidStateError"||m.name==="NotFoundError"))return f.resolve().then(function(){if(!l.db||m.name==="NotFoundError"&&!l.db.objectStoreNames.contains(l.storeName)&&l.version<=l.db.version)return l.db&&(l.version=l.db.version+1),ie(l)}).then(function(){return ba(l).then(function(){ge(l,d,c,p-1)})}).catch(c);c(m)}}function Qn(){return{forages:[],db:null,dbReady:null,deferredOperations:[]}}function ya(l){var d=this,c={db:null};if(l)for(var p in l)c[p]=l[p];var b=L[c.name];b||(b=Qn(),L[c.name]=b),b.forages.push(d),d._initReady||(d._initReady=d.ready,d.ready=zn);var m=[];function T(){return f.resolve()}for(var I=0;I<b.forages.length;I++){var k=b.forages[I];k!==d&&m.push(k._initReady().catch(T))}var A=b.forages.slice(0);return f.all(m).then(function(){return c.db=b.db,K(c)}).then(function(S){return c.db=S,fe(c,d._defaultConfig.version)?ie(c):S}).then(function(S){c.db=b.db=S,d._dbInfo=c;for(var R=0;R<A.length;R++){var B=A[R];B!==d&&(B._dbInfo.db=c.db,B._dbInfo.version=c.version)}})}function za(l,d){var c=this;l=E(l);var p=new f(function(b,m){c.ready().then(function(){ge(c._dbInfo,U,function(T,I){if(T)return m(T);try{var k=I.objectStore(c._dbInfo.storeName),A=k.get(l);A.onsuccess=function(){var S=A.result;S===void 0&&(S=null),yn(S)&&(S=ve(S)),b(S)},A.onerror=function(){m(A.error)}}catch(S){m(S)}})}).catch(m)});return z(p,d),p}function wa(l,d){var c=this,p=new f(function(b,m){c.ready().then(function(){ge(c._dbInfo,U,function(T,I){if(T)return m(T);try{var k=I.objectStore(c._dbInfo.storeName),A=k.openCursor(),S=1;A.onsuccess=function(){var R=A.result;if(R){var B=R.value;yn(B)&&(B=ve(B));var Y=l(B,R.key,S++);Y!==void 0?b(Y):R.continue()}else b()},A.onerror=function(){m(A.error)}}catch(R){m(R)}})}).catch(m)});return z(p,d),p}function va(l,d,c){var p=this;l=E(l);var b=new f(function(m,T){var I;p.ready().then(function(){return I=p._dbInfo,j.call(d)==="[object Blob]"?G(I.db).then(function(k){return k?d:Re(d)}):d}).then(function(k){ge(p._dbInfo,_,function(A,S){if(A)return T(A);try{var R=S.objectStore(p._dbInfo.storeName);k===null&&(k=void 0);var B=R.put(k,l);S.oncomplete=function(){k===void 0&&(k=null),m(k)},S.onabort=S.onerror=function(){var Y=B.error?B.error:B.transaction.error;T(Y)}}catch(Y){T(Y)}})}).catch(T)});return z(b,c),b}function Ta(l,d){var c=this;l=E(l);var p=new f(function(b,m){c.ready().then(function(){ge(c._dbInfo,_,function(T,I){if(T)return m(T);try{var k=I.objectStore(c._dbInfo.storeName),A=k.delete(l);I.oncomplete=function(){b()},I.onerror=function(){m(A.error)},I.onabort=function(){var S=A.error?A.error:A.transaction.error;m(S)}}catch(S){m(S)}})}).catch(m)});return z(p,d),p}function Ea(l){var d=this,c=new f(function(p,b){d.ready().then(function(){ge(d._dbInfo,_,function(m,T){if(m)return b(m);try{var I=T.objectStore(d._dbInfo.storeName),k=I.clear();T.oncomplete=function(){p()},T.onabort=T.onerror=function(){var A=k.error?k.error:k.transaction.error;b(A)}}catch(A){b(A)}})}).catch(b)});return z(c,l),c}function _a(l){var d=this,c=new f(function(p,b){d.ready().then(function(){ge(d._dbInfo,U,function(m,T){if(m)return b(m);try{var I=T.objectStore(d._dbInfo.storeName),k=I.count();k.onsuccess=function(){p(k.result)},k.onerror=function(){b(k.error)}}catch(A){b(A)}})}).catch(b)});return z(c,l),c}function Ia(l,d){var c=this,p=new f(function(b,m){if(l<0){b(null);return}c.ready().then(function(){ge(c._dbInfo,U,function(T,I){if(T)return m(T);try{var k=I.objectStore(c._dbInfo.storeName),A=!1,S=k.openKeyCursor();S.onsuccess=function(){var R=S.result;if(!R){b(null);return}l===0||A?b(R.key):(A=!0,R.advance(l))},S.onerror=function(){m(S.error)}}catch(R){m(R)}})}).catch(m)});return z(p,d),p}function ka(l){var d=this,c=new f(function(p,b){d.ready().then(function(){ge(d._dbInfo,U,function(m,T){if(m)return b(m);try{var I=T.objectStore(d._dbInfo.storeName),k=I.openKeyCursor(),A=[];k.onsuccess=function(){var S=k.result;if(!S){p(A);return}A.push(S.key),S.continue()},k.onerror=function(){b(k.error)}}catch(S){b(S)}})}).catch(b)});return z(c,l),c}function Aa(l,d){d=O.apply(this,arguments);var c=this.config();l=typeof l!="function"&&l||{},l.name||(l.name=l.name||c.name,l.storeName=l.storeName||c.storeName);var p=this,b;if(!l.name)b=f.reject("Invalid arguments");else{var m=l.name===c.name&&p._dbInfo.db,T=m?f.resolve(p._dbInfo.db):K(l).then(function(I){var k=L[l.name],A=k.forages;k.db=I;for(var S=0;S<A.length;S++)A[S]._dbInfo.db=I;return I});l.storeName?b=T.then(function(I){if(I.objectStoreNames.contains(l.storeName)){var k=I.version+1;q(l);var A=L[l.name],S=A.forages;I.close();for(var R=0;R<S.length;R++){var B=S[R];B._dbInfo.db=null,B._dbInfo.version=k}var Y=new f(function(V,X){var J=h.open(l.name,k);J.onerror=function(re){var Be=J.result;Be.close(),X(re)},J.onupgradeneeded=function(){var re=J.result;re.deleteObjectStore(l.storeName)},J.onsuccess=function(){var re=J.result;re.close(),V(re)}});return Y.then(function(V){A.db=V;for(var X=0;X<S.length;X++){var J=S[X];J._dbInfo.db=V,$(J._dbInfo)}}).catch(function(V){throw(ee(l,V)||f.resolve()).catch(function(){}),V})}}):b=T.then(function(I){q(l);var k=L[l.name],A=k.forages;I.close();for(var S=0;S<A.length;S++){var R=A[S];R._dbInfo.db=null}var B=new f(function(Y,V){var X=h.deleteDatabase(l.name);X.onerror=function(){var J=X.result;J&&J.close(),V(X.error)},X.onblocked=function(){console.warn('dropInstance blocked for database "'+l.name+'" until all open connections are closed')},X.onsuccess=function(){var J=X.result;J&&J.close(),Y(J)}});return B.then(function(Y){k.db=Y;for(var V=0;V<A.length;V++){var X=A[V];$(X._dbInfo)}}).catch(function(Y){throw(ee(l,Y)||f.resolve()).catch(function(){}),Y})})}return z(b,d),b}var Sa={_driver:"asyncStorage",_initStorage:ya,_support:g(),iterate:wa,getItem:za,setItem:va,removeItem:Ta,clear:Ea,length:_a,key:Ia,keys:ka,dropInstance:Aa};function Na(){return typeof openDatabase=="function"}var Te="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",Oa="~~local_forage_type~",$n=/^~~local_forage_type~([^~]+)~/,$e="__lfsc__:",wn=$e.length,vn="arbf",Tn="blob",et="si08",nt="ui08",tt="uic8",at="si16",st="si32",ot="ur16",it="ui32",rt="fl32",lt="fl64",ut=wn+vn.length,ct=Object.prototype.toString;function ht(l){var d=l.length*.75,c=l.length,p,b=0,m,T,I,k;l[l.length-1]==="="&&(d--,l[l.length-2]==="="&&d--);var A=new ArrayBuffer(d),S=new Uint8Array(A);for(p=0;p<c;p+=4)m=Te.indexOf(l[p]),T=Te.indexOf(l[p+1]),I=Te.indexOf(l[p+2]),k=Te.indexOf(l[p+3]),S[b++]=m<<2|T>>4,S[b++]=(T&15)<<4|I>>2,S[b++]=(I&3)<<6|k&63;return A}function En(l){var d=new Uint8Array(l),c="",p;for(p=0;p<d.length;p+=3)c+=Te[d[p]>>2],c+=Te[(d[p]&3)<<4|d[p+1]>>4],c+=Te[(d[p+1]&15)<<2|d[p+2]>>6],c+=Te[d[p+2]&63];return d.length%3===2?c=c.substring(0,c.length-1)+"=":d.length%3===1&&(c=c.substring(0,c.length-2)+"=="),c}function Pa(l,d){var c="";if(l&&(c=ct.call(l)),l&&(c==="[object ArrayBuffer]"||l.buffer&&ct.call(l.buffer)==="[object ArrayBuffer]")){var p,b=$e;l instanceof ArrayBuffer?(p=l,b+=vn):(p=l.buffer,c==="[object Int8Array]"?b+=et:c==="[object Uint8Array]"?b+=nt:c==="[object Uint8ClampedArray]"?b+=tt:c==="[object Int16Array]"?b+=at:c==="[object Uint16Array]"?b+=ot:c==="[object Int32Array]"?b+=st:c==="[object Uint32Array]"?b+=it:c==="[object Float32Array]"?b+=rt:c==="[object Float64Array]"?b+=lt:d(new Error("Failed to get type for BinaryArray"))),d(b+En(p))}else if(c==="[object Blob]"){var m=new FileReader;m.onload=function(){var T=Oa+l.type+"~"+En(this.result);d($e+Tn+T)},m.readAsArrayBuffer(l)}else try{d(JSON.stringify(l))}catch(T){console.error("Couldn't convert value into a JSON string: ",l),d(null,T)}}function Ca(l){if(l.substring(0,wn)!==$e)return JSON.parse(l);var d=l.substring(ut),c=l.substring(wn,ut),p;if(c===Tn&&$n.test(d)){var b=d.match($n);p=b[1],d=d.substring(b[0].length)}var m=ht(d);switch(c){case vn:return m;case Tn:return y([m],{type:p});case et:return new Int8Array(m);case nt:return new Uint8Array(m);case tt:return new Uint8ClampedArray(m);case at:return new Int16Array(m);case ot:return new Uint16Array(m);case st:return new Int32Array(m);case it:return new Uint32Array(m);case rt:return new Float32Array(m);case lt:return new Float64Array(m);default:throw new Error("Unkown type: "+c)}}var _n={serialize:Pa,deserialize:Ca,stringToBuffer:ht,bufferToString:En};function dt(l,d,c,p){l.executeSql("CREATE TABLE IF NOT EXISTS "+d.storeName+" (id INTEGER PRIMARY KEY, key unique, value)",[],c,p)}function Ra(l){var d=this,c={db:null};if(l)for(var p in l)c[p]=typeof l[p]!="string"?l[p].toString():l[p];var b=new f(function(m,T){try{c.db=openDatabase(c.name,String(c.version),c.description,c.size)}catch(I){return T(I)}c.db.transaction(function(I){dt(I,c,function(){d._dbInfo=c,m()},function(k,A){T(A)})},T)});return c.serializer=_n,b}function Ee(l,d,c,p,b,m){l.executeSql(c,p,b,function(T,I){I.code===I.SYNTAX_ERR?T.executeSql("SELECT name FROM sqlite_master WHERE type='table' AND name = ?",[d.storeName],function(k,A){A.rows.length?m(k,I):dt(k,d,function(){k.executeSql(c,p,b,m)},m)},m):m(T,I)},m)}function xa(l,d){var c=this;l=E(l);var p=new f(function(b,m){c.ready().then(function(){var T=c._dbInfo;T.db.transaction(function(I){Ee(I,T,"SELECT * FROM "+T.storeName+" WHERE key = ? LIMIT 1",[l],function(k,A){var S=A.rows.length?A.rows.item(0).value:null;S&&(S=T.serializer.deserialize(S)),b(S)},function(k,A){m(A)})})}).catch(m)});return z(p,d),p}function Da(l,d){var c=this,p=new f(function(b,m){c.ready().then(function(){var T=c._dbInfo;T.db.transaction(function(I){Ee(I,T,"SELECT * FROM "+T.storeName,[],function(k,A){for(var S=A.rows,R=S.length,B=0;B<R;B++){var Y=S.item(B),V=Y.value;if(V&&(V=T.serializer.deserialize(V)),V=l(V,Y.key,B+1),V!==void 0){b(V);return}}b()},function(k,A){m(A)})})}).catch(m)});return z(p,d),p}function mt(l,d,c,p){var b=this;l=E(l);var m=new f(function(T,I){b.ready().then(function(){d===void 0&&(d=null);var k=d,A=b._dbInfo;A.serializer.serialize(d,function(S,R){R?I(R):A.db.transaction(function(B){Ee(B,A,"INSERT OR REPLACE INTO "+A.storeName+" (key, value) VALUES (?, ?)",[l,S],function(){T(k)},function(Y,V){I(V)})},function(B){if(B.code===B.QUOTA_ERR){if(p>0){T(mt.apply(b,[l,k,c,p-1]));return}I(B)}})})}).catch(I)});return z(m,c),m}function La(l,d,c){return mt.apply(this,[l,d,c,1])}function Ha(l,d){var c=this;l=E(l);var p=new f(function(b,m){c.ready().then(function(){var T=c._dbInfo;T.db.transaction(function(I){Ee(I,T,"DELETE FROM "+T.storeName+" WHERE key = ?",[l],function(){b()},function(k,A){m(A)})})}).catch(m)});return z(p,d),p}function Fa(l){var d=this,c=new f(function(p,b){d.ready().then(function(){var m=d._dbInfo;m.db.transaction(function(T){Ee(T,m,"DELETE FROM "+m.storeName,[],function(){p()},function(I,k){b(k)})})}).catch(b)});return z(c,l),c}function Ga(l){var d=this,c=new f(function(p,b){d.ready().then(function(){var m=d._dbInfo;m.db.transaction(function(T){Ee(T,m,"SELECT COUNT(key) as c FROM "+m.storeName,[],function(I,k){var A=k.rows.item(0).c;p(A)},function(I,k){b(k)})})}).catch(b)});return z(c,l),c}function Ma(l,d){var c=this,p=new f(function(b,m){c.ready().then(function(){var T=c._dbInfo;T.db.transaction(function(I){Ee(I,T,"SELECT key FROM "+T.storeName+" WHERE id = ? LIMIT 1",[l+1],function(k,A){var S=A.rows.length?A.rows.item(0).key:null;b(S)},function(k,A){m(A)})})}).catch(m)});return z(p,d),p}function Ua(l){var d=this,c=new f(function(p,b){d.ready().then(function(){var m=d._dbInfo;m.db.transaction(function(T){Ee(T,m,"SELECT key FROM "+m.storeName,[],function(I,k){for(var A=[],S=0;S<k.rows.length;S++)A.push(k.rows.item(S).key);p(A)},function(I,k){b(k)})})}).catch(b)});return z(c,l),c}function Ba(l){return new f(function(d,c){l.transaction(function(p){p.executeSql("SELECT name FROM sqlite_master WHERE type='table' AND name <> '__WebKitDatabaseInfoTable__'",[],function(b,m){for(var T=[],I=0;I<m.rows.length;I++)T.push(m.rows.item(I).name);d({db:l,storeNames:T})},function(b,m){c(m)})},function(p){c(p)})})}function ja(l,d){d=O.apply(this,arguments);var c=this.config();l=typeof l!="function"&&l||{},l.name||(l.name=l.name||c.name,l.storeName=l.storeName||c.storeName);var p=this,b;return l.name?b=new f(function(m){var T;l.name===c.name?T=p._dbInfo.db:T=openDatabase(l.name,"","",0),l.storeName?m({db:T,storeNames:[l.storeName]}):m(Ba(T))}).then(function(m){return new f(function(T,I){m.db.transaction(function(k){function A(Y){return new f(function(V,X){k.executeSql("DROP TABLE IF EXISTS "+Y,[],function(){V()},function(J,re){X(re)})})}for(var S=[],R=0,B=m.storeNames.length;R<B;R++)S.push(A(m.storeNames[R]));f.all(S).then(function(){T()}).catch(function(Y){I(Y)})},function(k){I(k)})})}):b=f.reject("Invalid arguments"),z(b,d),b}var Wa={_driver:"webSQLStorage",_initStorage:Ra,_support:Na(),iterate:Da,getItem:xa,setItem:La,removeItem:Ha,clear:Fa,length:Ga,key:Ma,keys:Ua,dropInstance:ja};function qa(){try{return typeof localStorage<"u"&&"setItem"in localStorage&&!!localStorage.setItem}catch{return!1}}function pt(l,d){var c=l.name+"/";return l.storeName!==d.storeName&&(c+=l.storeName+"/"),c}function Ya(){var l="_localforage_support_test";try{return localStorage.setItem(l,!0),localStorage.removeItem(l),!1}catch{return!0}}function Va(){return!Ya()||localStorage.length>0}function Ka(l){var d=this,c={};if(l)for(var p in l)c[p]=l[p];return c.keyPrefix=pt(l,d._defaultConfig),Va()?(d._dbInfo=c,c.serializer=_n,f.resolve()):f.reject()}function Ja(l){var d=this,c=d.ready().then(function(){for(var p=d._dbInfo.keyPrefix,b=localStorage.length-1;b>=0;b--){var m=localStorage.key(b);m.indexOf(p)===0&&localStorage.removeItem(m)}});return z(c,l),c}function Za(l,d){var c=this;l=E(l);var p=c.ready().then(function(){var b=c._dbInfo,m=localStorage.getItem(b.keyPrefix+l);return m&&(m=b.serializer.deserialize(m)),m});return z(p,d),p}function Xa(l,d){var c=this,p=c.ready().then(function(){for(var b=c._dbInfo,m=b.keyPrefix,T=m.length,I=localStorage.length,k=1,A=0;A<I;A++){var S=localStorage.key(A);if(S.indexOf(m)===0){var R=localStorage.getItem(S);if(R&&(R=b.serializer.deserialize(R)),R=l(R,S.substring(T),k++),R!==void 0)return R}}});return z(p,d),p}function Qa(l,d){var c=this,p=c.ready().then(function(){var b=c._dbInfo,m;try{m=localStorage.key(l)}catch{m=null}return m&&(m=m.substring(b.keyPrefix.length)),m});return z(p,d),p}function $a(l){var d=this,c=d.ready().then(function(){for(var p=d._dbInfo,b=localStorage.length,m=[],T=0;T<b;T++){var I=localStorage.key(T);I.indexOf(p.keyPrefix)===0&&m.push(I.substring(p.keyPrefix.length))}return m});return z(c,l),c}function es(l){var d=this,c=d.keys().then(function(p){return p.length});return z(c,l),c}function ns(l,d){var c=this;l=E(l);var p=c.ready().then(function(){var b=c._dbInfo;localStorage.removeItem(b.keyPrefix+l)});return z(p,d),p}function ts(l,d,c){var p=this;l=E(l);var b=p.ready().then(function(){d===void 0&&(d=null);var m=d;return new f(function(T,I){var k=p._dbInfo;k.serializer.serialize(d,function(A,S){if(S)I(S);else try{localStorage.setItem(k.keyPrefix+l,A),T(m)}catch(R){(R.name==="QuotaExceededError"||R.name==="NS_ERROR_DOM_QUOTA_REACHED")&&I(R),I(R)}})})});return z(b,c),b}function as(l,d){if(d=O.apply(this,arguments),l=typeof l!="function"&&l||{},!l.name){var c=this.config();l.name=l.name||c.name,l.storeName=l.storeName||c.storeName}var p=this,b;return l.name?b=new f(function(m){l.storeName?m(pt(l,p._defaultConfig)):m(l.name+"/")}).then(function(m){for(var T=localStorage.length-1;T>=0;T--){var I=localStorage.key(T);I.indexOf(m)===0&&localStorage.removeItem(I)}}):b=f.reject("Invalid arguments"),z(b,d),b}var ss={_driver:"localStorageWrapper",_initStorage:Ka,_support:qa(),iterate:Xa,getItem:Za,setItem:ts,removeItem:ns,clear:Ja,length:es,key:Qa,keys:$a,dropInstance:as},os=function(d,c){return d===c||typeof d=="number"&&typeof c=="number"&&isNaN(d)&&isNaN(c)},is=function(d,c){for(var p=d.length,b=0;b<p;){if(os(d[b],c))return!0;b++}return!1},ft=Array.isArray||function(l){return Object.prototype.toString.call(l)==="[object Array]"},Ue={},gt={},xe={INDEXEDDB:Sa,WEBSQL:Wa,LOCALSTORAGE:ss},rs=[xe.INDEXEDDB._driver,xe.WEBSQL._driver,xe.LOCALSTORAGE._driver],en=["dropInstance"],In=["clear","getItem","iterate","key","keys","length","removeItem","setItem"].concat(en),ls={description:"",driver:rs.slice(),name:"localforage",size:4980736,storeName:"keyvaluepairs",version:1};function us(l,d){l[d]=function(){var c=arguments;return l.ready().then(function(){return l[d].apply(l,c)})}}function kn(){for(var l=1;l<arguments.length;l++){var d=arguments[l];if(d)for(var c in d)d.hasOwnProperty(c)&&(ft(d[c])?arguments[0][c]=d[c].slice():arguments[0][c]=d[c])}return arguments[0]}var cs=function(){function l(d){r(this,l);for(var c in xe)if(xe.hasOwnProperty(c)){var p=xe[c],b=p._driver;this[c]=b,Ue[b]||this.defineDriver(p)}this._defaultConfig=kn({},ls),this._config=kn({},this._defaultConfig,d),this._driverSet=null,this._initDriver=null,this._ready=!1,this._dbInfo=null,this._wrapLibraryMethodsWithReady(),this.setDriver(this._config.driver).catch(function(){})}return l.prototype.config=function(c){if((typeof c>"u"?"undefined":o(c))==="object"){if(this._ready)return new Error("Can't call config() after localforage has been used.");for(var p in c){if(p==="storeName"&&(c[p]=c[p].replace(/\W/g,"_")),p==="version"&&typeof c[p]!="number")return new Error("Database version must be a number.");this._config[p]=c[p]}return"driver"in c&&c.driver?this.setDriver(this._config.driver):!0}else return typeof c=="string"?this._config[c]:this._config},l.prototype.defineDriver=function(c,p,b){var m=new f(function(T,I){try{var k=c._driver,A=new Error("Custom driver not compliant; see https://mozilla.github.io/localForage/#definedriver");if(!c._driver){I(A);return}for(var S=In.concat("_initStorage"),R=0,B=S.length;R<B;R++){var Y=S[R],V=!is(en,Y);if((V||c[Y])&&typeof c[Y]!="function"){I(A);return}}var X=function(){for(var Be=function(ms){return function(){var ps=new Error("Method "+ms+" is not implemented by the current driver"),bt=f.reject(ps);return z(bt,arguments[arguments.length-1]),bt}},An=0,ds=en.length;An<ds;An++){var Sn=en[An];c[Sn]||(c[Sn]=Be(Sn))}};X();var J=function(Be){Ue[k]&&console.info("Redefining LocalForage driver: "+k),Ue[k]=c,gt[k]=Be,T()};"_support"in c?c._support&&typeof c._support=="function"?c._support().then(J,I):J(!!c._support):J(!0)}catch(re){I(re)}});return w(m,p,b),m},l.prototype.driver=function(){return this._driver||null},l.prototype.getDriver=function(c,p,b){var m=Ue[c]?f.resolve(Ue[c]):f.reject(new Error("Driver not found."));return w(m,p,b),m},l.prototype.getSerializer=function(c){var p=f.resolve(_n);return w(p,c),p},l.prototype.ready=function(c){var p=this,b=p._driverSet.then(function(){return p._ready===null&&(p._ready=p._initDriver()),p._ready});return w(b,c,c),b},l.prototype.setDriver=function(c,p,b){var m=this;ft(c)||(c=[c]);var T=this._getSupportedDrivers(c);function I(){m._config.driver=m.driver()}function k(R){return m._extend(R),I(),m._ready=m._initStorage(m._config),m._ready}function A(R){return function(){var B=0;function Y(){for(;B<R.length;){var V=R[B];return B++,m._dbInfo=null,m._ready=null,m.getDriver(V).then(k).catch(Y)}I();var X=new Error("No available storage method found.");return m._driverSet=f.reject(X),m._driverSet}return Y()}}var S=this._driverSet!==null?this._driverSet.catch(function(){return f.resolve()}):f.resolve();return this._driverSet=S.then(function(){var R=T[0];return m._dbInfo=null,m._ready=null,m.getDriver(R).then(function(B){m._driver=B._driver,I(),m._wrapLibraryMethodsWithReady(),m._initDriver=A(T)})}).catch(function(){I();var R=new Error("No available storage method found.");return m._driverSet=f.reject(R),m._driverSet}),w(this._driverSet,p,b),this._driverSet},l.prototype.supports=function(c){return!!gt[c]},l.prototype._extend=function(c){kn(this,c)},l.prototype._getSupportedDrivers=function(c){for(var p=[],b=0,m=c.length;b<m;b++){var T=c[b];this.supports(T)&&p.push(T)}return p},l.prototype._wrapLibraryMethodsWithReady=function(){for(var c=0,p=In.length;c<p;c++)us(this,In[c])},l.prototype.createInstance=function(c){return new l(c)},l}(),hs=new cs;t.exports=hs},{3:3}]},{},[4])(4)})})(Jt);var so=Jt.exports;const _t=bs(so),oo=`{
  "puzzles": [
    {
      "puzName": "intro",
      "slug": "a_night_under_the_stars",
      "displayName": "A Night Under The Stars",
      "emoji": "🎬",
      "order": 0,
      "round": "story",
      "isAutoUnlocked": true,
      "unlockInEdges": [],
      "unlockOutEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "answer": null,
      "isStory": true,
      "hopeForSolve": 0,
      "mapPos": {
        "x": 86.65771484375,
        "y": 23.6358642578125
      },
      "rarity": "common",
      "cutsceneImages": [
        "intro.svg",
        "intro-ok.svg",
        "blank",
        "starry-sky",
        "blank-sky",
        "falling-star",
        "falling-stelle",
        "stelle-collapsed",
        "stelle",
        "stelle-thinking"
      ]
    },
    {
      "puzName": "first-wish",
      "slug": "a_fallen_star",
      "displayName": "A Fallen Star",
      "emoji": "🎬",
      "order": 1,
      "round": "story",
      "isAutoUnlocked": true,
      "unlockInEdges": [
        {
          "unlockGroupId": "manual"
        }
      ],
      "unlockOutEdges": [],
      "answer": null,
      "isStory": true,
      "hopeForSolve": 0,
      "mapPos": {
        "x": 76.165771484375,
        "y": 36.048126220703125
      },
      "rarity": "common",
      "cutsceneImages": [
        "stelle-thinking",
        "stelle",
        "stelle-happy"
      ]
    },
    {
      "puzName": "first-solve",
      "slug": "a_glimmer_of_hope",
      "displayName": "A Glimmer of Hope",
      "emoji": "🎬",
      "order": 2,
      "round": "story",
      "isAutoUnlocked": true,
      "unlockInEdges": [
        {
          "unlockGroupId": "manual"
        }
      ],
      "unlockOutEdges": [],
      "answer": null,
      "isStory": true,
      "hopeForSolve": 0,
      "mapPos": {
        "x": 1.129150390625,
        "y": 9.30328369140625
      },
      "rarity": "common",
      "cutsceneImages": [
        "stelle",
        "stelle-happy",
        "stelle-thinking"
      ]
    },
    {
      "puzName": "brighter-skies",
      "slug": "brighter_skies",
      "displayName": "Brighter Skies",
      "emoji": "🎬",
      "order": 3,
      "round": "story",
      "isAutoUnlocked": true,
      "unlockInEdges": [
        {
          "unlockGroupId": "manual"
        }
      ],
      "unlockOutEdges": [
        {
          "unlockGroupId": "introcelestials"
        }
      ],
      "answer": null,
      "isStory": true,
      "hopeForSolve": 0,
      "mapPos": {
        "x": 12.48016357421875,
        "y": 25.244903564453125
      },
      "rarity": "common",
      "cutsceneImages": [
        "stelle",
        "stelle-happy",
        "stelle-thinking"
      ]
    },
    {
      "puzName": "submitting_your_application",
      "slug": "submitting_your_application",
      "displayName": "Submitting Your Application",
      "emoji": "🎬",
      "order": 4,
      "round": "story",
      "isAutoUnlocked": true,
      "unlockInEdges": [
        {
          "unlockGroupId": "puz105"
        }
      ],
      "unlockOutEdges": [],
      "answer": null,
      "isStory": true,
      "hopeForSolve": 0,
      "mapPos": {
        "x": 95.83282470703125,
        "y": 41.901397705078125
      },
      "rarity": "common",
      "cutsceneImages": [
        "moonick"
      ]
    },
    {
      "puzName": "gather_celestials",
      "slug": "a_celestial_gathering",
      "displayName": "A Celestial Gathering",
      "emoji": "🎬",
      "order": 5,
      "round": "story",
      "isAutoUnlocked": true,
      "unlockInEdges": [
        {
          "unlockGroupId": "celestials",
          "val": 7
        }
      ],
      "unlockOutEdges": [
        {
          "unlockGroupId": "gather_celestials"
        }
      ],
      "answer": null,
      "isStory": true,
      "hopeForSolve": 0,
      "mapPos": {
        "x": 98.7152099609375,
        "y": 31.946563720703125
      },
      "rarity": "common",
      "cutsceneImages": [
        "stelle-happy",
        "stelle-thinking",
        "stelle",
        "big_branch",
        "lions",
        "olive",
        "rock_lobster",
        "farmer",
        "pom_pom",
        "mop_mop",
        "kid"
      ]
    },
    {
      "puzName": "the_end",
      "slug": "the_end",
      "displayName": "The End",
      "emoji": "🎬",
      "order": 6,
      "round": "story",
      "isAutoUnlocked": true,
      "unlockInEdges": [
        {
          "unlockGroupId": "metameta"
        }
      ],
      "unlockOutEdges": [],
      "answer": null,
      "isStory": true,
      "hopeForSolve": 0,
      "mapPos": {
        "x": 9.417724609375,
        "y": 0.482177734375
      },
      "rarity": "common",
      "cutsceneImages": [
        "kid",
        "big_branch",
        "olive",
        "pompom_mopmop",
        "farmer",
        "lions",
        "rock_lobster",
        "stelle",
        "stelle-happy",
        "stelle-thinking",
        "starry-sky",
        "moonick"
      ]
    },
    {
      "puzName": "find_kid",
      "slug": "find_kid",
      "displayName": "Kid",
      "emoji": "🎬",
      "order": 7,
      "round": "story",
      "unlockInEdges": [
        {
          "unlockGroupId": "introcelestials"
        }
      ],
      "unlockOutEdges": [
        {
          "unlockGroupId": "find_kid"
        }
      ],
      "introReq": 20,
      "answer": null,
      "isStory": true,
      "hopeForSolve": 0,
      "mapPos": {
        "x": 31.77032470703125,
        "y": 12.924957275390625
      },
      "rarity": "common",
      "isFindCelestial": true,
      "cutsceneImages": [
        "stelle-happy",
        "kid",
        "stelle-thinking"
      ]
    },
    {
      "puzName": "find_olive",
      "slug": "find_olive",
      "displayName": "Olive",
      "emoji": "🎬",
      "order": 8,
      "round": "story",
      "unlockInEdges": [
        {
          "unlockGroupId": "introcelestials"
        }
      ],
      "unlockOutEdges": [
        {
          "unlockGroupId": "find_olive"
        }
      ],
      "introReq": 20,
      "answer": null,
      "isStory": true,
      "hopeForSolve": 0,
      "mapPos": {
        "x": 84.3597412109375,
        "y": 38.8671875
      },
      "rarity": "common",
      "isFindCelestial": true,
      "cutsceneImages": [
        "stelle-happy",
        "olive",
        "stelle-thinking"
      ]
    },
    {
      "puzName": "find_big_branch",
      "slug": "find_big_branch",
      "displayName": "Big Branch",
      "emoji": "🎬",
      "order": 9,
      "round": "story",
      "unlockInEdges": [
        {
          "unlockGroupId": "introcelestials"
        }
      ],
      "unlockOutEdges": [
        {
          "unlockGroupId": "find_big_branch"
        }
      ],
      "introReq": 20,
      "answer": null,
      "isStory": true,
      "hopeForSolve": 0,
      "mapPos": {
        "x": 73.9776611328125,
        "y": 18.4417724609375
      },
      "rarity": "common",
      "isFindCelestial": true,
      "cutsceneImages": [
        "stelle-happy",
        "big_branch",
        "stelle"
      ]
    },
    {
      "puzName": "find_farmer",
      "slug": "find_funny_farmer",
      "displayName": "Funny Farmer",
      "emoji": "🎬",
      "order": 10,
      "round": "story",
      "unlockInEdges": [
        {
          "unlockGroupId": "introcelestials"
        }
      ],
      "unlockOutEdges": [
        {
          "unlockGroupId": "find_farmer"
        }
      ],
      "introReq": 20,
      "answer": null,
      "isStory": true,
      "hopeForSolve": 0,
      "mapPos": {
        "x": 10.72845458984375,
        "y": 16.481781005859375
      },
      "rarity": "common",
      "isFindCelestial": true,
      "cutsceneImages": [
        "stelle-happy",
        "stelle-thinking",
        "farmer"
      ]
    },
    {
      "puzName": "find_rock_lobster",
      "slug": "find_rock_lobster",
      "displayName": "Rock Lobster",
      "emoji": "🎬",
      "order": 11,
      "round": "story",
      "unlockInEdges": [
        {
          "unlockGroupId": "introcelestials"
        }
      ],
      "unlockOutEdges": [
        {
          "unlockGroupId": "find_rock_lobster"
        }
      ],
      "introReq": 20,
      "answer": null,
      "isStory": true,
      "hopeForSolve": 0,
      "mapPos": {
        "x": 37.176513671875,
        "y": 4.811859130859375
      },
      "rarity": "common",
      "isFindCelestial": true,
      "cutsceneImages": [
        "stelle-happy",
        "rock_lobster",
        "stelle",
        "stelle-thinking"
      ]
    },
    {
      "puzName": "find_pom_pom",
      "slug": "find_pom_pom_and_mop_mop",
      "displayName": "Pom Pom and Mop Mop",
      "emoji": "🎬",
      "order": 12,
      "round": "story",
      "unlockInEdges": [
        {
          "unlockGroupId": "introcelestials"
        }
      ],
      "unlockOutEdges": [
        {
          "unlockGroupId": "find_pom_pom"
        }
      ],
      "introReq": 20,
      "answer": null,
      "isStory": true,
      "hopeForSolve": 0,
      "mapPos": {
        "x": 68.86444091796875,
        "y": 39.572906494140625
      },
      "rarity": "common",
      "isFindCelestial": true,
      "cutsceneImages": [
        "goddog",
        "fallengoddog",
        "pompom_mopmop",
        "pom_pom",
        "mop_mop",
        "stelle-thinking"
      ]
    },
    {
      "puzName": "find_lions",
      "slug": "find_ten_lions",
      "displayName": "Ten Lions",
      "emoji": "🎬",
      "order": 13,
      "round": "story",
      "unlockInEdges": [
        {
          "unlockGroupId": "introcelestials"
        }
      ],
      "unlockOutEdges": [
        {
          "unlockGroupId": "find_lions"
        }
      ],
      "introReq": 20,
      "answer": null,
      "isStory": true,
      "hopeForSolve": 0,
      "mapPos": {
        "x": 93.9239501953125,
        "y": 45.4864501953125
      },
      "rarity": "common",
      "isFindCelestial": true,
      "cutsceneImages": [
        "stelle",
        "stelle-thinking",
        "lions"
      ]
    },
    {
      "puzName": "blocks",
      "slug": "kid",
      "displayName": "Kid",
      "emoji": "💫",
      "order": 14,
      "round": "main",
      "isAutoUnlocked": true,
      "unlockInEdges": [
        {
          "unlockGroupId": "find_kid"
        }
      ],
      "unlockOutEdges": [
        {
          "unlockGroupId": "celestials"
        }
      ],
      "answer": "BUB",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 79,
        "y": 16
      },
      "rarity": "legendary",
      "isCelestial": true,
      "authors": [
        "Brian Chen"
      ],
      "otherCredits": "Implementation by Brian Chen and Mark\\nCharacter art by DD Liu"
    },
    {
      "puzName": "olive",
      "slug": "olive",
      "displayName": "Olive",
      "emoji": "💫",
      "order": 15,
      "round": "main",
      "isAutoUnlocked": true,
      "unlockInEdges": [
        {
          "unlockGroupId": "find_olive"
        }
      ],
      "unlockOutEdges": [
        {
          "unlockGroupId": "celestials"
        }
      ],
      "answer": "LIME",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 42,
        "y": 33
      },
      "rarity": "legendary",
      "isCelestial": true,
      "authors": [
        "Amon Ge",
        "Ben Yang"
      ],
      "otherCredits": "Implementation by Mark and Amon Ge\\nCharacter art by DD Liu"
    },
    {
      "puzName": "branch",
      "slug": "big_branch",
      "displayName": "Big Branch",
      "emoji": "💫",
      "order": 16,
      "round": "main",
      "isAutoUnlocked": true,
      "unlockInEdges": [
        {
          "unlockGroupId": "find_big_branch"
        }
      ],
      "unlockOutEdges": [
        {
          "unlockGroupId": "celestials"
        }
      ],
      "answer": "BOWLER",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 55,
        "y": 33
      },
      "rarity": "legendary",
      "isCelestial": true,
      "authors": [
        "Chris Jones",
        "Wayne Zhao",
        "ar2r"
      ],
      "otherCredits": "Implementation by Mark\\nCharacter art by DD Liu"
    },
    {
      "puzName": "farmer",
      "slug": "funny_farmer",
      "displayName": "Funny Farmer",
      "emoji": "💫",
      "order": 17,
      "round": "main",
      "isAutoUnlocked": true,
      "unlockInEdges": [
        {
          "unlockGroupId": "find_farmer"
        }
      ],
      "unlockOutEdges": [
        {
          "unlockGroupId": "celestials"
        }
      ],
      "answer": "COOP",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 25,
        "y": 13
      },
      "rarity": "legendary",
      "isCelestial": true,
      "authors": [
        "Nathan P.",
        "Josh Alman"
      ],
      "otherCredits": "Implementation by Mark and Amon Ge\\nCharacter art by Mark"
    },
    {
      "puzName": "rock_lobster",
      "slug": "rock_lobster",
      "displayName": "Rock Lobster",
      "emoji": "💫",
      "order": 18,
      "round": "main",
      "isAutoUnlocked": true,
      "unlockInEdges": [
        {
          "unlockGroupId": "find_rock_lobster"
        }
      ],
      "unlockOutEdges": [
        {
          "unlockGroupId": "celestials"
        }
      ],
      "answer": "IRIS",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 69,
        "y": 8
      },
      "rarity": "legendary",
      "isCelestial": true,
      "authors": [
        "CJ Quines",
        "Wayne Zhao"
      ],
      "otherCredits": "Character art by DD Liu"
    },
    {
      "puzName": "pom_pom",
      "slug": "pom_pom_and_mop_mop",
      "displayName": "Pom Pom and Mop Mop",
      "emoji": "💫",
      "order": 19,
      "round": "main",
      "isAutoUnlocked": true,
      "unlockInEdges": [
        {
          "unlockGroupId": "find_pom_pom"
        }
      ],
      "unlockOutEdges": [
        {
          "unlockGroupId": "celestials"
        }
      ],
      "answer": "GAR",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 90,
        "y": 32
      },
      "rarity": "legendary",
      "isCelestial": true,
      "authors": [
        "DD Liu"
      ],
      "otherCredits": "Character art by DD Liu"
    },
    {
      "puzName": "ten_lions",
      "slug": "ten_lions",
      "displayName": "Ten Lions",
      "emoji": "💫",
      "order": 20,
      "round": "main",
      "isAutoUnlocked": true,
      "unlockInEdges": [
        {
          "unlockGroupId": "find_lions"
        }
      ],
      "unlockOutEdges": [
        {
          "unlockGroupId": "celestials"
        }
      ],
      "answer": "DIVEST",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 97,
        "y": 5
      },
      "rarity": "legendary",
      "isCelestial": true,
      "authors": [
        "Dai Yang"
      ],
      "otherCredits": "Character art by DD Liu"
    },
    {
      "puzName": "night_of_the_celestials",
      "slug": "night_of_the_celestials",
      "displayName": "Night of the Celestials",
      "emoji": "🌌",
      "order": 21,
      "round": "main",
      "isAutoUnlocked": true,
      "unlockInEdges": [
        {
          "unlockGroupId": "gather_celestials"
        }
      ],
      "unlockOutEdges": [
        {
          "unlockGroupId": "metameta"
        }
      ],
      "answer": "STAR POWER VACUUM",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 35.4522705078125,
        "y": 47.623443603515625
      },
      "rarity": "legendary",
      "isBigMeta": true,
      "authors": [
        "Anderson Wang",
        "Brian Chen",
        "Mark",
        "Patrick Xia",
        "Wayne Zhao"
      ]
    },
    {
      "puzName": "puz1",
      "slug": "a_puzzle",
      "displayName": "A Puzzle",
      "emoji": "🅰️",
      "order": 22,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [
        {
          "unlockGroupId": "apuzzle"
        }
      ],
      "introReq": 5,
      "sequenceId": "apuzzle",
      "constellationEdges": [
        "puz273"
      ],
      "answer": "AMPERE",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 71,
        "y": 27
      },
      "rarity": "uncommon",
      "authors": [
        "Patrick Xia",
        "Anderson Wang"
      ]
    },
    {
      "puzName": "puz2",
      "slug": "a5de5c6e",
      "displayName": "",
      "emoji": "⚡",
      "order": 23,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "introReq": 5,
      "answer": "BEAN",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 67.2698974609375,
        "y": 24.78179931640625
      },
      "rarity": "common",
      "authors": [
        "Lewis Chen"
      ]
    },
    {
      "puzName": "puz3",
      "slug": "10c8f196",
      "displayName": "",
      "emoji": "🦴",
      "order": 24,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "introReq": 5,
      "answerNormalization": "uppercase_letters_or_symbols_only",
      "answer": "\`",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 1.7059326171875,
        "y": 16.49322509765625
      },
      "rarity": "common",
      "authors": [
        "Amon Ge"
      ]
    },
    {
      "puzName": "puz4",
      "slug": "speech_of_the_officials",
      "displayName": "Speech of the Officials",
      "emoji": "💬",
      "order": 25,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "answer": "MISSING",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 33.7005615234375,
        "y": 32.66754150390625
      },
      "rarity": "common",
      "authors": [
        "CJ Quines"
      ]
    },
    {
      "puzName": "puz5",
      "slug": "oooooo",
      "displayName": "oooooo",
      "emoji": "🅾️",
      "order": 26,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "answer": "VACUOUS",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 11.968994140625,
        "y": 18.775177001953125
      },
      "rarity": "common",
      "authors": [
        "Brian Chen"
      ]
    },
    {
      "puzName": "puz6",
      "slug": "three_crosses",
      "displayName": "Three Crosses",
      "emoji": "🧭",
      "order": 27,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "introReq": 5,
      "answer": "UNREAL",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 60.55755615234375,
        "y": 40.908050537109375
      },
      "rarity": "uncommon",
      "authors": [
        "Lewis Chen"
      ]
    },
    {
      "puzName": "puz7",
      "slug": "the_letters_with_one_time",
      "displayName": "THE LETTERS WITH ONE-TIME APPEARANCES MAKE THE ANSWER",
      "emoji": "🔒",
      "order": 28,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "title",
          "val": 2
        }
      ],
      "unlockOutEdges": [
        {
          "unlockGroupId": "title"
        }
      ],
      "introReq": 5,
      "sequenceId": "title",
      "constellationEdges": [
        "puz47"
      ],
      "answer": "LOCK",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 6,
        "y": 44
      },
      "rarity": "common",
      "authors": [
        "Brian Chen"
      ]
    },
    {
      "puzName": "puz8",
      "slug": "xxcxxxxxx",
      "displayName": "XXCXXXXXX",
      "emoji": "🥠",
      "order": 29,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "answer": "EXCELLENT",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 59.87548828125,
        "y": 4.39605712890625
      },
      "rarity": "common",
      "authors": [
        "Violet Xiao"
      ]
    },
    {
      "puzName": "puz9",
      "slug": "the_numbers_that_are_in",
      "displayName": "THE NUMBERS THAT ARE IN THE LOST TV SHOW YOU INDEX BY",
      "emoji": "🏝️",
      "order": 30,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "title",
          "val": 2
        }
      ],
      "unlockOutEdges": [
        {
          "unlockGroupId": "title"
        }
      ],
      "introReq": 5,
      "sequenceId": "title",
      "constellationEdges": [
        "puz47"
      ],
      "answer": "NEARLY",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 5.3,
        "y": 40.5
      },
      "rarity": "common",
      "authors": [
        "Lewis Chen"
      ]
    },
    {
      "puzName": "puz10",
      "slug": "obligatory_wordle_puzzle",
      "displayName": "Obligatory Wordle Puzzle",
      "emoji": "🟩",
      "order": 31,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "answer": "TEENY",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 11.69586181640625,
        "y": 2.09503173828125
      },
      "rarity": "common",
      "authors": [
        "Violet Xiao"
      ]
    },
    {
      "puzName": "puz12",
      "slug": "competitive_homework",
      "displayName": "Competitive Homework",
      "emoji": "📐",
      "order": 32,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "introReq": 5,
      "answer": "PEN",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 15.8538818359375,
        "y": 0.41656494140625
      },
      "rarity": "uncommon",
      "authors": [
        "Lewis Chen"
      ]
    },
    {
      "puzName": "puz13",
      "slug": "never_will_i_ever",
      "displayName": "Never Will I Ever",
      "emoji": "🧑‍🎤",
      "order": 33,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "answer": "YOUTUBER",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 7.550048828125,
        "y": 42.789459228515625
      },
      "rarity": "common",
      "authors": [
        "Violet Xiao"
      ]
    },
    {
      "puzName": "puz14",
      "slug": "number_list",
      "displayName": "Number List",
      "emoji": "🔢",
      "order": 34,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "introReq": 5,
      "answer": "CABBAGE",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 13.08135986328125,
        "y": 23.59466552734375
      },
      "rarity": "uncommon",
      "authors": [
        "Violet Xiao"
      ]
    },
    {
      "puzName": "puz15",
      "slug": "knowledge_evaluation",
      "displayName": "Knowledge Evaluation",
      "emoji": "🟰",
      "order": 35,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "introReq": 5,
      "answer": "TALLY",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 13.04931640625,
        "y": 19.107818603515625
      },
      "rarity": "uncommon",
      "authors": [
        "Violet Xiao"
      ]
    },
    {
      "puzName": "puz17",
      "slug": "a_b_c_d",
      "displayName": "A B C D",
      "emoji": "🔠",
      "order": 36,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "introReq": 5,
      "answer": "DRYER",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 75.8514404296875,
        "y": 32.8857421875
      },
      "rarity": "uncommon",
      "authors": [
        "Violet Xiao"
      ]
    },
    {
      "puzName": "puz19",
      "slug": "c59601e8",
      "displayName": "",
      "emoji": "🧱",
      "order": 37,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [
        {
          "unlockGroupId": "puz105feeders"
        }
      ],
      "introReq": 5,
      "sequenceId": "free",
      "answer": "DRAWING",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 81.695556640625,
        "y": 46.781158447265625
      },
      "rarity": "common",
      "displayedRarity": "uncommon",
      "authors": [
        "Mark"
      ]
    },
    {
      "puzName": "puz20",
      "slug": "surrounded",
      "displayName": "Surrounded",
      "emoji": "🎷",
      "order": 38,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "answer": "THUG",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 73.93951416015625,
        "y": 32.0556640625
      },
      "rarity": "common",
      "authors": [
        "Lewis Chen"
      ]
    },
    {
      "puzName": "puz21",
      "slug": "i_had_a_united_states_television",
      "displayName": "I HAD A UNITED STATES TELEVISION",
      "emoji": "📺",
      "order": 39,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [
        {
          "unlockGroupId": "jfk"
        }
      ],
      "introReq": 5,
      "sequenceId": "jfk",
      "constellationEdges": [
        "puz171"
      ],
      "answer": "UNDERSCORE",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 78,
        "y": 36
      },
      "rarity": "common",
      "authors": [
        "CJ Quines"
      ]
    },
    {
      "puzName": "puz22",
      "slug": "6fa87a4b",
      "displayName": "",
      "emoji": "🐎",
      "order": 40,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [
        {
          "unlockGroupId": "puz105feeders"
        }
      ],
      "introReq": 5,
      "sequenceId": "free",
      "answer": "REACTION",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 12.80670166015625,
        "y": 29.6112060546875
      },
      "rarity": "uncommon",
      "displayedRarity": "rare",
      "authors": [
        "Mark"
      ]
    },
    {
      "puzName": "puz23",
      "slug": "nyc_subway",
      "displayName": "NYC Subway",
      "emoji": "🚇",
      "order": 41,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "answer": "GRAND SLAM",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 30.1910400390625,
        "y": 15.5609130859375
      },
      "rarity": "common",
      "authors": [
        "CJ Quines"
      ]
    },
    {
      "puzName": "puz24",
      "slug": "a25492d3",
      "displayName": "",
      "emoji": "🚕",
      "order": 42,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "introReq": 5,
      "answer": "JAIL",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 47.67608642578125,
        "y": 22.662353515625
      },
      "rarity": "common",
      "authors": [
        "Lewis Chen"
      ]
    },
    {
      "puzName": "puz25",
      "slug": "towers_iii",
      "displayName": "Towers III",
      "emoji": "🗼",
      "order": 43,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "towers",
          "val": 2
        }
      ],
      "unlockOutEdges": [
        {
          "unlockGroupId": "towers"
        }
      ],
      "introReq": 5,
      "sequenceId": "towers",
      "answer": "MIDTERM",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 19.3,
        "y": 13
      },
      "rarity": "common",
      "authors": [
        "Lewis Chen"
      ]
    },
    {
      "puzName": "puz26",
      "slug": "owo",
      "displayName": "owo",
      "emoji": "😺",
      "order": 44,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "answer": "AVOW",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 57.34405517578125,
        "y": 18.47076416015625
      },
      "rarity": "common",
      "authors": [
        "Violet Xiao"
      ]
    },
    {
      "puzName": "puz27",
      "slug": "2837539a",
      "displayName": "",
      "emoji": "🪩",
      "order": 45,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "introReq": 5,
      "answer": "BIONIC",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 12.97149658203125,
        "y": 33.815765380859375
      },
      "rarity": "common",
      "authors": [
        "Lewis Chen"
      ]
    },
    {
      "puzName": "puz28",
      "slug": "towers_ii",
      "displayName": "Towers II",
      "emoji": "🏢",
      "order": 46,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "towers",
          "val": 1
        }
      ],
      "unlockOutEdges": [
        {
          "unlockGroupId": "towers"
        }
      ],
      "introReq": 5,
      "sequenceId": "towers",
      "constellationEdges": [
        "puz25"
      ],
      "answer": "ABRACADABRA",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 18,
        "y": 12
      },
      "rarity": "common",
      "authors": [
        "Violet Xiao"
      ]
    },
    {
      "puzName": "puz29",
      "slug": "abnc",
      "displayName": "AВΝС",
      "emoji": "🔣",
      "order": 47,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "introReq": 20,
      "answer": "AVENUES",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 99.1424560546875,
        "y": 28.910064697265625
      },
      "rarity": "uncommon",
      "authors": [
        "Lewis Chen"
      ]
    },
    {
      "puzName": "puz30",
      "slug": "shortest_path",
      "displayName": "Shortest Path",
      "emoji": "🧃",
      "order": 48,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "answer": "KOOL-AID MAN",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 39.30511474609375,
        "y": 26.9866943359375
      },
      "rarity": "common",
      "authors": [
        "Violet Xiao"
      ]
    },
    {
      "puzName": "puz31",
      "slug": "117d2fd7",
      "displayName": "",
      "emoji": "✳️",
      "order": 49,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "introReq": 5,
      "answer": "ELATION",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 58.2427978515625,
        "y": 36.786651611328125
      },
      "rarity": "common",
      "authors": [
        "Lewis Chen"
      ]
    },
    {
      "puzName": "puz32",
      "slug": "all_the_moves",
      "displayName": "All the Moves",
      "emoji": "♟️",
      "order": 50,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "introReq": 5,
      "answer": "GIRTH",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 11.56005859375,
        "y": 44.6563720703125
      },
      "rarity": "uncommon",
      "authors": [
        "Lewis Chen"
      ]
    },
    {
      "puzName": "puz33",
      "slug": "3f4df52f",
      "displayName": "",
      "emoji": "🗳️",
      "order": 51,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "introReq": 5,
      "answer": "CANTATA",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 13.46588134765625,
        "y": 18.9971923828125
      },
      "rarity": "rare",
      "authors": [
        "Lewis Chen"
      ]
    },
    {
      "puzName": "puz34",
      "slug": "bf3f2314",
      "displayName": "",
      "emoji": "*️⃣",
      "order": 52,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "introReq": 5,
      "answer": "OPERATOR",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 15.33050537109375,
        "y": 8.051300048828125
      },
      "rarity": "common",
      "authors": [
        "Lewis Chen"
      ]
    },
    {
      "puzName": "puz36",
      "slug": "sums",
      "displayName": "Sums",
      "emoji": "➕",
      "order": 53,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "introReq": 5,
      "answer": "VECTORS",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 59.2041015625,
        "y": 18.183135986328125
      },
      "rarity": "uncommon",
      "authors": [
        "Yannick Yao"
      ]
    },
    {
      "puzName": "puz37",
      "slug": "8bc03312",
      "displayName": "",
      "emoji": "🍩",
      "order": 54,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "introReq": 5,
      "answer": "TAKING SHAPE",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 58.42437744140625,
        "y": 42.93670654296875
      },
      "rarity": "uncommon",
      "authors": [
        "Chris Jones"
      ]
    },
    {
      "puzName": "puz38",
      "slug": "lele",
      "displayName": "LELE!",
      "emoji": "🆘",
      "order": 55,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "answer": "FUJI",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 83.27789306640625,
        "y": 48.55804443359375
      },
      "rarity": "common",
      "authors": [
        "Chris Jones"
      ]
    },
    {
      "puzName": "puz39",
      "slug": "ascii_art",
      "displayName": "ASCII Art",
      "emoji": "🪞",
      "order": 56,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "answer": "MIRROR",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 76.1932373046875,
        "y": 26.18255615234375
      },
      "rarity": "common",
      "authors": [
        "Chris Jones"
      ]
    },
    {
      "puzName": "puz40",
      "slug": "blank_squares_83464965",
      "displayName": "Blank Squares",
      "emoji": "🚥",
      "order": 57,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [
        {
          "unlockGroupId": "blank"
        }
      ],
      "introReq": 5,
      "sequenceId": "blank",
      "constellationEdges": [
        "puz78"
      ],
      "answer": "LIGHT",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 5.4,
        "y": 8
      },
      "rarity": "uncommon",
      "authors": [
        "Chris Jones"
      ]
    },
    {
      "puzName": "puz41",
      "slug": "high_precision",
      "displayName": "High Precision",
      "emoji": "📏",
      "order": 58,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "introReq": 5,
      "answer": "PAIGE",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 61.8011474609375,
        "y": 49.964141845703125
      },
      "rarity": "uncommon",
      "authors": [
        "Chris Jones"
      ]
    },
    {
      "puzName": "puz42",
      "slug": "11x11_crossword",
      "displayName": "11×11 Crossword",
      "emoji": "🕋",
      "order": 59,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "introReq": 5,
      "answer": "SQUARES",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 61.95526123046875,
        "y": 40.906524658203125
      },
      "rarity": "rare",
      "authors": [
        "Chris Jones"
      ]
    },
    {
      "puzName": "puz43",
      "slug": "1_3_puzzle",
      "displayName": "1/3 Puzzle",
      "emoji": "💩",
      "order": 60,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [
        {
          "unlockGroupId": "three"
        }
      ],
      "introReq": 5,
      "sequenceId": "three",
      "constellationEdges": [
        "puz44"
      ],
      "answer": "PU",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 94.6,
        "y": 29
      },
      "rarity": "common",
      "authors": [
        "Violet Xiao"
      ]
    },
    {
      "puzName": "puz44",
      "slug": "2_3_puzzle",
      "displayName": "2/3 Puzzle",
      "emoji": "🎯",
      "order": 61,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "three",
          "val": 1
        }
      ],
      "unlockOutEdges": [
        {
          "unlockGroupId": "three"
        }
      ],
      "introReq": 5,
      "sequenceId": "three",
      "constellationEdges": [
        "puz45"
      ],
      "answer": "ONUS",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 93.8,
        "y": 24
      },
      "rarity": "uncommon",
      "authors": [
        "Violet Xiao"
      ]
    },
    {
      "puzName": "puz45",
      "slug": "3_3_puzzle",
      "displayName": "3/3 Puzzle",
      "emoji": "🎉",
      "order": 62,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "three",
          "val": 2
        }
      ],
      "unlockOutEdges": [
        {
          "unlockGroupId": "three"
        }
      ],
      "introReq": 5,
      "sequenceId": "three",
      "constellationEdges": [
        "puz46"
      ],
      "answer": "DERIVE",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 95,
        "y": 19.8
      },
      "rarity": "rare",
      "authors": [
        "Violet Xiao"
      ]
    },
    {
      "puzName": "puz46",
      "slug": "1_2_metapuzzle",
      "displayName": "1/2 Metapuzzle",
      "emoji": "👈",
      "order": 63,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "three",
          "val": 3
        }
      ],
      "unlockOutEdges": [
        {
          "unlockGroupId": "three"
        }
      ],
      "introReq": 5,
      "sequenceId": "three",
      "constellationEdges": [
        "puz43",
        "puz248"
      ],
      "answer": "PONDER",
      "isFullPuzzle": true,
      "isMeta": true,
      "mapPos": {
        "x": 96.1,
        "y": 23.8
      },
      "rarity": "common",
      "authors": [
        "Violet Xiao"
      ]
    },
    {
      "puzName": "puz47",
      "slug": "press_letters",
      "displayName": "PRESS LETTERS, READ UNTOUCHING, GET TERM. EFFECT: ANSWER DETECTED.",
      "emoji": "⌨️",
      "order": 64,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "title",
          "val": 2
        }
      ],
      "unlockOutEdges": [
        {
          "unlockGroupId": "title"
        }
      ],
      "introReq": 5,
      "sequenceId": "title",
      "constellationEdges": [
        "puz312"
      ],
      "answer": "PLACEMENT",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 6.5,
        "y": 39
      },
      "rarity": "common",
      "authors": [
        "Violet Xiao"
      ]
    },
    {
      "puzName": "puz48",
      "slug": "0ea74c14",
      "displayName": "",
      "emoji": "📥",
      "order": 65,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "introReq": 5,
      "answer": "INDUCT",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 97.18017578125,
        "y": 40.13824462890625
      },
      "rarity": "common",
      "authors": [
        "CJ Quines",
        "Mark"
      ]
    },
    {
      "puzName": "puz49",
      "slug": "towers_i",
      "displayName": "Towers I",
      "emoji": "🏫",
      "order": 66,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [
        {
          "unlockGroupId": "towers"
        }
      ],
      "sequenceId": "towers",
      "constellationEdges": [
        "puz28"
      ],
      "answer": "AMALGAMATE",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 17,
        "y": 15
      },
      "rarity": "common",
      "authors": [
        "CJ Quines"
      ]
    },
    {
      "puzName": "puz51",
      "slug": "turn_look",
      "displayName": "Turn. Look.",
      "emoji": "↪️",
      "order": 67,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "introReq": 5,
      "answer": "FLASH",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 35.6109619140625,
        "y": 1.42364501953125
      },
      "rarity": "uncommon",
      "authors": [
        "Violet Xiao"
      ]
    },
    {
      "puzName": "puz52",
      "slug": "quiz_cards",
      "displayName": "Quiz Cards",
      "emoji": "✍️",
      "order": 68,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "answer": "WILTS",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 47.32818603515625,
        "y": 16.80755615234375
      },
      "rarity": "common",
      "authors": [
        "CJ Quines"
      ]
    },
    {
      "puzName": "puz53",
      "slug": "obligatory_connections_puzzle",
      "displayName": "Obligatory Connections Puzzle",
      "emoji": "⛳",
      "order": 69,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "answer": "MATCHED / SYZYGY",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 33.02459716796875,
        "y": 32.315826416015625
      },
      "rarity": "common",
      "authors": [
        "Violet Xiao"
      ]
    },
    {
      "puzName": "puz54",
      "slug": "strong_greek_numbers",
      "displayName": "Strong Greek numbers",
      "emoji": "✝️",
      "order": 70,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [
        {
          "unlockGroupId": "greek"
        }
      ],
      "introReq": 5,
      "sequenceId": "greek",
      "constellationEdges": [
        "puz64"
      ],
      "answer": "COMPLEX",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 71,
        "y": 44
      },
      "rarity": "common",
      "authors": [
        "CJ Quines"
      ]
    },
    {
      "puzName": "puz55",
      "slug": "d5b404e5",
      "displayName": "",
      "emoji": "🗣️",
      "order": 71,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "introReq": 20,
      "answer": "BACKMASKING",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 5.23223876953125,
        "y": 25.634002685546875
      },
      "rarity": "rare",
      "authors": [
        "Anderson Wang"
      ]
    },
    {
      "puzName": "puz56",
      "slug": "e3456a67",
      "displayName": "",
      "emoji": "🏳️",
      "order": 72,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "introReq": 5,
      "answer": "EPOXY",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 11.6851806640625,
        "y": 20.79315185546875
      },
      "rarity": "uncommon",
      "authors": [
        "Lewis Chen"
      ]
    },
    {
      "puzName": "puz58",
      "slug": "222cefb2",
      "displayName": "",
      "emoji": "🌎",
      "order": 73,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "introReq": 5,
      "answer": "DOWN TO EARTH",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 86.4227294921875,
        "y": 37.212371826171875
      },
      "rarity": "rare",
      "authors": [
        "Anderson Wang"
      ]
    },
    {
      "puzName": "puz59",
      "slug": "fill_in_the_blanks",
      "displayName": "Fill In The Blanks",
      "emoji": "😶",
      "order": 74,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "introReq": 20,
      "answer": "FLAM",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 38.95721435546875,
        "y": 11.138153076171875
      },
      "rarity": "common",
      "authors": [
        "Violet Xiao"
      ]
    },
    {
      "puzName": "puz60",
      "slug": "grid",
      "displayName": "Grid",
      "emoji": "🆎",
      "order": 75,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "answer": "BIGRAM",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 76.7913818359375,
        "y": 36.0870361328125
      },
      "rarity": "common",
      "authors": [
        "Lewis Chen"
      ]
    },
    {
      "puzName": "puz61",
      "slug": "mini_cryptic",
      "displayName": "Mini Cryptic",
      "emoji": "📖",
      "order": 76,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "introReq": 5,
      "answer": "OPEN",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 69.31304931640625,
        "y": 34.130859375
      },
      "rarity": "rare",
      "authors": [
        "Chris Jones"
      ]
    },
    {
      "puzName": "puz62",
      "slug": "half_mile_grid",
      "displayName": "Half Mile Grid",
      "emoji": "🏙️",
      "order": 77,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "answer": "ELSTON",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 35.49346923828125,
        "y": 27.355194091796875
      },
      "rarity": "common",
      "authors": [
        "Kevin"
      ]
    },
    {
      "puzName": "puz63",
      "slug": "harmonized_system",
      "displayName": "Harmonized System of Factory Inputs and Outputs",
      "emoji": "🏭",
      "order": 78,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "answer": "ROCKET",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 80.63201904296875,
        "y": 31.586456298828125
      },
      "rarity": "common",
      "authors": [
        "Kevin"
      ]
    },
    {
      "puzName": "puz64",
      "slug": "ancient_greek_numbers",
      "displayName": "Ancient Greek numbers",
      "emoji": "🏛️",
      "order": 79,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [
        {
          "unlockGroupId": "greek"
        }
      ],
      "sequenceId": "greek",
      "constellationEdges": [
        "puz65"
      ],
      "answer": "PHOENIX",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 72,
        "y": 39
      },
      "rarity": "common",
      "authors": [
        "CJ Quines"
      ]
    },
    {
      "puzName": "puz65",
      "slug": "constant_greek_numbers",
      "displayName": "Constant Greek numbers",
      "emoji": "🧮",
      "order": 80,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [
        {
          "unlockGroupId": "greek"
        }
      ],
      "introReq": 5,
      "sequenceId": "greek",
      "constellationEdges": [
        "puz80"
      ],
      "answer": "OLYMPICS",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 73.5,
        "y": 42
      },
      "rarity": "uncommon",
      "authors": [
        "Lewis Chen"
      ]
    },
    {
      "puzName": "puz66",
      "slug": "rotten_puzzle",
      "displayName": "Rotten Puzzle",
      "emoji": "🤢",
      "order": 81,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "answer": "GROSS",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 61.968994140625,
        "y": 20.642852783203125
      },
      "rarity": "common",
      "authors": [
        "Violet Xiao"
      ]
    },
    {
      "puzName": "puz67",
      "slug": "extremely_easy_puzzle",
      "displayName": "Extremely Easy Puzzle",
      "emoji": "👍",
      "order": 82,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [
        {
          "unlockGroupId": "difficulty"
        }
      ],
      "sequenceId": "difficulty",
      "constellationEdges": [
        "puz68"
      ],
      "answer": "ANSWER",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 40.3,
        "y": 14
      },
      "rarity": "common",
      "authors": [
        "Violet Xiao"
      ]
    },
    {
      "puzName": "puz68",
      "slug": "extremely_medium_puzzle",
      "displayName": "Extremely Medium Puzzle",
      "emoji": "🧠",
      "order": 83,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "difficulty",
          "val": 1,
          "isUnlockOnly": true
        }
      ],
      "unlockOutEdges": [
        {
          "unlockGroupId": "difficulty"
        }
      ],
      "introReq": 5,
      "sequenceId": "difficulty",
      "constellationEdges": [
        "puz73"
      ],
      "answer": "DOUBLESPEAK",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 42,
        "y": 16
      },
      "rarity": "uncommon",
      "authors": [
        "Violet Xiao"
      ]
    },
    {
      "puzName": "puz69",
      "slug": "f3f9420a",
      "displayName": "",
      "emoji": "⛏️",
      "order": 84,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [
        {
          "unlockGroupId": "puz105feeders"
        }
      ],
      "introReq": 5,
      "sequenceId": "free",
      "answer": "PROBLEM",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 82.7728271484375,
        "y": 31.78253173828125
      },
      "rarity": "uncommon",
      "displayedRarity": "epic",
      "authors": [
        "Mark"
      ]
    },
    {
      "puzName": "puz70",
      "slug": "blnks_alterative",
      "displayName": "BL?NKS ALTER?ATIVE ?PACE SHO?N G?TTING ?EASONING",
      "emoji": "🥈",
      "order": 85,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "introReq": 5,
      "answer": "ICARUS",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 39.007568359375,
        "y": 19.9188232421875
      },
      "rarity": "common",
      "authors": [
        "Lewis Chen"
      ]
    },
    {
      "puzName": "puz71",
      "slug": "too_slow",
      "displayName": "Too Slow",
      "emoji": "✋",
      "order": 86,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "answer": "HIGH FIVE | HIGH FIVE INTERCHANGE",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 22.0367431640625,
        "y": 12.764739990234375
      },
      "rarity": "common",
      "authors": [
        "Kevin"
      ]
    },
    {
      "puzName": "puz72",
      "slug": "painting_e633d04d",
      "displayName": "Painting",
      "emoji": "🖌️",
      "order": 87,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [
        {
          "unlockGroupId": "painting"
        }
      ],
      "sequenceId": "painting",
      "constellationEdges": [
        "puz84"
      ],
      "answer": "GALLERIES",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 86,
        "y": 1
      },
      "rarity": "common",
      "authors": [
        "Lewis Chen"
      ]
    },
    {
      "puzName": "puz73",
      "slug": "extremely_hard_puzzle",
      "displayName": "Extremely Hard Puzzle",
      "emoji": "💎",
      "order": 88,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "difficulty",
          "val": 2,
          "isUnlockOnly": true
        }
      ],
      "unlockOutEdges": [
        {
          "unlockGroupId": "difficulty"
        }
      ],
      "introReq": 5,
      "sequenceId": "difficulty",
      "constellationEdges": [
        "puz74"
      ],
      "answer": "COOS",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 44,
        "y": 13
      },
      "rarity": "common",
      "displayedRarity": "rare",
      "authors": [
        "Violet Xiao"
      ]
    },
    {
      "puzName": "puz74",
      "slug": "extremely_meta_puzzle",
      "displayName": "Extremely Meta Puzzle",
      "emoji": "🤷",
      "order": 89,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "difficulty",
          "val": 3
        }
      ],
      "unlockOutEdges": [
        {
          "unlockGroupId": "difficulty"
        }
      ],
      "introReq": 5,
      "sequenceId": "difficulty",
      "answer": "COUSCOUS",
      "isFullPuzzle": true,
      "isMeta": true,
      "mapPos": {
        "x": 43,
        "y": 9
      },
      "rarity": "common",
      "displayedRarity": "legendary",
      "authors": [
        "Violet Xiao"
      ]
    },
    {
      "puzName": "puz75",
      "slug": "blank_squares_7e96140b",
      "displayName": "Blank Squares",
      "emoji": "🎛️",
      "order": 90,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "blank"
        },
        {
          "unlockGroupId": "blank",
          "val": 3,
          "isUnlockOnly": true
        }
      ],
      "unlockOutEdges": [
        {
          "unlockGroupId": "blank"
        }
      ],
      "introReq": 5,
      "sequenceId": "blank",
      "constellationEdges": [
        "puz76",
        "puz109"
      ],
      "answer": "SCALED",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 8,
        "y": 14
      },
      "rarity": "common",
      "authors": [
        "Lewis Chen"
      ]
    },
    {
      "puzName": "puz76",
      "slug": "blank_squares_c9719dea",
      "displayName": "Blank Squares",
      "emoji": "4️⃣",
      "order": 91,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "blank"
        },
        {
          "unlockGroupId": "blank",
          "val": 3,
          "isUnlockOnly": true
        }
      ],
      "unlockOutEdges": [
        {
          "unlockGroupId": "blank"
        }
      ],
      "introReq": 5,
      "sequenceId": "blank",
      "answer": "ORIENT",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 7.5,
        "y": 17
      },
      "rarity": "common",
      "authors": [
        "Lewis Chen"
      ]
    },
    {
      "puzName": "puz77",
      "slug": "i_know_how_to_see_them",
      "displayName": "I know how to see them backwards",
      "emoji": "🔛",
      "order": 92,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "answer": "SOLOS",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 59.47265625,
        "y": 47.595977783203125
      },
      "rarity": "common",
      "authors": [
        "Kevin"
      ]
    },
    {
      "puzName": "puz78",
      "slug": "blank_squares_2a8fcca1",
      "displayName": "Blank Squares",
      "emoji": "🏨",
      "order": 93,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [
        {
          "unlockGroupId": "blank"
        }
      ],
      "introReq": 5,
      "sequenceId": "blank",
      "constellationEdges": [
        "puz90",
        "puz75"
      ],
      "answer": "GLORY",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 7,
        "y": 10
      },
      "rarity": "common",
      "authors": [
        "Violet Xiao"
      ]
    },
    {
      "puzName": "puz79",
      "slug": "lets_get_this_bread",
      "displayName": "Let’s Get This Bread",
      "emoji": "🥖",
      "order": 94,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "introReq": 5,
      "answer": "LIRA",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 22.30987548828125,
        "y": 49.475860595703125
      },
      "rarity": "uncommon",
      "authors": [
        "Chris Jones"
      ]
    },
    {
      "puzName": "puz80",
      "slug": "festive_greek_numbers",
      "displayName": "Festive Greek numbers",
      "emoji": "🎊",
      "order": 95,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [
        {
          "unlockGroupId": "greek"
        }
      ],
      "introReq": 5,
      "sequenceId": "greek",
      "answer": "DOGPILE",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 75,
        "y": 38
      },
      "rarity": "uncommon",
      "authors": [
        "Lewis Chen"
      ]
    },
    {
      "puzName": "puz81",
      "slug": "eth_rodwhistm",
      "displayName": "Eth Rodwhistm",
      "emoji": "🏹",
      "order": 96,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "introReq": 5,
      "answer": "EASTERN",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 44.69451904296875,
        "y": 39.9017333984375
      },
      "rarity": "uncommon",
      "authors": [
        "Lewis Chen"
      ]
    },
    {
      "puzName": "puz82",
      "slug": "af47cd28",
      "displayName": "读。听。",
      "emoji": "👂",
      "order": 97,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "answer": "CODE",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 74.70245361328125,
        "y": 2.457427978515625
      },
      "rarity": "common",
      "authors": [
        "Mark"
      ]
    },
    {
      "puzName": "puz83",
      "slug": "japanese_folding",
      "displayName": "japaNese FoLding",
      "emoji": "🏈",
      "order": 98,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "answer": "PIER",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 99.2462158203125,
        "y": 43.8995361328125
      },
      "rarity": "common",
      "authors": [
        "Lewis Chen"
      ]
    },
    {
      "puzName": "puz84",
      "slug": "painting_5db4453d",
      "displayName": "Painting",
      "emoji": "🎨",
      "order": 99,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "painting",
          "val": 1,
          "isUnlockOnly": true
        }
      ],
      "unlockOutEdges": [
        {
          "unlockGroupId": "painting"
        }
      ],
      "introReq": 5,
      "sequenceId": "painting",
      "constellationEdges": [
        "puz92",
        "puz95"
      ],
      "answer": "COLOR",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 87,
        "y": 5
      },
      "rarity": "common",
      "authors": [
        "Lewis Chen"
      ]
    },
    {
      "puzName": "puz85",
      "slug": "time",
      "displayName": "Time",
      "emoji": "🕰️",
      "order": 100,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "answer": "SOIL",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 39.12506103515625,
        "y": 39.130401611328125
      },
      "rarity": "common",
      "authors": [
        "Colin Lu"
      ]
    },
    {
      "puzName": "puz86",
      "slug": "b4e58ab3",
      "displayName": "",
      "emoji": "🐍",
      "order": 101,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "introReq": 5,
      "answer": "PHOTON",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 2.4139404296875,
        "y": 42.19818115234375
      },
      "rarity": "common",
      "authors": [
        "Lewis Chen"
      ]
    },
    {
      "puzName": "puz87",
      "slug": "6e3fca10",
      "displayName": "",
      "emoji": "🌀",
      "order": 102,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "introReq": 5,
      "answer": "CURIOSITY",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 77.89764404296875,
        "y": 46.74072265625
      },
      "rarity": "common",
      "authors": [
        "Chris Jones"
      ]
    },
    {
      "puzName": "puz89",
      "slug": "a_b_c",
      "displayName": "A+B=C",
      "emoji": "🔙",
      "order": 103,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "answer": "BACK",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 44.79522705078125,
        "y": 37.0269775390625
      },
      "rarity": "common",
      "authors": [
        "Lewis Chen"
      ]
    },
    {
      "puzName": "puz90",
      "slug": "blank_spaces",
      "displayName": "Blank Spaces",
      "emoji": "🛣️",
      "order": 104,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [
        {
          "unlockGroupId": "blank"
        }
      ],
      "introReq": 5,
      "sequenceId": "blank",
      "answer": "HIGHWAY",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 7.4,
        "y": 5
      },
      "rarity": "common",
      "authors": [
        "Chris Jones"
      ]
    },
    {
      "puzName": "puz91",
      "slug": "81e1ed46",
      "displayName": "",
      "emoji": "♿",
      "order": 105,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [
        {
          "unlockGroupId": "puz105feeders"
        }
      ],
      "introReq": 5,
      "sequenceId": "free",
      "answer": "DYSON",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 45.428466796875,
        "y": 30.646514892578125
      },
      "rarity": "common",
      "displayedRarity": "rare",
      "authors": [
        "Mark"
      ]
    },
    {
      "puzName": "puz92",
      "slug": "painting_ab4f54f8",
      "displayName": "Painting",
      "emoji": "✏️",
      "order": 106,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "painting",
          "val": 1,
          "isUnlockOnly": true
        }
      ],
      "unlockOutEdges": [
        {
          "unlockGroupId": "painting"
        }
      ],
      "introReq": 5,
      "sequenceId": "painting",
      "constellationEdges": [
        "puz99"
      ],
      "answer": "CHEAP",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 87.8,
        "y": 7
      },
      "rarity": "common",
      "authors": [
        "Lewis Chen"
      ]
    },
    {
      "puzName": "puz93",
      "slug": "78d3fa9d",
      "displayName": "",
      "emoji": "💼",
      "order": 107,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [
        {
          "unlockGroupId": "puz105feeders"
        }
      ],
      "introReq": 5,
      "sequenceId": "free",
      "answer": "TRAIL",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 67.1600341796875,
        "y": 29.584503173828125
      },
      "rarity": "common",
      "displayedRarity": "uncommon",
      "authors": [
        "Mark"
      ]
    },
    {
      "puzName": "puz94",
      "slug": "1a91dc59",
      "displayName": "",
      "emoji": "🚶",
      "order": 108,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [
        {
          "unlockGroupId": "puz105feeders"
        }
      ],
      "introReq": 5,
      "sequenceId": "free",
      "answer": "MOVEMENT",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 95.513916015625,
        "y": 43.631744384765625
      },
      "rarity": "common",
      "displayedRarity": "rare",
      "authors": [
        "Mark"
      ]
    },
    {
      "puzName": "puz95",
      "slug": "painting_d3816874",
      "displayName": "Painting",
      "emoji": "❤️",
      "order": 109,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "painting",
          "val": 1,
          "isUnlockOnly": true
        }
      ],
      "unlockOutEdges": [
        {
          "unlockGroupId": "painting"
        }
      ],
      "introReq": 5,
      "sequenceId": "painting",
      "constellationEdges": [
        "puz98"
      ],
      "answer": "HALT",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 86,
        "y": 9.2
      },
      "rarity": "common",
      "authors": [
        "Lewis Chen"
      ]
    },
    {
      "puzName": "puz96",
      "slug": "bc5d66a1",
      "displayName": "",
      "emoji": "🎃",
      "order": 110,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [
        {
          "unlockGroupId": "puz105feeders"
        }
      ],
      "introReq": 5,
      "sequenceId": "free",
      "answer": "AREA",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 44.4061279296875,
        "y": 28.299713134765625
      },
      "rarity": "uncommon",
      "displayedRarity": "rare",
      "authors": [
        "Mark"
      ]
    },
    {
      "puzName": "puz97",
      "slug": "morse_code",
      "displayName": "Morse Code",
      "emoji": "📞",
      "order": 111,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "introReq": 5,
      "answerNormalization": "uppercase_letters_or_symbols_only",
      "answer": "34",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 57.33184814453125,
        "y": 8.43658447265625
      },
      "rarity": "uncommon",
      "authors": [
        "Chris Jones"
      ]
    },
    {
      "puzName": "puz98",
      "slug": "painting_6eb996ec",
      "displayName": "Painting",
      "emoji": "✂️",
      "order": 112,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "painting",
          "val": 1,
          "isUnlockOnly": true
        }
      ],
      "unlockOutEdges": [
        {
          "unlockGroupId": "painting"
        }
      ],
      "introReq": 5,
      "sequenceId": "painting",
      "constellationEdges": [
        "puz99"
      ],
      "answer": "MATRIX",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 87.1,
        "y": 11.4
      },
      "rarity": "uncommon",
      "authors": [
        "Lewis Chen"
      ]
    },
    {
      "puzName": "puz99",
      "slug": "painting_919f62ee",
      "displayName": "Painting",
      "emoji": "🔍",
      "order": 113,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "painting",
          "val": 1,
          "isUnlockOnly": true
        }
      ],
      "unlockOutEdges": [
        {
          "unlockGroupId": "painting"
        }
      ],
      "introReq": 5,
      "sequenceId": "painting",
      "constellationEdges": [
        "puz100"
      ],
      "answer": "SIGNAL",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 88.4,
        "y": 10.4
      },
      "rarity": "uncommon",
      "authors": [
        "Lewis Chen"
      ]
    },
    {
      "puzName": "puz100",
      "slug": "painting_meta",
      "displayName": "Painting (Meta)",
      "emoji": "🧑‍🎨",
      "order": 114,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "painting",
          "val": 6,
          "isUnlockOnly": true
        }
      ],
      "unlockOutEdges": [
        {
          "unlockGroupId": "painting"
        }
      ],
      "solutionInEdges": [
        {
          "unlockGroupId": "painting",
          "val": 7
        }
      ],
      "introReq": 5,
      "sequenceId": "painting",
      "answer": "RASTER MASTER",
      "isFullPuzzle": true,
      "isMeta": true,
      "mapPos": {
        "x": 89.9,
        "y": 11.7
      },
      "rarity": "uncommon",
      "authors": [
        "Lewis Chen"
      ]
    },
    {
      "puzName": "puz101",
      "slug": "genre",
      "displayName": "Genre (4,3,4)",
      "emoji": "🥁",
      "order": 115,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "answer": "DRUM AND BASS",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 76.54571533203125,
        "y": 0.540924072265625
      },
      "rarity": "common",
      "authors": [
        "Kevin"
      ]
    },
    {
      "puzName": "puz103",
      "slug": "cc203922",
      "displayName": "",
      "emoji": "🫁",
      "order": 116,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [
        {
          "unlockGroupId": "puz105feeders"
        }
      ],
      "introReq": 5,
      "sequenceId": "free",
      "answer": "SWIMMING",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 26.2359619140625,
        "y": 30.037689208984375
      },
      "rarity": "common",
      "authors": [
        "Mark"
      ]
    },
    {
      "puzName": "puz104",
      "slug": "8effef7c",
      "displayName": "",
      "emoji": "🧑‍🤝‍🧑",
      "order": 117,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [
        {
          "unlockGroupId": "puz105feeders"
        }
      ],
      "introReq": 5,
      "sequenceId": "free",
      "answer": "LODGE",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 60.5377197265625,
        "y": 2.288055419921875
      },
      "rarity": "common",
      "displayedRarity": "rare",
      "authors": [
        "Mark"
      ]
    },
    {
      "puzName": "puz105",
      "slug": "free_puzzle",
      "displayName": "Free Puzzle",
      "emoji": "🆓",
      "order": 118,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "puz105feeders",
          "val": 6
        },
        {
          "unlockGroupId": "puz105feeders",
          "val": 10,
          "isUnlockOnly": true
        }
      ],
      "unlockOutEdges": [
        {
          "unlockGroupId": "puz105"
        }
      ],
      "solutionInEdges": [
        {
          "unlockGroupId": "puz105feeders",
          "val": 10
        }
      ],
      "introReq": 5,
      "answer": null,
      "isFullPuzzle": true,
      "isMeta": true,
      "mapPos": {
        "x": 85.93902587890625,
        "y": 24.24774169921875
      },
      "rarity": "legendary",
      "authors": [
        "Mark"
      ]
    },
    {
      "puzName": "puz106",
      "slug": "ignore_the_wugs",
      "displayName": "Ignore the wugs",
      "emoji": "🐤",
      "order": 119,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "answer": "CHILD",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 87.83721923828125,
        "y": 25.048065185546875
      },
      "rarity": "common",
      "authors": [
        "Kevin"
      ]
    },
    {
      "puzName": "puz107",
      "slug": "make_your_own_crossword_puzzle",
      "displayName": "Make Your Own Crossword Puzzle",
      "emoji": "❓",
      "order": 120,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "introReq": 5,
      "answer": "CLUELESS",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 62.34283447265625,
        "y": 18.44940185546875
      },
      "rarity": "epic",
      "authors": [
        "Chris Jones"
      ]
    },
    {
      "puzName": "puz108",
      "slug": "cro_ssw_ord",
      "displayName": "CRO/SSW/ORD",
      "emoji": "⏹️",
      "order": 121,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [
        {
          "unlockGroupId": "crossword"
        }
      ],
      "sequenceId": "crossword",
      "constellationEdges": [
        "puz298"
      ],
      "answer": "PEASANTRY",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 33,
        "y": 16
      },
      "rarity": "common",
      "authors": [
        "Yannick Yao"
      ]
    },
    {
      "puzName": "puz109",
      "slug": "blank_squares_iv",
      "displayName": "Blank Squares IV",
      "emoji": "🍂",
      "order": 122,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "blank"
        },
        {
          "unlockGroupId": "blank",
          "val": 3,
          "isUnlockOnly": true
        }
      ],
      "unlockOutEdges": [
        {
          "unlockGroupId": "blank"
        }
      ],
      "introReq": 5,
      "sequenceId": "blank",
      "answer": "NEGATIVE",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 9.1,
        "y": 16
      },
      "rarity": "common",
      "authors": [
        "Violet Xiao"
      ]
    },
    {
      "puzName": "puz110",
      "slug": "name_the_instrument",
      "displayName": "Name the instrument",
      "emoji": "📯",
      "order": 123,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [
        {
          "unlockGroupId": "name"
        }
      ],
      "introReq": 5,
      "sequenceId": "name",
      "constellationEdges": [
        "puz280"
      ],
      "answer": "WATERPHONE",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 51.8,
        "y": 31
      },
      "rarity": "common",
      "authors": [
        "Amon Ge"
      ]
    },
    {
      "puzName": "puz111",
      "slug": "angkor_what",
      "displayName": "Angkor What",
      "emoji": "🛕",
      "order": 124,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "introReq": 20,
      "answer": "WAT",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 28.485107421875,
        "y": 8.745574951171875
      },
      "rarity": "common",
      "authors": [
        "Leon Zhou",
        "Violet Xiao",
        "Anderson Wang",
        "Charles Tam",
        "Mark"
      ]
    },
    {
      "puzName": "puz112",
      "slug": "redundancy",
      "displayName": "Redundancy",
      "emoji": "💽",
      "order": 125,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "introReq": 5,
      "answer": "STEAD",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 30.53741455078125,
        "y": 43.18389892578125
      },
      "rarity": "uncommon",
      "authors": [
        "Brian Chen"
      ]
    },
    {
      "puzName": "puz113",
      "slug": "flags",
      "displayName": "Flags",
      "emoji": "🛥️",
      "order": 126,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "answer": "UNIX",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 75.4425048828125,
        "y": 4.23126220703125
      },
      "rarity": "common",
      "authors": [
        "Brian Chen"
      ]
    },
    {
      "puzName": "puz114",
      "slug": "6feaa304",
      "displayName": "",
      "emoji": "🔊",
      "order": 127,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [
        {
          "unlockGroupId": "puz105feeders"
        }
      ],
      "introReq": 5,
      "sequenceId": "free",
      "answer": "CODER",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 9.86785888671875,
        "y": 6.30950927734375
      },
      "rarity": "common",
      "displayedRarity": "uncommon",
      "authors": [
        "Mark"
      ]
    },
    {
      "puzName": "puz116",
      "slug": "temple_parabola",
      "displayName": "Temple Parabola",
      "emoji": "🧑‍⚖️",
      "order": 128,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "introReq": 5,
      "answer": "COURTHOUSE",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 26.96685791015625,
        "y": 25.960540771484375
      },
      "rarity": "uncommon",
      "authors": [
        "Kevin"
      ]
    },
    {
      "puzName": "puz117",
      "slug": "todays_featured_topics",
      "displayName": "Today’s featured topics",
      "emoji": "⭐",
      "order": 129,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "wikipedia"
        }
      ],
      "unlockOutEdges": [
        {
          "unlockGroupId": "wikipedia"
        }
      ],
      "introReq": 5,
      "sequenceId": "wikipedia",
      "constellationEdges": [
        "puz123",
        "puz151"
      ],
      "answer": "WONDERLAND",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 30.4,
        "y": 26
      },
      "rarity": "common",
      "authors": [
        "Kevin"
      ]
    },
    {
      "puzName": "puz120",
      "slug": "bubble_wrap_puzzle",
      "displayName": "Bubble Wrap Puzzle",
      "emoji": "🫧",
      "order": 130,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "answer": "WITHIN",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 93.59588623046875,
        "y": 11.731719970703125
      },
      "rarity": "common",
      "authors": [
        "Lewis Chen"
      ]
    },
    {
      "puzName": "puz121",
      "slug": "yummy_puzzle",
      "displayName": "Yummy Puzzle",
      "emoji": "🥨",
      "order": 131,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "answer": "ACQUIRED",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 60.0921630859375,
        "y": 45.996856689453125
      },
      "rarity": "common",
      "authors": [
        "Violet Xiao"
      ]
    },
    {
      "puzName": "puz122",
      "slug": "three_clues",
      "displayName": "Three clues",
      "emoji": "🐼",
      "order": 132,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "answer": "BYPASS",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 58.96148681640625,
        "y": 47.422027587890625
      },
      "rarity": "common",
      "authors": [
        "Lewis Chen"
      ]
    },
    {
      "puzName": "puz123",
      "slug": "list_of_really_really_really",
      "displayName": "List of really, really, really stupid article ideas",
      "emoji": "🙅",
      "order": 133,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "wikipedia"
        }
      ],
      "unlockOutEdges": [
        {
          "unlockGroupId": "wikipedia"
        }
      ],
      "introReq": 5,
      "sequenceId": "wikipedia",
      "answer": "FLOWCHART",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 31.2,
        "y": 31
      },
      "rarity": "common",
      "authors": [
        "CJ Quines"
      ]
    },
    {
      "puzName": "puz124",
      "slug": "countries",
      "displayName": "Countries (4)",
      "emoji": "🇰🇬",
      "order": 134,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "answer": "STAN",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 94.16351318359375,
        "y": 42.12646484375
      },
      "rarity": "common",
      "authors": [
        "Lewis Chen"
      ]
    },
    {
      "puzName": "puz125",
      "slug": "vortex_manipulator",
      "displayName": "Vortex Manipulator",
      "emoji": "🌪️",
      "order": 135,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "answer": "JACK",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 46.15631103515625,
        "y": 0.45166015625
      },
      "rarity": "common",
      "authors": [
        "Andy Hauge"
      ]
    },
    {
      "puzName": "puz126",
      "slug": "50_50_823cc7a0",
      "displayName": "50/50",
      "emoji": "1️⃣",
      "order": 136,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [
        {
          "unlockGroupId": "fifty"
        }
      ],
      "introReq": 5,
      "sequenceId": "fifty",
      "constellationEdges": [
        "puz186"
      ],
      "answer": "ONE",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 48,
        "y": 35.3
      },
      "rarity": "common",
      "authors": [
        "Leon Zhou"
      ]
    },
    {
      "puzName": "puz128",
      "slug": "funny_number_conundrum",
      "displayName": "Funny Number Conundrum",
      "emoji": "🔥",
      "order": 137,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "answer": "BLAZING SADDLES",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 4.4952392578125,
        "y": 30.393218994140625
      },
      "rarity": "common",
      "authors": [
        "Violet Xiao"
      ]
    },
    {
      "puzName": "puz132",
      "slug": "make_3x5",
      "displayName": "Make 3×5",
      "emoji": "🌷",
      "order": 138,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "domino",
          "val": 1,
          "isUnlockOnly": true
        }
      ],
      "unlockOutEdges": [
        {
          "unlockGroupId": "domino"
        }
      ],
      "introReq": 5,
      "sequenceId": "domino",
      "answer": "TULIP",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 72,
        "y": 4
      },
      "rarity": "rare",
      "authors": [
        "Lewis Chen"
      ]
    },
    {
      "puzName": "puz135",
      "slug": "a_sudoku_with_only_8_hidden",
      "displayName": "A Sudoku With Only 8 Hidden Digits!?",
      "emoji": "🥷",
      "order": 139,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "answer": "ZODIAC",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 67.4835205078125,
        "y": 37.290191650390625
      },
      "rarity": "common",
      "authors": [
        "Leon Zhou"
      ]
    },
    {
      "puzName": "puz136",
      "slug": "dont_google_it",
      "displayName": "Don’t Google it",
      "emoji": "🍊",
      "order": 140,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [
        {
          "unlockGroupId": "google"
        }
      ],
      "introReq": 20,
      "sequenceId": "google",
      "constellationEdges": [
        "puz177"
      ],
      "answerNormalization": "uppercase_letters_or_symbols_only",
      "answer": "5",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 62,
        "y": 8
      },
      "rarity": "common",
      "authors": [
        "Amon Ge"
      ]
    },
    {
      "puzName": "puz139",
      "slug": "have_you_hugged_a_tree_today",
      "displayName": "Have You Hugged a Tree Today?",
      "emoji": "🫂",
      "order": 141,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "introReq": 20,
      "answer": null,
      "isFullPuzzle": true,
      "mapPos": {
        "x": 74.32861328125,
        "y": 14.411163330078125
      },
      "rarity": "uncommon",
      "displayedRarity": "rare",
      "authors": [
        "Chris Jones"
      ]
    },
    {
      "puzName": "puz140",
      "slug": "wow_a_top_quality_puzzle",
      "displayName": "Wow, a Top Quality Puzzle",
      "emoji": "👹",
      "order": 142,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "color",
          "val": 2,
          "isUnlockOnly": true
        }
      ],
      "unlockOutEdges": [
        {
          "unlockGroupId": "color"
        }
      ],
      "introReq": 5,
      "sequenceId": "color",
      "answer": "LUCRE",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 22,
        "y": 1
      },
      "rarity": "common",
      "displayedRarity": "legendary",
      "authors": [
        "Lewis Chen"
      ]
    },
    {
      "puzName": "puz141",
      "slug": "domino_effect",
      "displayName": "Domino Effect",
      "emoji": "🍕",
      "order": 143,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [
        {
          "unlockGroupId": "domino"
        }
      ],
      "introReq": 5,
      "sequenceId": "domino",
      "constellationEdges": [
        "puz132"
      ],
      "answer": "GRID",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 73,
        "y": 8
      },
      "rarity": "uncommon",
      "authors": [
        "Lewis Chen"
      ]
    },
    {
      "puzName": "puz142",
      "slug": "spuejq",
      "displayName": "spueȷq",
      "emoji": "🖨️",
      "order": 144,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "answer": "DYSON",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 48.50006103515625,
        "y": 14.91546630859375
      },
      "rarity": "common",
      "authors": [
        "Lewis Chen"
      ]
    },
    {
      "puzName": "puz143",
      "slug": "zoomer_jumbles",
      "displayName": "Zoomer Jumbles",
      "emoji": "🏎️",
      "order": 145,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "introReq": 5,
      "answer": "BESTIE",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 93.33648681640625,
        "y": 4.169464111328125
      },
      "rarity": "common",
      "displayedRarity": "uncommon",
      "authors": [
        "Chris Jones"
      ]
    },
    {
      "puzName": "puz144",
      "slug": "musical_intuition",
      "displayName": "Short answer: Musical intuition",
      "emoji": "🎵",
      "order": 146,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "introReq": 20,
      "answer": null,
      "isFullPuzzle": true,
      "mapPos": {
        "x": 46.77276611328125,
        "y": 32.799530029296875
      },
      "rarity": "uncommon",
      "displayedRarity": "rare",
      "authors": [
        "Amon Ge"
      ]
    },
    {
      "puzName": "puz145",
      "slug": "hope",
      "displayName": "Hope",
      "emoji": "🙏",
      "order": 147,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "introReq": 20,
      "answer": "HOPE",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 11.75079345703125,
        "y": 14.968109130859375
      },
      "rarity": "common",
      "authors": [
        "Chris Jones"
      ]
    },
    {
      "puzName": "puz146",
      "slug": "despair",
      "displayName": "Despair",
      "emoji": "😭",
      "order": 148,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [
        {
          "unlockGroupId": "despair"
        }
      ],
      "introReq": 20,
      "sequenceId": "despair",
      "constellationEdges": [
        "puz189"
      ],
      "answer": "DESPISED",
      "isFullPuzzle": true,
      "hopeForSolve": 0,
      "mapPos": {
        "x": 33,
        "y": 46
      },
      "rarity": "common",
      "authors": [
        "Mark"
      ]
    },
    {
      "puzName": "puz149",
      "slug": "curiosity",
      "displayName": "Curiosity",
      "emoji": "🐵",
      "order": 149,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "answer": "UNION",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 69.06585693359375,
        "y": 27.756500244140625
      },
      "rarity": "common",
      "authors": [
        "Lewis Chen"
      ]
    },
    {
      "puzName": "puz150",
      "slug": "dopaminae",
      "displayName": "dopaminæ",
      "emoji": "🛏️",
      "order": 150,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "introReq": 5,
      "answer": "I WAKE UP",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 0.677490234375,
        "y": 13.234710693359375
      },
      "rarity": "uncommon",
      "authors": [
        "Kevin"
      ]
    },
    {
      "puzName": "puz151",
      "slug": "wp_alphabetsoup",
      "displayName": "https://en.wikipedia.org/wiki/WP:ALPHABETSOUP",
      "emoji": "🍲",
      "order": 151,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "wikipedia"
        }
      ],
      "unlockOutEdges": [
        {
          "unlockGroupId": "wikipedia"
        }
      ],
      "introReq": 5,
      "sequenceId": "wikipedia",
      "answer": "VANDALISM",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 29,
        "y": 25
      },
      "rarity": "common",
      "authors": [
        "CJ Quines"
      ]
    },
    {
      "puzName": "puz152",
      "slug": "bacon_bits",
      "displayName": "Bacon Bits",
      "emoji": "🥓",
      "order": 152,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "answer": "BOTTOM / SNL",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 80.76324462890625,
        "y": 36.7095947265625
      },
      "rarity": "common",
      "authors": [
        "Lewis Chen"
      ]
    },
    {
      "puzName": "puz153",
      "slug": "minor_puzzle",
      "displayName": "Minor Puzzle",
      "emoji": "💯",
      "order": 153,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "answer": "SOPHIE",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 14.18609619140625,
        "y": 35.884857177734375
      },
      "rarity": "common",
      "authors": [
        "Violet Xiao"
      ]
    },
    {
      "puzName": "puz155",
      "slug": "boundaries",
      "displayName": "Boundaries",
      "emoji": "🏰",
      "order": 154,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "answer": "NEW CASTLE",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 24.3804931640625,
        "y": 35.834503173828125
      },
      "rarity": "common",
      "authors": [
        "Kevin"
      ]
    },
    {
      "puzName": "puz156",
      "slug": "answer",
      "displayName": "ANSWER",
      "emoji": "🔀",
      "order": 155,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "introReq": 5,
      "answer": "MANFRED",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 78.9703369140625,
        "y": 44.94171142578125
      },
      "rarity": "uncommon",
      "authors": [
        "Brian Chen"
      ]
    },
    {
      "puzName": "puz157",
      "slug": "clues",
      "displayName": "Clues",
      "emoji": "⛓️",
      "order": 156,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "answer": "CHAIN",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 83.2794189453125,
        "y": 38.941192626953125
      },
      "rarity": "common",
      "authors": [
        "Brian Chen"
      ]
    },
    {
      "puzName": "puz158",
      "slug": "magical_puzzle",
      "displayName": "Magical Puzzle",
      "emoji": "🪄",
      "order": 157,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "answer": "YURTS",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 36.5081787109375,
        "y": 45.9808349609375
      },
      "rarity": "common",
      "authors": [
        "Lewis Chen"
      ]
    },
    {
      "puzName": "puz159",
      "slug": "d1e953ab",
      "displayName": "",
      "emoji": "💰",
      "order": 158,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "introReq": 5,
      "answer": "MONETIZE",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 80.4595947265625,
        "y": 45.1995849609375
      },
      "rarity": "uncommon",
      "authors": [
        "Brian Chen"
      ]
    },
    {
      "puzName": "puz162",
      "slug": "exchange",
      "displayName": "Exchange",
      "emoji": "📎",
      "order": 159,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "introReq": 5,
      "answer": "PAPERCLIP",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 45.2239990234375,
        "y": 2.877044677734375
      },
      "rarity": "common",
      "displayedRarity": "rare",
      "authors": [
        "Brian Chen"
      ]
    },
    {
      "puzName": "puz164",
      "slug": "dont_overthink_it",
      "displayName": "don’t overthink it",
      "emoji": "⚛️",
      "order": 160,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "introReq": 5,
      "answer": "ANTICAPITALIST",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 39.2974853515625,
        "y": 33.115386962890625
      },
      "rarity": "common",
      "authors": [
        "Brian Chen"
      ]
    },
    {
      "puzName": "puz165",
      "slug": "colors",
      "displayName": "Colors",
      "emoji": "🟪",
      "order": 161,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "color",
          "val": 1
        }
      ],
      "unlockOutEdges": [
        {
          "unlockGroupId": "color"
        }
      ],
      "introReq": 5,
      "sequenceId": "color",
      "constellationEdges": [
        "puz140"
      ],
      "answer": "VISION",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 21,
        "y": 4
      },
      "rarity": "common",
      "authors": [
        "Brian Chen"
      ]
    },
    {
      "puzName": "puz166",
      "slug": "repeat_after_me",
      "displayName": "Repeat After Me",
      "emoji": "🚨",
      "order": 162,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "answer": "CODERED",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 59.393310546875,
        "y": 44.431304931640625
      },
      "rarity": "common",
      "authors": [
        "Brian Chen"
      ]
    },
    {
      "puzName": "puz168",
      "slug": "and_if_you_look_to_the_right",
      "displayName": "And if you look to the right...",
      "emoji": "⛰️",
      "order": 163,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [
        {
          "unlockGroupId": "look"
        }
      ],
      "introReq": 5,
      "sequenceId": "look",
      "constellationEdges": [
        "puz170"
      ],
      "answer": "MOUNT RAINIER",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 79,
        "y": 2
      },
      "rarity": "common",
      "authors": [
        "Kevin"
      ]
    },
    {
      "puzName": "puz169",
      "slug": "quadruple_crossword",
      "displayName": "Quadruple Crossword",
      "emoji": "🔄",
      "order": 164,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "introReq": 5,
      "answer": "SPIN",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 37.1551513671875,
        "y": 47.356414794921875
      },
      "rarity": "uncommon",
      "authors": [
        "Brian Chen"
      ]
    },
    {
      "puzName": "puz170",
      "slug": "and_if_you_look_to_the_left",
      "displayName": "And if you look to the left...",
      "emoji": "🏯",
      "order": 165,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [
        {
          "unlockGroupId": "look"
        }
      ],
      "sequenceId": "look",
      "answer": "HIMEJI CASTLE",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 82,
        "y": 4
      },
      "rarity": "common",
      "authors": [
        "Amon Ge"
      ]
    },
    {
      "puzName": "puz171",
      "slug": "bro_seas_teas_as_so_so",
      "displayName": "BRO SEAS TEAS AS SO SO",
      "emoji": "🧪",
      "order": 166,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "jfk",
          "val": 1
        }
      ],
      "unlockOutEdges": [
        {
          "unlockGroupId": "jfk"
        }
      ],
      "introReq": 5,
      "sequenceId": "jfk",
      "answer": "POLONIUM",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 79,
        "y": 31
      },
      "rarity": "common",
      "authors": [
        "Violet Xiao"
      ]
    },
    {
      "puzName": "puz172",
      "slug": "e69142ad",
      "displayName": "",
      "emoji": "🎻",
      "order": 167,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "introReq": 5,
      "answer": "SHARKS / DECADE",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 97.15576171875,
        "y": 33.71429443359375
      },
      "rarity": "common",
      "authors": [
        "Lewis Chen"
      ]
    },
    {
      "puzName": "puz173",
      "slug": "scramble_for_the_stars_ii",
      "displayName": "Scramble for the Stars II",
      "emoji": "🦜",
      "order": 168,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "introReq": 5,
      "answer": "COMPACT",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 68.402099609375,
        "y": 46.9818115234375
      },
      "rarity": "uncommon",
      "authors": [
        "Lewis Chen"
      ]
    },
    {
      "puzName": "puz175",
      "slug": "clues_with_answers",
      "displayName": "Clues with Answers",
      "emoji": "📦",
      "order": 169,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [
        {
          "unlockGroupId": "clues"
        }
      ],
      "introReq": 5,
      "sequenceId": "clues",
      "constellationEdges": [
        "puz215"
      ],
      "answer": "EXPRESS DELIVERY",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 17.5,
        "y": 27
      },
      "rarity": "rare",
      "authors": [
        "Violet Xiao"
      ]
    },
    {
      "puzName": "puz176",
      "slug": "other_clues_with_answers",
      "displayName": "Other Clues with Answers",
      "emoji": "🧑‍💻",
      "order": 170,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "clues",
          "val": 3,
          "isUnlockOnly": true
        }
      ],
      "unlockOutEdges": [
        {
          "unlockGroupId": "clues"
        }
      ],
      "introReq": 5,
      "sequenceId": "clues",
      "constellationEdges": [
        "puz179"
      ],
      "answer": "THOMAS EDISON",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 20,
        "y": 34
      },
      "rarity": "uncommon",
      "authors": [
        "Violet Xiao"
      ]
    },
    {
      "puzName": "puz177",
      "slug": "dont_google_it_2",
      "displayName": "Don’t Google it 2",
      "emoji": "🐘",
      "order": 171,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "google",
          "val": 1
        }
      ],
      "unlockOutEdges": [
        {
          "unlockGroupId": "google"
        }
      ],
      "introReq": 20,
      "sequenceId": "google",
      "answerNormalization": "uppercase_letters_or_symbols_only",
      "answer": "0",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 65,
        "y": 7
      },
      "rarity": "common",
      "authors": [
        "Amon Ge"
      ]
    },
    {
      "puzName": "puz179",
      "slug": "many_clues_with_answers",
      "displayName": "Many Clues with Answers",
      "emoji": "🧝",
      "order": 172,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "clues",
          "val": 3,
          "isUnlockOnly": true
        }
      ],
      "unlockOutEdges": [
        {
          "unlockGroupId": "clues"
        }
      ],
      "introReq": 5,
      "sequenceId": "clues",
      "answer": "SURPLUS",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 20.7,
        "y": 39
      },
      "rarity": "rare",
      "authors": [
        "Violet Xiao"
      ]
    },
    {
      "puzName": "puz180",
      "slug": "a_puzzle_containing_enumerations",
      "displayName": "A Puzzle Containing Enumerations of Titles of Various Works, Which Itself Has a Title Appropriate to the Theme of the Puzzle (2024)",
      "emoji": "🧮",
      "order": 173,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "answer": "COUNTING",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 12.60528564453125,
        "y": 40.564727783203125
      },
      "rarity": "common",
      "authors": [
        "Leon Zhou"
      ]
    },
    {
      "puzName": "puz182",
      "slug": "090d6fea",
      "displayName": "",
      "emoji": "🩻",
      "order": 174,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "introReq": 5,
      "answer": "ION BEAM",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 74.0631103515625,
        "y": 23.891448974609375
      },
      "rarity": "common",
      "authors": [
        "CJ Quines"
      ]
    },
    {
      "puzName": "puz183",
      "slug": "data_visualization",
      "displayName": "Data visualization",
      "emoji": "📊",
      "order": 175,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "answer": "GAIN",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 15.18402099609375,
        "y": 11.8438720703125
      },
      "rarity": "common",
      "authors": [
        "Kevin"
      ]
    },
    {
      "puzName": "puz185",
      "slug": "clues_without_answers",
      "displayName": "Clues Without Answers",
      "emoji": "🛸",
      "order": 176,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "clues",
          "val": 3,
          "isUnlockOnly": true
        }
      ],
      "unlockOutEdges": [],
      "introReq": 5,
      "sequenceId": "clues",
      "answer": "OUTLIERS",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 22,
        "y": 26
      },
      "rarity": "uncommon",
      "authors": [
        "Brian Chen"
      ]
    },
    {
      "puzName": "puz186",
      "slug": "50_50_2",
      "displayName": "50/50 2",
      "emoji": "🫰",
      "order": 177,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "fifty",
          "val": 1,
          "isUnlockOnly": true
        }
      ],
      "unlockOutEdges": [
        {
          "unlockGroupId": "fifty"
        }
      ],
      "introReq": 5,
      "sequenceId": "fifty",
      "constellationEdges": [
        "puz205",
        "puz222"
      ],
      "answer": "DIGITAL LOVE",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 49,
        "y": 37
      },
      "rarity": "common",
      "authors": [
        "Brian Chen"
      ]
    },
    {
      "puzName": "puz187",
      "slug": "complementary_puzzle",
      "displayName": "Complementary Puzzle",
      "emoji": "⛴️",
      "order": 178,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "introReq": 5,
      "answer": "CARGO",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 29.6875,
        "y": 8.248138427734375
      },
      "rarity": "uncommon",
      "authors": [
        "Lewis Chen"
      ]
    },
    {
      "puzName": "puz189",
      "slug": "desesperacion",
      "displayName": "Desesperación",
      "emoji": "🇪🇸",
      "order": 179,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "despair",
          "val": 1
        }
      ],
      "unlockOutEdges": [
        {
          "unlockGroupId": "despair"
        }
      ],
      "introReq": 20,
      "sequenceId": "despair",
      "answer": "DESTRESSED",
      "isFullPuzzle": true,
      "hopeForSolve": 0,
      "mapPos": {
        "x": 34,
        "y": 41
      },
      "rarity": "common",
      "authors": [
        "Kevin"
      ]
    },
    {
      "puzName": "puz190",
      "slug": "name_the_game",
      "displayName": "Name the game",
      "emoji": "🪠",
      "order": 180,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "name",
          "val": 1,
          "isUnlockOnly": true
        }
      ],
      "unlockOutEdges": [
        {
          "unlockGroupId": "name"
        }
      ],
      "introReq": 5,
      "sequenceId": "name",
      "answerNormalization": "uppercase_letters_or_symbols_only",
      "answer": "SUPER MARIO ODYSSEY",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 51.6,
        "y": 19
      },
      "rarity": "uncommon",
      "authors": [
        "Amon Ge"
      ]
    },
    {
      "puzName": "puz192",
      "slug": "berried_treasure",
      "displayName": "berried treasure",
      "emoji": "🫐",
      "order": 181,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "introReq": 5,
      "answer": "WORMS",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 0.84991455078125,
        "y": 4.479217529296875
      },
      "rarity": "epic",
      "authors": [
        "DD Liu"
      ]
    },
    {
      "puzName": "puz194",
      "slug": "grade_2_haptics",
      "displayName": "Grade 2 Haptics",
      "emoji": "🦯",
      "order": 182,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "introReq": 5,
      "answer": "BLACK",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 15.52581787109375,
        "y": 21.135711669921875
      },
      "rarity": "uncommon",
      "authors": [
        "Yannick Yao"
      ]
    },
    {
      "puzName": "puz196",
      "slug": "clues_with_a_number_of_answers",
      "displayName": "Clues with a Number of Answers",
      "emoji": "❎",
      "order": 183,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "clues",
          "val": 3,
          "isUnlockOnly": true
        }
      ],
      "unlockOutEdges": [
        {
          "unlockGroupId": "clues"
        }
      ],
      "introReq": 5,
      "sequenceId": "clues",
      "constellationEdges": [
        "puz206"
      ],
      "answer": "MERGES",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 22,
        "y": 33
      },
      "rarity": "common",
      "authors": [
        "Lewis Chen"
      ]
    },
    {
      "puzName": "puz197",
      "slug": "3d0295a5",
      "displayName": "",
      "emoji": "⛅",
      "order": 184,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "introReq": 5,
      "answer": "OVERLAP",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 39.79339599609375,
        "y": 23.7213134765625
      },
      "rarity": "common",
      "authors": [
        "Lewis Chen"
      ]
    },
    {
      "puzName": "puz199",
      "slug": "fdc12c7a",
      "displayName": "ᓇᓇᓇᓇᓇᓇᓇᓇᓇᓇᓇᓇᓇ",
      "emoji": "🦇",
      "order": 185,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [
        {
          "unlockGroupId": "na"
        }
      ],
      "sequenceId": "na",
      "constellationEdges": [
        "puz204"
      ],
      "answer": "BATMAN",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 82,
        "y": 22
      },
      "rarity": "common",
      "authors": [
        "Kevin"
      ]
    },
    {
      "puzName": "puz200",
      "slug": "color",
      "displayName": "Color",
      "emoji": "🟥",
      "order": 186,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [
        {
          "unlockGroupId": "color"
        }
      ],
      "sequenceId": "color",
      "constellationEdges": [
        "puz165"
      ],
      "answer": "FACADE",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 19,
        "y": 2
      },
      "rarity": "common",
      "authors": [
        "Kevin"
      ]
    },
    {
      "puzName": "puz201",
      "slug": "macrohard",
      "displayName": "Macrohard",
      "emoji": "🖥️",
      "order": 187,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "introReq": 5,
      "answer": "OUTLOOK",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 40.13824462890625,
        "y": 38.690185546875
      },
      "rarity": "uncommon",
      "authors": [
        "Kevin"
      ]
    },
    {
      "puzName": "puz203",
      "slug": "regulations",
      "displayName": "Regulations",
      "emoji": "📜",
      "order": 188,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "answer": "DUA LIPA",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 28.76739501953125,
        "y": 42.646026611328125
      },
      "rarity": "common",
      "authors": [
        "Kevin"
      ]
    },
    {
      "puzName": "puz204",
      "slug": "b8e9b4e7",
      "displayName": "ᓇᓇᓇᓇᓇᓇᓇᓇᓇᓇᓇᓇᓇ 2",
      "emoji": "🧶",
      "order": 189,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "na",
          "val": 1
        }
      ],
      "unlockOutEdges": [
        {
          "unlockGroupId": "na"
        }
      ],
      "introReq": 5,
      "sequenceId": "na",
      "answer": "HYDRA",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 83,
        "y": 18
      },
      "rarity": "rare",
      "authors": [
        "Lewis Chen"
      ]
    },
    {
      "puzName": "puz205",
      "slug": "100_0",
      "displayName": "100/0",
      "emoji": "🪙",
      "order": 190,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "fifty"
        }
      ],
      "unlockOutEdges": [
        {
          "unlockGroupId": "fifty"
        }
      ],
      "introReq": 5,
      "sequenceId": "fifty",
      "answer": "FOREHEADS",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 50,
        "y": 35
      },
      "rarity": "common",
      "authors": [
        "Violet Xiao"
      ]
    },
    {
      "puzName": "puz206",
      "slug": "clues_with_answers_some_number",
      "displayName": "Clues with Answers... some Number",
      "emoji": "🤏",
      "order": 191,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "clues",
          "val": 3,
          "isUnlockOnly": true
        }
      ],
      "unlockOutEdges": [
        {
          "unlockGroupId": "clues"
        }
      ],
      "introReq": 5,
      "sequenceId": "clues",
      "constellationEdges": [
        "puz179"
      ],
      "answer": "DOODLERS",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 21.7,
        "y": 37
      },
      "rarity": "uncommon",
      "authors": [
        "Violet Xiao"
      ]
    },
    {
      "puzName": "puz207",
      "slug": "get_home",
      "displayName": "Get home!",
      "emoji": "🚗",
      "order": 192,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "introReq": 5,
      "answerNormalization": "uppercase_letters_only",
      "answer": "WHAT IS AN A-PRESS? A MISERABLE PILE OF SECRETS | INSIDE AN A-PRESS, THERE ARE TWO WOLVES; ONE IS A FINGER, THE OTHER IS A FINGER",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 99.97711181640625,
        "y": 10.991668701171875
      },
      "rarity": "common",
      "displayedRarity": "uncommon",
      "authors": [
        "Amon Ge"
      ]
    },
    {
      "puzName": "puz208",
      "slug": "placeholder",
      "displayName": "Placeholder",
      "emoji": "🪖",
      "order": 193,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "answer": "LIEUTENANT",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 30.33294677734375,
        "y": 2.957916259765625
      },
      "rarity": "common",
      "authors": [
        "Kevin"
      ]
    },
    {
      "puzName": "puz209",
      "slug": "4eae8092",
      "displayName": "",
      "emoji": "♻️",
      "order": 194,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "introReq": 5,
      "answer": "RECUR",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 33.85009765625,
        "y": 0.556182861328125
      },
      "rarity": "common",
      "authors": [
        "Lewis Chen"
      ]
    },
    {
      "puzName": "puz210",
      "slug": "87219065",
      "displayName": "",
      "emoji": "🏥",
      "order": 195,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "introReq": 20,
      "answer": "LOSS",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 38.4857177734375,
        "y": 39.420318603515625
      },
      "rarity": "common",
      "authors": [
        "Maddie Dawson"
      ]
    },
    {
      "puzName": "puz211",
      "slug": "3466ec19",
      "displayName": "",
      "emoji": "🚪",
      "order": 196,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "introReq": 20,
      "answer": "NO",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 10.97412109375,
        "y": 24.01885986328125
      },
      "rarity": "common",
      "authors": [
        "Maddie Dawson"
      ]
    },
    {
      "puzName": "puz212",
      "slug": "fix_this_url_to_solve_the_puzzle",
      "displayName": "Find the Answer",
      "emoji": "🕐",
      "order": 197,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [
        {
          "unlockGroupId": "find"
        }
      ],
      "introReq": 20,
      "sequenceId": "find",
      "constellationEdges": [
        "puz214"
      ],
      "answer": "OBSCURED",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 49,
        "y": 4
      },
      "rarity": "common",
      "authors": [
        "Max Murin"
      ]
    },
    {
      "puzName": "puz213",
      "slug": "territories",
      "displayName": "Territories",
      "emoji": "🔪",
      "order": 198,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "answer": "IQALUIT",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 31.25,
        "y": 45.196533203125
      },
      "rarity": "common",
      "authors": [
        "Kevin"
      ]
    },
    {
      "puzName": "puz214",
      "slug": "find_the_answer_ii",
      "displayName": "Find the Answer II",
      "emoji": "🕑",
      "order": 199,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "find",
          "val": 1
        }
      ],
      "unlockOutEdges": [
        {
          "unlockGroupId": "find"
        }
      ],
      "introReq": 20,
      "sequenceId": "find",
      "constellationEdges": [
        "puz324"
      ],
      "answer": "OVERHEAD",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 50.5,
        "y": 8
      },
      "rarity": "common",
      "authors": [
        "Max Murin"
      ]
    },
    {
      "puzName": "puz215",
      "slug": "clues_with_answers_ii",
      "displayName": "Clues with Answers II",
      "emoji": "2️⃣",
      "order": 200,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "clues",
          "val": 1,
          "isUnlockOnly": true
        }
      ],
      "unlockOutEdges": [
        {
          "unlockGroupId": "clues"
        }
      ],
      "introReq": 5,
      "sequenceId": "clues",
      "constellationEdges": [
        "puz226"
      ],
      "answer": "REPAIR",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 18.5,
        "y": 30.5
      },
      "rarity": "common",
      "authors": [
        "Violet Xiao"
      ]
    },
    {
      "puzName": "puz219",
      "slug": "karaoke",
      "displayName": "Karaoke",
      "emoji": "🎤",
      "order": 201,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "answerNormalization": "uppercase_letters_or_symbols_only",
      "answer": "歌枠|うたわく|ウタワク|UTAWAKU",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 38.99078369140625,
        "y": 1.535797119140625
      },
      "rarity": "common",
      "authors": [
        "Amon Ge"
      ],
      "otherCredits": "マークは日本語上手"
    },
    {
      "puzName": "puz220",
      "slug": "what_is_that",
      "displayName": "What is that?",
      "emoji": "🪟",
      "order": 202,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "answer": "VASISTAS",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 2.4444580078125,
        "y": 36.499786376953125
      },
      "rarity": "common",
      "authors": [
        "Kevin"
      ]
    },
    {
      "puzName": "puz221",
      "slug": "468a6325",
      "displayName": "",
      "emoji": "🇩🇪",
      "order": 203,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "introReq": 5,
      "answer": "LOANWORD",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 81.640625,
        "y": 40.069580078125
      },
      "rarity": "common",
      "authors": [
        "Maddie Dawson"
      ]
    },
    {
      "puzName": "puz222",
      "slug": "50_each_50",
      "displayName": "50/each 50",
      "emoji": "🧴",
      "order": 204,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "fifty"
        }
      ],
      "unlockOutEdges": [
        {
          "unlockGroupId": "fifty"
        }
      ],
      "introReq": 5,
      "sequenceId": "fifty",
      "constellationEdges": [
        "puz223"
      ],
      "answer": "LOREAL",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 49,
        "y": 42
      },
      "rarity": "common",
      "authors": [
        "Lewis Chen"
      ]
    },
    {
      "puzName": "puz223",
      "slug": "50_50_b6545cb7",
      "displayName": "50/50",
      "emoji": "🇺🇸",
      "order": 205,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "fifty"
        }
      ],
      "unlockOutEdges": [
        {
          "unlockGroupId": "fifty"
        }
      ],
      "introReq": 5,
      "sequenceId": "fifty",
      "constellationEdges": [
        "puz225"
      ],
      "answer": "EAGLES",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 48.3,
        "y": 46
      },
      "rarity": "common",
      "authors": [
        "Lewis Chen"
      ]
    },
    {
      "puzName": "puz224",
      "slug": "three_words_long",
      "displayName": "Three Words Long",
      "emoji": "🪪",
      "order": 206,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "introReq": 20,
      "answer": "NINETEEN LETTERS LONG",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 10.13946533203125,
        "y": 2.4017333984375
      },
      "rarity": "common",
      "authors": [
        "Lewis Chen"
      ]
    },
    {
      "puzName": "puz225",
      "slug": "50_50_df51fdaa",
      "displayName": "50/50",
      "emoji": "🐌",
      "order": 207,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "fifty"
        }
      ],
      "unlockOutEdges": [
        {
          "unlockGroupId": "fifty"
        }
      ],
      "introReq": 5,
      "sequenceId": "fifty",
      "constellationEdges": [
        "puz233"
      ],
      "answer": "SNAIL",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 47,
        "y": 47
      },
      "rarity": "common",
      "authors": [
        "Violet Xiao"
      ]
    },
    {
      "puzName": "puz226",
      "slug": "clues_with_answers_iii",
      "displayName": "Clues with Answers III",
      "emoji": "3️⃣",
      "order": 208,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "clues",
          "val": 2,
          "isUnlockOnly": true
        }
      ],
      "unlockOutEdges": [
        {
          "unlockGroupId": "clues"
        }
      ],
      "introReq": 5,
      "sequenceId": "clues",
      "constellationEdges": [
        "puz245",
        "puz176"
      ],
      "answer": "FINISHING",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 19.5,
        "y": 30
      },
      "rarity": "common",
      "authors": [
        "Violet Xiao"
      ]
    },
    {
      "puzName": "puz227",
      "slug": "name_the_polyhedron",
      "displayName": "Name the polyhedron",
      "emoji": "🏠",
      "order": 209,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "name",
          "val": 1,
          "isUnlockOnly": true
        }
      ],
      "unlockOutEdges": [
        {
          "unlockGroupId": "name"
        }
      ],
      "introReq": 5,
      "sequenceId": "name",
      "constellationEdges": [
        "puz190"
      ],
      "answer": "ELONGATED GYROBIFASTIGIUM",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 52,
        "y": 23
      },
      "rarity": "common",
      "authors": [
        "Kevin"
      ]
    },
    {
      "puzName": "puz228",
      "slug": "subsequently",
      "displayName": "Subsequently",
      "emoji": "🔜",
      "order": 210,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "introReq": 5,
      "answer": "CALORIE",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 75.00152587890625,
        "y": 47.18170166015625
      },
      "rarity": "uncommon",
      "authors": [
        "Lewis Chen"
      ]
    },
    {
      "puzName": "puz229",
      "slug": "nations",
      "displayName": "Nations",
      "emoji": "🌐",
      "order": 211,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "introReq": 5,
      "answer": "YOUR TONGUE",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 12.6922607421875,
        "y": 7.48138427734375
      },
      "rarity": "uncommon",
      "authors": [
        "Amon Ge"
      ]
    },
    {
      "puzName": "puz230",
      "slug": "friendship_ended",
      "displayName": "Friendship Ended",
      "emoji": "🤝",
      "order": 212,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "answer": "SAID",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 69.66705322265625,
        "y": 41.876983642578125
      },
      "rarity": "common",
      "authors": [
        "Kevin"
      ]
    },
    {
      "puzName": "puz231",
      "slug": "free_hint",
      "displayName": "Free Hint",
      "emoji": "🚰",
      "order": 213,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [
        {
          "unlockGroupId": "hint"
        }
      ],
      "introReq": 20,
      "sequenceId": "hint",
      "constellationEdges": [
        "puz266"
      ],
      "answer": "WATERMELON",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 3,
        "y": 21
      },
      "rarity": "common",
      "authors": [
        "Violet Xiao"
      ]
    },
    {
      "puzName": "puz232",
      "slug": "mobel",
      "displayName": "Möbel",
      "emoji": "🛋️",
      "order": 214,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [
        {
          "unlockGroupId": "sweden"
        }
      ],
      "sequenceId": "sweden",
      "constellationEdges": [
        "puz235"
      ],
      "answer": "BANK",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 92,
        "y": 41
      },
      "rarity": "common",
      "authors": [
        "Kevin"
      ]
    },
    {
      "puzName": "puz233",
      "slug": "50_50_puzzle",
      "displayName": "50-50 puzzle",
      "emoji": "😐",
      "order": 215,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "fifty"
        }
      ],
      "unlockOutEdges": [
        {
          "unlockGroupId": "fifty"
        }
      ],
      "introReq": 5,
      "sequenceId": "fifty",
      "answerNormalization": "uppercase_letters_only",
      "answer": "SO-SO",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 46,
        "y": 43
      },
      "rarity": "common",
      "authors": [
        "Kevin"
      ]
    },
    {
      "puzName": "puz235",
      "slug": "the_system",
      "displayName": "The System",
      "emoji": "🪐",
      "order": 216,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [
        {
          "unlockGroupId": "sweden"
        }
      ],
      "introReq": 5,
      "sequenceId": "sweden",
      "answer": "NOVA",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 93,
        "y": 38
      },
      "rarity": "common",
      "authors": [
        "Lewis Chen"
      ]
    },
    {
      "puzName": "puz236",
      "slug": "weight",
      "displayName": "Weight",
      "emoji": "⚖️",
      "order": 217,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "answer": "LARGELY",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 58.73565673828125,
        "y": 39.740753173828125
      },
      "rarity": "common",
      "authors": [
        "Lewis Chen"
      ]
    },
    {
      "puzName": "puz237",
      "slug": "picturegame",
      "displayName": "PictureGame",
      "emoji": "🖼️",
      "order": 218,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "introReq": 5,
      "answerNormalization": "uppercase_letters_or_symbols_only",
      "answer": "ㄱㅋㆁㄷㅌㄴㅂㅍㅁㅈㅊㅅㆆㅎㅇㄹㅿㆍㅡㅣㅗㅏㅜㅓㅛㅑㅠㅕ",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 75.62103271484375,
        "y": 19.676971435546875
      },
      "rarity": "uncommon",
      "authors": [
        "Amon Ge"
      ]
    },
    {
      "puzName": "puz238",
      "slug": "codes",
      "displayName": "Codes",
      "emoji": "📇",
      "order": 219,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "introReq": 5,
      "answer": "SWITCH",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 75.32958984375,
        "y": 16.631317138671875
      },
      "rarity": "rare",
      "authors": [
        "Lewis Chen"
      ]
    },
    {
      "puzName": "puz239",
      "slug": "unicode_puzzle",
      "displayName": "Unicode Puzzle",
      "emoji": "⭕",
      "order": 220,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "answerNormalization": "nfkd",
      "answer": "O",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 76.64642333984375,
        "y": 27.484893798828125
      },
      "rarity": "common",
      "authors": [
        "Violet Xiao"
      ]
    },
    {
      "puzName": "puz240",
      "slug": "estados_em_ordem",
      "displayName": "Estados em ordem",
      "emoji": "🇧🇷",
      "order": 221,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "answer": "WEST",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 0.9765625,
        "y": 21.06781005859375
      },
      "rarity": "common",
      "authors": [
        "Kevin"
      ]
    },
    {
      "puzName": "puz241",
      "slug": "51072d5a",
      "displayName": "□□□□□□",
      "emoji": "⬜",
      "order": 222,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "answer": "ACCENT",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 73.85101318359375,
        "y": 26.4068603515625
      },
      "rarity": "common",
      "authors": [
        "Kevin"
      ]
    },
    {
      "puzName": "puz245",
      "slug": "clues_with_answers_v",
      "displayName": "Clues with Answers V",
      "emoji": "✌️",
      "order": 223,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "clues",
          "val": 4,
          "isUnlockOnly": true
        }
      ],
      "unlockOutEdges": [
        {
          "unlockGroupId": "clues"
        }
      ],
      "introReq": 5,
      "sequenceId": "clues",
      "constellationEdges": [
        "puz185",
        "puz196"
      ],
      "answer": "ERRATICALLY",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 21,
        "y": 30
      },
      "rarity": "rare",
      "authors": [
        "Violet Xiao"
      ]
    },
    {
      "puzName": "puz246",
      "slug": "generational_gifts",
      "displayName": "Generational Gifts",
      "emoji": "🎁",
      "order": 224,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "introReq": 5,
      "answer": "EBONY",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 98.7548828125,
        "y": 45.246124267578125
      },
      "rarity": "uncommon",
      "authors": [
        "Lewis Chen"
      ]
    },
    {
      "puzName": "puz247",
      "slug": "matchups",
      "displayName": "Matchups",
      "emoji": "🪨",
      "order": 225,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "introReq": 5,
      "answer": "CHART",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 44.09027099609375,
        "y": 43.502044677734375
      },
      "rarity": "uncommon",
      "authors": [
        "Violet Xiao"
      ]
    },
    {
      "puzName": "puz248",
      "slug": "2_2_metapuzzle",
      "displayName": "2/2 Metapuzzle",
      "emoji": "👉",
      "order": 226,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "three",
          "val": 4
        }
      ],
      "unlockOutEdges": [
        {
          "unlockGroupId": "three"
        }
      ],
      "introReq": 5,
      "sequenceId": "three",
      "answer": "USER",
      "isFullPuzzle": true,
      "isMeta": true,
      "mapPos": {
        "x": 97.1,
        "y": 25.2
      },
      "rarity": "common",
      "authors": [
        "Violet Xiao"
      ]
    },
    {
      "puzName": "puz250",
      "slug": "path",
      "displayName": "Path",
      "emoji": "📁",
      "order": 227,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [
        {
          "unlockGroupId": "wikipedia"
        }
      ],
      "sequenceId": "wikipedia",
      "constellationEdges": [
        "puz117"
      ],
      "answer": "AMOGUS",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 32,
        "y": 24
      },
      "rarity": "common",
      "authors": [
        "Charles Tam"
      ]
    },
    {
      "puzName": "puz251",
      "slug": "not_loss",
      "displayName": "Not Loss",
      "emoji": "🎲",
      "order": 228,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "introReq": 5,
      "answer": "ACTION",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 5.29327392578125,
        "y": 32.30133056640625
      },
      "rarity": "epic",
      "authors": [
        "Charles Tam"
      ]
    },
    {
      "puzName": "puz252",
      "slug": "needle_in_a_haystack",
      "displayName": "Needle in a Haystack",
      "emoji": "🪡",
      "order": 229,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "introReq": 5,
      "answer": "SENTENCE",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 0.76446533203125,
        "y": 34.149932861328125
      },
      "rarity": "common",
      "authors": [
        "Anderson Wang",
        "Leon Zhou"
      ]
    },
    {
      "puzName": "puz253",
      "slug": "a_day_at_the_park",
      "displayName": "A Day at the Park",
      "emoji": "⚾",
      "order": 230,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "introReq": 5,
      "answer": "DARLING",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 92.095947265625,
        "y": 24.19586181640625
      },
      "rarity": "uncommon",
      "authors": [
        "Leon Zhou"
      ]
    },
    {
      "puzName": "puz254",
      "slug": "self_reference",
      "displayName": "Self-reference",
      "emoji": "0️⃣",
      "order": 231,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "answer": "ZERO",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 66.4947509765625,
        "y": 16.8914794921875
      },
      "rarity": "common",
      "authors": [
        "Lewis Chen"
      ]
    },
    {
      "puzName": "puz255",
      "slug": "shakashakari",
      "displayName": "Shakashakari",
      "emoji": "💡",
      "order": 232,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "answer": "HANDBAG / SHINING",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 1.72271728515625,
        "y": 0.22430419921875
      },
      "rarity": "common",
      "authors": [
        "Lewis Chen"
      ]
    },
    {
      "puzName": "puz257",
      "slug": "which_are_missing",
      "displayName": "Which are missing?",
      "emoji": "🎰",
      "order": 233,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "answer": "ALMOND",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 0.067138671875,
        "y": 14.385223388671875
      },
      "rarity": "common",
      "authors": [
        "Josh Alman"
      ]
    },
    {
      "puzName": "puz259",
      "slug": "espresso",
      "displayName": "Espresso",
      "emoji": "☕",
      "order": 234,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [
        {
          "unlockGroupId": "espresso"
        }
      ],
      "sequenceId": "espresso",
      "constellationEdges": [
        "puz267"
      ],
      "answer": "EMPIRE",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 37,
        "y": 24
      },
      "rarity": "common",
      "authors": [
        "Maddie Dawson"
      ]
    },
    {
      "puzName": "puz260",
      "slug": "the_definition_of_insanity",
      "displayName": "The Definition of Insanity",
      "emoji": "🤪",
      "order": 235,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "introReq": 20,
      "answer": "ANSWER",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 58.1451416015625,
        "y": 20.999908447265625
      },
      "rarity": "common",
      "authors": [
        "Violet Xiao"
      ]
    },
    {
      "puzName": "puz264",
      "slug": "hopeless",
      "displayName": "Hopeless",
      "emoji": "🪹",
      "order": 236,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "pool",
          "val": 1,
          "isUnlockOnly": true
        }
      ],
      "unlockOutEdges": [],
      "introReq": 20,
      "answer": null,
      "isFullPuzzle": true,
      "mapPos": {
        "x": 64.51568603515625,
        "y": 47.786712646484375
      },
      "rarity": "common",
      "authors": [
        "Lewis Chen"
      ]
    },
    {
      "puzName": "puz265",
      "slug": "470904ae",
      "displayName": "",
      "emoji": "🪆",
      "order": 237,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "espresso",
          "val": 1,
          "isUnlockOnly": true
        }
      ],
      "unlockOutEdges": [
        {
          "unlockGroupId": "espresso"
        }
      ],
      "introReq": 5,
      "sequenceId": "espresso",
      "answer": "MYOBLAST",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 36.9,
        "y": 35.3
      },
      "rarity": "common",
      "authors": [
        "Lewis Chen"
      ]
    },
    {
      "puzName": "puz266",
      "slug": "nonfree_hint",
      "displayName": "Nonfree hint",
      "emoji": "🙋",
      "order": 238,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "hint"
        }
      ],
      "unlockOutEdges": [
        {
          "unlockGroupId": "hint"
        }
      ],
      "introReq": 20,
      "sequenceId": "hint",
      "answer": "GUIDANCE",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 2,
        "y": 27
      },
      "rarity": "common",
      "authors": [
        "Lewis Chen"
      ]
    },
    {
      "puzName": "puz267",
      "slug": "espresso_double_shot_version",
      "displayName": "Espresso (Double Shot Version)",
      "emoji": "🫘",
      "order": 239,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "espresso",
          "val": 1
        }
      ],
      "unlockOutEdges": [
        {
          "unlockGroupId": "espresso"
        }
      ],
      "introReq": 5,
      "sequenceId": "espresso",
      "constellationEdges": [
        "puz265"
      ],
      "answer": "SPICED",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 37.2,
        "y": 30
      },
      "rarity": "uncommon",
      "authors": [
        "Patrick Xia"
      ]
    },
    {
      "puzName": "puz268",
      "slug": "necklace",
      "displayName": "Necklace",
      "emoji": "🧋",
      "order": 240,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [
        {
          "unlockGroupId": "necklace"
        }
      ],
      "sequenceId": "necklace",
      "constellationEdges": [
        "puz272"
      ],
      "answer": "ORIENTAL PEARL TOWER",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 86,
        "y": 46
      },
      "rarity": "common",
      "authors": [
        "Lewis Chen"
      ]
    },
    {
      "puzName": "puz269",
      "slug": "numbers",
      "displayName": "Numbers",
      "emoji": "🧬",
      "order": 241,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [
        {
          "unlockGroupId": "titin"
        }
      ],
      "introReq": 5,
      "answer": "CONNECTING",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 94.38323974609375,
        "y": 37.7410888671875
      },
      "rarity": "uncommon",
      "authors": [
        "Lewis Chen"
      ]
    },
    {
      "puzName": "puz270",
      "slug": "the_puzzle_that_gives_back",
      "displayName": "The Puzzle That Gives Back",
      "emoji": "➗",
      "order": 242,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "introReq": 5,
      "answer": "TRIPLE SEC",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 51.75018310546875,
        "y": 48.645782470703125
      },
      "rarity": "uncommon",
      "authors": [
        "Violet Xiao"
      ]
    },
    {
      "puzName": "puz272",
      "slug": "necklace_ii",
      "displayName": "Necklace II",
      "emoji": "🦪",
      "order": 243,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "necklace",
          "val": 1
        }
      ],
      "unlockOutEdges": [
        {
          "unlockGroupId": "necklace"
        }
      ],
      "introReq": 5,
      "sequenceId": "necklace",
      "answer": "CRUISES",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 88,
        "y": 45
      },
      "rarity": "uncommon",
      "authors": [
        "Lewis Chen"
      ]
    },
    {
      "puzName": "puz273",
      "slug": "a_diagramless",
      "displayName": "A Diagramless",
      "emoji": "😱",
      "order": 244,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "apuzzle"
        }
      ],
      "unlockOutEdges": [
        {
          "unlockGroupId": "apuzzle"
        }
      ],
      "introReq": 5,
      "sequenceId": "apuzzle",
      "answer": "ATTIC",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 72,
        "y": 24
      },
      "rarity": "rare",
      "authors": [
        "Anderson Wang"
      ]
    },
    {
      "puzName": "puz274",
      "slug": "md5",
      "displayName": "md5...?.....?.?....?.......?....",
      "emoji": "#️⃣",
      "order": 245,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "answer": "DECAF",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 75.4425048828125,
        "y": 23.2879638671875
      },
      "rarity": "common",
      "authors": [
        "Lewis Chen"
      ]
    },
    {
      "puzName": "puz276",
      "slug": "forefinger",
      "displayName": "Forefinger",
      "emoji": "☝️",
      "order": 246,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "introReq": 5,
      "answer": "FOIBLE",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 91.28570556640625,
        "y": 7.55615234375
      },
      "rarity": "uncommon",
      "authors": [
        "Lewis Chen"
      ]
    },
    {
      "puzName": "puz278",
      "slug": "six_wives",
      "displayName": "Six Wives",
      "emoji": "👑",
      "order": 247,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "introReq": 5,
      "answer": "LOVERS",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 0.0091552734375,
        "y": 49.529266357421875
      },
      "rarity": "rare",
      "authors": [
        "Robert Tunney"
      ]
    },
    {
      "puzName": "puz279",
      "slug": "actually_honestly_genuinely",
      "displayName": "Actually, honestly, genuinely quite mean",
      "emoji": "😠",
      "order": 248,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "answer": "TINY",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 46.35772705078125,
        "y": 10.74371337890625
      },
      "rarity": "common",
      "authors": [
        "Lewis Chen"
      ]
    },
    {
      "puzName": "puz280",
      "slug": "name_the_country",
      "displayName": "Name the country",
      "emoji": "🇬🇪",
      "order": 249,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "name",
          "val": 1,
          "isUnlockOnly": true
        }
      ],
      "unlockOutEdges": [
        {
          "unlockGroupId": "name"
        }
      ],
      "sequenceId": "name",
      "constellationEdges": [
        "puz227"
      ],
      "answer": "GEORGIA",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 51,
        "y": 27
      },
      "rarity": "common",
      "authors": [
        "Amon Ge"
      ]
    },
    {
      "puzName": "puz281",
      "slug": "81394e8f",
      "displayName": "",
      "emoji": "🪜",
      "order": 250,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "introReq": 5,
      "answer": "PARSING / MODPACK",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 23.30474853515625,
        "y": 27.16064453125
      },
      "rarity": "common",
      "authors": [
        "CJ Quines"
      ]
    },
    {
      "puzName": "puz283",
      "slug": "maze",
      "displayName": "Maze",
      "emoji": "🌽",
      "order": 251,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "answer": "MINOTAUR",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 49.85809326171875,
        "y": 44.855499267578125
      },
      "rarity": "common",
      "authors": [
        "Lewis Chen"
      ]
    },
    {
      "puzName": "puz284",
      "slug": "the_most_ambitious_crossover",
      "displayName": "The Most Ambitious Crossover in the History of Cheryl’s Birthday Riddles",
      "emoji": "🎥",
      "order": 252,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "introReq": 5,
      "answer": "JASON VOORHEES / MULTIVERSUS / LEBRON JAMES",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 34.59930419921875,
        "y": 34.741973876953125
      },
      "rarity": "epic",
      "authors": [
        "Leon Zhou"
      ]
    },
    {
      "puzName": "puz285",
      "slug": "five_by_five_dbf69e59",
      "displayName": "Five-By-Five",
      "emoji": "5️⃣",
      "order": 253,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [
        {
          "unlockGroupId": "five"
        }
      ],
      "introReq": 5,
      "sequenceId": "five",
      "constellationEdges": [
        "puz286"
      ],
      "answer": "LANAI",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 62.5,
        "y": 32.6
      },
      "rarity": "common",
      "authors": [
        "Charles Tam"
      ]
    },
    {
      "puzName": "puz286",
      "slug": "five_by_five_d8751e2c",
      "displayName": "Five-By-Five",
      "emoji": "↗️",
      "order": 254,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "five",
          "val": 1
        }
      ],
      "unlockOutEdges": [
        {
          "unlockGroupId": "five"
        }
      ],
      "introReq": 5,
      "sequenceId": "five",
      "constellationEdges": [
        "puz288",
        "puz287"
      ],
      "answer": "PILED",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 64,
        "y": 29
      },
      "rarity": "common",
      "authors": [
        "Charles Tam"
      ]
    },
    {
      "puzName": "puz287",
      "slug": "five_by_five_6f517862",
      "displayName": "Five-By-Five",
      "emoji": "↖️",
      "order": 255,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "five",
          "val": 1
        }
      ],
      "unlockOutEdges": [
        {
          "unlockGroupId": "five"
        }
      ],
      "introReq": 5,
      "sequenceId": "five",
      "constellationEdges": [
        "puz289",
        "puz290"
      ],
      "answer": "WHERE",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 65.2,
        "y": 30
      },
      "rarity": "common",
      "authors": [
        "Charles Tam"
      ]
    },
    {
      "puzName": "puz288",
      "slug": "five_by_five_8af4468d",
      "displayName": "Five-By-Five",
      "emoji": "↙️",
      "order": 256,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "five",
          "val": 1
        }
      ],
      "unlockOutEdges": [
        {
          "unlockGroupId": "five"
        }
      ],
      "introReq": 5,
      "sequenceId": "five",
      "answer": "NESTS",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 63.5,
        "y": 23
      },
      "rarity": "common",
      "authors": [
        "Charles Tam"
      ]
    },
    {
      "puzName": "puz289",
      "slug": "five_by_five_4838924c",
      "displayName": "Five-By-Five",
      "emoji": "↘️",
      "order": 257,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "five",
          "val": 1
        }
      ],
      "unlockOutEdges": [
        {
          "unlockGroupId": "five"
        }
      ],
      "introReq": 5,
      "sequenceId": "five",
      "answer": "BOARD",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 65.8,
        "y": 25.6
      },
      "rarity": "common",
      "authors": [
        "Charles Tam"
      ]
    },
    {
      "puzName": "puz290",
      "slug": "five_by_five_7925bcb2",
      "displayName": "Five-By-Five",
      "emoji": "⬆️",
      "order": 258,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "five",
          "val": 3
        },
        {
          "unlockGroupId": "five",
          "val": 5,
          "isUnlockOnly": true
        }
      ],
      "unlockOutEdges": [
        {
          "unlockGroupId": "five"
        }
      ],
      "introReq": 5,
      "sequenceId": "five",
      "constellationEdges": [
        "puz291"
      ],
      "answer": "OVATE",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 66.1,
        "y": 35
      },
      "rarity": "uncommon",
      "authors": [
        "Charles Tam"
      ]
    },
    {
      "puzName": "puz291",
      "slug": "five_by_five_4a08351a",
      "displayName": "Five-By-Five",
      "emoji": "⬅️",
      "order": 259,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "five",
          "val": 3
        },
        {
          "unlockGroupId": "five",
          "val": 5,
          "isUnlockOnly": true
        }
      ],
      "unlockOutEdges": [
        {
          "unlockGroupId": "five"
        }
      ],
      "introReq": 5,
      "sequenceId": "five",
      "constellationEdges": [
        "puz292",
        "puz293"
      ],
      "answer": "FINED",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 65.2,
        "y": 37
      },
      "rarity": "uncommon",
      "authors": [
        "Charles Tam"
      ]
    },
    {
      "puzName": "puz292",
      "slug": "five_by_five_f590b294",
      "displayName": "Five-By-Five",
      "emoji": "➡️",
      "order": 260,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "five",
          "val": 3
        },
        {
          "unlockGroupId": "five",
          "val": 5,
          "isUnlockOnly": true
        }
      ],
      "unlockOutEdges": [
        {
          "unlockGroupId": "five"
        }
      ],
      "introReq": 5,
      "sequenceId": "five",
      "answer": "CANOE",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 66,
        "y": 42
      },
      "rarity": "uncommon",
      "authors": [
        "Charles Tam"
      ]
    },
    {
      "puzName": "puz293",
      "slug": "five_by_five_6941fb3e",
      "displayName": "Five-By-Five",
      "emoji": "⬇️",
      "order": 261,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "five",
          "val": 3
        },
        {
          "unlockGroupId": "five",
          "val": 5,
          "isUnlockOnly": true
        }
      ],
      "unlockOutEdges": [
        {
          "unlockGroupId": "five"
        }
      ],
      "introReq": 5,
      "sequenceId": "five",
      "constellationEdges": [
        "puz294"
      ],
      "answer": "SARGE",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 64.2,
        "y": 39
      },
      "rarity": "uncommon",
      "authors": [
        "Charles Tam"
      ]
    },
    {
      "puzName": "puz294",
      "slug": "three_by_three",
      "displayName": "Three-By-Three",
      "emoji": "9️⃣",
      "order": 262,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "five",
          "val": 6
        }
      ],
      "unlockOutEdges": [
        {
          "unlockGroupId": "five"
        }
      ],
      "solutionInEdges": [
        {
          "unlockGroupId": "five",
          "val": 10
        }
      ],
      "introReq": 5,
      "sequenceId": "five",
      "answer": "THE FINAL COUNTDOWN",
      "isFullPuzzle": true,
      "isMeta": true,
      "mapPos": {
        "x": 63.7,
        "y": 44
      },
      "rarity": "legendary",
      "authors": [
        "Charles Tam"
      ]
    },
    {
      "puzName": "puz295",
      "slug": "jigsaw",
      "displayName": "Jigsaw",
      "emoji": "🧩",
      "order": 263,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "introReq": 5,
      "answer": "GAPS",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 50.84686279296875,
        "y": 43.923187255859375
      },
      "rarity": "uncommon",
      "authors": [
        "Lewis Chen"
      ]
    },
    {
      "puzName": "puz296",
      "slug": "long_words",
      "displayName": "Long Words",
      "emoji": "➿",
      "order": 264,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "introReq": 5,
      "answer": "APPLICABLE",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 38.8641357421875,
        "y": 37.041473388671875
      },
      "rarity": "uncommon",
      "authors": [
        "Mark"
      ]
    },
    {
      "puzName": "puz297",
      "slug": "layers",
      "displayName": "Layers",
      "emoji": "🧊",
      "order": 265,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "answer": "ULURU",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 37.97760009765625,
        "y": 8.873748779296875
      },
      "rarity": "common",
      "authors": [
        "Kevin"
      ]
    },
    {
      "puzName": "puz298",
      "slug": "c_r_o_s_s_w_o_r_d",
      "displayName": "C/R/O/S/S/W/O/R/D",
      "emoji": "🏁",
      "order": 266,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "crossword",
          "val": 1,
          "isUnlockOnly": true
        }
      ],
      "unlockOutEdges": [
        {
          "unlockGroupId": "crossword"
        }
      ],
      "introReq": 5,
      "sequenceId": "crossword",
      "constellationEdges": [
        "puz302"
      ],
      "answer": "EDUCATION",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 34,
        "y": 13
      },
      "rarity": "common",
      "authors": [
        "Yannick Yao"
      ]
    },
    {
      "puzName": "puz301",
      "slug": "fight_or_flight",
      "displayName": "Fight or Flight",
      "emoji": "🥊",
      "order": 267,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "introReq": 5,
      "answer": "COOKIE",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 14.16015625,
        "y": 39.2974853515625
      },
      "rarity": "uncommon",
      "authors": [
        "Lewis Chen"
      ]
    },
    {
      "puzName": "puz302",
      "slug": "c_ro_ssw_or_d",
      "displayName": "C/RO/SSW/OR/D",
      "emoji": "💠",
      "order": 268,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "crossword",
          "val": 2,
          "isUnlockOnly": true
        }
      ],
      "unlockOutEdges": [
        {
          "unlockGroupId": "crossword"
        }
      ],
      "introReq": 5,
      "sequenceId": "crossword",
      "answer": "LAYPERSON",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 35.4,
        "y": 14
      },
      "rarity": "uncommon",
      "authors": [
        "Yannick Yao"
      ]
    },
    {
      "puzName": "puz304",
      "slug": "33acc994",
      "displayName": "",
      "emoji": "🎼",
      "order": 269,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "introReq": 5,
      "answer": "EGG",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 28.12042236328125,
        "y": 6.30035400390625
      },
      "rarity": "common",
      "authors": [
        "Lewis Chen"
      ]
    },
    {
      "puzName": "puz305",
      "slug": "when_you_know",
      "displayName": "When You Know...",
      "emoji": "🔤",
      "order": 270,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "introReq": 5,
      "answer": "DRONE",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 31.2164306640625,
        "y": 14.93682861328125
      },
      "rarity": "uncommon",
      "authors": [
        "Brian Chen"
      ]
    },
    {
      "puzName": "puz306",
      "slug": "44f0618d",
      "displayName": "",
      "emoji": "👄",
      "order": 271,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "introReq": 5,
      "answer": "TRUNK",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 49.822998046875,
        "y": 18.82171630859375
      },
      "rarity": "common",
      "authors": [
        "Brian Chen"
      ]
    },
    {
      "puzName": "puz308",
      "slug": "697618a9",
      "displayName": "",
      "emoji": "🐉",
      "order": 272,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "introReq": 5,
      "answer": "DRAGON",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 58.82720947265625,
        "y": 27.3101806640625
      },
      "rarity": "rare",
      "authors": [
        "Anderson Wang",
        "Leon Zhou"
      ]
    },
    {
      "puzName": "puz309",
      "slug": "whats_the_answer",
      "displayName": "What’s the answer?",
      "emoji": "🔼",
      "order": 273,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [
        {
          "unlockGroupId": "whats"
        }
      ],
      "sequenceId": "whats",
      "constellationEdges": [
        "puz310"
      ],
      "answer": "ANGLE",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 25.5,
        "y": 39
      },
      "rarity": "common",
      "authors": [
        "Sam Kim"
      ]
    },
    {
      "puzName": "puz310",
      "slug": "whats_the_answer_iii",
      "displayName": "What’s the answer? III",
      "emoji": "🪿",
      "order": 274,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "whats",
          "val": 2
        }
      ],
      "unlockOutEdges": [
        {
          "unlockGroupId": "whats"
        }
      ],
      "introReq": 5,
      "sequenceId": "whats",
      "constellationEdges": [
        "puz311"
      ],
      "answer": "FABULOUS",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 26.5,
        "y": 41
      },
      "rarity": "common",
      "authors": [
        "Lewis Chen"
      ]
    },
    {
      "puzName": "puz311",
      "slug": "whats_the_answer_ii",
      "displayName": "What’s the answer? II",
      "emoji": "☎️",
      "order": 275,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "whats",
          "val": 1
        }
      ],
      "unlockOutEdges": [
        {
          "unlockGroupId": "whats"
        }
      ],
      "introReq": 5,
      "sequenceId": "whats",
      "answer": "MOCKERY",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 26,
        "y": 45
      },
      "rarity": "common",
      "authors": [
        "Lewis Chen"
      ]
    },
    {
      "puzName": "puz312",
      "slug": "use_enumerations_converted_alpha",
      "displayName": "USE ENUMERATIONS CONVERTED ALPHABETICALLY FOR SOLUTION",
      "emoji": "🖐️",
      "order": 276,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "title",
          "val": 2
        }
      ],
      "unlockOutEdges": [
        {
          "unlockGroupId": "title"
        }
      ],
      "introReq": 5,
      "sequenceId": "title",
      "constellationEdges": [
        "puz319"
      ],
      "answer": "CLINCH",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 7,
        "y": 33
      },
      "rarity": "common",
      "authors": [
        "Brian Chen"
      ]
    },
    {
      "puzName": "puz313",
      "slug": "the_hope_pool",
      "displayName": "The Hope Pool",
      "emoji": "🏊",
      "order": 277,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [
        {
          "unlockGroupId": "pool"
        }
      ],
      "introReq": 20,
      "answer": null,
      "isFullPuzzle": true,
      "mapPos": {
        "x": 76.49078369140625,
        "y": 31.137847900390625
      },
      "rarity": "common",
      "authors": [
        "Mark"
      ]
    },
    {
      "puzName": "puz315",
      "slug": "its_so_sad",
      "displayName": "It’s so sad...",
      "emoji": "🗿",
      "order": 278,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "answer": "FENDS",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 27.93121337890625,
        "y": 13.74969482421875
      },
      "rarity": "common",
      "authors": [
        "Sam Kim"
      ]
    },
    {
      "puzName": "puz316",
      "slug": "its_about_time",
      "displayName": "It’s About Time",
      "emoji": "🦕",
      "order": 279,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "answer": "ABBOT",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 58.746337890625,
        "y": 22.949981689453125
      },
      "rarity": "common",
      "authors": [
        "Lewis Chen"
      ]
    },
    {
      "puzName": "puz317",
      "slug": "first_letters_of_words",
      "displayName": "FIRST LETTERS OF WORDS",
      "emoji": "🌓",
      "order": 280,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [
        {
          "unlockGroupId": "title"
        }
      ],
      "introReq": 5,
      "sequenceId": "title",
      "constellationEdges": [
        "puz318"
      ],
      "answer": "FLOW",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 3.5,
        "y": 45.5
      },
      "rarity": "common",
      "authors": [
        "Brian Chen"
      ]
    },
    {
      "puzName": "puz318",
      "slug": "great_now_take_the_last_letters",
      "displayName": "GREAT NOW TAKE THE LAST LETTERS",
      "emoji": "🌗",
      "order": 281,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "title",
          "val": 1
        }
      ],
      "unlockOutEdges": [
        {
          "unlockGroupId": "title"
        }
      ],
      "introReq": 5,
      "sequenceId": "title",
      "constellationEdges": [
        "puz7",
        "puz9"
      ],
      "answer": "TWEETS",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 4.5,
        "y": 44
      },
      "rarity": "common",
      "authors": [
        "Mark"
      ]
    },
    {
      "puzName": "puz319",
      "slug": "quiz_time_this_jacked_up_title",
      "displayName": "QUIZ TIME! THIS JACKED UP TITLE ISN’T HAVING IT ALL BECAUSE WE ARE MISSING WHAT?",
      "emoji": "🦊",
      "order": 282,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "title",
          "val": 2
        }
      ],
      "unlockOutEdges": [
        {
          "unlockGroupId": "title"
        }
      ],
      "introReq": 5,
      "sequenceId": "title",
      "answer": "FOXY",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 7.4,
        "y": 29
      },
      "rarity": "common",
      "authors": [
        "Violet Xiao"
      ]
    },
    {
      "puzName": "puz320",
      "slug": "a_turn_of_phrase",
      "displayName": "A Turn of Phrase",
      "emoji": "🐐",
      "order": 283,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "introReq": 5,
      "answer": "TOIL",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 91.68548583984375,
        "y": 4.3487548828125
      },
      "rarity": "rare",
      "authors": [
        "Anderson Wang"
      ]
    },
    {
      "puzName": "puz321",
      "slug": "sixteen_words",
      "displayName": "Sixteen Words",
      "emoji": "🥇",
      "order": 284,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "introReq": 5,
      "answer": "GOLD",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 59.83734130859375,
        "y": 11.16790771484375
      },
      "rarity": "uncommon",
      "authors": [
        "Anderson Wang"
      ]
    },
    {
      "puzName": "puz322",
      "slug": "riddling",
      "displayName": "riddling",
      "emoji": "🤔",
      "order": 285,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "introReq": 20,
      "answer": "ORAN BERRY",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 81.79168701171875,
        "y": 33.368682861328125
      },
      "rarity": "common",
      "authors": [
        "Amon Ge"
      ]
    },
    {
      "puzName": "puz324",
      "slug": "find_the_answer_iii",
      "displayName": "Find the Answer III",
      "emoji": "🕒",
      "order": 286,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "find",
          "val": 1
        }
      ],
      "unlockOutEdges": [
        {
          "unlockGroupId": "find"
        }
      ],
      "introReq": 20,
      "sequenceId": "find",
      "constellationEdges": [
        "puz325"
      ],
      "answer": "PRESENCE",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 51.9,
        "y": 10.4
      },
      "rarity": "common",
      "authors": [
        "Max Murin"
      ]
    },
    {
      "puzName": "puz325",
      "slug": "find_the_answer_iv",
      "displayName": "Find the Answer IV",
      "emoji": "🕓",
      "order": 287,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "find",
          "val": 1
        }
      ],
      "unlockOutEdges": [
        {
          "unlockGroupId": "find"
        }
      ],
      "introReq": 20,
      "sequenceId": "find",
      "constellationEdges": [
        "puz330"
      ],
      "answer": "FAIR PLAY",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 53.4,
        "y": 11
      },
      "rarity": "common",
      "authors": [
        "Max Murin"
      ]
    },
    {
      "puzName": "puz326",
      "slug": "find_the_answer_vi",
      "displayName": "Find the Answer VI",
      "emoji": "🕕",
      "order": 288,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "find",
          "val": 1
        }
      ],
      "unlockOutEdges": [
        {
          "unlockGroupId": "find"
        }
      ],
      "introReq": 20,
      "sequenceId": "find",
      "constellationEdges": [
        "puz327"
      ],
      "answer": "LAST WORD",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 55.2,
        "y": 10
      },
      "rarity": "common",
      "authors": [
        "Max Murin"
      ]
    },
    {
      "puzName": "puz327",
      "slug": "find_the_answer_vii",
      "displayName": "Find the Answer VII",
      "emoji": "🕖",
      "order": 289,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "find",
          "val": 1
        }
      ],
      "unlockOutEdges": [
        {
          "unlockGroupId": "find"
        }
      ],
      "introReq": 20,
      "sequenceId": "find",
      "constellationEdges": [
        "puz328"
      ],
      "answer": "REALTIME",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 55.6,
        "y": 7
      },
      "rarity": "common",
      "authors": [
        "Max Murin"
      ]
    },
    {
      "puzName": "puz328",
      "slug": "find_the_answer_viii",
      "displayName": "Find the Answer VIII",
      "emoji": "🕗",
      "order": 290,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "find",
          "val": 4
        }
      ],
      "unlockOutEdges": [
        {
          "unlockGroupId": "find"
        }
      ],
      "solutionInEdges": [
        {
          "unlockGroupId": "find",
          "val": 8
        }
      ],
      "introReq": 20,
      "sequenceId": "find",
      "answer": "OVERCOME",
      "isFullPuzzle": true,
      "isMeta": true,
      "mapPos": {
        "x": 55.3,
        "y": 5
      },
      "rarity": "common",
      "authors": [
        "Max Murin"
      ]
    },
    {
      "puzName": "puz329",
      "slug": "well_well_well",
      "displayName": "Well, Well, Well",
      "emoji": "🪣",
      "order": 291,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "intro"
        }
      ],
      "unlockOutEdges": [],
      "introReq": 5,
      "answer": "ARMPITS",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 13.714599609375,
        "y": 30.391693115234375
      },
      "rarity": "uncommon",
      "authors": [
        "Dai Yang"
      ]
    },
    {
      "puzName": "puz330",
      "slug": "find_the_answer_v",
      "displayName": "Find the Answer V",
      "emoji": "🕔",
      "order": 292,
      "round": "main",
      "unlockInEdges": [
        {
          "unlockGroupId": "find",
          "val": 1
        }
      ],
      "unlockOutEdges": [
        {
          "unlockGroupId": "find"
        }
      ],
      "introReq": 20,
      "sequenceId": "find",
      "constellationEdges": [
        "puz326"
      ],
      "answer": "SNATCHED",
      "isFullPuzzle": true,
      "mapPos": {
        "x": 54.4,
        "y": 10.9
      },
      "rarity": "common",
      "authors": [
        "Max Murin"
      ]
    }
  ]
}`,io=`{
  "puzzles": {
    "blocks": {
      "hash": "876e5c697c04c911ffd1281debdfa787d5fe98d460e28a92add287daa25cecd9",
      "content": "<Image name=\\"cutscenes/kid\\" unscoped center />\\n\\n<BlocksPuzzle />"
    },
    "branch": {
      "hash": "64195a1de7c5816268066540ca4efcad6a5c87b50c0c3ba0e223e88e4d55da3f",
      "content": "<Image name=\\"cutscenes/big_branch\\" unscoped center />\\n\\n<Image fullWidth />\\n\\na a a an antonym bought breaker C confectionery copy electronically for forte from full group in informally is make man means military nursery Odyssean of of or partners published sent short signature something sorrow store such sweet teach temptresses then to trounce which Word written\\n\\nUse this to check any of your answers:\\n<BranchChecker />"
    },
    "puz1": {
      "hash": "a6bd08684c79f4fc24cf6f40267e0dad519266831cb4886e54d6f1021e3b35a9",
      "content": "A character seen in the opening sequence of The Brady Bunch (3)  \\nA child who visited Willy Wonka’s factory (5)  \\nA halogen (8)  \\nA highest mountain on a continent (8)  \\nA Leeward Antilles island owned by the Netherlands (4)  \\nA mineral in the Mohs scale (4)  \\nA nation in the alliance that suppressed the Boxer Rebellion (10)  \\nA type of aurora associated with a hemisphere (6)  \\nA US state touching a monument at 36.99898°N 109.04517°W (7)"
    },
    "puz2": {
      "hash": "a11a2ae0c2c1ad2eb266fcc9f7538bdfa32f226f237fc242ce355bece657bfe6",
      "content": "<Image pad width=\\"15em\\" alt=\\"Four zigzag symbols arranged vertically, colored brown, red, orange, and green.\\" />"
    },
    "puz3": {
      "hash": "4e50b3cc5b2e040da625968b68cc7f3f3b97a835a12098b3a38843ac30506828",
      "content": "<Flavor>what might you use to unlock a tomb?</Flavor>\\n\\n<Blanks content={\`_ _ _ _ _  _ _ _  →  _\`} />"
    },
    "puz4": {
      "hash": "9fe3c5a5cff74a9a9e1feaf5a1de94edcb2b11c0dff157c42cea16d65e9977bd",
      "content": "<Blanks content={\`[_] _ _ _ _ _ [_] _  _ _ _ _ _ _ _\`} lessLowerMargin />\\nspeech of the officials\\n\\n\\n<Blanks content={\`[_] _ _ _ _ [_] _\`} lessLowerMargin />\\nof the isle of the hyrax\\n\\n\\n<Blanks content={\`_ [_] [_] _ _\`} lessLowerMargin />\\nof the land of the river\\n\\n\\n<Blanks content={\`_ _ _ _ _ [_] _ _ _ _\`} lessLowerMargin />\\nof the port of the Callaeci people"
    },
    "puz5": {
      "hash": "e3cce5c973c26293492841f5e31e798cff73564b8cb262947423e0afd6f73534",
      "content": "- oóoò xo\\n- oxôooo o’\\n- oooox! oo ooo ooooo\\n- oo,ooo ooooxoo ooooo ooo ooo\\n- oo. ooooooooxoo oo: ooo o ooooooo oo oooo oooooooo ooo oooo ooo oooo\\n- ooo oox ooooo ooo? oo’o oo, oooooooo.\\n- ooox!... o ooo oo ooooo"
    },
    "puz6": {
      "hash": "65ed1ea230beaf3c6665c42f8e62bcb80445b51230bb6b1026f79f37a43b6ada",
      "content": "<Image pad alt=\\"Three crosses, each with arrowheads on each tip, colored red, green, and blue from left to right. A line joins the top arm of the green cross with the left arm of the red cross, and is labeled W. A line joins the bottom arm of the green cross with the bottom arm of the red cross. A line joins the right arm of the green cross with the bottom arm of the blue cross. The top of the red cross is labeled 2. The right of the red cross is labeled 4. The left of the green cross is labeled 5. The top of the blue cross is labeled 1. The left of the blue cross is labeled 6. The right of the blue cross is labeled 3.\\" />"
    },
    "puz8": {
      "hash": "b6577efdf7e6276de3ac8130177da95f08511988cda1bc51f5c39181fd4552a8",
      "content": "Ix xhx Amxxicax gamx xhow Whxxx of Foxxuxx, xvxxy xpixodx xxdx wixh a boxux xouxd whxxx xhx coxxxxxaxx ix givxx axx copixx of X, X, X, X, X, axd X. Whax if wx xook xhoxx xxxxxxx away ixxxxad?\\n\\nI’m xhixkixg of a woxd. Xhx fixxx paxx of xhx woxd ix paxx of ax Officx. Xhx xxcoxd paxx of xhx woxd ix a yxaxxy faxx. Xhx axxwxx xo xhix puzzxx ix: XXCXXXXXX."
    },
    "puz10": {
      "hash": "c1a65662e9523f5fa736fe5121e63c00bbc426b999072e63baa53474d5df2068",
      "content": "<PuzzleGrid\\n\\ttext=\\"5x7\\"\\n\\toptionsOverride={{\\n\\t\\t\\"data-fill-classes\\":\\"white wordle-gray wordle-yellow wordle-green\\",\\n\\t\\t\\"data-fills\\":[\\"31122\\",\\"13122\\",\\"21112\\",\\"11123\\",\\"11123\\",\\"11123\\",\\"33333\\"],\\n\\t\\t\\"data-left-clues\\": \\"A|B|C|D|E|F|\\",\\n\\t}}\\n/>\\n\\nA < B < C < D < E < F"
    },
    "puz12": {
      "hash": "b0daf00557ade1f18d23e265a42d7dc61ce68060188ebfbf6453939790884987",
      "content": "<Image inverted pad fullWidth alt={\\"A triangle labeled ABC, with sides labeled AB = 19, AC = 26, and BC = sqrt(291). A point X is drawn inside. Underneath the triangle are the words “Minimize AX+BX+CX.”\\"} />"
    },
    "puz13": {
      "hash": "28cb1acc7c54fe3e96b1deaa6cc2f3f660360f5f2b0b961aea48aaeade061d1f",
      "content": "<Blanks content={\`\\n_ _ _ _  1 _ _  _ _\\n_ _ _  _ 2 _  _ _ _ _\\n_ 3 _  _ _ _ _ _ _\\n_ _ _ _ _ 4  _ _ _\\n_ _ _ _  _ _ 5  _ _ _\\n_ _ _  _ _ _ _ 6 _ _\\n_ 7 _ _  _  _ _ _\\n_ _ 8 _  _ _ _\\n\`} />"
    },
    "puz14": {
      "hash": "7ec7fe0be14a055cfd47d653b0b986e141264dd881baf97681ee358878aa1d3f",
      "content": "Note: All numbers in this list are **positive** integers.\\n\\n- The mean of this list.\\n- The number of other numbers in this list that are equal to this number.\\n- The first digit of the sum of the numbers in this list.\\n- The number of distinct numbers in this list that appear at least twice.\\n- The square root of this number.\\n- The number of numbers in this list.\\n- The number of numbers in this list that are prime."
    },
    "puz15": {
      "hash": "569048ec9793b093163fcf4337d5804fdb460a5481066e4b4358f427033734f9",
      "content": "Size that lumber is commonly sold in  \\nRadio acknowledgement  \\nLucky time to make a wish, supposedly  \\nThe level in Super Mario Bros. that is the first to feature Bullet Bills  \\nThe last date that Earth Day occurred on, written in the admittedly unusual YYYY/MM/DD format"
    },
    "puz17": {
      "hash": "52de75504a390e85d3788db2ca792a24bb9e1993e13c0c24c57c43d3fde7b979",
      "content": "<Blanks content={\`A _ _ _ _ _ ?\`} />\\n<Blanks content={\`B _ _ _ _ ?\`} />\\n<Blanks content={\`C _ _ _ _ _ ?\`} />  \\n<br />\\n<Blanks content={\`D _ _ _ ?\`} />\\n<br />\\nA: Muse of lyric poetry  \\nB: Per, every  \\nC: Depends (on)  \\nD: ???"
    },
    "puz20": {
      "hash": "c60e6b47332770fb9d64d934431a3203d3c26413fe496cd6debf81f4abcd11f5",
      "content": "<Image fullWidth />"
    },
    "puz21": {
      "hash": "104a9b4b54288c432ec2e89c714ab5b8b91a2e03c6c9f0e4f15405c27526ebe8",
      "content": "<Flavor>That’s what you get when JFK SHAGS somewhere else.</Flavor>"
    },
    "puz23": {
      "hash": "debff01a640b9657f1f59a45dd0614f6f6f939dc2ec53eb7970ebf8d88fec695",
      "content": "<Image alt=\\"Nine circles arranged horizontally, colored green, yellow, blue, yellow, orange, dark gray, light gray, blue and orange.\\" />"
    },
    "puz24": {
      "hash": "4eeb7f8d2f9cf5bad5f35dc4cabf3f1ee4ca4bfe654589e99d96b76a8308c034",
      "content": "<Image inverted pad />"
    },
    "puz25": {
      "hash": "871a41461664322c95604473a1bb8c430fb8d1bd3be1a52048e99aeeeed0fe78",
      "content": "<Image fullWidth pad alt=\\"Three thin vertical rectangles on top of a wide gray horizontal rectangle. On top of the first thin rectangle are three white horizontal rectangles, directly on top of each other, increasing in width from top to bottom, labeled 3, 8, and 10, from top to bottom. The tops of the thin vertical rectangles are labeled +2, +1, and +10, from left to right.\\" />"
    },
    "puz26": {
      "hash": "0e8906eb89e8cd309b625f035ba1eac11c7fd68e7a3f1b059fdc99eb7dc31ca6",
      "content": "\\\\[It’s equal to 80% * (itself squared), It’s equal to 80% * (itself squared)\\\\]  \\n\\\\[The Lion King _____, The Lion King _____\\\\]  \\n\\\\[Python _____ (major version), Python _____ (major version)\\\\]  \\n\\\\[World War _____, World War _____\\\\]  \\n\\n<Image />"
    },
    "puz27": {
      "hash": "8f87b966c45adbc679e22ee403f9430899fa1f7fae190a6be7e4eaf22b6d91a7",
      "content": "<Image pad alt=\\"A hyphen, a red I, six hyphens, the digits 6535, then three periods. The red I is on top of a period. On top of the hyphens are red arrows pointing left. From left to right, the arrows span one hyphen, two hyphens, two hyphens, one hyphen, one hyphen.\\" />"
    },
    "puz28": {
      "hash": "4d92e36715e3a6feaff8b074a7a98339cbb92b44e410ca16fccd40fcad524b62",
      "content": "<Image fullWidth pad alt=\\"Three thin vertical rectangles on top of a wide gray horizontal rectangle. On top of the first thin rectangle are three white horizontal rectangles, directly on top of each other, increasing in width from top to bottom, labeled V, CC, and CVC, from top to bottom.\\" />"
    },
    "puz30": {
      "hash": "449cd1fc7d00dec72fa0a8dee1f43973bcd4559e8568dee470fe3b9b63e56e91",
      "content": "Draw the shortest path from START to END.\\n\\n<Image fullWidth />"
    },
    "puz31": {
      "hash": "a6c0b097f9892a71e8104b21e8386e77d62663fc0ffe8d16351c782a7ec04382",
      "content": "<PuzzleGrid\\n\\ttext={\`\\n..........\\n...#....#.\\n.......#..\\n...#......\\n...#.##...\\n..........\\n..........\\n..........\\n..........\\n\\t\`.trim().split(\\"\\\\n\\").join(\\"|\\")}\\n\\toptionsOverride={{\\n\\t\\t\\"data-fill-classes\\":\\"transparent white\\",\\n\\t\\t\\"data-fills\\": \`\\n...1......\\n...1....1.\\n...1...1..\\n...1..1...\\n1111111111\\n...11.....\\n...1......\\n..11......\\n.1........\\n\\t\\t\`.trim().split(\\"\\\\n\\").join(\\"|\\"),\\n\\t}}\\n/>"
    },
    "puz32": {
      "hash": "219c9e7fff3b4106486fb1871dfaadf33fa173832667ccf2e0b40f907151882a",
      "content": "<Image name=\\"1\\" /><Image name=\\"2\\" />"
    },
    "puz33": {
      "hash": "f6f7c5cc8bf41c99a70c2369fd45dccf82cdcca560238cd5166c632ef252d626",
      "content": "Oregon - 136 electoral votes, 7 states - Florida"
    },
    "puz34": {
      "hash": "fb267d3962e28f59b2d4c63e7f02e50b550fd458b1630efa21ebe8c6f3d88e8a",
      "content": "<Image />"
    },
    "puz36": {
      "hash": "686b9d4a2e3f03883a90d029b9d85315a3c6bc3875533b1fd07150d7b38109ad",
      "content": "<Image maxWidth=\\"30em\\" alt=\\"A grid with vertical and horizontal axes. Seven points are on the grid, labeled P1 through P7. Approximate coordinates for the points are: P1 (0.7, 0.3), P2 (0.7, −0.3), P3 (−0.7, −0.3), P4 (−0.7, 1.7), P5 (−1.7, 0.7), P6 (0, 0), and P7 (−0.3, −0.7). There are four dotted line segments capped by small circles, with approximate coordinates (0, 1) to (0, −1), (−1, 0) to (1, 0), (−0.7, 0.7) to (0.7, −0.7), and (−0.7, −0.7) to (0.7, 0.7).\\" />"
    },
    "puz37": {
      "hash": "a33f8d0b1beb5d93a22bd938ad34d0d84962392a5426a082635c0db76d092e64",
      "content": "<Image fullWidth/>"
    },
    "puz38": {
      "hash": "e9449138fb76a4e4749ff5abcf2467a01dc33208698f6b5867bbb4cad61913c4",
      "content": "<Image alt=\\"A white square. On the top-left are two boxes with the words Parlophone and EMI. In the center are red outlined characters. The first is a capital L rotated 90 degrees clockwise. The second is a capital E. The third is a capital L. The fourth is a capital E rotated 90 degrees counterclockwise. The fifth is an exclamation point.\\" />"
    },
    "puz39": {
      "hash": "f3c3406cc40eef67733e31021def197273acba721cc7750ef7494e42f79170d6",
      "content": "<pre style={{\\"fontSize\\": \\"0.5em\\"}}>\\n{\\",,,-,|,#,,,|,,-,,,,,,,,::,,|%@*%*@@|@@@@@@@|,-:,,,,,,/,\\\\\\\\,,,-,,,-//++=====*+@@|,|@%+@@@@@@||%@|@,,,.\\\\n,,,,;,,,,,,|,,,,,,,,,,,,,,,|#@-#-@@|@%#@@@@|,,,,,,//,,,,,\\\\\\\\\\\\\\\\,,,,,|--|%#-*##*@@|,|||-@@@@@-@||,|,;;;;\\\\n.,,,;|,,,,,|,,,,,,?????,,,,|@@@@@@@|@#@@@@@|,,,-,+----------+,;,|:,|@++-@+@+@|,=\\\\\\\\\\\\\\\\*@@:#@@@#|,|,;=,,\\\\n.,,,;,,,,,=|,,-,?????????,,|-------+-------|,,,,,|#=-#@==+-*|,;,|-,+\\\\\\\\#=#%%##*|,,,||@@=*+@@%|%|,;,,,\\\\n.,,,;|@,+,,,,,,???,,,,???,,|#@@@@@@|@=@@@@@|,,-,,|@@@@@%%=-%|,;,|.,-|@@@@+=+%||,,,|@##@@@@#|-,+;,,,\\\\n,,,,@+%,,,,,,,,??,,,,,???,,|=@#=:@@|@=-+@@@|,,,,,|++=#++:++%|,,,|:,,|*@%@@@@@@|,,,,,,:----=|*==;,,,\\\\n,,-,+|%%,,,,|,,,,,,,,,???,,|@@+=:@@|@@**@@@|,,,,,+----------+,,*|-,,,,=,,,,,,,,,,,,,,,,,,,-,,==;,,.\\\\n,=,,+|\\\\\\\\%,,+#=,,,,,??????,,,|@------+-------|,,,-,,,,,,,,,,,;,,;,|:,,-,,,,,|===|:,|=======\\\\\\\\-,,|-;,,,\\\\n.,,,++%@#,:=+,,,,,????,,,,,|@@*=:@@|@@+#@@@|,,.,,,...,,,;,,,,,,,|.,,,,,,,.|||@||,|===--=+|-,,|-;,,.\\\\n.,,,+|%%%\\\\\\\\-|,,,,,,,,,,,,,,,|@@===@@|@@#@@@@|,=.,,--------------@|-,,,,,,,,\\\\\\\\++=:\\\\\\\\,\\\\\\\\+:=--=#|=,,|,;,,.\\\\n.,,,+|%#%,=:,,,,,,???,,,,,,|@@@@@@@|@@@@@%@|=+@@,,%+#,,,,,=+@@==#####...,,,+.==\\\\\\\\,,\\\\\\\\----+#\\\\\\\\*,,|,;,,.\\\\n,=,,+,%=*\\\\\\\\,:,,,,,,???,,,,,,|---------------|+-*%,,**|#@#######.=#*-#######......,,,,=::=%\\\\\\\\,,,,*;,,.\\\\n,#;,,+%=+%\\\\\\\\|,,,;,;,;;;;,,,,|;;;;;;;;;;;;;;;=###,,.=||#\\\\\\\\;;--;-;-;;;**---:\\\\\\\\#,,,,,,,,,,,,,,,,,#%,,;;;;\\\\n;;;*,+\\\\\\\\+*+=-*:,/#@\\\\\\\\,#@@@\\\\\\\\+,,,,,,,,,,,,,|%=%@,*|,#%@||#=;;;;;;;;\\\\\\\\;::*:::*:\\\\\\\\#=-======,,,,,,=-=*#,,,,,\\\\n.-,,,++|%+*\\\\\\\\|+,|##|;|@@%|=,,,,,,,,,,,,,|==##@=|,,@%@|#=;\\\\\\\\;;;;;;##::::::==#===#####========~~~~,,@@@\\\\n,:=,,++|+%%%,++*|#/;\\\\\\\\@@/******\\\\\\\\-=,,,,,,|===---|,,,@@|#-;;;\\\\\\\\;--[##*=~~:######################*[,@,%,\\\\n.-=,,,+,-%%/,+\\\\\\\\\\\\\\\\@*;*******\\\\\\\\*;;;;*-,,,,,|+==---\\\\\\\\#,,*%|#;;;;;%+%%#######:############:#:######~[,@,=,\\\\n.=,,,,,|=%/,,+#\\\\\\\\***********\\\\\\\\;***-\\\\\\\\,,,,,[#-@%@%#@\\\\\\\\+|+|%;;;;;:@@@-=##-###+####~###############:[#@%@,\\\\n.-,,,,,,#/,,,,,[%\\\\\\\\*###########@[**',,,,[\\\\\\\\+@@#@*+|||,|@;;;-@@@@|:@###:#:###~##-#####:--#:##:##[+,,,,\\\\n.,,,#=+,,,,,,+,||=\\\\\\\\###########||\`,,,,,,[+\\\\\\\\*@[-+/|||,|@;;-@@@@%|:#####:#####-######:###~####:#[=,,,;\\\\n.=:+@/#/,,,,,,,||#[[==+*,,,,[[|%,,,,,,,[-\\\\\\\\-\\\\\\\\[/-/||-,|@;=@@@@@@@-=###.#:#=#~##:#-=:#####:#####[=#,,,\\\\n.+/%@@/|#=#+++=[|=+[[======+[[|========+-===[=-=||===#@@@@@@@@[-###=:~#:~####=####-#####:#:##[=;;;;\\\\n.|#/%/#|........|=-||+......[[|+=:--+=-[...\\\\\\\\[+.=|-..\\\\\\\\++=@@@@@%[####:##:###########-##########[-;,,,\\\\n.|/%#@/|#+....++|.-||.......=[|#+..*+.+..:..|=.......\\\\\\\\+=-+@@@#[-#####~###~##-~##=-:#########:[-;,,,\\\\n.|////#|*.......|..||.-....=......-.=+.=.-.....=.,....\\\\\\\\*+=@@@@[###########:~###::###:#:######[:;;,,\\\\n.|#/%##|***=+......||.............+..:+..............,,\\\\\\\\+:-+@@[#+##:##:##:###-~#~::~##-:#####[-@;,,\\\\n.|/%/,/|--:==..............=+--,+.....-.....+.....+....\\\\\\\\\\\\\\\\\\\\\\\\=-:@[########::#::~~=###.#####::#~~[%,;@,\\\\n.|#/,=/|+###+##*=@..=.....=.+,.+..........-.+........,,,+\\\\\\\\\\\\\\\\##-[:###:#####=#~#~#####-##:#####~[@,;,,\\\\n.|//+/@|@@%@#@#-/|..+...-........::.....=.............,-,,\\\\\\\\\\\\\\\\#=[#######=~+####+-#~~~#~#########%,;,,\\\\n.|-/*#@@+#@@@@%/%|.........::............=............,,,,,\\\\\\\\\\\\\\\\#[####################+#=+++++:+[%+;,,\\\\n.||========##||@/|--.=....::.......*.*-%*.......-=.....,...,\\\\\\\\@[:=======+#=##-.==.=========@#+[*,;,,\\\\n.||=#%.....--||//|+:.......,...%..##,...=.#-#......:...=.,,,,-[[[|...........@.........#:..#[[=,;;;\\\\n.||======-,..||/-|=.........,...,.,.........,.-::::::+.+##.,,,[[[-:..:..%#....::@...%.@*:.@#[[-..*;\\\\n.||+.....--==||-/|.......,....=.+.=,.....,.,..=:.+.#%=.......:[[[=*+@:::...++@.:...:-=-=:::.[[..-:,\\\\n.||=*#.=.+.,.||.*|*..........,,=-,,.....,,,......%...........+#%-%..,,::........:..:-...-.:::-*....\\\\n.==........,.||..+...........=:.=..... ......................#....,....::#..+.::::......::.:::-+...\\\\n.--........+.||-..--..=...--..........,....-..,....,................+..+::-.....==:.--:.-.-:-:::...\\\\n.:........%*.+=-...................=+.=..@,...,.,-.-...=...%.....................--....-.=..::::.=.\\\\n.---...+=..-.--.=-.................,.........%,-*=.........%..#-,....=,==+==:==:-:....-..::.::.....\\\\n..........................,,............................,....,,,,..................................\\"}\\n</pre>"
    },
    "puz40": {
      "hash": "008540fb5264602e34008b9c80691be73857d1f38cb6c634a8f9f1b6453644f7",
      "content": "<PuzzleGrid\\n\\ttableClassName=\\"puzzle-grid-small\\"\\n\\ttext=\\"26x4\\"\\n\\toptionsOverride={{\\n\\t\\t\\"data-fill-classes\\":\\"white black\\",\\n\\t\\t\\"data-fills\\": \`\\n....1..1...........1......\\n1...1........1...11...1...\\n........1.........1.......\\n......111..1.......1......\\n\\t\\t\`.trim().split(\\"\\\\n\\").join(\\"|\\"),\\n\\t}}\\n/>"
    },
    "puz41": {
      "hash": "c79483f971bdfe714fd4490d3ac307910b70f8f102d77e13728179fd7c206c63",
      "content": "<Image />"
    },
    "puz42": {
      "hash": "c1673d5cbb00a557b4bf8e12e9aff61696045d85f08f329324e81f4e66167cfc",
      "content": "<PuzzleGrid modes={[\\"crossword\\"]} text={\`\\n......@....\\n......@....\\n...........\\n@@......@@@\\n.......@...\\n....@.@....\\n...@.......\\n@@@......@@\\n...........\\n....@......\\n....@......\\n\`.trim().split(\\"\\\\n\\").join(\\"|\\")} optionsOverride={{\\"data-fill-classes\\":\\"white\\"}} acrossClues={[\\n  \\"Shape of some bacteria\\",\\n  \\"Unit for speed tests (Abbr.)\\",\\n  \\"What’s applied uni-laterally?\\",\\n  \\"Partner of Uranus\\",\\n  \\"Bud holder\\",\\n  \\"Squirrel, for example\\",\\n  \\"Word with two nonadjacent Ns pronounced as a single N\\",\\n  \\"Exclamation usually heard in 16-Down\\",\\n  \\"Literally, “tail”\\",\\n  \\"Start to glide?\\",\\n  \\"B, in puzzle hunts\\",\\n  \\"South American country whose official currency is the dollar\\",\\n  \\"Sudden gains\\",\\n  \\"When spirits were out?\\",\\n  \\"Support for an ice skater or skier\\",\\n  \\"Serious stumper\\",\\n  \\"Alternative to arrow keys, in gaming\\",\\n  \\"Words appearing beneath a text, perhaps\\",\\n]} downClues={[\\n  \\"Carrier with blue planes (Abbr.)\\",\\n  \\"Bud\\",\\n  \\"“You betcha!”\\",\\n  \\"Titular girl in kid lit\\",\\n  \\"Put up with\\",\\n  \\"???\\",\\n  \\"“Kids” group\\",\\n  \\"Breathalyzer meas.\\",\\n  \\"Little legume\\",\\n  \\"Title which appears before a name in one culture and after a name in a different culture\\",\\n  \\"Young ___\\",\\n  \\"Mo. for 18-Across\\",\\n  \\"“Stat!”\\",\\n  \\"A cloud in a clear sky, maybe\\",\\n  \\"Mountain-related prefix\\",\\n  \\"Rower’s need\\",\\n  \\"Flat peppermint candy\\",\\n  \\"Prefix with Pen\\",\\n  \\"Smelly liquid\\",\\n  \\"Cast off\\",\\n  \\"Church term with a rising diphthong\\",\\n  \\"Nutritional fig.\\",\\n  \\"Cool kids, in 90s slang\\",\\n  \\"Fed. money manager\\",\\n  \\"Dissenting vote\\",\\n]} />"
    },
    "puz48": {
      "hash": "235971d9eb44f3504c9c66f8fc53d214dac7da76c88ba576f38cb8429ab6be9a",
      "content": "- Duet (not quartet!) is oddly a legal contract\\n- Flooded intl. org. taken out\\n- Boost case involving rare shell\\n- Bird takes you in with charged particle insight"
    },
    "puz49": {
      "hash": "19d05597c8a2b6dbb7a2e6d4bb6dd74c0db3f83b2b3c82970d61275a49ea1c1f",
      "content": "<Image fullWidth alt=\\"Two images with an arrow between them, the arrow pointing from left to right. The first image has three thin vertical rectangles on top of a wide gray horizontal rectangle. On top of the first thin rectangle is a wide white horizontal rectangle labeled LG. On top of the second thin rectangle is a white horizontal rectangle labeled TE, narrower than the first white rectangle. On top of the third thin rectangle are two white horizontal rectangles, directly on top of each other, increasing in width from top to bottom, labeled A and M from top to bottom, both narrower than the second white rectangle. The second image also has three vertical rectangles on top of a wide gray horizontal rectangle. On top of the first thin rectangle are two white horizontal rectangles, directly on top of each other, increasing in width from top to bottom, labeled A and M from top to bottom. On top of the third thin rectangle are two white horizontal rectangles, directly on top of each other, increasing in width from top to bottom, labeled TE and LG from top to bottom, both wider than the first two white rectangles.\\" />"
    },
    "puz51": {
      "hash": "76ff9df3da24c0200b7b1c9f404c6bcfb343fa6ca2927e521b748c125ab10c4f",
      "content": "\`\`\`\\nTurn. Look. Cool! An old pal.\\nRead! Find. You see it. Hear:\\nNice. Haha! Conclusion: Done.\\n\`\`\`"
    },
    "puz52": {
      "hash": "db3e2f2d69d08f684650eaccbe662a24bb431fbc849c3b463549c2cfe5469bf3",
      "content": "In what section of the orchestra do Toad and a turtle belong?\\n\\nIn what country did Mario paint Princess Peach?\\n\\nWhere was the hottest air temperature recorded while Mario was relaxing in a pool?\\n\\nIn which state would you find Princess Peach with a straw hat and a pig?\\n\\nWho told the tale of Mario holding an oil lamp?"
    },
    "puz53": {
      "hash": "edef3c7b992d3473428e2c5533f31b4070472e3e2603981397bd44704111aeae",
      "content": "<Flavor>This puzzle has two answers.</Flavor>\\n\\n1) What isn’t repeated?  \\n2) For each pair, what is repeated?  \\n\\n<Table\\n  tableClassName={\\"vertical-barred table-fixed-width\\"}\\n  cells={[\\n    [\\"AMAZON\\", \\"BONE\\", \\"COMBINATOR\\", \\"DELTA\\"],\\n    [\\"GLUTAMATE\\", \\"GLYCINE\\", \\"GOLF\\", \\"HISTIDINE\\"],\\n    [\\"MCDONALD’S\\", \\"MOVE (POKÉMON)\\", \\"SECTION\\", \\"SIERRA\\"],\\n    [\\"SKYPE\\", \\"TYROSINE\\", \\"YAHOO\\", \\"ZULU\\"],\\n  ]}\\n/>"
    },
    "puz54": {
      "hash": "b42762be852b487a1bc61527264617de65e71af6592b841c4a6841573d1efa7f",
      "content": "<Flavor>You’ll only need the chapter.</Flavor>\\n\\n940 771 2950 1225 2139 2696 4489"
    },
    "puz55": {
      "hash": "4713479fc2ea2b01eba821152170106718d7c5f5b97ad041946f8bc7defb39a0",
      "content": "Note: For this puzzle, do not edit the file with audio editing software! (This is on the honor system, please stick to the spirit of the rule.)\\n\\n<Audio />"
    },
    "puz56": {
      "hash": "14c48be6333f8589d7d5835afc56607827235a4083fac583de2119b470ff550c",
      "content": "<Image fullWidth/>"
    },
    "puz57": {
      "hash": "f7ec146b628a857674ed9d4d37378097bf30e94f60dc3923d8c7673f57c8e6a7",
      "content": "<Flavor>You go down to Mauritius and you see all of these familiar colors.</Flavor>\\n\\n<Image />"
    },
    "puz58": {
      "hash": "25cc1155c43ea7a885116abeec03d2bc9eeeac0a050c86db55618d246283cc49",
      "content": "The final answer is a 3-word phrase.  \\n\\nAn adult who acts immature  \\nAstronaut  \\nBeing attacked  \\nDomain of Eileithyia  \\nFired at close range  \\nFlorida island city  \\nIt might be above tilde  \\nLacuna  \\nLadders or stairs out a building  \\nNickname for Australia  \\nNickname for Gaia  \\nUS military academy  \\nWoman who an adopted child might try to find"
    },
    "puz59": {
      "hash": "21ad01fb19347fa06d984f33a1d3dfe529d229e404c65b6414dfd327b3829abd",
      "content": "<Table\\n  cells={[\\n    [\\"Fast-fashion retailer\\", <Blanks content={\`_ _ _ _ _ _ _  2 1\`} />],\\n    [\\"Video game\\", <Blanks content={\`_ _ _ _  4  _ _ _ _\`} />],\\n    [\\"Indie British TV production company\\", <Blanks content={\`_ _ _ 3 _ _ _ _ _\`} />],\\n    [\\"Band\\", <Blanks content={\`_ _ _ _ _ _  5\`} />]\\n  ]}\\n/>"
    },
    "puz60": {
      "hash": "7594d278a68aad260f78b46cdea6320f102522c55cbd65758f7d2777bcff818d",
      "content": "<Table\\n  tableClassName={\\"vertical-barred table-fixed-width\\"}\\n  cells={[\\n    [\\"\\", \\"Slang for a member of the US armed forces\\", \\"Currently very hot area in technology\\"],\\n    [\\"Genre where players compete in a free-for-all\\", \\"\\", \\"Slightly less hot area in technology\\"],\\n    [\\"Act in an unsportsmanlike way in a video game\\", \\"Automobile manufacturer of the Cadillac\\", \\"\\"],\\n  ]}\\n/>"
    },
    "puz61": {
      "hash": "c8dea524506f57d1bcf96c71c4dc848b990295821a9c035381f1e9db029da5b0",
      "content": "<PuzzleGrid\\n\\ttableClassName=\\"puzzle-grid-grey-cells\\"\\n\\tmodes={[\\"crossword\\"]}\\n\\ttext={\`\\n.....\\n.@.@.\\n.....\\n.@.@.\\n.....\\n\\t\`.trim().split(\\"\\\\n\\").join(\\"|\\")}\\n\\toptionsOverride={{\\n\\t\\t\\"data-fill-classes\\": \\"white\\"\\n\\t}}\\n\\tacrossClues={[\\n  \\t\\"Meal of disgusting grits (5)\\",\\n\\t\\t\\"A pudding without gin was left in total (3, 2)\\",\\n\\t\\t\\"Cold feet? Consider these timeless investments (5)\\",\\n\\t]}\\n\\tdownClues={[\\n\\t\\t\\"Good girl’s cup (5)\\",\\n\\t\\t\\"Kind of acid I do crazily with one penny (5)\\",\\n\\t\\t\\"Nasty pest partially enters into a screen (5)\\",\\n\\t]}\\n/>"
    },
    "puz62": {
      "hash": "bddfa4d925a25a4218036401c808c41778e85510da06f6d24aeef9346fd8e148",
      "content": "<Image inverted fullWidth alt=\\"Three lines of text. One is vertical, written from bottom to top. The second is horizontal, written from left to right, starting at around halfway down the first line. The third is diagonal, written from top-left to bottom-right, also starting at around halfway down the first line. The first line reads (Division Kinzie Foster Devon Chicago Armitage Lawrence Lawrence) / 400. The second line reads (California Damen Austin Harlem California Damen) / 400. The third line reads _____ Avenue.\\" />"
    },
    "puz63": {
      "hash": "eddf0cd57c5e7442666d06adedf54bf174e53cb9bd5fe31de27013a32c6da03e",
      "content": "740919 + 390210 + 721890 → low density structure  \\n\\n740811 + 720832 → [A]  \\n270111 + 250310 + 220110 → [B]  \\n260111 → [C]"
    },
    "puz64": {
      "hash": "e7c899532dcc644d08c08085832b41ed5450d939a8e80c13cc355a976ef1bfd9",
      "content": "100 8 70 5 50 7 600"
    },
    "puz65": {
      "hash": "eb71eec152a3ba660e1d42ad5ada3eec220cb5e70eea116e22aae04b7015ce87",
      "content": "<Blanks content={\`_ 1 _ _ 8\`} />\\n\\n<Blanks content={\`2 _ _ 3\`} />\\n\\n<Blanks content={\`_ _ _ _ _ – _ _ _ 7 _ _ _ _ _ 6\`} />\\n\\n<Blanks content={\`_ _ 4 5 _ _ _ _\`} />"
    },
    "puz66": {
      "hash": "6426290e675af57b18444ed331d544745e8053c914d402e6c7df0192165ddf79",
      "content": "NSCQECDSX  \\nKXMSN  \\nMBBEZD  \\nZYSVON  \\nNSRYXYBKLVO"
    },
    "puz67": {
      "hash": "a4e7652195016876fae3c05f7990262d415f0dc890eb75dd7cfe4ece68d0a8c2",
      "content": "Flush and straight flush, e.g. (2)  \\nNine of ten times, perhaps (5)  \\nMain protagonist of a Neal Stephenson novel (10)  \\nFuse wool and silk, perhaps (3)  \\nTelephone key that doesn’t map to any letters (3)  \\nRent, or not sure (3)"
    },
    "puz68": {
      "hash": "57d902728b02ccabb76b1d2dc80e2222e92bf23202ff3e1d70f3ee768b31dd97",
      "content": "- Hopelessness (←1)\\n- Song whose music video has over 8 billion views on YouTube (→5)\\n- Adopt, embrace (→2)\\n- Accountable (→5)\\n- Expected uptime? (←3)\\n- Constructed language (0)\\n- The Bard of Avon (→4)\\n- One might perform a work by the answer to the previous clue (→2)\\n- Custom-made (→2)"
    },
    "puz71": {
      "hash": "5538a34cd244463436ea4e4e579155020ecf5a993f49e0d9c977660484f3c658",
      "content": "<Image fullWidth/>"
    },
    "puz72": {
      "hash": "30d739437c81cd98a1e214949e36d0243966989ba6383019b71a6ac54b91c199",
      "content": "<Image whiteBackground />"
    },
    "puz73": {
      "hash": "dd70423632ca94a02362f73de5c573697c12f07ef769b84813334a7a0afc3fed",
      "content": "<Table\\n  cells={[\\n    [\\"Hawaiian volcanic formation\\", <Blanks content={\`_ _ 1 _\`} />],\\n    [\\"Creator of America?\\", <Blanks content={\`2 _ _ _\`} />],\\n    [\\"David Bowie album\\", <Blanks content={\`_ _ _ 3\`} />],\\n    [\\"MLB team\\", <Blanks content={\`_ _ 4 _ _\`} />],\\n    [\\"One who’s more than they seem\\", <Blanks content={\`_ _  _ _ _  _ 5 _ _ _\`} />],\\n    [\\"Its sale is said to fund unscrupulous causes\\", <Blanks content={\`_ _ _ 6 _\`} />],\\n    [\\"A star is said to be like this\\", <Blanks content={\`_ _  _ _ _  7 _ _\`} />],\\n  ]}\\n/>"
    },
    "puz74": {
      "hash": "0b701eab5602e40f4b7441a2d23b080b8d871ec642b38a4438fa4ee30393f7fe",
      "content": "<PuzzleContentPreviewWithLink puzName={\\"puz67\\"} />\\n<PuzzleContentPreviewWithLink puzName={\\"puz68\\"} />\\n<PuzzleContentPreviewWithLink puzName={\\"puz73\\"} />"
    },
    "puz75": {
      "hash": "a5a84c7fd400e264b0fe80367b8f8881a93f43d9f94f87d2a8ebb895cabca23f",
      "content": "<PuzzleGrid\\n\\ttext=\\"16x9\\"\\n\\toptionsOverride={{\\n\\t\\t\\"data-fill-classes\\":\\"white black\\",\\n\\t\\t\\"data-fills\\": \`\\n..............1.\\n.........1...1..\\n1.....1.1..1.1..\\n.1...1..11......\\n.........1......\\n.....1..1....1..\\n.1.1.1..11...1.1\\n1..1.1...1..11..\\n11..............\\n\\t\\t\`.trim().split(\\"\\\\n\\").join(\\"|\\"),\\n\\t}}\\n/>\\n\\n<PuzzleGrid\\n\\ttext=\\"12x12\\"\\n\\toptionsOverride={{\\n\\t\\t\\"data-fill-classes\\":\\"white\\",\\n\\t}}\\n/>"
    },
    "puz76": {
      "hash": "28a937cfd4797e1da5d7962001e0cae7fc9f7c656b9ecb4364f06c0cd9392c35",
      "content": "<PuzzleGrid\\n\\ttext=\\"6x11\\"\\n\\toptionsOverride={{\\n\\t\\t\\"data-fill-classes\\":\\"white black\\",\\n\\t\\t\\"data-fills\\": \`\\n111.1.\\n1.1...\\n1.1...\\n1.....\\n......\\n.1....\\n.1....\\n1111..\\n1111..\\n1111.1\\n1111.1\\n\\t\\t\`.trim().split(\\"\\\\n\\").join(\\"|\\"),\\n\\t}}\\n/>"
    },
    "puz77": {
      "hash": "459be45ebc5b5967a686b81ab49f2c3a78bc7d44d219bf71ac34a1a79501d5ca",
      "content": "I am.  \\nWere there owls here?  \\nRice to the fox.  \\nAre they robberies or bribes?  \\nLaminate that animal."
    },
    "puz78": {
      "hash": "b76bf8350cb2850c625d56c750b83ee96f2047ea569f1d6ac94677c1c54aa1ac",
      "content": "<PuzzleGrid\\n\\ttableClassName=\\"puzzle-grid-small\\"\\n\\ttext={\`\\n....................\\n....................\\n....................\\n....................\\n....................\\n....................\\n......-.............\\n\\t\`.trim().split(\\"\\\\n\\").join(\\"|\\")}\\n\\toptionsOverride={{\\n\\t\\t\\"data-fill-classes\\":\\"white black\\",\\n\\t\\t\\"data-fills\\": \`\\n....1.....1.......1.\\n....1....1.......1..\\n...1.....1.......1..\\n..1....1........1...\\n.1......1......1....\\n.1.......1......1...\\n....1.....1....11111\\n\\t\\t\`.trim().split(\\"\\\\n\\").join(\\"|\\"),\\n\\t}}\\n/>"
    },
    "puz79": {
      "hash": "81741a8b356a69d26cb6e9c9f258ad56bc949fd9eae27ad1e8f256e7e8159e8b",
      "content": "&lt;6 letters  \\nends with E  \\nflat  \\nEuropean\\n\\n<Image fullWidth />"
    },
    "puz80": {
      "hash": "e02d233d57f2889a82beb3cd2b6a57aedf5cd36207581cab0e5554267a6b0bea",
      "content": "<b>The final step of this puzzle uses the English names from Wikipedia.</b>\\n\\n1.875 2.8 2.16667 1.54545 8.33333 0.2 6"
    },
    "puz81": {
      "hash": "fe8456ab38e0a95034850c7ad3b2bbb064e93e00a51fb4c5e9e83c35fffc56fc",
      "content": "<Image pad fullWidth />"
    },
    "puz82": {
      "hash": "3034958623199d0c3f8cbe43fd48a4f68956dff9d41252b5b50b2ecea462ed5f",
      "content": "<span lang=\\"zh\\">西欧第一！</span>"
    },
    "puz83": {
      "hash": "3cec92818000d539fcce6f8260ad1ef63f2405250543534b5247c8245bf00b3c",
      "content": "<Image alt=\\"A grid of squares, most transparent, and some colored green, with the edges of the grid fading out. On the first row are five green squares, a transparent square, a green square with W L in red letters written on top, a transparent square, a green square with W L in red letters written on top, and a green square. The second and third rows are all transparent. The fourth row has a green square, five transparent squares, a green square, and four transparent squares. The fourth, fifth, and sixth rows are all transparent. The seventh row has a green square, two transparent squares, a green square, a transparent square, three green squares, and three transparent squares. The eighth and ninth rows are all transparent. The tenth row has a green square, two transparent squares, a green square, two transparent squares, a green square, and four transparent squares.\\" />"
    },
    "puz84": {
      "hash": "1e0058c6946b46e182d73b4c945b1e84beacbc7b3b2b3823b34dcaa530ffea77",
      "content": "<Image alt=\\"Five rows of hand-drawn colored dots superimposed over a yellow background. Row 1 consists of four dots with the colors: gray, black, white, light gray. Row 2 consists of five dots with the colors: red, dark red, brown, rose, red. Row 3 consists of three dots with the colors: orange, gold, light yellow. Row 4 consists of five dots with the colors: green, lime, light turquoise, turquoise, green. Row 5 consists of three dots with the colors: purple, indigo, blue-gray.\\" width=\\"15em\\" />"
    },
    "puz85": {
      "hash": "369ba98b5166e00f979b3286dbff880cb070d79071f4f6e700dba9bd59bfe3fe",
      "content": "<Image pad />"
    },
    "puz86": {
      "hash": "04f3828b2358e8e5b2fd05842138e32299b2f739fad73472365da3025c422cda",
      "content": "<Image />"
    },
    "puz87": {
      "hash": "ed2e078e602023be3ca37e263922e7eba656cc6310cab62099ca1c60b71c9a50",
      "content": "<Image inverted center />"
    },
    "puz89": {
      "hash": "19ced84e67bc89eb8f17335d0405018b433235bad97ebb62c4335b4b6fc565d7",
      "content": "<Blanks content={\`_ _ _ D G _ R ...\`} />"
    },
    "puz90": {
      "hash": "790aaece8141f3f49a5c913290456d2c7b0d703a3a6eb180c3aae6d32bd5cf3c",
      "content": "<PuzzleGrid\\n\\ttableClassName=\\"puzzle-grid-very-small\\"\\n\\ttext=\\"34x16\\"\\n\\toptionsOverride={{\\n\\t\\t\\"data-fill-classes\\":\\"white black\\",\\n\\t\\t\\"data-fills\\": \`\\n..1...1.....1..1.......11111111111\\n..1...1.....1..1....1..1......1111\\n...1...1....1..1....1...1....11111\\n..1...111111...1.....1...1....1111\\n...1.1....1....1..1........1111111\\n......1....1...1..1......111111111\\n.....1...1....1.1....1...1.......1\\n...1...1....1...1....1111111111111\\n.....1....1.....1...1....1........\\n....1....1....11111...1...11111111\\n....1.....1...1..........111111111\\n..1....1.1.....1....11111111111111\\n...1.1....1....1..1........1111111\\n......1....1...1..1......111111111\\n...1...1...1.1.....1.....1....1111\\n...1...1.....1....1....11111111111\\n\\t\\t\`.trim().split(\\"\\\\n\\").join(\\"|\\"),\\n\\t}}\\n/>"
    },
    "puz92": {
      "hash": "d27add0d54e02df4ba4797538cdcb894e3ca3b0d6766e88befb0131609959b50",
      "content": "<Image whiteBackground />"
    },
    "puz95": {
      "hash": "54cadc22612627459f06899466f24e3030426a901880add272b70255873b9fdd",
      "content": "<Image width=\\"15em\\" alt=\\"A drawing with four colored regions — orange on top, yellow on the bottom left, red on the bottom right, and green in the middle.\\" />"
    },
    "puz97": {
      "hash": "9020981d13df30e47776a15dd3ad3609cb6815e62963d0247e44fd5d86da2022",
      "content": "<Image maxWidth=\\"30em\\" />"
    },
    "puz98": {
      "hash": "224eb84b98f3f069f8b559cadfd6210a668a2f0c47a2cea34c634c89fb7e1d28",
      "content": "<Image whiteBackground pad fullWidth />"
    },
    "puz99": {
      "hash": "fe3cae508709050e8101f8a6c4be45ed1dbdf6c82d54c3fb82136009005e1c97",
      "content": "<b>This puzzle can only be solved on Windows 11.</b>\\n\\n<Image fullWidth />"
    },
    "puz100": {
      "hash": "982532e14202db741e9d3f5417b33f7916678a53e5c484b65f062a9a812a1a6f",
      "content": "<b>This puzzle can only be solved on Windows 11.</b>\\n\\n<Image whiteBackground pad fullWidth />"
    },
    "puz101": {
      "hash": "aa7b858b2895b1e2ad28133e63f60bdbd5d03f3522d53f0b280567875aa0c7d9",
      "content": "<Image />"
    },
    "puz106": {
      "hash": "15ee5d653e127e9ad00a281d4e92740b5b5f6fa3ef7fea7aa764f82118bd80d3",
      "content": "There are two kazhes.  \\nThere are two luns.  \\nThere are two nizzes.  \\nThere are two tasses.  \\nYesterday he ricked."
    },
    "puz107": {
      "hash": "a82b4aed14ec1080fd5d024522cbfb03ce3358d00ee821ad7144808ecc9a2ecb",
      "content": "<Flavor>Hello solvers! We made a great 9×9 crossword for you, but we seem to have lost it. Can you help us rebuild the puzzle? (Follow American crossword construction rules i.e. every letter must be part of both a horizontal and a vertical word, and the grid must be rotationally symmetric.)</Flavor>\\n\\nABYSS  \\nALE  \\nALOES  \\nAMP  \\nAROMA  \\nCAB  \\nCAN  \\nCAST  \\nDES  \\nELOPES  \\nENO  \\nHOMEFIELD  \\nIFS  \\nLOWLIER  \\nLSD  \\nNAS  \\nNEUROLOGY  \\nPAGED  \\nRAMPS  \\nRODS  \\nSCOPE  \\nSENSE  \\nSOL  \\nSOU  \\nSPA  \\nTERENCE  \\nURACIL  \\nWARN  \\nWEDS  \\nWUHAN"
    },
    "puz108": {
      "hash": "b7b7202fca72c030b0f5286929578089e98925f3dc65617de46ad5a6c0f8ccee",
      "content": "### Across\\n\\n<ul className=\\"list-no-bullet\\">\\n<li>1. Vegetable</li>\\n<li>4. Spanish saint?</li>\\n<li>5. Test</li>\\n</ul>\\n\\n### Down\\n\\n<ul className=\\"list-no-bullet\\">\\n<li>1. UTC−8</li>\\n<li>2. Body part</li>\\n<li>3. Some</li>\\n</ul>"
    },
    "puz109": {
      "hash": "0465afd9448c005a6fe287bb66a1e5f290cf76173b1f6732ed331699df68ecfe",
      "content": "<span className=\\"iv-wrapper\\">\\n\\t<span style={{\\n\\t\\tdisplay: \\"flex\\",\\n\\t\\tjustifyContent: \\"center\\",\\n\\t\\talignItems: \\"center\\",\\n\\t\\tgap: \\"0.5em\\",\\n\\t}}>\\n\\t\\t<span style={{\\n\\t\\t\\tdisplay: \\"block\\",\\n\\t\\t}}>Blank Squares</span>\\n\\t\\t<span style={{\\n\\t\\t\\tdisplay: \\"flex\\",\\n\\t\\t\\tflexDirection: \\"column\\",\\n\\t\\t\\tjustifyContent: \\"center\\",\\n\\t\\t\\talignItems: \\"center\\",\\n\\t\\t}}>\\n\\t\\t\\t<span>I</span><span>V</span>\\n\\t\\t</span>\\n\\t</span>\\n</span>\\n\\n<PuzzleGrid\\n\\ttableClassName=\\"puzzle-grid-very-small\\"\\n\\ttext=\\"30x12\\"\\n\\toptionsOverride={{\\n\\t\\t\\"data-fill-classes\\":\\"white black\\",\\n\\t\\t\\"data-fills\\": \`\\n.............11111...11111....\\n11111.........11.......1......\\n...1.....1111.....111..1......\\n...........11...1..1...1......\\n111..1111.......1.11...1..1111\\n..11...1........1....1.......1\\n.....................1........\\n.1...111.111.111.....1...1.111\\n.1.....1.1...1.1..11.1...1...1\\n.1.1.....1.1...1..11.11..1....\\n...1.111...1...11.11.....1.111\\n...1...1...1.1..........11...1\\n\\t\\t\`.trim().split(\\"\\\\n\\").join(\\"|\\"),\\n\\t}}\\n/>"
    },
    "puz110": {
      "hash": "601954925ae10a1ff005bde16168c5d92928ccde5828324fbe19b87e6d1e40e4",
      "content": "Name the instrument heard at 0:02, 0:25, 0:39, and 1:15.\\n\\n<Flavor>(warning: contains strong language)</Flavor>\\n\\n<Audio />"
    },
    "puz112": {
      "hash": "e8b8e14db28da6183ff8ba641fe6cae472a13a94a5283c321c143c3dd6e46c51",
      "content": "<Table\\n  tableClassName={\\"vertical-barred horizontal-unbarred table-fixed-width\\"}\\n  cells={[\\n    [\\"\\", \\"\\", \\"BASED\\", \\"\\", \\"\\"],\\n    [\\"BODY\\", \\"\\", \\"OF\\", \\"DRINK\\", \\"CONFERENCE\\"],\\n    [\\"OPPOSITE\\", \\"ANSWER\\", \\"TALK\\", \\"OF\\", \\"HAPPY\\"],\\n    [\\"THE\\", \\"LEAF\\", \\"TEXT\\", \\"THIS\\", \\"MANIPULATOR\\"],\\n    [\\"UNIX\\", \\"ONLINE\\", \\"TO\\", \\"WATER\\", \\"PUZZLE\\"]\\n  ]}\\n/>"
    },
    "puz113": {
      "hash": "5acad473b45fb0ea7ce960e5c8502663481117d3c5a48c88ff32aa9b8b0486d0",
      "content": "<Image />"
    },
    "puz116": {
      "hash": "0686601964a2c84bdaae4d169766b4e169925cac1118518e30c6e2518e5ee7cd",
      "content": "Find the focus of the parabola with vertex at the first image passing through the second and third images (10).\\n\\n<Image fullWidth name=\\"1\\" />\\n\\n<Image fullWidth name=\\"2\\" />\\n\\n<Image fullWidth name=\\"3\\" />"
    },
    "puz117": {
      "hash": "e60a80ce8ef768f369e1154a30ca6bc0db41f77b75648a11cb7dd3eec974ecd4",
      "content": "<Flavor>Each has an odd one out.</Flavor>\\n\\nYork City F.C. (1)  \\nBrill Tramway (5)  \\nConfederate government of Kentucky (4)  \\nNational Basketball Association awards (5)  \\nSupernatural season 1 (5)  \\n  \\nInterstate 96 (8)  \\nQuietly Confident Quartet (1)  \\nLeonardo DiCaprio (4)  \\nVoalavo (4)  \\n1991 Atlantic hurricane season (1)"
    },
    "puz120": {
      "hash": "8219e271b25b1e2e2087ef73577aeafd1c6b801ca23df52a86020ebda1380313",
      "content": "<Image fullWidth />"
    },
    "puz121": {
      "hash": "c2fc7d2c895c4ed1cd0b266a96a225a4e1c7a0f5df6b2a2ef8f2f7f16e15feff",
      "content": "<Flavor>Yum, sounds good!</Flavor>\\n\\nDamages  \\nJ.K. Rowling, e.g.  \\nOne of those Scrabble bullshit words, worth 12 points  \\nPC competitor  \\nPeasant  \\nProcreated  \\nRaging bull, for instance?  \\nTo steal login credentials through social engineering\\n\\n<Blanks content={\`\\n_ 1 _    &  3 _ _\\n_ _ 6 _   &  _ 7 _ _\\n_ _ _ 8   &  _ 4 _ _ _ _\\n_ _ 5 _ _  &  2 _ _ _ _\\n\`} />"
    },
    "puz122": {
      "hash": "d64267a68e63952b6ed419070db91a3646be232ce7f693e605b02234efd232a9",
      "content": "1952 winter Olympics demonstration sport + its Chinese name literally means “bear cat” + smooths or polishes"
    },
    "puz123": {
      "hash": "678a3027d561d33ccaa16a07cde929751180a99a7d6d5d2f3885c695c30070a1",
      "content": "Pokémon competitive play  \\nBexley Hall (MIT)  \\nCan’t sleep, clown will eat me  \\nThe weather in London  \\nSexual partner  \\nThe Basement Tapes  \\nOverweight  \\nCommon degu  \\nCough medicine"
    },
    "puz124": {
      "hash": "9ff977cfdabb092131f39bccd4e7183195939137eeb85fe0159d7ba465b9de1b",
      "content": "<Image />"
    },
    "puz125": {
      "hash": "e9d0e4bbdac349b397b506ddec516669c20aef79b0d4752636baaf37e69c1840",
      "content": "<Flavor>Who?</Flavor>\\nNNNATTELHENTRALWEPTEERHMIST"
    },
    "puz128": {
      "hash": "930cc5906e15e615c0bd1abb418b5625ec80fad582465bb11fb61d160d518d8e",
      "content": "Start with the funny number.  \\n1. Replace your number with the second smallest prime number that divides it. Then, replace your number with the largest prime smaller than it. Write your number down.\\n2. Replace your number with the absolute difference of it and 16. Subtract 2 from your number. Write your number down.\\n3. Replace your number with the absolute difference of it and 9. Then, replace your number with the largest square number smaller than it. Write your number down.\\n4. Subtract your number from the next largest cube with the same parity as it. Write your number down.\\n5. Subtract from your number the largest square number smaller than it. Add 5 to your number, then multiply your number by 1.5. Write your number down.\\n6. Subtract your number from 35. Do you remember what number you started with? Multiply its first digit by 3, then subtract that from your current number. Write your number down.\\n7. Multiply your number by 4. Then, subtract your number from 77. Finally, divide your number by 3. Write your number down."
    },
    "puz129": {
      "hash": "b8403a69ec4c9358789aa22cd1a748b015d709bcaebf45cd0610bb561693b402",
      "content": "Este es un trole Línea Azul con destino a la Línea Internacional/San Ysidro vía el Centro de San Diego. Todo pasajero debe tener un <Blanks content={\`_ _ _ _ ? _\`} inline /> válido. Se prohíbe <Blanks content={\`_ _ _ _ ?\`} inline /> o <Blanks content={\`_ _ _ ? _\`} inline /> en el trole y toda bebida debe estar en un envase sellado. Asientos de prioridad para personas con discapacidades o edad avanzada pueden ser localizados cerca de las puertas. Por favor hacer esos asientos disponibles cuando sea necesario. En <Blanks content={\`_ _ ? _ _ _ _ _ _ _ _ _ _\`} inline /> a otros pasajeros, favor de no subir los pies a los asientos."
    },
    "puz131": {
      "hash": "312fa0ff3f2bccfa625bb78f38c21f60d7844e743a9771beb639ac337f37fa32",
      "content": "I push past you to get a glance at the timetable at the tube station.  \\nYou: ...! (2)\\n\\nMe: These financial documents are indecipherable, which line tells me the total value of the assets according to the balance sheet?  \\nYou: ... (2)\\n\\nYou: Scientists discovered an island full of unicorns today.  \\nMe: What? No way!! Where??  \\nYou: ...! (2)\\n\\nMe: I can’t find the programming language that is 1-indexed. Can you help?  \\nYou: ... (1)\\n\\n(_ _ _ _ _ ) 3 (_ _ _)"
    },
    "puz132": {
      "hash": "12a0966af0a97bbaf16ae056e5daccde7cd31728950cafb91d961c2c986b9bf6",
      "content": "Example: \\\\{U,U,X\\\\}\\n\\n\\\\{L,Y,?\\\\}  \\n\\\\{N,P,?\\\\}  \\n\\\\{T,Y,?\\\\}  \\n\\\\{L,L,?\\\\}  \\n\\\\{F,U,?\\\\}"
    },
    "puz139": {
      "hash": "0a5474b91641824953af5aeacd6f2f5d10a1d70d697b80c366598e433d6cf5f0",
      "content": "To solve this puzzle, submit a picture of yourself hugging a tree, along with a fun fact about the tree. (The fact does not need to be true.)\\n\\nThe tree must be a real tree. If inclement weather prevents you from accessing a real tree, you may use your best impression of a tree as a substitute. However, your picture must clearly demonstrate evidence of said weather.\\n\\nUnless you explicitly grant permission to share your submission below, your submission will not be shared with anyone outside the hunt staff and will be deleted once the hunt is concluded.\\n\\n<Puzzle139 />"
    },
    "puz135": {
      "hash": "ce24d0d1bd38612e7c74ad37897b3e59befed013ce926f1e5cc316ed232880af",
      "content": "<PuzzleGrid modes={[\\"sudoku\\"]} text={\`\\n4837..159\\n726159483\\n..9483726\\n83726159.\\n261594837\\n5.4837261\\n3726.5948\\n615948.72\\n948372615\\n\`.trim().split(\\"\\\\n\\").join(\\"|\\")} optionsOverride={{\\"data-fill-classes\\":\\"white\\"}} />"
    },
    "puz136": {
      "hash": "8b6fe6412c43d26763621c05ddfa6dc1b38a05fa6a1415a1c48ff87d34eed7cf",
      "content": "Give your best guess for the pH of a mandarin."
    },
    "puz140": {
      "hash": "7cb729dc2ecdca0fb8ee846ab3879de51ffa3a8a770d4e444582ef6c2bf89e14",
      "content": "<Image alt=\\"Five squares. From left to right, they have the colors orange, green, white, blue, and purple.\\" />"
    },
    "puz141": {
      "hash": "07d6472b84aa3c2deedcff7835dbe4e722218f6e1c6e1ac25e7b2492f56ba7df",
      "content": "<PuzzleGrid\\n\\ttableClassName=\\"puzzle-grid-small\\"\\n\\ttext=\\"17x5\\"\\n\\toptionsOverride={{\\n\\t\\t\\"data-fill-classes\\":\\"transparent lightgray\\",\\n\\t\\t\\"data-fills\\": \`\\n.11..111..11.....\\n.11..111.111..11.\\n111.1111.1.11.111\\n111.1111.1111.111\\n.........11......\\n\\t\\t\`.trim().split(\\"\\\\n\\").join(\\"|\\"),\\n\\t}}\\n/>"
    },
    "puz142": {
      "hash": "138e1328077b66da9dd50c20855d3c4f087a92c51fbae36f852fc12ee802f5ed",
      "content": "<Image fullWidth />"
    },
    "puz143": {
      "hash": "176fea9661a0886ee3a2f24552d63df9485afbd86974fdb95cb554abba89ec91",
      "content": "<Image name=\\"jumble3\\" alt={\\"Line drawing of a sitting person, with a dashed rectangle drawn on top of their thigh. The caption reads: \\\\\\"Thinking that she had received a message, she took her phone out to do a\\\\\\", followed by four squares, a space, and five squares. The third and seventh squares have a circle in them.\\"} />  \\n<Image name=\\"jumble2\\" alt={\\"Line drawing of a person standing in front of a grid of letters, with a person in front of the grid, question marks drawn over their head. The caption reads: “He couldn’t solve the wheel of fortune, so he had to”, followed by four squares, a space, two squares, a space, and one square. The first and fourth squares have a circle in them.\\"} />  \\n<Image name=\\"jumble1\\" alt={\\"Line drawing of a person holding a racket hitting a ball over a net. The caption reads: “The new tennis racket just”, followed by four squares, a space, and nine squares. The fourth and sixth squares have a circle in them.\\"} />"
    },
    "puz144": {
      "hash": "6dd22f209f3d625f114dd6acfe02bbcb2b054f9b8a1836f6402df76e6b73a3e9",
      "content": "You see this in the middle of a music score. Is the second note lower or higher in pitch than the first note? Justify your answer. (10 points)\\n\\n<Image center alt=\\"Five horizontal lines. On the middle line, two quarter note symbols are drawn, with their stems pointing upward. The second quarter note has a natural sign written to its left.\\" />\\n\\n<Puzzle144 />"
    },
    "puz145": {
      "hash": "cb3d2ab1b1563d31409c9d3b51ef528347cbacbcb31fe89394fa4a5d56e24aa6",
      "content": "<Flavor>We have something for you. It’s HOPE. Take it. Cherish it. When you’re ready, submit it.</Flavor>"
    },
    "puz146": {
      "hash": "0a74dcbb974e3c2bb5b18272c6c72fa209e9a9b4ad86c93c3a21065a83c51952",
      "content": "<Flavor>...if you had one of them backwards and a bit more than 3</Flavor>"
    },
    "puz149": {
      "hash": "61c5d6ae28a7b16c172ee4dd9bc00a7fa0100a8762fa9fb0cc5e90667ae9223a",
      "content": "2 leads to 2 leads to 11 leads to 2 leads to 6"
    },
    "puz150": {
      "hash": "b5d7083292f06c25c7523ef285a875270d1a92cac39a82361b58cb180502f39b",
      "content": "Madelline has released her song “dopamine” in [English](https://youtu.be/Upy4rB8V3T4?si=W24BEirKS7PUpsdg&t=58) (“dopamine”), [French](https://youtu.be/I03q_YffT44?si=tLKfuJU6qRIiwyHX&t=50) (“dopamine”), and [Spanish](https://www.tiktok.com/@madellines.music/video/7329270434925448491) (“dopamina”, with Bruses). In the chorus that begins with \\n\\n* “You’re everything I want”\\n* “Tu es tout ce que je veux”\\n* “Estoy loca por ti”\\n\\n(The links above start at the relevant chorus.) The beats across the three songs can be matched syllable-for-syllable. There is exactly one sequence of three beats before the title word during which the literal meanings of the lyrics in all three languages match. Identify the English phrase that occurs during these three beats."
    },
    "puz151": {
      "hash": "a386bb08bdae8b4a09c49cc98e8b0cd5117575d0617f609e36a571802813d1eb",
      "content": "What Wikipedia is not  \\nAssessing reliability  \\nManual of Style/Lead section  \\nWikiProject Lesotho  \\nFootnotes  \\n\\n<hr/>\\n\\n<Table\\n  cells={[\\n    [\\"Iguana’s skin fold\\", <Blanks content={\`1 _ _ _ 10 _\`} />],\\n    [\\"Instagram button\\", <Blanks content={\`13 _ _  6 _ 3 _\`} />],\\n    [\\"Future attorney’s major\\", <Blanks content={\`_ 11 7 _ 2 _\`} />],\\n    [\\"Oil spill cleaner\\", <Blanks content={\`_ 4 _ _  _ _ _ 12 _\`} />],\\n    [\\"Winter trousers\\", <Blanks content={\`_ _ 5 _  9 _ 8 _ _\`} />],\\n  ]}\\n/>"
    },
    "puz153": {
      "hash": "f77a391cdac8f1409f24c40d7995073c3e97aff29a455ec12a13b187b31310de",
      "content": "\`\`\`\\nADROITADEPTANDCLEVER\\nASIMPLEROLLOFTHEDICE\\nHAPPINESSECSTASYGLEE\\nINJURYADDINGTOINJURY\\nREASONTOREMEMBERNAME\\nSUPERDISCIPLINEDMIND\\n\`\`\`"
    },
    "puz152": {
      "hash": "28e89ac2023f1509c006e756fd39c21d6640a1b3e42f9b3f21689337ea486ddd",
      "content": "therE aRE TwO soLUTioNS, cALL in BOth."
    },
    "puz155": {
      "hash": "683f5af6226bf83118d44baaa4b35be839a0e879ef0f6f5e3ccf2d28b0051e5a",
      "content": "What is the center of the red circle? (3 6)\\n\\n<Image />"
    },
    "puz156": {
      "hash": "dd5add4415288e88c9fa98c6c713c5638e348e0a96df4c1e7d671b6714cbe812",
      "content": "Curved, edible nuts → Redeems, as a check  \\nFlawless → Commander in Ancient Rome  \\nLover of Eurydice → Offerer of a red or blue pill, famously  \\nMonkey with mustache-like hair → Fruit used in a Filipino stew  \\nProjectile → Classify a record incorrectly, say"
    },
    "puz157": {
      "hash": "d868dc4570c7a28448fd20556269973f61c4770534ffc33c876c13c68d5caad0",
      "content": "<ul className=\\"list-no-bullet\\">\\n<li>½. It’s a perfect fourth above 5½</li>\\n<li>1. Side of a cut gem</li>\\n<li>2. Flammable liquid</li>\\n<li>3. Remove</li>\\n<li>4. Take by force</li>\\n<li>5. Japanese meditation hall</li>\\n<li>5½. It’s a perfect fourth below ½</li>\\n</ul>"
    },
    "puz158": {
      "hash": "78aaa9fa40b4057bf5fcb2af670af9c768d76e9aa4d8b2278a933c07cbbd693b",
      "content": "<Table\\n  tableClassName=\\"vertical-barred cells-text-align-center\\"\\n  cells={[\\n    [\\"4\\", \\"1\\", \\"3\\"],\\n    [\\"5\\", \\"2\\", \\"W\\"],\\n    [\\"X\\", \\"Q\\", \\"V\\"]\\n  ]}\\n/>"
    },
    "puz159": {
      "hash": "365403f99769bd19a558a0d1fcd5bd931c4199e0ad2a24dfd3418863b4d0ef1d",
      "content": "Artist with the breakthrough hit “Loser”  \\nSways, as a cradle  \\nHousehold cleaner that stopped including its namesake “oil” as of 2014  \\nYouTube music video provider  \\nActor Mark who portrays the Hulk  \\nPlace to buy an iPhone or MacBook  \\nBladed device pitched by Vince Offer  \\nHollow fruits with white flesh"
    },
    "puz162": {
      "hash": "1c697c8d080db5e54fb38d9d3e1d9909f554c13df3c6e5d76ae3ba774d8e85d9",
      "content": "<ExchangePuzzle />"
    },
    "puz164": {
      "hash": "f0c14845431200a251d2accba856bc384ba7fae32c491f60c6bab35566dce9c0",
      "content": "Na, Mn, Pt, Li, Sc, Ca, Np, Si, At, Ga, Al, Ti, As, Mt"
    },
    "puz165": {
      "hash": "f8b9b69383a21958ab9c056e94deb9a7f7f832ed2ebe90a740c68ac860f1c15f",
      "content": "<Image alt=\\"Six squares. From left to right, they have the colors pink, gray, brown, purple, yellow, and red.\\" />"
    },
    "puz166": {
      "hash": "a3e86ae877d474a08b802f37194dbcd66d377e1dee2172837ee49282082f0e63",
      "content": "5 4 6 a 3 1 7 5.  \\nA 3 1 7 5 5 4 6.  \\nIf 5 4 6 a 3 1 7 5,  \\nWhere’s the **3 1 7 5 5 4 6**?"
    },
    "puz168": {
      "hash": "69166e99e9f30888caa272d245af07c84d7507d78662cafcf124314a89370bf0",
      "content": "In the distance, you’ll see something enormous, ancient, and iconic. (5 7)\\n\\n<Image fullWidth />"
    },
    "puz169": {
      "hash": "2b1a2b5cc4f37b970c97c5b8c9402f6f79b6b64b4b303769c3fc4f34417e0472",
      "content": "<Image alt=\\"Two lines of squares. One line is horizontal and has ten squares. One line is vertical and has ten squares. The two lines intersect at the fourth square of the horizontal line and the third square of the vertical line. The squares are all white, except for the intersection square, which is yellow. Above the vertical line of squares is an arrow pointing clockwise.\\" />\\n\\n- Coming back, as in an MMO\\n- Drafts for the military"
    },
    "puz170": {
      "hash": "22c593a5d333f4a6a7f43c5322d9421bb3a2bfe18fd2dc1777860d980af303be",
      "content": "In the distance, you’ll see something enormous, ancient, and iconic. (6 6)\\n\\n<Image fullWidth />"
    },
    "puz171": {
      "hash": "02f4052ca624c738b3818299b290213a711a8900c178b5c6f885ff0be7f8b589",
      "content": "<Flavor>JFK SHAGS on an entirely different table.</Flavor>"
    },
    "puz172": {
      "hash": "8626e4108712d080e8f99b7596f0957d119da9b67a4451d484b783b48bec5547",
      "content": "<Flavor>This puzzle has two answers.</Flavor>\\n\\nSchubert’s 1st  \\nBrahms’s 4th  \\nHaydn’s 2nd  \\nMahler’s 6th  \\nDvorak’s 6th  \\nScriabin’s 1st"
    },
    "puz173": {
      "hash": "a4d62df2052558d2d08469fc442c3e4cb56d6dd57c95814c8073c13814bc858f",
      "content": "<Image maxWidth=\\"30em\\" />"
    },
    "puz175": {
      "hash": "353881f57b4c1d961626e7f8aed409096fd144b34fc9472824ff6b876f815d93",
      "content": "<Flavor>The final answer is a two word phrase.</Flavor>\\n\\nTaylor Swift has a long list of these  \\nBody part that widens during delivery  \\nMusical instrument option for many a middle school student  \\nFire or cut  \\nSlang word meaning overly dramatic  \\nOrientation label that comes after gay in initialism  \\nFirst name of American founder killed in a duel"
    },
    "puz176": {
      "hash": "eac31d31129715bd9d948ba2abba352c166c381e76aa1f74b10d8c5a45f69e4b",
      "content": "\\"_____ – A Circle of Children\\" (Japanese science fiction anime)  \\nAble to become active, but yet to start doing so  \\nFlying type healing move whose PP was cut in half in the latest generation of Pokémon  \\nSome straight women might do this at the body of a hunk  \\nWith \\"star\\", a spice that can be used to flavor roast duck or biryani  \\nYou might do this to an Oreo in some nice cool milk"
    },
    "puz177": {
      "hash": "bfa07a3f59ddcfb94531a3bf08c1cc19ab5a248c2c2a84bcc77d49ac83965e0e",
      "content": "Give your best guess for the alcohol percentage of elephant milk."
    },
    "puz179": {
      "hash": "ed11f0cb87f639a0443f255c3a47108e5c290414c955409059aac23065b5ba59",
      "content": "_____ as day  \\n_____ Blue  \\n_____ end  \\n_____ giant  \\n_____-force attack  \\nAbsolve  \\nEmpty  \\nEt tu, _____ ?  \\nLegolas, for example  \\nPlain  \\nPlantain, for example  \\nProduce  \\nProfound  \\nReply to a question  \\nResult of labor  \\nSavage  \\nSpelled backwards, it’s something you almost certainly did yesterday  \\nState of matter  \\nThe _____ on the Shelf  \\nThe number of times each _____ appears is relevant  \\nThe thing you’re trying to get right now  \\nWith “up”, to inflate one’s ego  \\nWord shouted before the use of a defibrillator"
    },
    "puz180": {
      "hash": "e6b46dd1d1334f56d8fafdda8899aee16e8de84ff8d6f161fe19f33fba0bcc87",
      "content": "- 3’1 2 1 6 2 5 <u>7</u> 5 8 4 5 2 3 4 (1996)\\n- 4 6 1 3 2 4 6 1 3 2 4 3 4 <u>7</u> 1 3 2 4 7 1 3 2 4 (2022)\\n- 3 3 5 4 3 3 3 3 8 3 3 7 5 3 3 2 6 4 9 4 3 2 2 5 3 7 2 2 6 2 7 7 4 4 2 5 2 4 11 7 3 6 5 3 2 6 7 4 3 3 2 2 7 4 7 4 4 5 7 1 4 2 4 6 3 2 5 2 2 7 2 2 3 5 5 2 7 4 3 3 3 1 4 11 8 7 2 4 3 3 5 3 10 2 5 <u>11</u> 3 4 5 5 3 6 3 3 2 5 3 10 4 2 5 3 4 3 8 3 12 5 5 2 3 5 10 7 3 4 5 4 3 3 2 2 5 4 4 6 2 2 3 6 2 3 4 2 4 3 7 4 2 4 4 2 1 4 4 2 1 4 3 3 (2008, punctuation not included out of laziness)\\n- 2 2 2 (2 2 2 2 <u>2</u> 2 2 2 2) (2010)\\n- 9 3 3 <u>8</u>, 8, 2 4, 4 3 3 (1972)\\n- 3 <u>5</u> 5 2 5 4 3 6 2 3 5 3 8 5 4 5 3 4 4 5 4 4 2 (2012)\\n- 2 3 6 2 7 2 5 2 <u>7</u> 9, 2 3 12 2 8 5 2 3 8 3 4 (1859)\\n- 5: 8 9 2 7 3 4 7 <u>8</u> 6 2 10 (2006)"
    },
    "puz182": {
      "hash": "300393779ac216adff10f76c8d0720b2734e9435c8053eb29e3d124deb57d69b",
      "content": "<Image inverted alt=\\"A squiggly line getting more compressed from left to right. Underneath are the numbers 4, 5, 2, a gap, then 5, 10, 3, 3.\\" />"
    },
    "puz183": {
      "hash": "bce89c670ff5410b1748e501358c9d281008921294e5efb571faccdafb9e3953",
      "content": "<Image name=\\"1\\" />\\n<Image name=\\"2\\" />\\n<Image name=\\"3\\" />\\n<Image name=\\"4\\" />"
    },
    "puz185": {
      "hash": "5697a348219d0265262c215cf85f3b08dc7b296bed5cc314337a3d2a81cf8023",
      "content": "Hailed guns or bayonets  \\nUnder-table housing, say  \\nDying southeastern lab  \\nNebulae, hilts, and gyros  \\nEstablish a young diner  \\nBlonde’s signature “Yeah!”  \\nSent horribly, as a nudge  \\nBe shunted, in a glossary"
    },
    "puz186": {
      "hash": "cef3213da22d1244fd0b0d72334e39817840d061d0d74270c2b41e97d92411d2",
      "content": "COTNG RHATE ULSER AETIP ROENS READS TENHE STOEA SNEST HZOUE ROGSH"
    },
    "puz187": {
      "hash": "da1dde3b244dc906220360390c8d75705c80b53a775b08dcb3f3dbf26eca158b",
      "content": "<Image fullWidth alt=\\"Four circular arcs, each with the same radius. From left to right, using absolute bearings: the first arc goes from 45 to 135 degrees, the second arc goes from 135 to 225 degrees, the third arc goes from 0 to 270 degrees, the fourth arc goes from 0 to 90 degrees.\\" />"
    },
    "puz189": {
      "hash": "67ef64347e30733d96e69edff7b41799dc1a48ae009baa7131f8a0cb129290c3",
      "content": "<Flavor>you don’t even have that bit more now</Flavor>"
    },
    "puz190": {
      "hash": "cbe728932e64dada0fd1706af70dce652504d066a4636b91966bc6bee617292b",
      "content": "Name the video game these audio clips are both from.\\n\\n<Audio name=\\"1\\" />\\n<Audio name=\\"2\\" />"
    },
    "puz192": {
      "hash": "e9444fc196efb799b74b5c7a0aa8c77811694dcbd8a2b7f19db8f428fdb13c6d",
      "content": "<Image fullWidth />"
    },
    "puz194": {
      "hash": "5b025cea34e2b25b6d886f8f0ae1c1c4e036286f7632f5af90ad11b97b10a97f",
      "content": "\`\`\`\\nando l  swh sc  vi\\nvar  v- pth gh- pen\\n\`\`\`"
    },
    "puz196": {
      "hash": "cf62dd32a9c032f27ee2a70b25ab80837faf1c07f23ef50182367abbc71ef43f",
      "content": "Historic age (10)  \\nFeeling in space (8)  \\nName on the Eiffel Tower (4)  \\nKing Lear character (1)  \\nMesh (2)  \\nEuropean mountain range (9)"
    },
    "puz197": {
      "hash": "8f6d74ff334d9dc7397b8bf370fa01fc9fa47cbe351053049584c315c45de47c",
      "content": "<Image inverted pad />"
    },
    "puz199": {
      "hash": "97be64ccbe2c7077cc2252ddadade4e2c48d05af9c41c86bbeb189032b97a29e",
      "content": "ᐹᑦᒪᓐ"
    },
    "puz200": {
      "hash": "11e2c4325323b6b410c9f9e08d0195535aabd333286237387ac18ef03a1d200b",
      "content": "<div style={{\\n  backgroundColor: \\"#FACADE\\",\\n  width: \\"20em\\",\\n  height: \\"20em\\",\\n}}></div>"
    },
    "puz201": {
      "hash": "30c44d84eac4a1661ba71f6cbc435ca3a456ad22a7f736862b67942b2e27d69d",
      "content": "Auditory One-bedroom (2)   \\nManyPark (2)  \\nGolddarkness (8)    \\nMiddle (3)  \\nDoors (3)  \\nHome (1)  \\nLetter (3)  \\nIndividuals (2)"
    },
    "puz203": {
      "hash": "65f8aa50ce0e4e38c02925156c379910ffac6b6306087306275e032ded1fa5e1",
      "content": "Whose regulations are these?\\n\\n- Refrain from answering calls.\\n- Do not grant access to that individual.\\n- Avoid befriending that individual."
    },
    "puz204": {
      "hash": "769997f5ef4a582dd97c223d5b17afbaee1c340a5035ffa057219b21364c6433",
      "content": "\`\`\`\\nᓇᓇᓇ ᓇ   ᓇᓇᓇ ᓇ   1   -   6\\nᓇ       ᓇ   ᓇ   ᓇᓇᓇ ᓇ           ᓇᓇᓇ ᓇ       -   3\\nᓇ    ᓇᓇᓇᓇᓇ ᓇ ᓇ ᓇ7   4\\n\`\`\`"
    },
    "puz205": {
      "hash": "4a9ceee1e947d8517348010acc08ed4541a176d8d1fa1077fbfeb7ead97d21f4",
      "content": "<Puzzle205 />"
    },
    "puz206": {
      "hash": "a7f2458c65456801fae956449383fddcd35e8b8ea72aaf68d3fb748bc08f80b6",
      "content": "Also  \\nCut off  \\nIt’s not gender  \\nPang or spasm  \\nPartner of rank  \\nStern  \\nSung poem  \\nVision"
    },
    "puz207": {
      "hash": "782fe372cd557108318d5a834b4f82e3ab7a7547daf7e9b23b8b6907eac4ccc1",
      "content": "<Puzzle207 staticPuzDir={props.staticPuzDir} />"
    },
    "puz208": {
      "hash": "680a43de84da2d0a7d999d40c61d57067ca8989131a6e86e9390dc6c05d83b0d",
      "content": "Literally in French (10)"
    },
    "puz209": {
      "hash": "3cb2966a08ad756798c1b189bba86ac3b14f7714d8a748a699663e3279edb4bb",
      "content": "<Image pad inverted alt=\\"A regular pentagon. The edges are arrows pointing clockwise. The vertices are labeled, starting from the top-left and going clockwise, Be, N, H, C, and Li.\\" />"
    },
    "puz210": {
      "hash": "048d92be636629f5b5756fa7364955209cb3bf4899887f86eeb19c09f22f0174",
      "content": "<Image />"
    },
    "puz219": {
      "hash": "874eb46a464896aa3999ab458c5065d6f701cbec00a5c0535fe78ab24315b50a",
      "content": "好きな日本のVTuberがライブで歌っています。英語ではこれを「Karaoke」と言いますが、日本語ではどう言いますか？"
    },
    "puz211": {
      "hash": "dfa04c6ccbe9c4e17dbcb97002c599f73747e5368c6ea58e220eb9ea0997e349",
      "content": "Suppose you’re on a game show, and you’re given the choice of three doors: Behind one door is a car; behind the others, goats. You pick a door, say No. 1, and the host, who knows what’s behind the doors, opens another door, say No. 3, which has a car. He then says to you, “Do you want to pick door No. 2?” Is it to your advantage to switch your choice?"
    },
    "puz212": {
      "hash": "bac41c3418424c6040dafa0d814ca9e99cdc980a0df0c6e786f24f10ab9597d0",
      "content": "Where’s the answer? You need to find it!"
    },
    "puz212.1": {
      "hash": "17a10b3b32a0424e0abb8a30f488adcd06a2d080de0bf813b7ea1724dd5d0173",
      "content": "You’ve found it! The answer is OBSCURED."
    },
    "puz213": {
      "hash": "8d8ba59b20ef71a4ce859fe9b3d9ec1ed03b2bc480f949f22fd0d079801690fe",
      "content": "<Image fullWidth />"
    },
    "puz215": {
      "hash": "25ee8c71228ef0d70d1e46adc470963ef9ff1eadde92e6fc962daa27a91382b0",
      "content": "Inhabited continent that touches the Prime Meridian  \\nOlympian that can grant the Crystal Clarity boon in Hades  \\nPlanet named after a Roman god that was the child of Ops  \\nPrivate investigator that is a title character of a series of games made by Telltale Games  \\nAstrological sign for someone born in September  \\nMonth in the Gregorian Calendar that Easter occurs on"
    },
    "puz216": {
      "hash": "c92e974c8586ef2516bebffcd722845983e471e4c0deb5cd308f135b57e46552",
      "content": "<Table\\n  cells={[\\n    [<Image name=\\"1-1\\" maxWidth=\\"10em\\"/>, \\"3\\", <Image name=\\"1-2\\" maxWidth=\\"10em\\"/>],\\n    [<Image name=\\"2-1\\" maxWidth=\\"10em\\"/>, \\"3\\", <Image name=\\"2-2\\" maxWidth=\\"10em\\"/>],\\n    [<Image name=\\"3-1\\" maxWidth=\\"10em\\"/>, \\"4\\", <Image name=\\"3-2\\" maxWidth=\\"10em\\"/>],\\n    [<Image name=\\"4-1\\" maxWidth=\\"10em\\"/>, \\"2\\", <Image name=\\"4-2\\" maxWidth=\\"10em\\"/>],\\n    [<Image name=\\"5-1\\" maxWidth=\\"10em\\"/>, \\"1\\", <Image name=\\"5-2\\" maxWidth=\\"10em\\"/>],\\n  ]}\\n/>"
    },
    "puz220": {
      "hash": "5122a7fa0aa585dd0db573d540cf9b792f4638db89fd8a643e3f373be1e1e254",
      "content": "Give the Turkish name for this thing, which comes from French. (8)\\n\\n<Image fullWidth />"
    },
    "puz221": {
      "hash": "816640199579387ccd99861c295fb6006c94c926e53068f9fcf61d495c76c6d0",
      "content": "<Flavor>I wanted a word list, not a Wortliste!</Flavor>\\n\\n<Image inverted fullWidth />"
    },
    "puz222": {
      "hash": "a7903fd006b36511674f9324a5385ef52a29a9d50807090c341875505e99c5d9",
      "content": "The answer is six letters long and is a proper noun."
    },
    "puz223": {
      "hash": "7ca425c93a6c34f1db2c95288e928820d5f232b0db5d853cb990e27718e97221",
      "content": "Number of legislators (2)  \\nDate joined (4)  \\nAlphabetical (7)  \\nHighest point (2)  \\nTallest building (2)  \\nArea (7)"
    },
    "puz224": {
      "hash": "c55582be80df7aafa2c0f4764255b96fa423bb0ee872730df2626847781c9ebb",
      "content": "The answer is nineteen letters long."
    },
    "puz225": {
      "hash": "31de4abe23953385f25d6c79ac658d8b4a40a2d9207f4994e78398b6180bcaa2",
      "content": "* 50, in some context\\n* 50/50, in a common cipher context\\n* 50/50, in some context\\n* 50, in the same context as the previous"
    },
    "puz226": {
      "hash": "33167c6b5f4d55772eb93279fa2bd06228fbba3de79c9565a0747d6d4edbc3c5",
      "content": "Before a drug that treats something like **pleurisy, clots**, or heartburn can be approved, this kind of study must be run.\\n\\nStudents of this discipline may find their **potentials uninhibited** after learning about circuits.\\n\\nThe NBA team of this city won a **playoff epically** in a so-called “five game sweep”; that same team’s odds of doing so next year aren’t looking so good though. (Give the city and state.)\\n\\nThere was **no question of tempo** when this piece was first performed in 1928; its composer found the playing to be sluggish and dragging.\\n\\nThis tennis player made **global news; eyes** all around were on her during a Battle of the Sexes.\\n\\n_The final answer is nine letters long._"
    },
    "puz227": {
      "hash": "3b9aa8309a1b00a16e3a56580f3a36a3f08bbe115b3a034034146d597c640987",
      "content": "Two simplified Monopoly houses with roofs pointing in opposite directions, with a shared square base and perpendicular roof ridges (9 15)"
    },
    "puz228": {
      "hash": "220f44be31f19f8911bbc521a2bbf1987c2db8bf1d115b6220b3f034739ede6b",
      "content": "<Image whiteBackground fullWidth />"
    },
    "puz229": {
      "hash": "4914e99136a5e75186807f57f7ac9afe73a9f040073d595e58b5d9609b7c0c85",
      "content": "<Image fullWidth />"
    },
    "puz230": {
      "hash": "4d2e5b2ab5c1121d00a7a7a14e71b4500a4a226e5f3a09122efa75c091fed5d2",
      "content": "<Image />"
    },
    "puz231": {
      "hash": "5908204dd40d36ca41f15126a84860d0d3d3c8f3d0275ecd898f46add81d661a",
      "content": "Identify the flavor of this water to get a free hint.\\n\\n<Image />"
    },
    "puz232": {
      "hash": "b2a972d15d74faf4fda62e25a3904e7075a17fd555bbdb14a813b6c274046929",
      "content": "<Image />"
    },
    "puz233": {
      "hash": "77522e7d8dfdbc004877b3321ddfcffc62665f71950c22a4cfd22f0bdb596114",
      "content": "<Flavor>Eh... a mediocre puzzle, not great.</Flavor>"
    },
    "puz235": {
      "hash": "e7968784ec1613c5ee018dd7f90f4ffa7c1a609b1baf8011b019b8e997317883",
      "content": "<Image />"
    },
    "puz236": {
      "hash": "2a6b49f599168e667ac81dbdbed099deb694a45a8436b2735743b5dcf2ecd82c",
      "content": "<Flavor>Look at all these boxes!</Flavor>\\n\\n<Image alt=\\"Seven rows of squares on top of each other. In each row the squares all have the same size, and the size increases from top to bottom. Most squares are gray, but one square in each row is red. The first row has three squares, the second is red. The second row has six squares, the fifth is red. The third row has seven squares, the seventh is red. The fourth row has five squares, the third is red. The fifth row has six squares, the fifth is red. The sixth row has six squares, the fifth is red. The seventh row has five squares, the fifth is red.\\" />"
    },
    "puz237": {
      "hash": "ef56f44f44c04d0bc80a08790a78f364054142c27640600d4871df0f5a8d074a",
      "content": "Type the exact text blurred in the background of this image.  \\n\\n<Image fullWidth />"
    },
    "puz238": {
      "hash": "c5c69db1ce4415b353890d38a279744c072fda4912082170dfe837fe4a9fb313",
      "content": "<Flavor>With remorse, you feel that your hex resistance is flagging a bit.</Flavor>\\n\\n\`\`\`\\nDASHDOTDOTDOT DOTDASHDOT DASHDASHDASH DOTDASHDASH DASHDOT DOTDASHDASH DOTDOTDOTDOT DOTDOT DASH DOT  DASHDOTDOTDOT DOTDASHDOT DASHDASHDASH DOTDASHDASH DASHDOT DOTDASHDASH DOTDOTDOTDOT DOTDOT DASH DOT  DOTDASHDOT DOT DASHDOTDOT DASHDASHDASH DOTDASHDOT DOTDASH DASHDOT DASHDASHDOT DOT\\n\\nn\\nTOPRIGHTMIDDLELEFTMIDDLERIGHTBOTTOMRIGHT TOPRIGHTMIDDLELEFTBOTTOMLEFT TOPLEFTMIDDLERIGHT\\n\\nDOTDOTDASHDOT DOTDOT DOTDOTDOTDASH DOT DOTDOTDOT DOT DOTDOTDOTDASH DOT DASHDOT\\n\\nBROWNWHITE BROWNYELLOW GREEN\\n\\nTOPLEFTMIDDLELEFTMIDDLERIGHTBOTTOMLEFT\\n\`\`\`"
    },
    "puz239": {
      "hash": "d081ea1760860bf4b42d03206a0f341515da54eabf239a67a44e82b390353e49",
      "content": "- The answer is a single character in Unicode.\\n- This character is recognizeable by a majority of people aged 16–25 in the United States.\\n- This character has vertical symmetry.\\n- This character has horizontal symmetry.\\n- This character’s Unicode code point is divisible by seventy-nine.\\n- This character appears in at least one other puzzle of this hunt."
    },
    "puz240": {
      "hash": "9b91891c781384a38c58e8bb8eed26c1e65b05c8ec0222c977f0c15e9129cb29",
      "content": "St. Catherine  \\nBay  \\nNorthern Big River  \\nSouthern Big River"
    },
    "puz241": {
      "hash": "8f97fb64a76db309eed0a00533845acd2f2fd845a4e729f443e48ffc376a0ba1",
      "content": "Ã¡Ã§cÃ¨Ã±t"
    },
    "puz244": {
      "hash": "33b640119b1c9e4aa9cd7aa0dcf931492a8e0e495b4f08056e6f4529a3f553a1",
      "content": "<Image />"
    },
    "puz245": {
      "hash": "e19634e4288618e36d39a3428f384e4d8ce4742672de2412c0c238789434b282",
      "content": "A parent might live this way  \\nA performer of a certain theatrical genre  \\nAlert, watchful  \\nExcessively hungry  \\nInfraction, low-level offense  \\nOne who has served in the military  \\nRemnant, trace  \\nSingle by K/DA  \\nSoup invented by Louis Diat  \\nSubsidiary of Alphabet Inc. focused on life sciences  \\nTable with a mirror"
    },
    "puz246": {
      "hash": "8e45efcd04d4a33f3df529a2f51c7e6ac39e8092981b39723df14048f9926d7b",
      "content": "<table className=\\"horizontal-unbarred cells-text-align-center\\">\\n\\t<tr>\\n\\t\\t<td style={{color: \\"violet\\"}}>I</td>\\n\\t\\t<td><div role=\\"img\\" alt=\\"Red square\\" style={{\\n\\t\\t  backgroundColor: \\"red\\",\\n\\t\\t  width: \\"2em\\",\\n\\t\\t  height: \\"2em\\",\\n\\t\\t}}></div></td>\\n\\t\\t<td><div role=\\"img\\" alt=\\"Blue square\\" style={{\\n\\t\\t  backgroundColor: \\"blue\\",\\n\\t\\t  width: \\"2em\\",\\n\\t\\t  height: \\"2em\\",\\n\\t\\t}}></div></td>\\n\\t\\t<td><div role=\\"img\\" alt=\\"Yellow square\\" style={{\\n\\t\\t  backgroundColor: \\"yellow\\",\\n\\t\\t  width: \\"2em\\",\\n\\t\\t  height: \\"2em\\",\\n\\t\\t}}></div></td>\\n\\t</tr>\\n\\t<tr>\\n\\t\\t<td style={{color: \\"violet\\"}}>II</td>\\n\\t\\t<td>50</td>\\n\\t\\t<td>25</td>\\n\\t\\t<td>15</td>\\n\\t</tr>\\n\\t<tr>\\n\\t\\t<td style={{color: \\"violet\\"}}>III</td>\\n\\t\\t<td>40</td>\\n\\t\\t<td>45</td>\\n\\t\\t<td>55</td>\\n\\t</tr>\\n\\t<tr>\\n\\t\\t<td style={{color: \\"violet\\"}}>IV</td>\\n\\t\\t<td>60</td>\\n\\t\\t<td>30</td>\\n\\t\\t<td>70</td>\\n\\t</tr>\\n\\t<tr>\\n\\t\\t<td style={{color: \\"violet\\"}}>V</td>\\n\\t\\t<td colspan=\\"3\\">___ : <span style={{color: \\"red\\"}}>?????</span> :: ___ : 14</td>\\n\\t</tr>\\n</table>"
    },
    "puz247": {
      "hash": "1f358adb630aa8c0cfff914770073f89eb4b79c90d03b931e5546eee6f45439a",
      "content": "<ul className=\\"list-no-bullet\\">\\n<li>A) Type of words?</li>\\n<li>B) Type of slayer?</li>\\n<li>C) Type of beef?</li>\\n<li>D) Type of matter</li>\\n<li>E) Type of concert</li>\\n</ul>\\n\\n<PuzzleGrid text=\\"5x5\\" optionsOverride={{\\"data-fill-classes\\":\\"white\\",\\"data-edges\\":\\"5x5\\",\\"data-top-clues\\":\\"A|B|C|D|E\\",\\"data-left-clues\\":\\"A|B|C|D|E\\"}}/>\\n\\n<ul className=\\"list-no-bullet\\">\\n<li>1× → 0</li>\\n<li>not 1× → 1</li>\\n</ul>"
    },
    "puz250": {
      "hash": "ed434e435ec279a31d7de41668ced9b652fea804152bca56daf32a06d6ca8321",
      "content": "[{\\"?????://??.?????????.???/????/??????????_???????_(???????)_??????_?._?????????_?1???_??,_????,_??_??_?????????_??_?????_????_??????_??_?????_???2??%??%???,_??_?????_?3???_??_???%??%???_??_???_??4????,_????_??????????,_?%??%??????,_??????????_???_?_??5??????????_?????_?????????_??_6???_???_?????\\"}](#)"
    },
    "puz251": {
      "hash": "39f8485ca134edfe53bee458fc22eb25dc361491d48d6af7788fd1ce6fd9cd2e",
      "content": "<div style={{display: \\"flex\\", gap: \\"1em\\", flexWrap: \\"wrap\\", margin: \\"1em 0\\"}}>\\n\\t<Image name=\\"1\\" fullWidth style={{flex: \\"1 1 30%\\", height: \\"100%\\", lineHeight: \\"0\\", margin: \\"0\\"}} />\\n\\t<Image name=\\"2\\" fullWidth style={{flex: \\"1 1 30%\\", height: \\"100%\\", lineHeight: \\"0\\", margin: \\"0\\"}} />\\n\\t<Image name=\\"3\\" fullWidth style={{flex: \\"1 1 30%\\", height: \\"100%\\", lineHeight: \\"0\\", margin: \\"0\\"}} />\\n\\t<Image name=\\"4\\" fullWidth style={{flex: \\"1 1 30%\\", height: \\"100%\\", lineHeight: \\"0\\", margin: \\"0\\"}} />\\n\\t<Image name=\\"5\\" fullWidth style={{flex: \\"1 1 30%\\", height: \\"100%\\", lineHeight: \\"0\\", margin: \\"0\\"}} />\\n\\t<Image name=\\"6\\" fullWidth style={{flex: \\"1 1 30%\\", height: \\"100%\\", lineHeight: \\"0\\", margin: \\"0\\"}} />\\n</div>\\n\\n(Use the exact names according to BoardGameGeek.)"
    },
    "puz253": {
      "hash": "98773875fe836f2a8ab26c7b3dfe3dd951b53ee2546ff8540540195bf87a8c11",
      "content": "It’s a hot afternoon at Dolphin Stadium, and the Tampa Bay Rays are coming up to bat.\\n\\nWhat is the last name of the third base umpire?"
    },
    "puz254": {
      "hash": "aa52b90fce9af2bbdce8c5107f86e4ce14c2ab58a4ea91f74dc521f531e82bf9",
      "content": "This has ____ morse code dashes  \\nThis sentence has ____ words  \\nThis sentence has ____ vowels (not counting the letter Y)  \\nThis sentence, when rendered in all capital letters, contains ____ letters with loops"
    },
    "puz255": {
      "hash": "12c58bd498db57b501e6218d3a19056e53d09781895c5a7173fa98c323137ca1",
      "content": "<Flavor>This puzzle has two answers.</Flavor>\\n\\n<PuzzleGrid text=\\"AN1ERS|ASHLO1|DR2IFA|CL.ENS|IDTBRE|2NLA1G\\" optionsOverride={{\\"data-fill-classes\\": \\"white white black\\", \\"data-fills\\": \\"112111|111112|112111|112111|111111|211121\\"}} />"
    },
    "puz257": {
      "hash": "3d7309609caaf50b56575c4bff99516fb764699528df10a950d2e47fa4e33edb",
      "content": "AK, AR, AZ, CA, CO, CT, DC, DE, FL, GA, HI, IA, ID, IL, IN, KS, KY, LA, MA, MD, ME, MI, MN, MS, MT, NC, NE, NH, NJ, NM, NV, NY, OH, OK, OR, PA, RI, SC, SD, TN, TX, UT, VA, VT, WA, WI, WV, WY"
    },
    "puz259": {
      "hash": "e12f471de36a59f03de5a780ab6f35ad98f8de57c9698cdfe024abe21ca677f1",
      "content": "me espresso  \\nus macchiato  \\nher cappuccino  \\nyou ristretto  \\nthem cortado  \\nhim americano"
    },
    "puz264": {
      "hash": "af07b7b6252833a140b0bdaba7649c5b18432b6c886bfdd36698ab8e90f0f790",
      "content": "<Hopeless />"
    },
    "puz265": {
      "hash": "a0385700a4e54b90306516c327bfb31fdb3f7b0d2d5e9c758255082d6f7353e1",
      "content": "Your republic  \\nHis okrug  \\nHer krai  \\nTheir federal city  \\nOur raion  \\n?"
    },
    "puz267": {
      "hash": "bc4754f43bbff08e4d0fd2bd7f1b0261b779d5e1d78c3a91d0a0e83e2c318591",
      "content": "me espresso  \\nyou doppio  \\nus ristretto  \\nher cappuccino  \\nhim guillermo  \\nthem cortado"
    },
    "puz268": {
      "hash": "728de53307b1188d75aa7151edbcfc5f3240baeb74ad5f4f6f033cecb016213b",
      "content": "<Flavor>The answer is three words long.</Flavor>\\n\\n<PuzzleGrid text=\\"●PACECR●FT|EPIT●ELIUM|INSIG●TFUL|E●ST●ERMA●|RELATI●ITY|EQU●VALENT|GAME●HE●RY|LIT●RATURE|METAS●ASIS|●IVERPRA●N\\" optionsOverride={{\\"data-fill-classes\\":\\"white\\"}} />"
    },
    "puz269": {
      "hash": "7d61a856acd7aa16d7e62c458e912356f5d7a3348d5f8c9406bd2c19fed5a937",
      "content": "<b>Sources differ. Use Wiktionary to solve this puzzle.</b>\\n\\n9409  \\n15414  \\n49004  \\n77205  \\n82124  \\n92209  \\n96214  \\n110120  \\n126015  \\n135520  \\n136809  \\n157620  \\n161609  \\n172514"
    },
    "puz270": {
      "hash": "aacf077506eb3606a5bcf1c7b7cf257d32cb165d090906835615d0d983d0922a",
      "content": "<Flavor>This puzzle might pull one over you.</Flavor>\\n\\nSmall bed (1)  \\nManufacturing company in Europe that formerly ran a science competition for US high school students (2)  \\nOrientation whose pride flag has a black triangle and purple stripe (2)  \\nCone-shaped voice amplifier (4)  \\nCar rental company that filed for bankruptcy in 2020 (6)  \\nWith “Films”, subdistributor for <cite>Taylor Swift: The Eras Tour</cite> (4)  \\nBreak that’s present in basketball games but not in baseball games (2)  \\nAnnals of the _____, record of Irish history that was compiled between 1632 and 1636 (14)\\n\\n\\n<Blanks content={\`_ _ _ _ _ _  _ _ _\`} />"
    },
    "puz272": {
      "hash": "702a4c684801044135908e2648ea470700e14968f758c1f9b0ba577c3c14e75b",
      "content": "<Flavor>But where did the black pearls go?</Flavor>\\n\\n<PuzzleGrid text=\\"COMMODORE|OBJECTION|CONSCIOUS|SCHOOLBOY|OFFSEASON|AFORTIORI|BLOODWORT|OPENHOUSE|SHOEHORNS\\" optionsOverride={{\\"data-fill-classes\\": \\"white\\"}}/>"
    },
    "puz273": {
      "hash": "b331943df1ae91079571da4c0ffe005e6fb240d4e4b0aed5f751edeb386d7679",
      "content": "Every letter is double-checked.\\n\\n<PuzzleGrid\\n  text=\\"..........|..........|..........|..........|..........|..........|..........|..........|..........|..........\\"\\n  optionsOverride={{\\"data-fill-classes\\": \\"white\\"}}\\n/>\\n\\n**Across**\\n<ul className=\\"list-no-bullet\\">\\n<li>1.    First letter of the alphabet repeated 5 times</li>\\n<li>6.    First letter of the alphabet repeated 2 times</li>\\n<li>8.    First letter of the alphabet repeated 7 times</li>\\n<li>10.    First letter of the alphabet repeated 2 times</li>\\n<li>11.    First letter of the alphabet repeated 2 times</li>\\n<li>12.    First letter of the alphabet repeated 2 times</li>\\n<li>13.    First letter of the alphabet repeated 4 times</li>\\n<li>16.    First letter of the alphabet repeated 2 times</li>\\n<li>18.    First letter of the alphabet repeated 6 times</li>\\n<li>20.    First letter of the alphabet repeated 2 times</li>\\n<li>21.    First letter of the alphabet repeated 6 times</li>\\n<li>22.    First letter of the alphabet repeated 2 times</li>\\n<li>23.    First letter of the alphabet repeated 2 times</li>\\n<li>24.    First letter of the alphabet repeated 4 times</li>\\n<li>26.    First letter of the alphabet repeated 2 times</li>\\n<li>27.    First letter of the alphabet repeated 6 times</li>\\n<li>29.    First letter of the alphabet repeated 3 times</li>\\n<li>30.    First letter of the alphabet repeated 6 times</li>\\n<li>31.    First letter of the alphabet repeated 3 times</li>\\n<li>32.    First letter of the alphabet repeated 4 times</li>\\n</ul>\\n\\n**Down**\\n<ul className=\\"list-no-bullet\\">\\n<li>1.    First letter of the alphabet repeated 2 times</li>\\n<li>2.    First letter of the alphabet repeated 2 times</li>\\n<li>3.    First letter of the alphabet repeated 2 times</li>\\n<li>4.    First letter of the alphabet repeated 2 times</li>\\n<li>5.    First letter of the alphabet repeated 2 times</li>\\n<li>6.    First letter of the alphabet repeated 3 times</li>\\n<li>7.    First letter of the alphabet repeated 9 times</li>\\n<li>8.    First letter of the alphabet repeated 5 times</li>\\n<li>9.    First letter of the alphabet repeated 5 times</li>\\n<li>14.    First letter of the alphabet repeated 3 times</li>\\n<li>15.    First letter of the alphabet repeated 7 times</li>\\n<li>16.    First letter of the alphabet repeated 7 times</li>\\n<li>17.    First letter of the alphabet repeated 7 times</li>\\n<li>19.    First letter of the alphabet repeated 6 times</li>\\n<li>25.    First letter of the alphabet repeated 4 times</li>\\n<li>27.    First letter of the alphabet repeated 2 times</li>\\n<li>28.    First letter of the alphabet repeated 2 times</li>\\n<li>29.    First letter of the alphabet repeated 2 times</li>\\n</ul>"
    },
    "puz275": {
      "hash": "08a4a7908ab553fa96a34e3df81779aafa856e6dbed2fd3dcfb5605d478fc051",
      "content": "<Image />"
    },
    "puz276": {
      "hash": "8d62b6d761111538c0a7dfdf283e1fc687f9cb9e81e19062fa3f47fbe176a88a",
      "content": "A packed train station? (4 4)  \\nAtlantic seaport of the Panama Canal (5)  \\nSeparation of adjacent vowels into syllables (9)  \\nKind of ammunition (6)  \\nAvoidance video game released in 2016 (8)  \\nMiddle word in Descartes’ first principle (9)"
    },
    "puz278": {
      "hash": "cb6ed7f63e91e876d91cf7abb51c8a9c5fab01e23ddd662346065a4422a5c948",
      "content": "Goes into ducts carrying Edward the king  \\nHeads roll after love letter identifies erotic sex friends  \\nIn the middle of sex, a German star points to the rear  \\nIs the last of wives and leader of the sixes in retrospect  \\nSingle Aragonese leader rotates, moving carefully  \\nWriting from far off in France, beheaded by king"
    },
    "puz279": {
      "hash": "e968c620f0dad494ef832a078172f6b6ff10d75dbd7c8de36c9328098b2434da",
      "content": "3.38394944  \\n13.68746437  \\n18.79151272  \\n44.13707348"
    },
    "puz280": {
      "hash": "2c00c807aea1e6672bf7d3e64645569f10bd82e909dddc93069f75875ba6ba2c",
      "content": "I’m on George W. Bush St. in Georgia. What country am I in?"
    },
    "puz281": {
      "hash": "d8b5fc6af8b86258a8c2866fd7f959705d40aea8b700e08789ca25787d19b713",
      "content": "<Flavor>This puzzle has two answers.</Flavor>\\n\\nAmazon warehouse worker  \\nCher or Lil Nas X, e.g.  \\nCrowded  \\nHook, line, and _____  \\nMore likely to stay inside  \\nPillager  \\nRiddled with holes  \\nTaunted"
    },
    "puz283": {
      "hash": "4af32ffa55f2293e4918ffe1af84b05b75baf31fcd76f7541522f3ad9f48531c",
      "content": "<Image fullWidth inverted />"
    },
    "puz284": {
      "hash": "d8e07b538394a90fca5e35a1b7800ce27c73bcfae5dfb3c16276bada9f8c6058",
      "content": "Cheryl chooses a piece of media, and tells Albert and Bernard each a different character from it. Bernard leaves to use the bathroom.\\n\\nAlbert: I don’t know whether Leatherface appears in this piece of media.  \\n<i>Bernard re-enters the room.</i>  \\nCheryl: Just to clarify, both your characters were in this piece of media when it was first released, and not added later.  \\nAlbert: That narrows it down, but I still don’t know if that fictional character is in it.  \\nBernard: Does that mean the media is not a single episode of a TV show, then?  \\nCheryl: That’s correct.  \\nBernard: I still don’t know what the media is, but thanks to this clarification I do know the Iron Giant appears as a character in it.  \\nAlbert: I now know what the piece of media is, and I can tell you that Austin Powers is not in it.  \\nBernard: I also know what the piece of media is.  \\n\\nWhat are the names of the two characters and the media? You may use the answer checker to confirm each answer, even if you aren’t confident of your answers or don’t have all of them yet."
    },
    "puz295": {
      "hash": "763be1f9f8f69fbefaf9588ee6e0baa6cbf92c55a5d3f4cea0b249195c19a3a3",
      "content": "<Image />"
    },
    "puz296": {
      "hash": "37d4fe2fbabb9162b380633e7e31930e651a12c1fe3dda7334369eb445d92acd",
      "content": "- Style pioneered by Picasso (6)\\n- Product of beta decay (12)\\n- Type of COVID test (7)\\n- Method allegedly used by Archimedes to measure the volume of a crown (12)\\n- Theory that hallucinations are fundamentally different from direct perception (13)\\n- Doctrine that considers Jesus and the Holy Spirit to be separate persons (14)\\n- Condition that is not caused by vaccines (6)\\n- Gandhi or da Vinci, for example (10)\\n- Gruesome method of execution that might involve four horses or two trees (13)\\n- Movement with an inconvenient truth? (16)"
    },
    "puz297": {
      "hash": "cad0a29b429cc1e53e5da664f8a37a4f8f7d59c683579bf9b2e53f993f9ca67b",
      "content": "<Image />"
    },
    "puz298": {
      "hash": "8e7a7a2dd92b1de19ab5e6c6d6fb0daf14fd490daa61511050bdaa116a29eba4",
      "content": "### Across\\n\\n1. Mathematical constant\\n2. Small unit prefix\\n3. Radioactive element\\n4. Physical constant\\n5. Physical unit\\n6. Large unit prefix\\n7. Mathematical unit\\n8. Gaseous element\\n9. Gaseous element\\n\\n### Down\\n\\n1. Direction\\n2. Barely passing\\n3. Sounds like a pronoun\\n4. Sounds like some liquid\\n5. Article\\n6. Sounds like some liquid\\n7. Pronoun\\n8. Blood type\\n9. Direction"
    },
    "puz301": {
      "hash": "39f54db00358033f2c0accf870470a1369cd5278428ecf1e6ece5ba2cb3fcc33",
      "content": "Small town inhabitant  \\nFuzzy fruit  \\nHead coach for the G2 League of Legends team  \\nRocha F.C.’s home stadium  \\nConnection that’s not old?  \\nAnimal in the Chinese zodiac"
    },
    "puz302": {
      "hash": "c3ef366cf47665e11980137d4188265529e71aa7e2aa7fcc720cf9cf786b5774",
      "content": "### Across\\n\\n<ul className=\\"list-no-bullet\\">\\n<li>1. Defeat</li>\\n<li>2. Affirmative (alt.)</li>\\n<li>4. Divided by</li>\\n<li>6. Adverb</li>\\n<li>7. One of the poles</li>\\n</ul>\\n\\n### Down\\n\\n<ul className=\\"list-no-bullet\\">\\n<li>1. Extent or duration (abbr.)</li>\\n<li>2. Conjunction</li>\\n<li>3. Half of a toy</li>\\n<li>4. Complexity class</li>\\n<li>5. Programming language</li>\\n</ul>"
    },
    "puz304": {
      "hash": "43d7d1aa595a6f7cdbcf0e6e5acddd3871478a3a7fcb8d1136d02e9fdd1328bc",
      "content": "<Image />"
    },
    "puz305": {
      "hash": "52f798a743fed2defb12dda0909a7c918e96f0c00b25725a07254fee4100cdda",
      "content": "<Image fullWidth />\\n\\n<Flavor>For accessibility, versions of the image with only the lines of each specific color by themselves are provided below. They are not required to solve the puzzle.</Flavor>\\n\\n<Gallery items={[\\n  { images: [\\"1\\"], caption: \\"\\" },\\n  { images: [\\"2\\"], caption: \\"\\" },\\n  { images: [\\"3\\"], caption: \\"\\" },\\n  { images: [\\"4\\"], caption: \\"\\" },\\n  { images: [\\"5\\"], caption: \\"\\" },\\n  { images: [\\"6\\"], caption: \\"\\" },\\n  { images: [\\"7\\"], caption: \\"\\" },\\n  { images: [\\"8\\"], caption: \\"\\" },\\n]} animationHandler=\\"fade\\" imgProps={{fullWidth: true}} />"
    },
    "puz306": {
      "hash": "e6e330eb21654806cdcea7e040198c3d507daa099b427f98221fbf0180f109ad",
      "content": "<Audio />"
    },
    "puz308": {
      "hash": "b862befe13169915cdac781abbcb2d4431aeb7730f172dfc99dee88a886eddff",
      "content": "Vocal prince to broadcast opposition to tangled ancestries, supported by every other town loudly telling tales, floating remedy that involves repairing tear of being"
    },
    "puz309": {
      "hash": "59013108d137297cd2e8e1d8bba416069d577f289f107312bf2836a9aef35fbe",
      "content": "<Image />"
    },
    "puz310": {
      "hash": "ca8080e18d0b521c211da830da911c1d9e0213093d72ab1301e617ad0eac61bf",
      "content": "<Image />"
    },
    "puz311": {
      "hash": "7be9df2174ea64f4ffc636f1cd2b1d5db4afee3f0deae73b04aa58c43e17fab4",
      "content": "<Image />"
    },
    "puz312": {
      "hash": "6d56d053ff88eaaa89efe4c175febf852a787edb4e2ccc15315855ddffcfa4bf",
      "content": ""
    },
    "puz313": {
      "hash": "44d822788dfe1b2723c1f0f8623554c4d21067c1cd39af20ee6f580833c21e28",
      "content": "Contribute to the hope pool to reach the target of {props.HOPE_POOL_CONFIG.minToClaim} hope!\\n\\n- As a team, you may contribute {props.HOPE_POOL_CONFIG.contributionAmt} hope to the pool at any time. You may contribute multiple times, and may do so even after restoring the star.\\n- If the pool has at least {props.HOPE_POOL_CONFIG.minToClaim} hope, you may claim the pool for your team. Claiming the pool resets it, restores the star for your team and gives your team {props.HOPE_POOL_CONFIG.claimRewardMultiplier.toFixed(1)}x the amount of hope that was in the pool. Your team may only claim the pool once.\\n- <Twemoji tag=\\"span\\">⚠️</Twemoji> <b>You may only claim the pool if your team has not contributed to it since the last time it was reset.</b> <Twemoji tag=\\"span\\">⚠️</Twemoji>\\n\\n<HopePool />"
    },
    "puz315": {
      "hash": "40f13cc2f4f3d7ccc3a29faefff2a82033252a6cdb9e8499cf1fd1f55617f8a9",
      "content": "<Flavor>Who the hell is...?</Flavor>\\n\\nUI design app  \\nMystery (2)  \\nLike parent?  \\nGreek letter"
    },
    "puz316": {
      "hash": "3d9b3917290f748115bd60783a58929d0434bf4899e4c419a009f3507bebd99d",
      "content": "<Image inverted alt=\\"Rows of characters, some joined by lines. The first row has the letters H, A, P, P. The second row has the letters P, M, C, each with a line from their top to the bottom of the last P in the first row. The third row has the letters T, J, C, each with a line from their top to the bottom of the M in the second row. The fourth row has the letters E, M, L, each with a line from their top to the bottom of the J in the third row. The fifth row has the characters ?, ?, ?, C, ?, K, ?. The first four characters each have a line from their top to the bottom of the M in the fourth row. The last three characters each have a line from their top to the bottom of the L in the fourth row.\\" />"
    },
    "puz317": {
      "hash": "c3b1eaeee7203e4595e83aa84ffb474580649a18373c70c928394da69f6f92c1",
      "content": ""
    },
    "puz318": {
      "hash": "13ce0ad136d2161538204bbc654a81300c0341cfb1b7355d57ccbf339bcb4aa8",
      "content": ""
    },
    "puz319": {
      "hash": "6df9c08f3f77b83ce8df449a27c7b2a07390fc770b3719e692d71da4838adc46",
      "content": ""
    },
    "puz320": {
      "hash": "7a5bcdb6cba765f9e74198b6e3ca828ae91140042b5532d26b74b69a694061f5",
      "content": "AT    DOWN    GET    HAVE    I    IT    LOOK    ONCE    SEE  \\nALL    BEFORE    STORY    TAKES    THE    THOUGHT    THROUGH    UPON    YOUR  \\nA    AS    EVER    IN    IT    MONEY’S    ONE’S    PRACTICAL    THE  \\nHAT    HELL    LEAP    LEAST    PURPOSES    SORTS    TAKES    TOLD    WIRE"
    },
    "puz321": {
      "hash": "e3176759ba7f2898d0fbe16b5855fbdc04817fe727bd11a1f8e525534111a046",
      "content": "BANE  \\nBIND  \\nBLOT  \\nBOOM  \\nBULL  \\nFOAM  \\nFOWL  \\nGNAT  \\nGOUT  \\nJOLT  \\nKOAN  \\nREAM  \\nREED  \\nROAR  \\nTALL  \\nVOLE"
    },
    "puz322": {
      "hash": "381ba29569cae5287089c63b1c09573ac1460e8f7b5b4d5e7d2f2c90287a31d1",
      "content": "<a href={\`https://riddl.ing/?game=9HNBCff0nZIDA1M7zvfvADhuPmNuLI0KEgwlVvf0CQRnHQQrr41wFc739J1WFSULWAwMT_dWFSUCWAwMT01WFSUCWAxtNPPzQAD-R1TiRhsA_lAl0dFTAP5I1SL_AzIwMjQ=\`} target=\\"_blank\\">Custom riddl.ing game</a>"
    },
    "puz324": {
      "hash": "2ea68abba229d695d93f7c221645d8e6beb592228c076569247cfa570e7be977",
      "content": "The answer is hidden in these<span style={{fontSize: \\"0\\"}}>The answer is PRESENCE</span> very words."
    },
    "puz325": {
      "hash": "c93f21cfab6ddfa105defcd4503c90d3c92140f4c3be378eb02cdd4898f506e2",
      "content": "The answer is guaranteed by the rules of the hunt."
    },
    "puz326": {
      "hash": "b6397cbf03ceffee99fb757fc8c88c233c51498fc58ef7721fc19e0f63d84cd5",
      "content": "The answer is probably the first thing that pops into your head (or if not, it’s pretty close)."
    },
    "puz327": {
      "hash": "ac3061ba7ef4c794cdf616e20a4adb9ff8f2e198dbe8eab63ba50fda79a80e14",
      "content": "The answer to this puzzle is hidden in the one place that’s guaranteed to have it."
    },
    "puz328": {
      "hash": "b29f21df8fa16744ed8013672e988729a2be0b4621364abdf6c06590ebf2e6d6",
      "content": "The answer is hidden in the answers we’ve found along the way."
    },
    "puz329": {
      "hash": "645fd29342bd7dc6feeea7eb7f1f0564e823c236a864fdd04e5666098585352c",
      "content": "<Puzzle329Card name=\\"1\\" headerNum={1} />\\n<Puzzle329Card name=\\"2\\" />\\n<Puzzle329Card name=\\"3\\" />\\n<Puzzle329Card name=\\"4\\" />\\n<Puzzle329Card name=\\"5\\" headerNum={2} />\\n<Puzzle329Card name=\\"6\\" />\\n<Puzzle329Card name=\\"7\\" />"
    },
    "puz330": {
      "hash": "6f5f5ebd03e14c13668f83a2763a4118c305e54caffcacb0670ddcaee881a429",
      "content": "Well found! The answer is \`SNATCHED\`."
    },
    "puz105_custom_4": {
      "hash": "49ccea2394d804ead40bd2d0c1ce571373d41c27fa8f577d27b42bdb455b64c2",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"4\\",\\n  \\"flavortext\\": \\"How do they rank in their respective fields?\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/500787f319cf7eff8905d12e429fa321f8174b93dfd25b1018cd7c43c021bc1b.png\\",\\n  \\"instructions\\": \\"Text in puzzle (for accessibility):\\\\n\\\\nIvy League university located in Cambridge (7)\\\\nMetaphor for hardship, per a 2007 album by The Swellers (7)\\\\n\\\\\\"Steady the Ship\\\\\\" cricketer (10)\\\\nAsteroid 160013 (6)\\\\nA mission of the Kepler spacecraft, also known as \\\\\\"Second Light\\\\\\" (2)\\\\nA Swedish family-owned floor care company (4)\\\\nThe most important (singular!) piece in chess (4)\\\\n(8) (9) (9) (5) (5 5)x2 (6 6)\\"\\n}} />"
    },
    "puz105_custom_8": {
      "hash": "96732aba660460db1ff9bc271b840a25c3d98ffa8bfc5cb5fd230e13c6a91763",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"8\\",\\n  \\"flavortext\\": \\"Am I understanding this correctly or was something lost in translation?\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/8d67d4f2fc7b74f94c777997246aaa6deb13c0b7e3ae8ce27780a44b8639429e.png\\",\\n  \\"instructions\\": \\"Copyable text:\\\\n\\\\nCattle's chair (1/4)\\\\nWhat you may find in a cave (4/4)\\\\nThe Addams Family's main character (1/5)\\\\nIt has no coins (3/6)\\\\nFound at the end of the bras (2/4)\\\\nUsed to cover up your pain (5/5)\\"\\n}} />"
    },
    "puz105_custom_12": {
      "hash": "79653dd20a8c17161fb6c6a4bd7aaad6069f00573f82aeaf807397920fc226aa",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"12\\",\\n  \\"flavortext\\": \\"The boys are all in (the same) town!\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/a1706d8d18be26202aa43c8f9302f18ce27f4262d8c620a002bd2b4b9d4555f1.png\\",\\n  \\"instructions\\": \\"For accessibility:\\\\n\\\\nFive lines of colored boxes\\\\n\\\\nThe first line, from left to right: Red, Orange, Yellow, Blue, Purple, Gray\\\\nThe second line, from left to right: Cyan, Red, Orange, Yellow, Blue, Purple, Gray\\\\nThe third line, from left to right: Magenta, Green, Cyan, Red, Orange, Yellow, Blue, Purple, Gray\\\\nThe fourth line, from left to right: Magenta, Green, Cyan, Orange, Blue, Purple, Gray\\\\nThe final line, from left to right: Yellow, Purple, Cyan, Green, Red, Orange, Magenta, = ?\\"\\n}} />"
    },
    "puz105_custom_16": {
      "hash": "8d2b9e7170c58d6d8eb803f45f39f0df9b85f65b1b3bcb48d2c1270baac2851b",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"16\\",\\n  \\"flavortext\\": \\"It's the key to the puzzle.\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/c044bd2f7194876a301511ff0f16fdb7061a70122d498ccd7ceacbb83ed1fbdb.png\\",\\n  \\"instructions\\": \\"\\"\\n}} />"
    },
    "puz105_custom_17": {
      "hash": "8d309aff186883308996546fec11988a3fe247423762f10fc7a8452bd6d65a9b",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"17\\",\\n  \\"flavortext\\": \\"help me find the Conclusion to these Four Original Puzzles\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/f772d226d9393d0feb62886a2ad920f1e5293865ea825d33f38b9f6a4f54002d.png\\",\\n  \\"instructions\\": \\"\\"\\n}} />"
    },
    "puz105_custom_18": {
      "hash": "3ef878a15efa92c69240f4912b710d498c1ea9cd127eb242addb950c1d2b4c70",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"18\\",\\n  \\"flavortext\\": \\"\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/9904ddbe61fefc3faec9a68bcc6b19e840198e2a5a02bbe894c6ec8fcca6d377.png\\",\\n  \\"instructions\\": \\"The answer is between 2 and 4.\\"\\n}} />"
    },
    "puz105_custom_23": {
      "hash": "2c4de9de5a41d4515955d2b73ac91d2e6c55d0a3f046bbc9d16b7e0bb8f37365",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"23\\",\\n  \\"flavortext\\": \\"\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/7de10d0c4dc0532cb5b9dfa44a78676a0c19d72c5ad271b064c8b44312f69bc0.png\\",\\n  \\"instructions\\": \\"\\"\\n}} />"
    },
    "puz105_custom_24": {
      "hash": "f658abcd534c01e7f9448549f297f7526cea81392c554b493c04909c212314c3",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"24\\",\\n  \\"flavortext\\": \\"\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/bb4dd6433598aed62756c764e03278b4f09d28114fc20b1c786365b75aa314be.png\\",\\n  \\"instructions\\": \\"Conclusions and the Doldrums are behind one of these\\\\nPositive outcome\\\\nMovie about yetis\\\\nAlter-ego of Dodgson\\\\nPlace where you're lectured\\\\nState with an NFL team\\\\nFormer home of the Try Guys\\"\\n}} />"
    },
    "puz105_custom_25": {
      "hash": "509d100ec2d6bd695cb51d0adf76247b42f44e6e920b3ccb655001812f1b94e9",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"25\\",\\n  \\"flavortext\\": \\"\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/507cb6af095d9aaf458fd152dc14cfb37a07a10d9de6a70d7476d7b40008c250.png\\",\\n  \\"instructions\\": \\"\\"\\n}} />"
    },
    "puz105_custom_26": {
      "hash": "ebf81e20a0c6f0e2a61f3fa2d5f0e666a6388b2b237fa5d1b9c35633e6d9339d",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"26\\",\\n  \\"flavortext\\": \\"You're hanging out in Nara Park with no coat on, and you see all sorts of animal friends! What are their names?\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/b0279601163cff15a896a0b35017633abbf569a18286ecdcd0ba49fcdad2bf86.png\\",\\n  \\"instructions\\": \\"\\"\\n}} />"
    },
    "puz105_custom_28": {
      "hash": "d09b89507d3819e4a9b5a0ea75a7b71f778738e286b0fa6b240e851ef4b38820",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"28\\",\\n  \\"flavortext\\": \\"First is worst, second is better.\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/374753c66062deed2a5a0a359459f85b9b3195a4b832bfd43b3af588a1803ac4.png\\",\\n  \\"instructions\\": \\"\\"\\n}} />"
    },
    "puz105_custom_31": {
      "hash": "87d7c75ab93e42c64777c1aae3c227ea6f8f85c4287c5c41a9cbfc6fbdeeb171",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"31\\",\\n  \\"flavortext\\": \\"From 13\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/ed550858bdf92e7d58eb2d6c885613408c3ad99b59e16b3de06e8072fa6c4400.png\\",\\n  \\"instructions\\": \\"\\"\\n}} />"
    },
    "puz105_custom_35": {
      "hash": "c15ddcbf8e1db61fb967274f7e7a839732fd394bc7f5a600d3af43a22ab663aa",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"35\\",\\n  \\"flavortext\\": \\"A character from an earlier work by the same creators might famously say \\\\\\"🌳-50\\\\\\".\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/45c0b5e2341d77053cc8ed86e979d404e5e49105541228b4aa55c0f452b14ea7.png\\",\\n  \\"instructions\\": \\"The answer is 4 letters.\\"\\n}} />"
    },
    "puz105_custom_36": {
      "hash": "2a34a0514163e17046bbc66818d2b4fb61dfb993409a6453e5c517ca75765199",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"36\\",\\n  \\"flavortext\\": \\"This puzzle blows.\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/94a0ff0fddc0569f5dc75650966c684bb8ece4e34261a8cd8331f37b18f3c538.png\\",\\n  \\"instructions\\": \\"\\"\\n}} />"
    },
    "puz105_custom_37": {
      "hash": "065a0fd17aaf8aeac6dffbe3c6066853bd9d648649a01e1e3aa1da54162deb06",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"37\\",\\n  \\"flavortext\\": \\"Sources differ. Use the first section of a Wiktionary appendix to solve this puzzle.\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/5a6791e2aa4aec9704aaa54462b4f30827bb5df07dba3cef86e7369f5e4d67df.png\\",\\n  \\"instructions\\": \\"709 1214 2904 4305 6024 8309 8714 11220 12815 12820 13009 19820 20012 23605\\"\\n}} />"
    },
    "puz105_custom_38": {
      "hash": "34a1ca331e2f62ef48ca8c479c7d60f04c9ffb97e7fd91dd50a8519a3559a88f",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"38\\",\\n  \\"flavortext\\": \\"In search of guidance, you study the constellations in the night sky. So far, all you have is an alphabetically sorted list of stars. How will this help you navigate your way home?\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/cba534585d2d6d6a990328c4638543c99379b8cd1f30f90ce2a1b776b07f8bba.png\\",\\n  \\"instructions\\": \\"Copyable text:\\\\n\\\\nAlgedi\\\\nAlgieba\\\\nAlhena\\\\nAlrescha\\\\nAltarf\\\\nAntares\\\\nSargas\\"\\n}} />"
    },
    "puz105_custom_43": {
      "hash": "737443c7a2b3172b2f8dd7702f73a2861bed28beeb150d14efaa6a8b2f1d1823",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"43\\",\\n  \\"flavortext\\": \\"\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/16e6226be54d6de0b9f86489b5c4d54eb860a7d4e5ce98ed7fb6c42b15b872e0.png\\",\\n  \\"instructions\\": \\"\\"\\n}} />"
    },
    "puz105_custom_44": {
      "hash": "d27d675c057f931f0273f01f91d4a6002f10adb9bb23b8e6c33d8c66924fd925",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"44\\",\\n  \\"flavortext\\": \\"\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/54b60cc80bf1f5bd2d73a74c703eb6d257d0f68d0c2320f768fcc25932e017ba.png\\",\\n  \\"instructions\\": \\"A movie with a protagonist named Emily.\\\\nA reality show contestant.\\\\nA sound track in a game made by Mihoyo.\\\\nA term discussed in a Lu Xun's article.\\\\nA wine region in California.\\"\\n}} />"
    },
    "puz105_custom_45": {
      "hash": "13e683bcbf3be46d4db5cda1878f8984b9e01f525d178e8eec40cd7ff8cd56c3",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"45\\",\\n  \\"flavortext\\": \\"\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/4008ef442062a94120588a99b682d0e584427c57a55c9934cfe92c2ea1983509.png\\",\\n  \\"instructions\\": \\"\\"\\n}} />"
    },
    "puz105_custom_47": {
      "hash": "c85b437a8dfc1165a58f8b4a1a8fb1935de0adc1ed97f65aea71c56150da9dbd",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"47\\",\\n  \\"flavortext\\": \\"To be or not to be\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/3bf649b083e8e8463c8c1c5ce18361279625269fec147a8f998bb313d5351e8e.png\\",\\n  \\"instructions\\": \\"\\"\\n}} />"
    },
    "puz105_custom_69": {
      "hash": "d9ce62e6eff45ab4b7e0ca8dfe0f21a55af4f17a67d37daa8bf771febdc20d82",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"69\\",\\n  \\"flavortext\\": \\"\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/a1dab82f7c327a8636f48b0c3163c3f4ed0d9f8cddcb7dd4abad4b6f575e9038.jpg\\",\\n  \\"instructions\\": \\"\\"\\n}} />"
    },
    "puz105_custom_73": {
      "hash": "27df525f1c7f934625cfd4ea3bda07ce140357fc2612285596beeb3b10789f14",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"73\\",\\n  \\"flavortext\\": \\"\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/7ac69e0fbf766298d45b212c1effa9bfa7acb7ca6249ff2c42b8f2536481ae68.png\\",\\n  \\"instructions\\": \\"\\"\\n}} />"
    },
    "puz105_custom_74": {
      "hash": "f759faa9ba0797d030aa68f5f148eeda6f4ca0fe7a4b96936b84b3c68cf089fd",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"74\\",\\n  \\"flavortext\\": \\"\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/a34d91e29ed20a2d18db1486867ffb1d60ff2bbef4b0c686bd4752c04587eded.png\\",\\n  \\"instructions\\": \\"\\"\\n}} />"
    },
    "puz105_custom_82": {
      "hash": "f45c95ece0518d46e0aae6634131b5a279d685f54b16ad15a872874342802a7c",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"82\\",\\n  \\"flavortext\\": \\"One is extra...\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/909288c2a582e13d0c92670669a031a23dc975af633c0cf3b9c52b828355c5e5.png\\",\\n  \\"instructions\\": \\"\\"\\n}} />"
    },
    "puz105_custom_87": {
      "hash": "bb814c9ee1a5fdf8b3d2f7c6a8a6e360d74b3407385dd72d0ae28c41365abf30",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"87\\",\\n  \\"flavortext\\": \\"\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/e4f6a484508565c6ef858b1de3aaa02a49b1936eadc8f6486d739005ddcc40b1.jpg\\",\\n  \\"instructions\\": \\"\\"\\n}} />"
    },
    "puz105_custom_96": {
      "hash": "c14935bcfe025b3727a27b10ca6c9df74a1a4a7c3a083f5a06e48a9f808946ad",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"96\\",\\n  \\"flavortext\\": \\"It's Saturday night, so let's see which star will appear in this position this time\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/19cffd82df6f581bca35b300e4412e00a3a5839a9a75f9720a6ec1e46273fde8.png\\",\\n  \\"instructions\\": \\"\\"\\n}} />"
    },
    "puz105_custom_97": {
      "hash": "e99619b6ea914c156af7c1f7d18d1eee44d313a3478d8a0a8191421055d6799b",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"97\\",\\n  \\"flavortext\\": \\"I'm trying to get something specific, but my pulls from this gacha have all been one-stars. Just my luck...\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/80d037346b6e62876d0f690a69e9795d8e03f69ecc7a360b0756fb14df1edf69.png\\",\\n  \\"instructions\\": \\"The answer to this puzzle is six letters long.\\"\\n}} />"
    },
    "puz105_custom_114": {
      "hash": "21432fc56f4a65cb18b530a2553cbb7abdde9071340cd364aeeff1cecb1c1822",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"114\\",\\n  \\"flavortext\\": \\"Olive joins an English meetup where everyone is sending off one of the brightest stars in the sky. Let's see who all is here...\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/d1e477a51b0e5dbcbbbce845cebe670d330b0c30cd1e6f5bd566111b2aa445cd.png\\",\\n  \\"instructions\\": \\"The text, for accessibility:\\\\n\\\\nSmall blue plushies (their oshi got them from a crane game?!) (5)\\\\nA pile of rocks?? (2)\\\\nDogs. No, wait, loaves of bread? It feels like it's been a while... (2)\\\\nA (checks google) colony of shrimp (4)\\\\nPink and blue dogs, some wearing sunglasses! (6)\\\\nA (checks google again) consortium of octopodes (1)\\\\n...what even are those? And why are they all in one shoebox? (3)\\\\nSentient plant... bulb... things. But their leaves are so cute! (1)\\"\\n}} />"
    },
    "puz105_custom_121": {
      "hash": "e13cbe018b854427f3751fef0a116c83aa5c2c8fb21b4a7c5a478040cfdfa9c6",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"121\\",\\n  \\"flavortext\\": \\"As you look up at the tiny white dots in the sky, you think back on your past experiences hunting dots of a different colour. Looks like you may find some kind of dot today too!\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/3aebb444a91f8acf3c7be3d4df76de5061c9b878845dd57f31d955a641e18cee.png\\",\\n  \\"instructions\\": \\"\\"\\n}} />"
    },
    "puz105_custom_126": {
      "hash": "df088ddff434f5408c8edc49ee10dac1adbd1bd1ef8ac6cdbffb9d39cf4eb74e",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"126\\",\\n  \\"flavortext\\": \\"You're not an ordinary fella!\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/3e78dc51308e1e380d4426273e0a69c1356357e76efb2131a5b294222749ecf8.png\\",\\n  \\"instructions\\": \\"spreadsheet version: https://docs.google.com/spreadsheets/d/1PxXmJDj_Y0y0WnohzkcBtqBf5u-v9xhC-H9uEelXOVQ/edit?usp=sharing\\"\\n}} />"
    },
    "puz105_custom_133": {
      "hash": "c9a99476fcce910be50e5cb2dddd32ae388b6d81156105201b4a73139c297f6e",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"133\\",\\n  \\"flavortext\\": \\"\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/30cf60e42d6170da62b8fb3bd2a4f629afcfed5b2c3972a54178018b9520a791.png\\",\\n  \\"instructions\\": \\"\\"\\n}} />"
    },
    "puz105_custom_141": {
      "hash": "23bd3e26608c021d21019d386104dbac811cdbc2a1207e33ba560e7b2f247b32",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"141\\",\\n  \\"flavortext\\": \\"What comes before genius?\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/4af1198b492956ed1d701915a8947b41b1fc36e8a4c1990e1fc7361d588fb00d.png\\",\\n  \\"instructions\\": \\"\\"\\n}} />"
    },
    "puz105_custom_144": {
      "hash": "f01e4a41135da7f6bb3c14e10f5d4d40e216be6e7485f8f3ca005888b3acdc5f",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"144\\",\\n  \\"flavortext\\": \\"This puzzle's so nice, you could solve it twice!\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/642aa4123cd05f1f73e7aa157210d3818a4020bce153323943d8642ffc683d3b.png\\",\\n  \\"instructions\\": \\"Copyable text:\\\\n\\\\nSuper Bowl in which Peyton Manning played the last game of his career\\\\nSum of the number of faces that make up the Platonic solids\\\\nNumber of kills in the bloodiest game of the 2024 LCS Spring Playoffs\\\\nWedding anniversary for which gold is the traditional gift\\\\nAtomic number a conspiracy theorist should reference when making a hat\\\\nNumber of wins the Boston Beaneaters tallied in 1892\\\\nThe fifth even nontotient number\\\\nNumber of springs A. E. Housman has to look at the loveliest of trees\\\\nDiglett's National Pokedex ID\\\\nNumber of shades of gray\\"\\n}} />"
    },
    "puz105_custom_151": {
      "hash": "0858db950a5bc4ee0311677cd7f45468c5d52ce82b4ffc43afb15c2714ff55f8",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"151\\",\\n  \\"flavortext\\": \\"\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/9f86673e5e1fe1d14c81ab0dfca24955afff3f1ffa3c1b79e7ad6c0e5a857231.png\\",\\n  \\"instructions\\": \\"80 x ? = a shōnen manga\\\\n80 x ? = a Chinese cymbal\\\\n80 x ? = an ethnic group in West Africa\\\\n80 x ? = a French socio-economic group\\\\n80 x ? = a first family dog\\"\\n}} />"
    },
    "puz105_custom_160": {
      "hash": "ae51f02e7fdce0eab422e194703b12ffc33cebf4a4523fa45a428df67d38cca7",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"160\\",\\n  \\"flavortext\\": \\"\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/31b1031f29def357b08481df68b92b253cdbf32f9da1478dc50704c3eb81d5d7.png\\",\\n  \\"instructions\\": \\"\\"\\n}} />"
    },
    "puz105_custom_172": {
      "hash": "4d2420cbb4f30f5392abe5132d47bee190a4da8399bd3c3cef466743b8193041",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"172\\",\\n  \\"flavortext\\": \\"\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/a12196877b25b385892499b44fed05c1043f907f9db3f0f93beec4b0bf8248b4.png\\",\\n  \\"instructions\\": \\"\\"\\n}} />"
    },
    "puz105_custom_181": {
      "hash": "43dcd27d4cb03695def3f9f2b28cd0cd32f2301dd4596d83ff47c5de52596492",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"181\\",\\n  \\"flavortext\\": \\"\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/76c12861b609609d63cfb7c70f2f7cb53e737cfaef70751a0739df45aeeaef7c.jpg\\",\\n  \\"instructions\\": \\"May you always love life, love puzzles, and love the answer to this puzzle! \\\\n(This is just my wish, not part of the puzzle)\\"\\n}} />"
    },
    "puz105_custom_183": {
      "hash": "c91d979022bf56740c6146fac70ff14f1d9144e8616c80874269970da56b60e4",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"183\\",\\n  \\"flavortext\\": \\"Οι καλύτεροι φίλοι της παιδικής ηλικίας Angela, Oscar και Rod ξανασμίγουν ένα βράδυ για να πάνε για κάμπινγκ κάτω από έναν καθαρό ουρανό! Λένε ο ένας στον άλλο μύθους που έχουν ακούσει και ιστορίες που έχουν βιώσει, προσπαθώντας κάθε φορά να συνεισφέρουν μια λέξη σοφίας.\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/8523bc01609cd9316a609a73aa924777c0518b5e58044f12a635bb228acf9448.png\\",\\n  \\"instructions\\": \\"\\"\\n}} />"
    },
    "puz105_custom_186": {
      "hash": "4256d1b77274aaeb20f6a700d978b9abdd825b4a521067afdfaaebc8eb575bcd",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"186\\",\\n  \\"flavortext\\": \\"\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/8e3540ef8e248f7dbde1d7bf4a9365f80d8ec8e5ee814e32cc6749c7557d1125.png\\",\\n  \\"instructions\\": \\"\\"\\n}} />"
    },
    "puz105_custom_187": {
      "hash": "1438e1d57aeeb82cbc169dab2c39a69a5343e13ad14a5dce08a23fdaca931fc8",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"187\\",\\n  \\"flavortext\\": \\"\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/884dcfb760e21b319098309c377bde1b314d94ebf3b408e72214ab2fd475e5be.png\\",\\n  \\"instructions\\": \\"\\"\\n}} />"
    },
    "puz105_custom_197": {
      "hash": "36c6721ec508a98638900a8affe4e539770d95cc6e8f02b7a3dd271fd292cc9a",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"197\\",\\n  \\"flavortext\\": \\"\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/811975c61d606fd7508b8096fb9fd9f560ab3eb4c11bc050e84adf8605401a12.png\\",\\n  \\"instructions\\": \\"\\"\\n}} />"
    },
    "puz105_custom_203": {
      "hash": "ec4360d3b9a75ba30389e1a08e288804860cb0a984d127d85dc9d2fe59e951e7",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"203\\",\\n  \\"flavortext\\": \\"Get out of here, Dad!\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/fb62054a4ad44894c9aa4e21aa2b98c6f10b8ce408c886667724a134c0919501.png\\",\\n  \\"instructions\\": \\"\\"\\n}} />"
    },
    "puz105_custom_204": {
      "hash": "4de406f733027b72f8599a19243097f6523ecd380ca363163e9849c9fc63b547",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"204\\",\\n  \\"flavortext\\": \\"These flights are not up to code! They seem to be missing something.\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/216d9bf8f33681137c585a88eafe16752fd911bac23feae3164b40c366e32881.jpg\\",\\n  \\"instructions\\": \\"\\"\\n}} />"
    },
    "puz105_custom_210": {
      "hash": "3758a4aa0e892672ddeca69bfa4b34658c5e8d16df3a15de6b5613117e0a32c2",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"210\\",\\n  \\"flavortext\\": \\"It's not Five-By-Five? You might have to think outside the box for this one...\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/71f721e9c51e86f5491d1477e5d740c9cdc495d0a11e68f35cd0e4a530819afd.png\\",\\n  \\"instructions\\": \\"Single-celled organism (less commonly)\\\\nBland\\\\n\\\\\\"___ more harm than good\\\\\\"\\\\nSecond-largest land animal in North America\\\\n\\\\\\"Where ____ has gone before\\\\\\" (2 words)\\\\nFollower of a Caribbean religion\\\\nSend money in payment or as a gift\\\\nShe had a Vision?\\"\\n}} />"
    },
    "puz105_custom_217": {
      "hash": "ec36ef5c520f70f04762f41f6870b94ddbcf4355c0c194e3c31a980195846300",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"217\\",\\n  \\"flavortext\\": \\"\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/6e2c03fa632264976d203729b8d98b6d99e793e459a9d324222781df807df0a9.jpg\\",\\n  \\"instructions\\": \\"\\"\\n}} />"
    },
    "puz105_custom_218": {
      "hash": "c5ca36eccf57644c3ae796372585a7d6f38c90a1af5570e8596180c28de53d90",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"218\\",\\n  \\"flavortext\\": \\"\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/0df6ecd82afdaee8f0d9fbe3a4e4e73089cd4bc5972180d42eeae49562ab0666.png\\",\\n  \\"instructions\\": \\"Transcript:\\\\n\\\\nThe answer contains exactly 5 unique letters.\\\\nIn contrast, there are exactly 0 unique digits in the answer.\\\\n \\\\nThe answer has a Scrabble score of 13.\\\\nOf course, this is assuming that it is a valid Scrabble word, which it most definitely isn't.\\\\n \\\\nThe vowel-consonant pattern of the answer is CCVCVVCVCCV.\\\\nHowever, don't try searching this pattern on Nutrimatic, because you probably won't find the answer.\\\\n \\\\nThe 3rd letter of the answer is either in the first or second half of the alphabet.\\\\nCoincidentally, the 7th letter of the answer is also either in the first or second half of the alphabet.\\\\n \\\\nThere are exactly 277200 different strings you can get by rearranging the letters of the answer.\\\\nAdditionally, one of the strings you can get has its letters in alphabetical order, and another one has its letters in reverse alphabetical order.\\\\n \\\\nIf you treated the answer as a base-36 number, you probably won't get anything interesting.\\\\nObviously, this is subjective, but for the purposes\\"\\n}} />"
    },
    "puz105_custom_251": {
      "hash": "dfd16ff242b5ef4b3eab99c37d8ec482d0e766cc66594bc051ea4518e14851b2",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"251\\",\\n  \\"flavortext\\": \\"\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/9e95d20215c70b42d5b9ab2b56fc8465b00d4e0772b8bdcd0d06deb6b3b30f71.png\\",\\n  \\"instructions\\": \\"\\"\\n}} />"
    },
    "puz105_custom_255": {
      "hash": "eca574443d019f809fe313e205cd01d826d49353a5d6002cc6558d1fd877cb09",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"255\\",\\n  \\"flavortext\\": \\"Just a Podcast Comet! Episodes Riddled with Improv Nonsense. Available to Download Anywhere to Listen.\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/d22ab1e781ee639ef4144f7184a272d13c38089085a71966c7db3a3666dc95e8.png\\",\\n  \\"instructions\\": \\"Someone who plays games before they release to identify bugs (6)\\\\nBBC mystery TV series (8)\\\\nThese might be baked or mashed (8)\\\\nWhat Schrödinger's cat is, other than alive (4)\\\\nFont used in image macro memes (6)\\"\\n}} />"
    },
    "puz105_custom_257": {
      "hash": "a813d00a4acf60d4a5b37c015022ce39c302799ae961ac81c9eee927005f737e",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"257\\",\\n  \\"flavortext\\": \\"If you could just figure out this map, you could make a killing. Luckily, you're on a first name basis with some folks who might be able to help.\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/1486e1ff24832a0a257f779f4b2b71936705af22c61967112db055e6aa812319.png\\",\\n  \\"instructions\\": \\"\\"\\n}} />"
    },
    "puz105_custom_260": {
      "hash": "c3d20d62c479be4228d94078803e1e44515ed27b75274f1fd2477976d230c65a",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"260\\",\\n  \\"flavortext\\": \\"\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/80439f04151be40172a0af539143c0da5e27d042c9c9a66a3f71fd753e146d88.png\\",\\n  \\"instructions\\": \\"\\"\\n}} />"
    },
    "puz105_custom_262": {
      "hash": "6e0716b42354ca46aa24292448f0bf12688c5336aac3bc050c8d500fdd237146",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"262\\",\\n  \\"flavortext\\": \\"It’s a hot night at Lower Moab Scenic Overlook Field, and the Chicago Firefighters are coming up to bat.\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/2d2e1e13295c5fb75e53a3db1366ee635267318f37661fcd1989607541540cdc.png\\",\\n  \\"instructions\\": \\"What is the last name of the pitcher?\\"\\n}} />"
    },
    "puz105_custom_265": {
      "hash": "58f5bf68e610b32f3065896bf8a944d442a52cae8b2d35ab584372accc31231f",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"265\\",\\n  \\"flavortext\\": \\"\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/5adf2a27e323423d37061aaf15113c7368b3b81886448d6a0cad2509c27029f5.png\\",\\n  \\"instructions\\": \\"\\"\\n}} />"
    },
    "puz105_custom_267": {
      "hash": "3a126f952811b70a1854a1707edefcaff74722586d5f58f948f4ff7875cb5629",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"267\\",\\n  \\"flavortext\\": \\"This word seems to cross a lot more ground.\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/a1cf176e99d83f62ebecf9793c68c627fd9281e36f91cb711b05e8194860de42.png\\",\\n  \\"instructions\\": \\"\\"\\n}} />"
    },
    "puz105_custom_269": {
      "hash": "92c9b18c0d274f9ab8b386274d17cd9d4a1189f50cd52fcd3f69fa5df5ad474d",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"269\\",\\n  \\"flavortext\\": \\"Here's some terrible relationship advice, but who is receiving it?\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/fa282d5d34de2e66687b7e982a49e5d4ff9c24faaeb3d6c5d7b3a0423606799c.png\\",\\n  \\"instructions\\": \\"Copyable text:\\\\n\\\\nStart from square one 🏃🏃\\\\nIntently return your means of access 🏃🏃🏃\\\\nMake covert exit via rear 🏃🏃\\\\nOpen up 🏃\\\\nNo need for running - use public transport 🏃🏃🏃\\"\\n}} />"
    },
    "puz105_custom_275": {
      "hash": "76f85e0dd65e0c956fe5dde6d78a30e70edb9e97680ffa504bc5fc3b4d5cc716",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"275\\",\\n  \\"flavortext\\": \\"\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/3a7061a92d0e3d843a301000a5cacf2f7d99f3e3a86b610fb466d947e56ff7b2.jpg\\",\\n  \\"instructions\\": \\"\\"\\n}} />"
    },
    "puz105_custom_278": {
      "hash": "9641c81ae79b39820460d6bf578a157f2d9b38803404296613a3caae0dccc593",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"278\\",\\n  \\"flavortext\\": \\"Gramma, Oh Gramma... R U OK?\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/48acaa7740aa1fa554ce305445b9cab924e2ee12e4c25b34d10a37bcb760b4c0.png\\",\\n  \\"instructions\\": \\"The answer is three words.\\"\\n}} />"
    },
    "puz105_custom_284": {
      "hash": "2536560640c4aa5f77c1192b164d8089c8e1ed31cd34e7bc23723b9c38439a43",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"284\\",\\n  \\"flavortext\\": \\"\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/73f96c9f7cc24a0b610aceaddb493aa30c391b6b16434f47693454eef3aef332.png\\",\\n  \\"instructions\\": \\"Across:\\\\n1. ?\\\\n10. ?\\\\n11. ?\\\\n12. ?\\\\n13. ?\\\\n14. ?\\\\n15. ?\\\\n16. ?\\\\n17. ?\\\\n\\\\nDown:\\\\n1. State without war.\\\\n2. If companion.\\\\n3. Exploit or utilize.\\\\n4. Buttocks or anus.\\\\n5. Highest card.\\\\n6. Otherwise.\\\\n7. Pupils are inside these.\\\\n8. Make fun of.\\\\n9. Like an owl.\\\\n\\\\n(9)(9)(9)(9)(9)(9)(9)(9)(9)->(11)\\"\\n}} />"
    },
    "puz105_custom_287": {
      "hash": "550c76c1dc99c63d9ded662c3993e7e6c53f58acbe47a1505e87d144573aff88",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"287\\",\\n  \\"flavortext\\": \\"Good luck!\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/e458a4727ea91d53a4d5f7505bf91793b5f5d0977ed6cbf89fabcf9fbbd4500a.png\\",\\n  \\"instructions\\": \\"\\"\\n}} />"
    },
    "puz105_custom_288": {
      "hash": "c615b3e263d151c56d06b0c2ae1d63db6e1a77960b58bdcdc8c8b024abd74cfd",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"288\\",\\n  \\"flavortext\\": \\"Olive shows you to a corridor of celestial objects, but it seems like these idols are angry their marks have been taken by their genmates.\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/20af026ae053cb7985ded38ca7eabcc121ad1e9b46f3d1d305f77259ebc68143.png\\",\\n  \\"instructions\\": \\"\\"\\n}} />"
    },
    "puz105_custom_291": {
      "hash": "aabffcaa84fc52c8ff52ee55f0449d454b5fd951691e35ebd34cb110e19aec57",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"291\\",\\n  \\"flavortext\\": \\"This puzzle can only be solved on MacOS.\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/c48e8c0d6c8ac17d9ec9435a316ca94a5d03da780e7ec471b84edb7115a545bd.png\\",\\n  \\"instructions\\": \\"ÆÅ¬ø˜© †˙´ ∫¥∑å¥Æ ßˆ˜©´® ·∞≤ ¶‚\\"\\n}} />"
    },
    "puz105_custom_294": {
      "hash": "b45ab0b19d85fe359f0687ba69dbf2bdc16e5b3bdbb8dea4b471a662e4786ddf",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"294\\",\\n  \\"flavortext\\": \\"\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/301c2d0fa48dfd84ca54d80703fa5ed829b62ae3ffdc9ceff8784880879bea16.png\\",\\n  \\"instructions\\": \\"\\"\\n}} />"
    },
    "puz105_custom_296": {
      "hash": "f4d883495ab1f6e9cc8a7110f634301cdcac9900543b5f17e2476677c4e73e04",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"296\\",\\n  \\"flavortext\\": \\"\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/c44d421f99b5133339847f2317798483a6c98b70fb6359d7fbaf365c820e880a.png\\",\\n  \\"instructions\\": \\"Say you hung out with Elton John, e.g.\\\\nGeorge Washington, for Washington D.C., e.g.\\\\nOne might have \\\\\\"HELLO!\\\\\\" on it\\\\nIt might be needed for security\\\\nBoo, honey, or sugar, e.g.\\\\nHussein, to Obama, e.g.\\\\nDr. Seuss, e.g.\\\\n\\\\nChildren's game (3) [5]\\\\nDog or cat (3) [3]\\\\nFirst, as a voyage (6) [3]\\\\nIt's mightier than the sword (3) [2]\\\\nJapanese alcoholic drink (4) [8]\\\\nMalcolm in the ___ (6) [5]\\\\nRain unit (4) [6]\\"\\n}} />"
    },
    "puz105_custom_305": {
      "hash": "527b915c496cc54f7847bcd28057a8a1122355a6cf6da608ce2c53bb1716cefc",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"305\\",\\n  \\"flavortext\\": \\"Look at what we've got in this hunt!⬆️\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/7eeb4d155765a53d913c8ce9702185d78d4c2c7925de56a3c6169dccc8bcdbc7.png\\",\\n  \\"instructions\\": \\"\\"\\n}} />"
    },
    "puz105_custom_308": {
      "hash": "ee78400a6aa8feef314fa9497fc7a7761927899c8c415012910fcc1637176da6",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"308\\",\\n  \\"flavortext\\": \\"Really don't wanna get to know our adorable team members?\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/207eb4ded1df40cf4b8de748b8faebcfd2e41eb297b7f02e47856a4a6071d0de.jpg\\",\\n  \\"instructions\\": \\"\\"\\n}} />"
    },
    "puz105_custom_343": {
      "hash": "335d3015882e34aac58d991039768da5da81d61efcdd3da4537bd734a3f6c6d3",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"343\\",\\n  \\"flavortext\\": \\"As dead as leaves.\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/068e9dfbbcaf8f2d283f4378c32e10cb9e59b4d86d217c4cbc6a9ea458280235.png\\",\\n  \\"instructions\\": \\"The answer is 3 letters long.\\"\\n}} />"
    },
    "puz105_custom_354": {
      "hash": "218e21664e02b51202066ceafbfe544e0878eb1fa2c0aac05b15ae66e07b962c",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"354\\",\\n  \\"flavortext\\": \\"\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/64f023a462b2f8ec666fba773c21109c38d422f2c865eec82952202b25e28ba5.png\\",\\n  \\"instructions\\": \\"Google sheet: https://docs.google.com/spreadsheets/d/1bE2Cyd24x60JmjUxAcnzDd380CW1Eri-lEfvtnfyzXA/edit?usp=sharing\\"\\n}} />"
    },
    "puz105_custom_357": {
      "hash": "092c9e3f958a08b70e0111fd2f1d54c37cf5bd3f48498886ede8431d48571304",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"357\\",\\n  \\"flavortext\\": \\"\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/128ae473d21722004e7e7021139a4924af3f0efc7f5b7ecab066d8bb6ef08044.png\\",\\n  \\"instructions\\": \\"\\"\\n}} />"
    },
    "puz105_custom_359": {
      "hash": "77a4de65ef8f405fcb96c8c045a4bb920c7ac3885d20a66dd8a3a70214256c16",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"359\\",\\n  \\"flavortext\\": \\"What if we made a necklace out of the stars themselves? Of course, there are far too many to use them all; they must battle for their spots.\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/1130137369cf228d88c16e262b682ead106cdaccd2cf2bf09093a8cc7d022af0.png\\",\\n  \\"instructions\\": \\"\\"\\n}} />"
    },
    "puz105_custom_361": {
      "hash": "3701f17c4f3d6babd57e3e0b7871ff3cfd38562349a49b1bb6442de83e8a21b3",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"361\\",\\n  \\"flavortext\\": \\"\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/162f857530d9c9d3adc93cf79e12e67ba8f4a02b1b35d03bdb501bc297ce4ec0.png\\",\\n  \\"instructions\\": \\"Text Version:\\\\n\\\\nLucia Tan was excited, she was finally going to travel all around the world!\\\\n\\\\nShe first sailed to Thailand, where she got really confused - was this culture shock? The traffic lights turned blue for \\\\\\"Stop\\\\\\", and the ocean looked red! She thought she must be seeing things! \\\\n\\\\nThen she sailed to Indonesia, but alas, she came down with a bad stomach bug. She spent her whole time there on her side!\\\\n\\\\nNext, it was on to Japan! There, she got on a black-eye flight to a more snowy area, and she was just in time to have a Yellow Christmas!\\\\n\\\\nHer next stop was Scotland. Her trip was uneventful this time, and she could take in Scotland as it was.\\\\n\\\\nFinally, her last stop - Liechtenstein. Her plan was simple, she would hop off the ship, steal the crown and run.\\\\n\\\\nThen, she would flag down a cab and go home.\\"\\n}} />"
    },
    "puz105_custom_362": {
      "hash": "97b175ab17df653d53b33e051ef4ad9788bb4ff0964543677e8e6ea9609c4355",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"362\\",\\n  \\"flavortext\\": \\"\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/4c1e7757784b60d6fb186d410f608cd723eb04267a2cca6995220c25b54d5fd4.png\\",\\n  \\"instructions\\": \\"\\"\\n}} />"
    },
    "puz105_custom_365": {
      "hash": "31921362ed7a734ba5f0aeb0166c66bd76cba5f9f1f3b5e8b05cd5fbe42f2fe5",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"365\\",\\n  \\"flavortext\\": \\"There's a Tetris in the British Indian Ocean Territory? They made a championship for THAT!?\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/18523fb0007b4c7b0def336df17fd87621e9514d54060000421a659779d31357.png\\",\\n  \\"instructions\\": \\"\\"\\n}} />"
    },
    "puz105_custom_367": {
      "hash": "eb45f6f233df25b1e28b1df8c4825df5b54fe0eac0e144d264185eb907c9d41e",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"367\\",\\n  \\"flavortext\\": \\"In addition to stargazing, you've recently been attending cooking classes. Within the class, there's one star student attempting to make a Hungarian-Risotto recipe from a diagram. What's their secret ingredient?\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/8aeacf6aa4efdca0fe53b4dbf62159d29be9ac22c78d0a6dde68554f6e2790bc.png\\",\\n  \\"instructions\\": \\"The answer is a 5-letter word in Hungarian.\\"\\n}} />"
    },
    "puz105_custom_368": {
      "hash": "1c3acb743daeedfa51ffcfe8d79882b5653831fa9e75bb34d97da9b4676293d0",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"368\\",\\n  \\"flavortext\\": \\"\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/15db600bd58345cf2408ce06eb8c80bf724e854102d056ebac6c8a15b0afecfd.png\\",\\n  \\"instructions\\": \\"\\"\\n}} />"
    },
    "puz105_custom_370": {
      "hash": "39200af6c3a3b1471aaa7717ce3ab395953489a3bb61b1c7940530da55119202",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"370\\",\\n  \\"flavortext\\": \\"\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/095058f09666f7cb8dffb37c7c2d9b632407c62c32d9356241fd3b71ae2acc3e.png\\",\\n  \\"instructions\\": \\"We both know you just want a spreadsheet anyway, so why bother with anything else?\\\\n\\\\nhttps://docs.google.com/spreadsheets/d/1RFaj5lf5dSEnIybMchRyQyxiJV4IbhAsraM3UocS5ME/edit?usp=sharing\\"\\n}} />"
    },
    "puz105_custom_380": {
      "hash": "4cd818fc040471ce1f0dd4fe7a762da981540fbf5310477951bded2f59a8f4e2",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"380\\",\\n  \\"flavortext\\": \\"Note to self: Remember to sub this for the actual puzzle!\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/b3da640dcbf8c6582327bedbcdc0a3bef022f60b38bef78709cc74e13d7fb4df.png\\",\\n  \\"instructions\\": \\"Ut elit amet lorem ut aliqua minim amet magna sed aliqua adipiscing sed ipsum ipsum amet magna sed aliqua elit\\"\\n}} />"
    },
    "puz105_custom_394": {
      "hash": "79ea83b5f533d6c3fca05dcf28e01038bd1d96ba20e1efda1fe04e5ff472269c",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"394\\",\\n  \\"flavortext\\": \\"\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/c621ea67b23f0bf2264c9f43bdcad1831e20bb7041a785743f2e5758870d4a06.jpg\\",\\n  \\"instructions\\": \\"\\"\\n}} />"
    },
    "puz105_custom_403": {
      "hash": "2d27784068202aa2f293f3e9787aa34f34e3318aa298960d4ba62f6628272bbd",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"403\\",\\n  \\"flavortext\\": \\"\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/7f93038c2fd5d084a8011a54e45b99d2e4426c1c63a9f019104ca4db6caa3c0f.png\\",\\n  \\"instructions\\": \\"Sol, Vega, Betelgeuse, Herschel's garnet, Deneb; Rigel, S Mon, 10 Lac (7)\\"\\n}} />"
    },
    "puz105_custom_406": {
      "hash": "e870b3a7bfae1c866c43ef05892fb346de4826f620029bf55ad9f48fba2cd1ac",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"406\\",\\n  \\"flavortext\\": \\"50 UFOs just got released! What is going on?\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/a6086134644069c58056d090a29d623ff2b30e994eaa1eea232941622d4bdd94.png\\",\\n  \\"instructions\\": \\"\\"\\n}} />"
    },
    "puz105_custom_408": {
      "hash": "34d9ce7a035f10fa39193d292cf7f6cb8631d1c9530cca925ad74d1f4987086d",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"408\\",\\n  \\"flavortext\\": \\"People sing praises about the lines of information I have!\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/b4b1ea555640f443d771d9591061cadeb78ecb077bbab18dc6c6c09dd2f78967.png\\",\\n  \\"instructions\\": \\"(Images are in left to right, top to bottom order. They are condensed for compactness only)\\"\\n}} />"
    },
    "puz105_custom_409": {
      "hash": "977d86f63409382d465421de5a8a5e4027d67279eabf6bac8c88459ca0119d3b",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"409\\",\\n  \\"flavortext\\": \\"When they told me I had to come up with a puzzle name that was peculiar (or at least fancy), I thought they sounded mad as a hatter! I did it, but I'm feeling a little catty...\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/57a2e0bf7d51d9e51dc5efbb4d5f0f47d3ca42cc17d0c456778f6cf4085ebab0.jpg\\",\\n  \\"instructions\\": \\"\\"\\n}} />"
    },
    "puz105_custom_410": {
      "hash": "b3d7cfdc35ed2d605d51717080261f641f968ad0cb3edb586c5ce5e9727a5f9e",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"410\\",\\n  \\"flavortext\\": \\"With a certain poker roguelike coming to mobile devices, an addiction plague of Biblical proportions seems likely. Instead of trying to beat these blinds, we recommend trying to understand what they're spelling out for you.\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/719b24163532337cb12a33bfbdd1879482ee73808fb6748a93b80257e9371617.png\\",\\n  \\"instructions\\": \\"\\"\\n}} />"
    },
    "puz105_custom_415": {
      "hash": "5c6a74732b57393936d89fad8d0a91c342ba2fcff92cf7ebdc1b2c9e59761bd9",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"415\\",\\n  \\"flavortext\\": \\"\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/d2c5d2f0cc5c03385dfac75129abc12ba50d70025e4bb780829dc39c41452dda.png\\",\\n  \\"instructions\\": \\"\\"\\n}} />"
    },
    "puz105_custom_420": {
      "hash": "5d68d228960e6ae3668b4b972ee41348bc7277110b629a03237489255d272413",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"420\\",\\n  \\"flavortext\\": \\"Fans of the 49ers will enjoy seeing its stars on the gridiron—Purdy to start, clad in red!\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/c60ce40937a87d245b43fc1367a265bc65873befa3d0d48c6b30e8adddde9f55.png\\",\\n  \\"instructions\\": \\"Cadillac luxury roadster discontinued in 1993 • Wings of a building • Goddess worshipped by Canaanites • Toyotas named after a mythical island • Thus spoke Zarathustra • Rummy variant popular in the '50s • From head to foot, from the French (hyph.) • Ancient West Bank ascetics whose name contains only the cardinal points besides \\\\\\"west\\\\\\" • Coming up... or ready for purchase? (2 wds.) • Bad news on a business report (2 wds.) • ___ more than badminton (full of excuses, in Singlish) • The lottery, it's said (2 wds.) • Mansion in Logan, Philadelphia • Served raw, as steak\\"\\n}} />"
    },
    "puz105_custom_423": {
      "hash": "c1bef7d1bc9c27cb4195e0f6c2f49ae2082ec31febd509a39268dd9b6ac04674",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"423\\",\\n  \\"flavortext\\": \\"@moldogaa covered what she sees on TikTok with someone she doesn't see. She orders you to find out who.\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/68c9880e93074ab5f3555e66056830aa710b680126731954777efa53f17db1a1.png\\",\\n  \\"instructions\\": \\"\\"\\n}} />"
    },
    "puz105_custom_436": {
      "hash": "5ae3c5102d68512a37c4435e52a9bd78fe0122ce0f355aab04e1a8214a975cab",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"436\\",\\n  \\"flavortext\\": \\"This colorful light show cost us a pretty penny, but how did we add up the costs for all the components?\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/d6b0d7581e3223453cbbd9eaac56e72839fbe930f80598d403ae161ce0c4250e.png\\",\\n  \\"instructions\\": \\"\\"\\n}} />"
    },
    "puz105_custom_440": {
      "hash": "77d851d226f7a686d3ad7d31247f2023e001320a94421098cb4c9fea303c19e2",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"440\\",\\n  \\"flavortext\\": \\"You follow a path through the trees... What do you see?\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/301b947448ec713a936ae96982f34152e0320b519c83c2d2b05c3030cd3c402a.jpg\\",\\n  \\"instructions\\": \\"To disambiguate: the answer does not contain the letter S.\\"\\n}} />"
    },
    "puz105_custom_442": {
      "hash": "f333c8764cdcabcb6949505a804cf6005cf9641cd73e4076183aec1c37e46779",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"442\\",\\n  \\"flavortext\\": \\"A movie about a formidable warrior.\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/9615a5081f11ff322018902beccee6384a25ef7ba4778b398896b63e097a5e78.png\\",\\n  \\"instructions\\": \\"For your convenience:\\\\n\\\\nThe mighty Bengal quietly hunkers down behind the undergrowth, patiently waiting for a creature to walk or wander through the dense jungle. An unsuspecting critter scampers along the ground, unaware that it is about to spur on a mighty beast, who leaps from the shadows and strikes its solar plexus. Hunting is second nature to the Bengal, leaving no prey safe from its lethal tooth. Lissome and sinuous, it slowly slips back behind the leaves and nestles onto its pile of loam, auguring another fatal ambush.\\\\n\\\\n* _ _ _ _ _ \\\\n_ _ * _ _\\\\n* _ _ _ _\\\\n_ _ _ _ _ _ * _ _\\\\n* _ _ _ _\\"\\n}} />"
    },
    "puz105_custom_445": {
      "hash": "0167a1d58f7fae9bb5e5c77b9695b3ffa32be8b2ac0fbc30e0d79496b1cd899a",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"445\\",\\n  \\"flavortext\\": \\"\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/1599d2bdf375dc131199a5fc7ca2f8929085bffe2487c6ac92dd31ea47a5564e.png\\",\\n  \\"instructions\\": \\"\\"\\n}} />"
    },
    "puz105_custom_447": {
      "hash": "ae475a2bb88a21e0bc38dd70c60cb4d68f1ffb57eaeebd1d2cf1eae3fea69e9d",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"447\\",\\n  \\"flavortext\\": \\"\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/67aac1f102dfb6f9e403277dc4f9479997c6b7e8e71e2bb312f4086135dd6698.png\\",\\n  \\"instructions\\": \\"\\"\\n}} />"
    },
    "puz105_custom_448": {
      "hash": "aae6c57d13f18e3f7cd0b64f2960e4ac20dd1b51de821f767f3050a98239e85f",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"448\\",\\n  \\"flavortext\\": \\"What's the difference? Presentation.\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/38817a6c9b98be33c1b9987412dd386153f467be18e7062564a3c902521ccf79.png\\",\\n  \\"instructions\\": \\"\\"\\n}} />"
    },
    "puz105_custom_456": {
      "hash": "d8b6e66ede02b07363cd79714a914d5dd1b0b3da396d75ec9df323016391904b",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"456\\",\\n  \\"flavortext\\": \\"The most beautiful part of shooting stars is the trail they leave behind.\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/e6585a0bda7f63294bb3db5b951f6bdff62ca1e185c308c1678dfa1bfe435e3b.png\\",\\n  \\"instructions\\": \\"A sheet version of the puzzle can be found at the link below:\\\\n\\\\nhttps://docs.google.com/spreadsheets/d/1hyE5LyXqMxMQQYlWwDbgaMT-ApwLtELn1yv-0WRdNZU/edit?usp=sharing\\"\\n}} />"
    },
    "puz105_custom_457": {
      "hash": "3a114997b88d1f613d798cc1409abf1cff0d590c7eca4fdc1b97b89d8c8511e4",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"457\\",\\n  \\"flavortext\\": \\"You fish this out of the sky with your Super Rod!\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/2895d7ef3ea5aa3b2998fd96f3ad0fff47a64a843f1c501a177584279af6c17e.png\\",\\n  \\"instructions\\": \\"\\"\\n}} />"
    },
    "puz105_custom_458": {
      "hash": "9f41bdf8e93eec40965b4a55f3289cee779cc023e5381eb49a996206c684247d",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"458\\",\\n  \\"flavortext\\": \\"\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/df462e6efd21c6a9229742fe391a22fe2a2284915fa1256682689deb36ae415f.png\\",\\n  \\"instructions\\": \\"\\"\\n}} />"
    },
    "puz105_custom_464": {
      "hash": "2b507a5f061ad0933a3effeeaf2fe8f314df9b72f3582442c0a388cbabdefee7",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"464\\",\\n  \\"flavortext\\": \\"This text seems to have been bashed up...\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/b9c38a1ba0bb17cb8db41869c495f0d75359041f68f4015811165e8b3a02ffa8.png\\",\\n  \\"instructions\\": \\"sibehthrsihkzigouthvimtvndvwholftilmnodtvgghexlwe\\\\nhryvsgsihrspartlfgserngemwedslougronmlwgettsvcodv\\"\\n}} />"
    },
    "puz105_custom_465": {
      "hash": "af7185d61ea5ee2e573790be020e5c1d987db7bb6362994f663d414adec92165",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"465\\",\\n  \\"flavortext\\": \\"\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/20368fb15082642610e55d454a849c7eb61b473027af3b4b445a348c8fdba877.png\\",\\n  \\"instructions\\": \\"\\"\\n}} />"
    },
    "puz105_custom_470": {
      "hash": "f90f3597339565afdb207e5523a2539c84b21458f0ea6965d528fdba9e4958fc",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"470\\",\\n  \\"flavortext\\": \\"\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/a83fb6328f62b5ecb7bacf1d0832a942b3afe1594df8e3990c15c48d4f68d2e0.png\\",\\n  \\"instructions\\": \\"\\"\\n}} />"
    },
    "puz105_custom_477": {
      "hash": "7d32f128b6c4fcfe0cb53eb63f6fda9e0b6a45c6a06ef14aab6129d080080fc4",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"477\\",\\n  \\"flavortext\\": \\"I made this track back in 2022, but I don't understand what I was trying to say! Maybe you could review my work and figure it out for yourself?\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/1360a3f054c557da636356797af0264e107f4daf2a3863defaefac1f87c6283b.png\\",\\n  \\"instructions\\": \\"\\"\\n}} />"
    },
    "puz105_custom_482": {
      "hash": "82c9c710f563933047c86e0bb4cf8683d81383ef3f87991352ef51331d35a1b7",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"482\\",\\n  \\"flavortext\\": \\"They'll need to be thorough when it's their turn filling out hefty forms\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/890ed21e6f82d5d9759cae832ed56f76eca3347cf134f8241de4f410a471c5f9.png\\",\\n  \\"instructions\\": \\"\\"\\n}} />"
    },
    "puz105_custom_487": {
      "hash": "2736d831b5d2275ba0da22a0688cb9cba1707e222d2156a76211ade07b1ffe85",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"487\\",\\n  \\"flavortext\\": \\"This quest to restore the stars has required some super marvelous gallantry.\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/e406d0f5c221d8f04042203268e75efd622fc5dd9fe46895dec9bb486e98d6c5.png\\",\\n  \\"instructions\\": \\"In the terrace, I had a good Experience 🌌.\\\\nI’m next to the fountain Right Now 🌌.\\\\nIn the kitchen, I saw something Unusual 🌌.\\\\nIn the bedroom, I’ll sometimes read Deuteronomy 🌌.\\\\nIn the engine room, I needed a Law Firm 🌌.\\\\nJust outside the garden, I did a Jump Cut 🌌.\\"\\n}} />"
    },
    "puz105_custom_489": {
      "hash": "10e058cfb46646fa4df722e8eaf1f598864a299b4383db32e027f5f34736d292",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"489\\",\\n  \\"flavortext\\": \\"\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/9cb852ecbd6209a152b8c103ec8126d08a63fdcf844744cdc63d27ae3b1376da.png\\",\\n  \\"instructions\\": \\"Image Description: A pie chart, with labeled percentages 11%, 23%, 18%, 8%, 52%, and 101%\\"\\n}} />"
    },
    "puz105_custom_490": {
      "hash": "7bd35066e1aba4b01910b0da5a53976b25be596942cc11bec1b709ec73a8228c",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"490\\",\\n  \\"flavortext\\": \\"\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/ea39286a0e78568bea19ce03df977aa19e6bf4cadd9e1e176b49380c738b1f2f.png\\",\\n  \\"instructions\\": \\"\\"\\n}} />"
    },
    "puz105_custom_531": {
      "hash": "b099aca319a74582e72f9f542ef505b70f71f1e97cb8a7a95cd334fc296fa8c2",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"531\\",\\n  \\"flavortext\\": \\"No, this puzzle will be much closer to prior puzzles and other traditional puzzles than it will be to GPH 2024 puzzles, and it will have a seven-word answer. But, we expect it will be unusual nonetheless.\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/2314a10f8ec33051709c3f817bde090dc71ff8e51b2b4e22750cc3f1d327658d.png\\",\\n  \\"instructions\\": \\"\\"\\n}} />"
    },
    "puz105_custom_555": {
      "hash": "f5c55c1f09a9def539f44103ebb6ffe0d7bf38e7eb225d584010c0f6dfcf057f",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"555\\",\\n  \\"flavortext\\": \\"\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/2fb1cdee8d9c787ba4c4a2ff1e74d56417e1b3c3ebfb38773cf53841e90e7176.png\\",\\n  \\"instructions\\": \\"Monstrous dictator started violating freedom (8)\\\\nTitanic seen in Belgian theatre (5)\\\\nRodents in kitchen, even, after first meal (4)\\\\nLive in time period that's regressive (3)\\\\nPerplexing! Pence drinking a lot, losing head (8)\\\\nNumber of leaders of Northern Ireland newly elected (4)\\"\\n}} />"
    },
    "puz105_custom_571": {
      "hash": "a9797f6e14cf0871c8b718e398b8b6b1ebe44c6e3eff0f6073edc960d14d2d0d",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"571\\",\\n  \\"flavortext\\": \\"\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/639222116f7f490ed4fd259d7992ea365e06b8797ad490423630295809af0e6f.png\\",\\n  \\"instructions\\": \\"\\"\\n}} />"
    },
    "puz105_custom_574": {
      "hash": "cc2feab6e8ce2e859dcb35dd011d8605d37292520060329d740d3d9bbe067328",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"574\\",\\n  \\"flavortext\\": \\"\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/d0d57ab197d3771ee87ead2a953b4fa6946393904d4725db3fc1a2fe92ad1f13.png\\",\\n  \\"instructions\\": \\"\\"\\n}} />"
    },
    "puz105_custom_576": {
      "hash": "059d4b01d3015f723a3cd901a1800eb1eb2aac9eaeb12e79a21867e057251734",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"576\\",\\n  \\"flavortext\\": \\"Once%20you%20find%20the%20coin%2C%20what%20do%20you%20realize%20this%20%22puzzle%22%20actually%20is%3F\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/a76b939b862caf8cf15b0b0ed74c46db0ac7093f12967298f72b58a25582382d.png\\",\\n  \\"instructions\\": \\"\\"\\n}} />"
    },
    "puz105_custom_594": {
      "hash": "8e958157a755eb0305e26592553ffe1e0b042906709a1214eb773439056e272c",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"594\\",\\n  \\"flavortext\\": \\"As a fellow dancer, I wish you good luck…\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/3ce87a57d73344c2a622062bb1445334146a5fe55a0ffea9cc9f5cf2a4c9b7fd.jpg\\",\\n  \\"instructions\\": \\"For accessibility:\\\\n\\\\nBody in church\\\\nFirst peace organisation\\\\nGrass you can drink\\\\nLightly, in music\\\\nMonroe's band\\\\nElongate, extend\\"\\n}} />"
    },
    "puz105_custom_595": {
      "hash": "ba42829d8a890acc813dbba188da149157a11c0168bd28d6c9de29eddbeb3441",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"595\\",\\n  \\"flavortext\\": \\"Whoa! Who could have calculated that so quickly?\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/775642c64b78eb5df3fa607aa897f9a1b9e4ce7785ee1dae4e58025f9f059030.png\\",\\n  \\"instructions\\": \\"\\"\\n}} />"
    },
    "puz105_custom_596": {
      "hash": "526357e0bac8fefef65ba9100d8e91115c199bcf0fc7b37466595e0021f23a01",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"596\\",\\n  \\"flavortext\\": \\"Mr. Tsuchiya seemed quite excited when examining this puzzle.\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/2ef8c456d4ee48608bbd380525a34bc3c292958363c1a1ef4cc22ba04c64ad0f.png\\",\\n  \\"instructions\\": \\"Enumerations from image:\\\\n\\\\n3 9 2 3 10 (4)\\\\n3 (10) 2 6\\\\n10 2 2-(5)\\\\n3 (3) 9 & 3 5 8\\\\n6 2 (6)\\\\n4 (7) & 3 6 5\\"\\n}} />"
    },
    "puz105_custom_598": {
      "hash": "aad2e36b48c5f6fb0dbf76b8d6d56674da8e580ceb2f5addef9355d89855ab00",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"598\\",\\n  \\"flavortext\\": \\"I'm ready to show off some Olympic sized dance moves!\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/acfbdd08cc1ec54e35c86750ddafc6cc1a63ab99df869e484f2a7c985891f867.png\\",\\n  \\"instructions\\": \\"A spreadsheet template is available at: https://docs.google.com/spreadsheets/d/1fkNPhkJH0u4ddPU_Ak0gNJFGZ7Od4bd1F7ZllRImtuY/edit?usp=sharing\\"\\n}} />"
    },
    "puz105_custom_599": {
      "hash": "210cccc2bb8f39e695f8bd1834878b65576a38a85fed617a7c57e945ed1f193a",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"599\\",\\n  \\"flavortext\\": \\"I love gazing at the stars on wide streets.\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/dc66a64283bf2dc55eaed34a9cab52d17f5ac35f3af4dd5133ad660fd8fd21ff.png\\",\\n  \\"instructions\\": \\"https://docs.google.com/spreadsheets/d/1HrMjCzl3N3aTFF1XkcmS0doAhGdkii0PQ0R1WG6AgXU/edit?usp=sharing\\\\n\\\\nNormal sudoku rules apply, using 9 distinct letters instead of the digits 1-9. The center 5x5 is valid, but not in hard mode!\\\\n\\\\n(4 6)\\"\\n}} />"
    },
    "puz105_custom_610": {
      "hash": "35ddebce45eace2438fb3608048f91b1dd687faf1aa096d59e2a9a442fcaf2e3",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"610\\",\\n  \\"flavortext\\": \\"Where did JFK shag, bro?\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/8b65f6660a200bb6b327fc6d7a32e1041928dfe2539d2276a380e1088ed37d5a.png\\",\\n  \\"instructions\\": \\"A text version can be found here: https://docs.google.com/document/d/15fFh-0i-QXIEZKkuSfQ4k6xY2mkwOeXQ5I9PS46O49I/edit?usp=sharing\\"\\n}} />"
    },
    "puz105_custom_615": {
      "hash": "29a56c73ed2701344c9970fc406f3e99e2ce96125b25c29caab9f7578eb0bc66",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"615\\",\\n  \\"flavortext\\": \\"\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/404182fc4d034e49fa2f79f68ed1ede9d82242b685ce8a2ed1631d4ac084e87f.png\\",\\n  \\"instructions\\": \\"\\"\\n}} />"
    },
    "puz105_custom_617": {
      "hash": "45c591ba3502e626e8b9af2032eb6e3079f78c2aad938efdb1f30fbc987c57c6",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"617\\",\\n  \\"flavortext\\": \\"\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/ac9590f3da89520274b87a8044df2f8e3d7e03534a0a5f68ad53dfd7b2487192.png\\",\\n  \\"instructions\\": \\"Copyable text:\\\\n\\\\nAcross\\\\n1. Time\\\\n2. Vase\\\\n5. Surface\\\\n\\\\nDown\\\\n1. King\\\\n3. God\\\\n4. Remark\\\\n6. Left\\\\n7. Natural base\\"\\n}} />"
    },
    "puz105_custom_621": {
      "hash": "95d1f2ca69e4d8336697418701b48a29a577410941c897b56bab92b50bd4db93",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"621\\",\\n  \\"flavortext\\": \\"\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/655b894d770784c8aa0a3721c2a1ff83f98352f142e1cdf21d8c53281491a728.jpg\\",\\n  \\"instructions\\": \\"A copyable version of the puzzle:\\\\n\\\\n78\\\\t_ _  / _ _ _ / _ _ * _ _ _ _\\\\n62\\\\t_ _ _ _ _ * _ _ _  / _ _ _ _ / _ _ _ _ _ _ _\\\\n69\\\\t_ _ _ _ -_ * _ _  / * _ _ _ _ _\\\\n63\\\\t_ _ * _ _ * _ _ _ / _ _ _ _ / _ _ _ _ _ _ _ _ _\\\\n79\\\\t_ _ / _ _ _ / _ * _ _ _ _ _ / _ _ _ _ _ _ _\\\\n67\\\\t_ _ _ _ _ * * / _ _ _ _ _ _ / _ _ _ _ _ _ _ _  / _ _ _ _ _ _ _ _\\"\\n}} />"
    },
    "puz105_custom_630": {
      "hash": "f357015533308a464ec61c575aaefe3ec8c5d87e3ec793c092136e752418a46c",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"630\\",\\n  \\"flavortext\\": \\"\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/9cd00e210343f592ef1f76b11a7b5ab90e7e216c040dc695baed7932066692fe.png\\",\\n  \\"instructions\\": \\"\\"\\n}} />"
    },
    "puz105_custom_631": {
      "hash": "6cf1d8d9ff750bbe9978daa198eed828e746bd0dea55b0761e8ac069a42ccd27",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"631\\",\\n  \\"flavortext\\": \\"Frustrated at you solving it, its complexity all for nought, it's brought along some cross friends! Beware: one hit may not be enough to defeat them in their new form...\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/ab4d0b4e85ddbb919dd1371e7f50d97e5d6183fd3b0902ce6e1cce02a3fe4203.png\\",\\n  \\"instructions\\": \\"\\"\\n}} />"
    },
    "puz105_custom_633": {
      "hash": "dc2a07771e6cde78b1f088fc89176dcc7526456ec514ce3306d80e54efbb7fef",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"633\\",\\n  \\"flavortext\\": \\"This puzzle is Fully Free.\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/d74c14736ccaf2c15c08dd3c689e5de565669d75212c778c2bae2531d974a914.png\\",\\n  \\"instructions\\": \\"\\"\\n}} />"
    },
    "puz105_custom_637": {
      "hash": "dbfe8e12ecd596557ec04396946bf7ade16e87e4bba6927e7f74f58f0181e9d9",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"637\\",\\n  \\"flavortext\\": \\"\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/0d081eafa7ca09e0351106da20475a7b3075c99d7af4d58e8fe47741b415281d.png\\",\\n  \\"instructions\\": \\"\\"\\n}} />"
    },
    "puz105_custom_639": {
      "hash": "a39be96e887d2fec2bfaee2b59d28689f0641cb5879857ab95f8d5a21be6c09b",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"639\\",\\n  \\"flavortext\\": \\"The answer to this puzzle is ten letters long.\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/3d69f9b84bca53a98450e864f3402a7c11e9dff2f262cd8528f244e809240b01.png\\",\\n  \\"instructions\\": \\"Across\\\\n1. NZ pro wrestler Tony\\\\n5. Indian flatbread\\\\n6. \\\\\\"You callin' me ___?!\\\\\\"\\\\n7. Certain pride parade attendee\\\\n\\\\nDown\\\\n1. She wouldn't stop shaking the bag...\\\\n2. Oven setting\\\\n3. Certain curled position\\\\n4. Descriptor for a ball in a certain topology theorem\\"\\n}} />"
    },
    "puz105_custom_642": {
      "hash": "e7a55bf7352af942ad7aa17d4d287dee6b623bf58d4e2798679a65619f338277",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"642\\",\\n  \\"flavortext\\": \\"\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/952aabec0b6863e08da68c78bc6b60aba3a39bc7b81f7cacd95d39e4eddadcaf.png\\",\\n  \\"instructions\\": \\"Text in the image (just for accessibility):\\\\n\\\\n\\\\\\"Keep track of which container the ball is under; pick the right one and you'll get a prize!\\\\\\" (5 4)\\\\nWhat a vegetarian witch might stir in her cauldron for dinner (8 4)\\\\nBendy and fuzzy arts and crafts materials (4 8)\\\\nHave respite, especially after physical exertion (4 1 8)\\\\nTidied up your rectangles? (7 4)\\\\nManager of the casino floor (3 4)\\\\nSongs that can't get out of your head (6 5)\\\\nCelebratory inflatables tied to your device that lets you bowl on easy mode? (6 8)\\\\nLike something so maximal it's on opposite ends of a magnet? (5 7)\\"\\n}} />"
    },
    "puz105_custom_643": {
      "hash": "625d1b3ca21842be40a6238422498353366bda1fff7c3f18bd58834ee2d36c25",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"643\\",\\n  \\"flavortext\\": \\"\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/e48e98d1ab32d191a637632da60a7f1d4b2b593c0233bb0a216400fe5b52c518.png\\",\\n  \\"instructions\\": \\"\\"\\n}} />"
    },
    "puz105_custom_646": {
      "hash": "c2dbd52d8e3f24b08692808131715bcc9cff7b7992d1adf11dae15ddb9d7adac",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"646\\",\\n  \\"flavortext\\": \\"And not a minute longer!\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/422f4bc3f9939aace8e36937c5b50aa72fce8ad47201eefb6df2c5fce629da73.jpg\\",\\n  \\"instructions\\": \\"\\"\\n}} />"
    },
    "puz105_custom_647": {
      "hash": "775a9cccf15e4e0c6118702a7ffbae3b92092b95c7c7e3866a21c57d1d6b2254",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"647\\",\\n  \\"flavortext\\": \\"This star has no name.\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/35ec07e4cab490a29144ac1bff89fe4b3a6d0d9716a6ee808a3731670749e467.png\\",\\n  \\"instructions\\": \\"Copyable:\\\\n\\\\n1. Music Form (5)\\\\n2. Country (7)\\\\n3. _______, or the theme of this puzzle (9)\\\\n4. Unwelcomed Guest (7 3 5)\\"\\n}} />"
    },
    "puz105_custom_649": {
      "hash": "1dc06c49d11b84499b2daf4279b765cf19a4579eb29bde80049e2b828e4e6ffc",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"649\\",\\n  \\"flavortext\\": \\"\\\\\\"It's almost here.\\\\\\" \\\\\\"The Monster?\\\\\\" \\\\\\"The theme song.\\\\\\"\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/10496a87a7879d363121fec6390f411a57da5a2b7519a093f8262d5970cf60d2.png\\",\\n  \\"instructions\\": \\"Hairstyles displaying purity and a lack of guilt.\\\\nNefarious cans.\\\\nThe last (online) fight.\\\\nPotato product, flavoured with rose and hibiscus.\\\\nA Spanish ship, built exclusively using boards that hit you in the face when you step on them. \\\\nAngry cardiovascular organ.\\\\n\\\\\\"Is this card high or low? Either way, I'm dealing it to me.\\\\\\" \\\\nThe way it's meant to be played™.\\\\nObject perhaps used by a boatman to the underworld? \\\\nApple-like fruit practising vigilantism. \\\\nLaurel and Lee, in clock form. \\\\nThe sounds of corvids prophesying. \\\\nPayback, without the necessary financial backing. \\\\nA candle, for instance.\\"\\n}} />"
    },
    "puz105_custom_654": {
      "hash": "2d978c6936b51d319b9169c931034ee3632669918a2f56ed0515462b8fa69e32",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"654\\",\\n  \\"flavortext\\": \\"this summer, i've been on a strict audio diet\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/4eaa24f9ec925532fcbf0f210753f339ade1c9cecbccceea7ca3a11b400e4472.png\\",\\n  \\"instructions\\": \\"so julia\\"\\n}} />"
    },
    "puz105_custom_657": {
      "hash": "783c175253246b00d262a812bcfd9fcc654d86026c7f10fa3f3a9ac8045957bf",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"657\\",\\n  \\"flavortext\\": \\"I, for one, welcome our new tech overlords.\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/be1ee0ac591fdf4cb0d8da1b4d727b51dc5e89bdb9b532c3d60c932ae8c6d5ad.png\\",\\n  \\"instructions\\": \\"\\"\\n}} />"
    },
    "puz105_custom_663": {
      "hash": "4bef1319af567c6d01e0076eadef6671b1ff7566a24c5e9733fd6b6cefa591ee",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"663\\",\\n  \\"flavortext\\": \\"\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/441acbab632dc083309fc684b50fe9896d3e36bd6ed38aaf8292f3a90695361c.png\\",\\n  \\"instructions\\": \\"Note to solvers: Only the primary answer is required.\\"\\n}} />"
    },
    "puz105_custom_669": {
      "hash": "e1e913a9260ed07e7c5e818b823c94dca4f98209650e6203bc1cc14217b68915",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"669\\",\\n  \\"flavortext\\": \\"\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/0adb943540b5a9ae5afc9a8ebf65cda59d8e5628e8b179c336f49a635411eeb6.png\\",\\n  \\"instructions\\": \\"For ease of copying, though you'll have to put in the whitespace yourself:\\\\n\\\\n# TODO: optimize this, seems to be really slow\\\\ndef fib(n):\\\\n    return 1 if n <= 2 else fib(n-1) + fib(n-2)\\\\n\\\\nx = [6, 36, 10, 9, 14, 52, 16, 9, 10, 12]\\\\noutput = ''.join(chr(ord('a') + (fib(num) % 20)) for num in x)\\\\nprint(output)\\"\\n}} />"
    },
    "puz105_custom_681": {
      "hash": "36ced3dc11daf8f8eb35ee2454c4802ae32501def314ec418eb3d905890c9f58",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"681\\",\\n  \\"flavortext\\": \\"\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/ddb24ff9e433ffcfaa6488702715f0a88a22702b95fc0db9f69e264c728dd851.png\\",\\n  \\"instructions\\": \\"The answer is a 3 letter word, colored regions are for extraction only. Solving URL (not required) https://tinyurl.com/2b9noboe\\"\\n}} />"
    },
    "puz105_custom_702": {
      "hash": "eecb8b8785f39452ed722c66b0d1a2ba26c074206b6663a5808b87068fdce2a3",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"702\\",\\n  \\"flavortext\\": \\"\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/42dbe50325b2aac30743d9553f4da8ae77f17253dfa472e3fd3150bb2bd86034.png\\",\\n  \\"instructions\\": \\"The answer is 4 letters.\\"\\n}} />"
    },
    "puz105_custom_704": {
      "hash": "1114e209825cab35ebcbba10e9818557d2496bba155555aa399dfab65c2f2dcb",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"704\\",\\n  \\"flavortext\\": \\"\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/1d1c8260ac66a21ff470a457479e06676a50fd58f0c0af694b7719a15d6eb2b7.jpg\\",\\n  \\"instructions\\": \\"'bout 'cause 'til -o Hail I(x5) I'm Marys a and(x7) around askin' at attached backwards be(x4) begins(x2) blocks brand bumper but(x2) cheek cock corner could dance death defeat direction don't done door earth eight everything(x6) face(x2) family feel feels first floor for(x9) forget fun get god goodbye gotta(x3) grab have headlights heart(x2) heartache him(x2) in(x2) is just(x2) kiss late leave left(x2) lonely looking lose lost makes me(x4) meditate misleadin' mom more(x2) movin' my(x9) n-n-n-n-no never new(x2) news now oh(x3) on(x2) out persona practice pull pure report run say(x2) see shake she she's(x2) sleeve so somebody(x2) sorrow statements taste tell(x2) the(x5) to(x6) tomorrow unless up(x2) wanna(x2) wanting was wavin' wear what what's when(x2) where yeah(x3) you(x5) you'll you're your(x5)\\"\\n}} />"
    },
    "puz105_custom_705": {
      "hash": "e937b49c4f84dab4c8f6411e7fc72917d8c0494ade412241ccfce06c4fe309b4",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"705\\",\\n  \\"flavortext\\": \\"\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/1b2141c4da89965cee8f13276f78a0542c6c4e62eefd04f852d390ad97f31440.png\\",\\n  \\"instructions\\": \\"\\"\\n}} />"
    },
    "puz105_custom_706": {
      "hash": "ee397f931dda923866b7cfa92d5f010095ab24e254548d00fd6283512b6a578e",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"706\\",\\n  \\"flavortext\\": \\"\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/2f426b00d59e1df3db6d8e2515b8015a05a7d695a7970aa301b005b2f3ab6fdc.png\\",\\n  \\"instructions\\": \\"\\"\\n}} />"
    },
    "puz105_custom_712": {
      "hash": "44605708cae577146cb97e13b1ca5d9af3ef385c44f466b3433be2b50b268926",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"712\\",\\n  \\"flavortext\\": \\"\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/65975f85ee069ce40bc6ebef460af50ab16f15a355bf5717a053fc604efe0455.png\\",\\n  \\"instructions\\": \\"\\"\\n}} />"
    },
    "puz105_custom_713": {
      "hash": "4d2f517609dbdcfd8b07aaaa488a48655677c0632ae8e133792fe4c9cf53fe16",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"713\\",\\n  \\"flavortext\\": \\"When we were told we could name the puzzles, we named every puzzle Sean. It turns out that we didn't pick the right names.\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/1fb6465d77a77a55d5e21aed0c5ba3c75e07041f3daf3442b1c2964128f29ed4.png\\",\\n  \\"instructions\\": \\"Google Sheet for copying: https://docs.google.com/spreadsheets/d/1CI3-6byGiyL_1L-YpcNwbQJ-K5i-Mt_NGY4I57XZrYw/edit?usp=sharing\\\\nNote that the Sean names are just meant to clue 1-19 are otherwise not relevant to actually solving the puzzle.\\"\\n}} />"
    },
    "puz105_custom_714": {
      "hash": "e9d8fa9ca113315a7c4c62067909a41704c6627e499bfaab6fdc4c8b700d3701",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"714\\",\\n  \\"flavortext\\": \\"Initially, I wanted a puzzle, but now I just want the answer.\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/1ecd1a4ef282b1c5a0dc6669b378d75ee4483d814708fd066e92c57ee9d25754.png\\",\\n  \\"instructions\\": \\"\\"\\n}} />"
    },
    "puz105_custom_715": {
      "hash": "2fab9f4b8922ee95b84aaf9dd43ea6370aa5a32d1672759a71730199ea8c6120",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"715\\",\\n  \\"flavortext\\": \\"\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/d311eaea57520fb767a71e22570341ea9c06037bf704d61ea24395f7469b1fbf.png\\",\\n  \\"instructions\\": \\"\\"\\n}} />"
    },
    "puz105_custom_716": {
      "hash": "eff847e3022bac0a23bd87d89117f3e44c40f174250f42e9e70ad3222b0ba12b",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"716\\",\\n  \\"flavortext\\": \\"Astronomical Body Orbital Dwelling Escape is a web image puzzle game developed by The Photosynthesis Technique By Accident Team. We know that you are a great fan of puzzles but that does not mean you should not like Escape games. So here we present you Astronomical Body Orbital Dwelling Escape. A cocktail with an essence of both Puzzles and Escape tricks. Good luck and have a fun!!!\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/deb395918103b80552efddcf56078451645408e5ce7c2f19c774ada3a6e0caf6.png\\",\\n  \\"instructions\\": \\"\\"\\n}} />"
    },
    "puz105_custom_719": {
      "hash": "c190253b67366e37bae2e8f59e92094a1b01f52c87cf8c78e13592c6f7119cd9",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"719\\",\\n  \\"flavortext\\": \\"What a capital idea! Let’s wrap it up!\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/47f84d322d52cd3116c1823a8fd3d4ee242ccb112e0af73660c7af2b75cb3906.png\\",\\n  \\"instructions\\": \\"\\"\\n}} />"
    },
    "puz105_custom_735": {
      "hash": "e53a2dd70e09c879be1a77f615c121f88aaf6b44a261bdf1abf2b070f13fb700",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"735\\",\\n  \\"flavortext\\": \\"One year after the Galactic History Exam, someone made a video history project on Galactic Trendsetters' puzzlehunts, with double the countdowns.  Here are some of the scrapped presentation notes.\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/dc4b4d81a16b59267274b6cf7a9d8166834d1ecbb958c8c2323832c7aeeb0dda.png\\",\\n  \\"instructions\\": \\"Though it may be helpful to find the YouTube video, it is not necessary to do so. The same presentation notes, as a PDF: https://drive.google.com/file/d/1mlVsmWwGLyYd607Er_uXvMTkERbt_N4s/view?usp=drive_link\\"\\n}} />"
    },
    "puz105_custom_737": {
      "hash": "50b85b60516020e7b9e56350b0f617dd54d384c8a49911b2ceecc10eb050e246",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"737\\",\\n  \\"flavortext\\": \\"The U.S. Congress has been sending letters for your bills. Get your act together!\\\\nThe final answer is 10 letters long.\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/e491301e52316f4ac418ac72d2307d687ff915db9e5d150bf2503cd8fc112519.png\\",\\n  \\"instructions\\": \\"A spreadsheet version of this puzzle can be found here: https://docs.google.com/spreadsheets/d/1UDsZcYQwyXFad6-Rdz8LIwPd1gA_OA-KIJoUckjIhRI/edit?usp=sharing\\"\\n}} />"
    },
    "puz105_custom_748": {
      "hash": "230571397a48a5eb092a3fe0f7a8efaa58cec9ffce1d09834a8458333e05b982",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"748\\",\\n  \\"flavortext\\": \\"I can't tell you my last name or where I live, but do judge me by my cover titles.\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/741b1dead151b9590858ba5cf6d7a4935ccbaaa1ec5adf2ca68d5f962f59f9e8.png\\",\\n  \\"instructions\\": \\"Rhinoceros\\\\nTiger\\\\nBeaver\\\\nPeregrine falcon\\\\nCrocodile\\\\nGreen anole lizard\\\\nDolphin\\\\nPolar bear\\"\\n}} />"
    },
    "puz105_custom_749": {
      "hash": "7c4e4c8c33484fd2aba0dcfaf0a21a370d48dc0f09d72c167d8cfa25e3295ec0",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"749\\",\\n  \\"flavortext\\": \\"\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/5d72142331df18215717765e79b2bf1b59e558b4f7631052540986c096ef5c2f.png\\",\\n  \\"instructions\\": \\"\\"\\n}} />"
    },
    "puz105_custom_755": {
      "hash": "90402c0fe38101e7739c548bc4666c3ff349261d21b7c1aa21ae7e482e7453db",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"755\\",\\n  \\"flavortext\\": \\"I suppose if we wanted to see them again, we should start off short and sweet, slowly making our way to the big, starry sky. We already have the map to help us navigate!\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/9cf87ad518257a1b461c13c73dc3fa765a3d9a1787c3aef187a1228ac99a0c2b.png\\",\\n  \\"instructions\\": \\"You will NOT need to use the Camp page for this puzzle.\\\\nArtwork and puzzle by galofuf\\"\\n}} />"
    },
    "puz105_custom_766": {
      "hash": "1edf44b165f0694c86f5f0179cadad0f3b4cd45b12d5eddefacfac505ee96036",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"766\\",\\n  \\"flavortext\\": \\"Dearest Gentle Readers... did you miss me? It seems the Queen has attempted to raise the stakes in solving the enigma that is my true identity. But try as you might, while I know you, you shall never know me.\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/5c8571d0af74d5c01b7728e1125153c293b96048a10e84b7bbd66f3a408621d2.png\\",\\n  \\"instructions\\": \\"Unmask me.\\"\\n}} />"
    },
    "puz105_custom_771": {
      "hash": "77dec285bb6a92db0d70fdcacf845825df6cb5994617f1da4e75bb017adb0d65",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"771\\",\\n  \\"flavortext\\": \\"\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/d2b93ff4203f1bce60e5445c2cadce07961c3362f8559c7f8af94a9e25bb3544.jpg\\",\\n  \\"instructions\\": \\"A transcript of this waiver can be found at: https://docs.google.com/document/d/1BBqKRWkHqjc_hrDyjM1ZwEqEFFTmHkqCudIPYlDjgPg/pub\\"\\n}} />"
    },
    "puz105_custom_777": {
      "hash": "581109ad52bda49128b5e0e6410773091dddeae275649edea066eb4033d79ba9",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"777\\",\\n  \\"flavortext\\": \\"(See https://docs.google.com/spreadsheets/d/1pkoZKAOLwM4WEP88j6WLxaCm9tpPCDllO_NEtygBp-s/edit?usp=sharing for copyable text.)\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/b0a17a8bc5bb285ff193753b07ad913ed04011e910231da0691507f4eac029d3.png\\",\\n  \\"instructions\\": \\"RTASTSRAARTSTRASATRSTARSTSARATRSRASTSTRAATSR\\\\nATRSTARSTRASASRTRSTATSRARATSARTSSRATTASRSTRAARSTSART\\\\nSATRSTRAASTRSRTARSTARTSATRSASTARSTRARSATTRASTASR\\"\\n}} />"
    },
    "puz105_custom_782": {
      "hash": "3455a1c021646b73cd7841d8ea3454aeab4b16ebb6ef34d82ecad7f46c094006",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"782\\",\\n  \\"flavortext\\": \\"On Summoner's Rift, an innkeeper from another land has opened shop.  The champions want to know how much it would cost to use each item.\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/1982a529b5904097ae50bc6d13295e1791fa35bb5364d339db195bcefd3ace30.png\\",\\n  \\"instructions\\": \\"\\"\\n}} />"
    },
    "puz105_custom_791": {
      "hash": "264fbeff67d460e077cc7e957a9103fd397fc933c9d58d970eba652599af9ce5",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"791\\",\\n  \\"flavortext\\": \\"\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/ed3ab8a08abe11f71f30663f783694ea758dae8fa9183c4735fbb0b2f556e90d.png\\",\\n  \\"instructions\\": \\"\\"\\n}} />"
    },
    "puz105_custom_792": {
      "hash": "3e57511f107e325325afd7a8b2ef8aa7e1288aa28f3f8320e90ae30422acf531",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"792\\",\\n  \\"flavortext\\": \\"The star says, \\\\\\"I'm Legendary and don't contain any Namystics.\\\\\\" What is it telling?\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/e01483325084407e784ef15e4bc5288bd70d9c5ad764480050c93eee5f05f864.png\\",\\n  \\"instructions\\": \\"\\"\\n}} />"
    },
    "puz105_custom_794": {
      "hash": "3e9744c2e4f0bb75e6cad81a897bc8aa41f15482702bc236285c37cd8c6fcee4",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"794\\",\\n  \\"flavortext\\": \\"DragonEngineer learn in their early years that the most important part of dragon engineering... is teaching them how to follow one's commands.\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/818b911ba8691233c948eeecf5f9f014c22806799379495e6b11925dacefe92a.jpg\\",\\n  \\"instructions\\": \\"For the solver's convenience: https://docs.google.com/spreadsheets/d/1Ef1RB0mDziCQaWRQn7mUi5BzZul_QMhxsL-r6JI-1rM/edit?usp=sharing\\"\\n}} />"
    },
    "puz105_custom_869": {
      "hash": "f7dae6280232fd7a48cbbe36f55d2459456f4beaa0e844badb11473ec284cd2e",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"869\\",\\n  \\"flavortext\\": \\"We appreciate ______\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/5ffd9a8e8eddf0ae357eb24ae62650b922d67dfbe9350568e3f9e8a37b8d53d1.jpg\\",\\n  \\"instructions\\": \\"\\"\\n}} />"
    },
    "puz105_custom_894": {
      "hash": "a349852416220b9a3a885aac38dabdbe5ba8c6e6e68e8a31739846dae898df37",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"894\\",\\n  \\"flavortext\\": \\"You see a group of sisters at the Cafe, but which is which? You'll just have to guess...\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/711f41bce090af6c59b785c44fb4c6e19e2266f83671d7791d071bc38460f934.png\\",\\n  \\"instructions\\": \\"\\"\\n}} />"
    },
    "puz105_custom_954": {
      "hash": "ff676c006dfd93036112eb9ab21c1e5784bfc5455524fda9a7ae75db8a34b51b",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"954\\",\\n  \\"flavortext\\": \\"maybe these would work if you filmed them on an angle\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/2b603fcacb1e208b6fbd19879e2a58b3d844d253e801b4ce7399a04e2cdd579e.png\\",\\n  \\"instructions\\": \\"Text in image (for accessibility):\\\\n\\\\nIt opens all doors (8 3)\\\\nPitchfork owner (6)\\\\nWhat a detective might come to (10)\\\\nBodies' broken process? (cryptic) (7)\\\\nDermatological salve's target (4)\\\\nWhat one might get from a night full of spirits (8)\\\\nWhat a camper uses to keep their shelter grounded (4 3)\\\\n\\\\nMarket that swings both ways? [1]\\\\nBarney Grumble's \\\\\\"catchphrase\\\\\\" [2]\\\\nFish that's usually red in puzzles [6]\\\\nKey partner [6]\\\\nThe opposite of income? [2]\\\\nAppear southeast before I turned around? (cryptic) [5]\\\\nThe opposite of Jerrymouse? [4]\\"\\n}} />"
    },
    "puz105_custom_976": {
      "hash": "815d4abb9f35171909552a7243db4034585d3051b59f753e451773c040c780a1",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"976\\",\\n  \\"flavortext\\": \\"It's a wrap! What did we find within each country we went to?\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/c0441a1b5f1ee06c5e99338390d6d5e2d54aa81d0b784ec3ede7fff013962abf.png\\",\\n  \\"instructions\\": \\"Words in image:\\\\n\\\\nMINIMAL\\\\nRUPEE\\\\nPANDAN JAM\\\\nDIAMOND COLLECTION\\\\nPRALINE\\\\nTACTILE EMAIL\\\\nAUTO MACHINE\\\\nMANGOS\\"\\n}} />"
    },
    "puz105_custom_1032": {
      "hash": "590d43dd1afc70be61e66f20f60e00ecd4729c8dae7f917188549b84cec8da4a",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"1032\\",\\n  \\"flavortext\\": \\"\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/c7da36d86b89a981344e13a7549b2db96f72626ef3052385b6c8e6a112331902.png\\",\\n  \\"instructions\\": \\"\\"\\n}} />"
    },
    "puz105_custom_1046": {
      "hash": "b1ef330d4e47b0e0d32f82b865fa0ae75b7cc257e122f249050e09912be6523c",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"1046\\",\\n  \\"flavortext\\": \\"Slightly better known than their BAD BAD BAD BAD BAD JET.\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/a28d5709083a50f9d2cbcf486905f7c0e6982e127b98e39ee46406674d1b0d38.png\\",\\n  \\"instructions\\": \\"\\"\\n}} />"
    },
    "puz105_custom_1054": {
      "hash": "27e31074b17902d1165694f527816ee03c986c15ab414b9ad165aeeaf394814f",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"1054\\",\\n  \\"flavortext\\": \\"\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/bba969d35c873128127a2e5bb2dcdc5e0066f34a9828c5f97fda46726b5786ca.png\\",\\n  \\"instructions\\": \\"\\"\\n}} />"
    },
    "puz105_custom_1104": {
      "hash": "8e47f160f462227255e21c837ab14f2e83a342ac21d2aacde3fdd52dd89d2226",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"1104\\",\\n  \\"flavortext\\": \\"Where is intersection 21 (et cetera)? Your answer should be a 9 letter proper noun.\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/9d4b4b1476f44cd2e702af697ad1b1d0599d32de2d3ce5a892a403a60cb71b62.png\\",\\n  \\"instructions\\": \\"i was dropped in a strange street in quebec. while looking around, I was inside a roundabout. [8]\\\\n\\\\ni looked around some more, and Oh Gee, i saw H and N9 were all aligned in a very pleasing ratio! [5]\\\\n\\\\non intersections 13 and 14, i saw two statues of one french mathematician with a name too long to fit in this text; they were neighbors of their conjugates, which both had equal force. [9]\\\\n\\\\nbut then i turned around and i realized that I was my own conjugate!\\"\\n}} />"
    },
    "puz105_custom_1128": {
      "hash": "0f7d453c5019a339939341e00f6ce785239555d7c9ace35271c4f0173109c1b0",
      "content": "<Puzzle105Content data={{\\n  \\"teamId\\": \\"1128\\",\\n  \\"flavortext\\": \\"I stare upwards into the darkness, tracing out the shapes of the stars above me. I imagine the millennia passing. The stars drift across the sky and I wonder if their paths will ever cross. \\\\nI tilt my head very slightly, note how close they all are and decide they probably will soon.  \\\\n\\\\nHow far apart are the stars?\\",\\n  \\"diagramUrl\\": \\"/static/public-submissions/media/puzzle_105/793ac69699dea35f208a5bf601e4293bd009236c24604030a354158f158188e3.png\\",\\n  \\"instructions\\": \\"\\"\\n}} />"
    },
    "farmer": {
      "hash": "31340e326586825372a4ede546fc706083227a78a01090a416c0a0e524f00ab0",
      "content": "<Image name=\\"cutscenes/farmer\\" unscoped center />\\n\\n<FarmerPuzzle />"
    },
    "puz285": {
      "hash": "fa36a0a6b11979aae207b8aad641efa9e820455bc2e9237baa794624689f85c7",
      "content": "<PuzzleGrid\\n\\ttext={\`\\n.....\\n.....\\n.....\\n.....\\n.....\\n\\t\`.trim().split(\\"\\\\n\\").join(\\"|\\")}\\n\\toptionsOverride={{ \\"data-fill-classes\\":\\"white black\\" }}\\n/>\\n\\nSource of down  \\nSenior  \\nSlide for logs  \\nTall, narrow glass  \\n?????  \\nFolded jacket part  \\nStately minister’s home  \\nPerfect, for example"
    },
    "puz286": {
      "hash": "7050a81270cce047966b2f5f8bbe3e42e3e0969ce0865dbed2d437c70d719353",
      "content": "<PuzzleGrid\\n\\ttext={\`\\n.....\\n.....\\n.....\\n.....\\n.....\\n\\t\`.trim().split(\\"\\\\n\\").join(\\"|\\")}\\n\\toptionsOverride={{ \\"data-fill-classes\\":\\"white black\\" }}\\n/>\\n\\nMixed in with  \\n<cite>Berserk</cite> or <cite>Bleach</cite>, e.g.  \\nSynthetic stocking material  \\nMimics a hot dog  \\n?????  \\nButterflies under construction  \\nGrasslike marsh plant  \\nMeaning or feeling"
    },
    "puz287": {
      "hash": "66eb1162cd2c53673404cb474ecc755a2c90e5d5753f23cb9cca00918e069ad2",
      "content": "<PuzzleGrid\\n\\ttext={\`\\n.....\\n.....\\n.....\\n.....\\n.....\\n\\t\`.trim().split(\\"\\\\n\\").join(\\"|\\")}\\n\\toptionsOverride={{ \\"data-fill-classes\\":\\"white black\\" }}\\n/>\\n\\nLand area units  \\nBitter  \\nFalls short competitively  \\nMost frequent things  \\nLoose shoulder covering  \\nTolkien locale  \\nTwitch  \\n?????"
    },
    "puz288": {
      "hash": "8fc46f6ec39d47c95dea74d27217830a5ebaf344403648f83690fdcdf27723d2",
      "content": "<PuzzleGrid\\n\\ttext={\`\\n.....\\n.....\\n.....\\n.....\\n.....\\n\\t\`.trim().split(\\"\\\\n\\").join(\\"|\\")}\\n\\toptionsOverride={{ \\"data-fill-classes\\":\\"white black\\" }}\\n/>\\n\\nYearn for  \\nPlaces for listening in, maybe  \\nNotable happening  \\nCentral cathedral spaces  \\n?????  \\nIndian, for example  \\nPerson with pets  \\nPauses in music"
    },
    "puz289": {
      "hash": "2d2d5c3964ca00954f36556fd32fc04aa392a8051ca4a2cda0bd353c9709ddc2",
      "content": "<PuzzleGrid\\n\\ttext={\`\\n.....\\n.....\\n.....\\n.....\\n.....\\n\\t\`.trim().split(\\"\\\\n\\").join(\\"|\\")}\\n\\toptionsOverride={{ \\"data-fill-classes\\":\\"white black\\" }}\\n/>\\n\\nTuned in  \\n?????  \\nHe used his frying pan as a drying pan  \\nBoring tool  \\nMournful bell sound  \\nLike bourbon barrels, as required by U.S. law  \\nShort-necked giraffe  \\nMore rare, as meat"
    },
    "puz290": {
      "hash": "c89a8daef241efd40f55b8c19fcacfd3074ff152921e047ac2e1a6bb717f93fb",
      "content": "<PuzzleGrid\\n\\ttext={\`\\n.....\\n.....\\n.....\\n.....\\n.....\\n\\t\`.trim().split(\\"\\\\n\\").join(\\"|\\")}\\n\\toptionsOverride={{ \\"data-fill-classes\\":\\"white black\\" }}\\n/>\\n\\nForced by destiny  \\nSuper star events  \\n?????  \\nFloating garbage receptacles  \\nInputs to randomizers  \\nUtter fiasco, militarily  \\nDaily active metric  \\nWaterproof garment worn when fishing"
    },
    "puz291": {
      "hash": "097777757f2b298bc0d47adbd59d9923ffd710f03e0d82a6a3dd201bdd4a832b",
      "content": "<PuzzleGrid\\n\\ttext={\`\\n.....\\n.....\\n.....\\n.....\\n.....\\n\\t\`.trim().split(\\"\\\\n\\").join(\\"|\\")}\\n\\toptionsOverride={{ \\"data-fill-classes\\":\\"white black\\" }}\\n/>\\n\\nLarge competition venue  \\nLike a haunted house  \\n?????  \\nTakes, as advice  \\nCooks a steak, maybe  \\nFeudal workers  \\nScythe’s cut path  \\nSurvivor’s eye animal"
    },
    "puz292": {
      "hash": "a2b8f007697b239bfaa851d40fc257b28fdbd772c1196b4786cb708e4567667d",
      "content": "<PuzzleGrid\\n\\ttext={\`\\n.....\\n.....\\n.....\\n.....\\n.....\\n\\t\`.trim().split(\\"\\\\n\\").join(\\"|\\")}\\n\\toptionsOverride={{ \\"data-fill-classes\\":\\"white black\\" }}\\n/>\\n\\n?????  \\nItem on a list  \\nPlace to rest  \\nAwkward or unqualified  \\nSuspicious (of)  \\nModern-day thalidomide user, maybe  \\nClimb  \\nPaid audience plant"
    },
    "puz293": {
      "hash": "19a75a06df5e27862757cac151736bcd768e76c3ecea6fb4ab64f6ecc22562c4",
      "content": "<PuzzleGrid\\n\\ttext={\`\\n.....\\n.....\\n.....\\n.....\\n.....\\n\\t\`.trim().split(\\"\\\\n\\").join(\\"|\\")}\\n\\toptionsOverride={{ \\"data-fill-classes\\":\\"white black\\" }}\\n/>\\n\\nAncient preservative resin  \\nPiece of media content, perhaps  \\nLong-legged bird  \\nLeaf or syrup  \\nWoodwind vibration sources  \\n?????  \\nSecond roll achievement  \\nProduct quality assurances"
    },
    "puz294": {
      "hash": "89f0b33606baa78322a2f415de3d40fc127c792da350564df303fa0d76d71c76",
      "content": "<Flavor>Two-By-Two? (2 6 5 4 1)</Flavor>"
    },
    "puz19": {
      "hash": "b0e37bf363b1fd0b4408d982043859aaede09367e486975fba85f9a9173fd148",
      "content": "<Flavor>Help us finish building our four walls! You can move from brick to brick in any direction.</Flavor>\\n\\n<Image fullWidth={true} />"
    },
    "puz22": {
      "hash": "54972cea733a0792c771ec0dd92fb175efda30b4742045133826c6af83616657",
      "content": "<Image fullWidth={true} />"
    },
    "puz69": {
      "hash": "a746c2656f855ff5ce74f1eeb708b969d3be6ac351340363ce682fa071860140",
      "content": "**This puzzle can only be played on Java Edition, version 1.20.4 or earlier. (Before 1.20.5, villagers would not accept damaged tools in place of undamaged tools.)**\\n\\n<Flavor>I found myself in an empty, peaceful world, with nothing but tools to mine and to craft. All I could find was one strange man offering to barter, though I’d rather deal with him as little as possible. Ugh! Even hell would be better than this nonsense.</Flavor>\\n\\n<Image fullWidth={true} />"
    },
    "puz91": {
      "hash": "eda15b14f8cb5ccdc5d082fffdcd17fa56506ba19536703c02e4005f58c3fe8e",
      "content": "\`\`\`\\n/*\\n    TODO: check accessibility on chrome 123 and firefox 124\\n*/\\ndiv.a {\\n    page-break-after: always;\\n    text-indent: hanging 1em;\\n    hanging-punctuation: first;\\n}\\ndiv.b {\\n    display: contents;\\n    text-decoration-skip-ink: all;\\n    position: relative;\\n}\\ndiv.c {\\n    text-wrap-style: balance;\\n    background-color: rgb(from blue 100 100 100);\\n    background-image: paint(x);\\n}\\ndiv.d {\\n    widows: 2;\\n    font-size-adjust: 0.6;\\n    view-transition-name: x;\\n}\\ndiv.e {\\n    background-clip: text;\\n    text-justify: inter-character;\\n    zoom: 0.5;\\n}\\n\`\`\`"
    },
    "puz93": {
      "hash": "cdc429f70845a0131bc09404209cf0de042349dd407a17f00479adcce1f0bc7d",
      "content": "<Flavor>Someone’s just doing their job!</Flavor>\\n\\n- **Action that someone** might do to a person before killing them if they hate that person too\\n- **A lazy someone might** have this action done to them after letting many houses burn down\\n- **Something that someone might find their shoes** doing a lot more if they actually experience what they talk about on television\\n- **A thing that someone might** rest on after giving an opening address\\n- **Medieval armor that someone** might wear if they thought they might get stabbed while delivering a package"
    },
    "puz94": {
      "hash": "ad98c7eec923fab6618d0a1cf53f538d103d69ab2a5d9aa2443abba787fa44b9",
      "content": "<a href={\`\${props.staticPuzDir}/default/oellic.mwri\`} target=\\"_blank\\">oellic.mwri</a>"
    },
    "puz96": {
      "hash": "d42612d92415a6a0f0b69706602a4c3fdd71c69f33dd478135c0c3b50c05fe9f",
      "content": "<p style={{ display: \\"flex\\", gap: \\"0.5em\\" }}>\\n<a href={\`\${props.staticPuzDir}/default/lvl1.html\`} target=\\"_blank\\">Level 1</a>\\n<a href={\`\${props.staticPuzDir}/default/lvl2.html\`} target=\\"_blank\\">Level 2</a>\\n<a href={\`\${props.staticPuzDir}/default/lvl3.html\`} target=\\"_blank\\">Level 3</a>\\n<a href={\`\${props.staticPuzDir}/default/lvl4.html\`} target=\\"_blank\\">Level 4</a>\\n</p>\\n\\n_These levels may contain minor bugs inherited from the source material. Such bugs are not relevant to the puzzle._"
    },
    "puz103": {
      "hash": "3e85959dd3c94e8a309a669e9b73b94111ad3c3996f146d50dc4a898d4933504",
      "content": "<Flavor>Before you begin your journey, you must first search within yourself.</Flavor>\\n\\n<Image fullWidth={true} />"
    },
    "puz104": {
      "hash": "39f9512fea003e04002da1cc82da33e4f5e42f2b11e2da969e2f0758adc81b2e",
      "content": "<Flavor><span lang=\\"zh\\">这个翻译太直接了！请把奇怪的word pairs恢复到原来的汉字。</span></Flavor>\\n\\nI was getting burnt out, so I thought a road trip would be to my grain knife. But the road was bumpy, and before I knew it, I was on the verge of mouth district. Too sick to turn back, I found myself trapped dog bug in a rural town. Dejected, I stumbled to the nearest pub and drank so much that my meat dry hurt. I found myself on the street the next morning, eat me and hungover."
    },
    "puz114": {
      "hash": "33a624b35aaf4aabc8d992c84f2b0273d365649f2fb8867b3f318ab0ac5dc136",
      "content": "<Flavor>Listen! What’s missing might spell trouble for the nation.</Flavor>\\n\\n<Audio />"
    },
    "night_of_the_celestials": {
      "hash": "5d11a965abe817706a6b13b819a57664abf83affb06274d7367cda16831c0597",
      "content": "The seven Celestials recall the events of the night, but they don’t seem to be on the same wavelength. Can you figure out what caused all the commotion?\\n\\n- Kid: At first things were okay. I was somewhere on the inside, playing in the same spot as Big Branch and no one else. All the others were in my line of sight, each on their own, except Pom Pom and Mop Mop who I didn’t see.\\n- Big Branch: I set my gaze; in the distance: a Celestial transforms — a book of summaries?\\n- Ten Lions: We looked along the same line afterwards and SAW something strange TOO!! ×10 Someone else looked like one of Africa’s capital cities?! ×10 RAWR!!! ×10 That makes NO SENSE!!! ×10\\n- Ten Lions: We were in SHOCK!!! ×10 We’d stayed still so far, but we lost our cool! ×10 So we turned and ran towards another Celestial, but just as we started running, it looked like they became a RESERVED JAVASCRIPT WORD?! ×10\\n- Funny Farmer: Pretty sure next, I was mindin’ me own business when another Celestial started looking like a bacterial disease, at the exact darn moment the distance between us increased!\\n- Ten Lions: AND THEN!! ×10 We saw a WETLAND BIRD!!! ×10\\n- Olive: oh, i think afterwards, my distance from another celestial became larger. though i could’ve sworn they were a purchase.\\n- Funny Farmer: Ay, that’s when one of y’all Celestials showed up at my location! Well, briefly. Then *bam*, seemed they turned into a spice mix!\\n- Funny Farmer: I was havin’ a time with Pom Pom and Mop Mop for a bit there but we got separated after that- as if they was paddlin’ away!\\n- Pom Pom and Mop Mop: No way! !?miws nac ew kniht yehT We’d barely barked before getting distracted by... a color?! !hcnerF dekool tI\\n- Pom Pom and Mop Mop: After that, we saw something extremely serious... !suoires ylemertxE\\n- Rock Lobster: Then yea, I saw one of the NPCs from Redridge Mountain or whatevs. <Twemoji tag=\\"span\\">😎</Twemoji>\\n- Big Branch: Next: I, in motion. En route, a vision — part of a rainbow flag.\\n- Pom Pom and Mop Mop: BIG BRANCH! !?ffo dekool seenk ruoY\\n- Pom Pom and Mop Mop: And then and then- !OTATOP a ekil dekool enoemos-\\n- Olive: not me. last thing i saw was my purchase again\\n- Kid: At the end only Funny Farmer was with me and everyone else was each on their own again. Maybe we should have kept track of who’s been moving and how fast everyone was going...\\n\\nMap\\n---\\n\\nCelestials travel one segment at a time. Every segment was traversed exactly once.\\n\\n<Image inverted center />"
    },
    "olive": {
      "hash": "fe0985bff04efe800ab91726709c013946eef7ff1e956858e2a535ba91a7fd2b",
      "content": "<Image name=\\"cutscenes/olive\\" unscoped center />\\n\\nhi, i’m Olive! please help collect my penlights so i can cheer for my virtual idols!\\n\\n<OlivePuzzle />"
    },
    "pom_pom": {
      "hash": "25f90f1ec940965bad66f16e6e746e914c63e9c1e74418e3852f4a002526cbc5",
      "content": "<Image name=\\"cutscenes/pom_pom\\" unscoped />\\n\\n1. Letter homophone. Plant home. Disney song that rhymes with \\"cabbages\\".\\n1. Runs. Best. Yet.\\n1. Sound tomatoes make. Wheel with eyes, for example. A racer or diner might wear this.\\n1. Style of eggs. Six pack. Something you do to balls and eyelashes.\\n1. Tennis unit. Period. Judge. Animal home.\\n1. Blood and still lifes get ____. Emerge. Unrefined.\\n1. Glasses holder. Quote. Rush.\\n1. It may follow H or K. Add. 100%. Soda.\\n1. Something that brands, files, and you have. Legend. Type of race.\\n1. An eagle eats one per day. Lozenge shape. Seethe.\\n1. Where teeth come from. Also. Wound.\\n1. Vertex. Execute. Error.\\n1. Something you may have in your hair. It is known for its unique flag shape. ____ bear.\\n\\nThe answer is 3 letters long.\\n\\n<div style={{\\"textAlign\\": \\"right\\"}}>\\n<Image name=\\"cutscenes/mop_mop\\" unscoped />\\n\\n<ul className=\\"list-no-bullet\\">\\n<li>.resworb beW .evissaM .rekam elosnoC</li>\\n<li>.tnemngila nA .etsaT .drib sselthgilF</li>\\n<li>.yoB .ezalG .seye ebircsed ot desu drow detanehpyH</li>\\n<li>.)nwod( wohC .seceip emaG .yllacirohpatem ,tnenopmoc tenretnI</li>\\n<li>.sepyt era wons dna ,erif ,liaM .ezihtapmE .ytisrevinu eugaeL yvI</li>\\n<li>.lamina caidoZ .dloM ?seyepoP fo etisoppO</li>\\n<li>.egnar niatnuoM .ylF .koob ralupoP</li>\\n<li>.eranS .elcriC .gniR</li>\\n<li>.rebmem aifaM .ycnaF .enoyrevE .esnes htxiS</li>\\n<li>.ecaF .seod etarip a tahW .dnuoS</li>\\n<li>.tcirtsiD .aisreP nredoM .kwah uoy sgnihT</li>\\n<li>.meht evah stiucric dna ,lleH ,nevaeH .oreZ .od semils tahW</li>\\n<li>.deyatS .deredrO .nepo meht fo ynam oot evah uoY</li>\\n</ul>\\n\\n.gnol srettel 3 si rewsna ehT\\n</div>"
    },
    "puz105": {
      "hash": "7e921257f225f05ad8702ee0d9398855d7892d9368dcf6a28a1d4da8daf7104a",
      "content": "Congratulations! You’ve qualified for a FREE custom puzzle!\\n\\nTo redeem your FREE puzzle, please submit an Application for Free Puzzle Redemption. Your application must include the Free Puzzle Request Form, a Diagram of the contents of your requested Free Puzzle, and all necessary supporting documents. Your documents **must** be arranged in the following order:\\n\\n- Form\\n- Supporting Document 1\\n- Supporting Document 2\\n- ...\\n- Supporting Document N\\n- Diagram\\n\\nWe further request that you title your supporting documents **appropriate to their contents**. You may use the interface provided below to validate the titles of your supporting documents.\\n\\nPlease be mindful not to abuse the title validation system. If you submit 5 or more invalid titles within a <Puzzle105CheckTitleRateLimitMinutes />-minute interval, **you may be barred from submitting further titles for up to <Puzzle105CheckTitleRateLimitMinutes /> minutes.**\\n\\nThe contents of your Form and Diagram have no impact on the validity of your application, except that they should describe an actual, original puzzle. If you consent in the Form, your puzzle may be selected to be made available to other teams through wishes.\\n\\n<Twemoji tag=\\"span\\">⚠️</Twemoji> **IMPORTANT ADDENDUM** <Twemoji tag=\\"span\\">⚠️</Twemoji> If you consent to making your puzzle available through wishes, please ensure that your puzzle is easy and small. Aim for a puzzle that can be solved by one person in under 15 minutes. It is fine, even preferable, for the puzzle to be small enough to solve in under a minute. Submitting an overly large or underclued puzzle will delay the processing of your application and may result in the rejection of your application or the exclusion of your puzzle from wishes.\\n\\n<Puzzle105 />"
    },
    "puz214": {
      "hash": "3cf8a0e20bef06633ef9747507b370f3ba08689cfa1cbeac1211aa51648ddf1c",
      "content": "I’ve hidden the answer in my favorite place.\\n\\n<FaviconChanger staticPuzDir={props.staticPuzDir} />"
    },
    "puz252": {
      "hash": "516da958ecaa2cf69e131926dcc102399e4076bb5e6a64ce8d4751bda1de80e0",
      "content": "<div className=\\"no-copy\\">\\nPbatenghyngvbaf! Lbh unir penpxrq gur pbqr oruvaq bhe qnfgneqyl evqqyr. Jr jrera’g fher vs guvf chmmyr jbhyq or gbb uneq sbe gur fbyiref ohg vg frrzf LBH unir znantrq gb nppbzcyvfu gur gnfx! Hasbeghangryl, jr erterg gb vasbez lbh gung gur nafjre gb guvf chmmyr vf abg “PNEYGBA SVFX”. Guvf chmmyr juvpu lbh unir fbyirq, juvpu jnf gur jbex bs Naqrefba Jnat naq Yrba Mubh bs <Twemoji tag=\\"span\\">✈️✈️✈️</Twemoji> Tnynpgvp Geraqfrggref <Twemoji tag=\\"span\\">✈️✈️✈️</Twemoji>, qbrf unir na nafjre juvpu jr jvyy erirny gb lbh fubegyl, naq lbh jvyy fvzcyl unir gb fhozvg gur nafjre hfvat gur sbez ba guvf cntr gb svavfu gur chmmyr. Yhpxvyl sbe lbh, lbh unir nyernql qbar nyy gur uneq jbex bs gur chmmyr naq gurer vf abguvat yrsg gb qb ohg chg va gur nafjre! Fcrnxvat bs juvpu, qb lbh guvax n chmmyr va n chmmyr uhag arprffnevyl unf gb unir na nafjre? Gurer’f orra fbzr qvfphffvba nobhg guvf gbcvp jvguva bhe grnz naq gur jvqre chmmyr uhag pbzzhavgl erpragyl, naq onfrq ba ynfg lrne’f Tnynpgvp Chmmyr Uhag, lbh zvtug or noyr gb thrff jurer znal bs hf ynaq ba gur gbcvp! Ohg naljnl, onpx gb gur znggre ng unaq: guvf chmmyr. Fhozvg JNGRESBJY abj va gur sbez orybj vs lbh jnag gb trg gur chmmyr jebat, orpnhfr gung vf abg gur nafjre gb gur chmmyr. Fbzrgvzrf n chmmyr jvyy unir ersreraprf gb cbc phygher, fhpu nf nfxvat sbe gur anzr bs Gnlybe Fjvsg’f 2017 nyohz, ohg jr qvqa’g jnag gb qb nalguvat yvxr gung va guvf chmmyr fvapr vg jbhyq snibe crbcyr jvgu fcrpvnyvmrq xabjyrqtr naq jbhyqa’g ernyyl svg gur gurzr bs gur chmmyr, naq whfg gb or pyrne gur anzr bs gung nyohz vfa’g gur nafjre gb gur chmmyr, whfg na rknzcyr bs fbzrguvat gung zvtug or uvagrq ng va na nafjre cuenfr. Vs lbh jrera’g njner, na NAFJRE CUENFR, va chmmyr uhagvat grezvabybtl, vf n cvrpr bs grkg gung lbh trg sebz rkgenpgvat gur chmmyr juvpu vf abg vgfrys gur svany nafjre gb gur chmmyr, ohg tvirf n qverpg pyhr gb gur svany nafjre juvpu lbh pna hfr gb svther bhg jung vg vf. Znal nhgubef hfr na nafjre cuenfr va rkgenpgvba gb znxr vg n ovg uneqre gb hfr gbbyf yvxr AHGEVZNGVP naq BARYBBX gb thrff gur svany nafjre jvgu srj yrggref. Va snpg, gur grkg lbh ner ernqvat abj vf fhpu na nafjre cuenfr! Jr xabj lbh zvtug or qvfnccbvagrq gung lbh qvqa’g trg gur nafjre vzzrqvngryl nsgre lbh hfrq n fcnex bs vafcvengvba gb uvg hcba gur pber zrpunavp bs gur chmmyr naq genafyngr gur tvira grkg vagb n ernqnoyr sbezng, ohg gung jbhyq’ir orra gbb rnfl, jbhyqa’g vg? Gb trg gur svany nafjre, lbh’yy jnag gb ybbx ng gur svefg yrggre bs rnpu fragrapr bs guvf nafjre cuenfr. Bapr lbh qb, lbh’yy ernyvmr gung vg qbrfa’g fcryy nalguvat ng nyy. Guvf jnf npghnyyl gur rkgenpgvba sbe na rneyvre irefvba bs gur chmmyr, ohg jr gubhtug vg znqr vg gbb rnfl gb fubegphg gur chmmyr jvgubhg npghnyyl ybbxvat ng gur jubyr guvat. Npghnyyl, V yvrq, gur chmmyr arire jbexrq gung jnl, jr onfvpnyyl unq guvf pbaprcg bs n ybat enzoyvat nafjre cuenfr gung gur fbyiref jbhyq unir gb uhag guebhtu sbe gur nafjre sebz gur ortvaavat. Jr qvq unir zhygvcyr vqrnf sbe ubj jr zvtug cerfrag guvf grkg, yvxr tvivat n yvfg bs jbeqf naq vaqvprf, be hfvat n fvzcyr pvcure. Ng gur gvzr V’z jevgvat guvf fragrapr, V’z abg rira fher jung jr qrpvqrq gb qb! Gur sbyybjvat vf snyfr: Gur nafjre gb gur chmmyr vf PNCLONEN. Nf lbh’ir yvxryl ernyvmrq, gur gvgyr gb guvf chmmyr, ARRQYR VA N UNLFGNPX, vf n ersrerapr gb guvf pbaprcg bs gelvat gb svaq gur nafjre va n ybat zrnavatyrff fgevat bs grkg, hayrff jr qrpvqrq gb punatr gur gvgyr orsber choyvfuvat gur chmmyr. Gur sbyybjvat vf snyfr: Gur sbyybjvat vf snyfr: Gur sbyybjvat vf snyfr: Gur sbyybjvat vf snyfr: Gur sbyybjvat vf snyfr: Gur sbyybjvat vf snyfr: Gur sbyybjvat vf snyfr: Gur sbyybjvat vf snyfr: Gur sbyybjvat vf snyfr: Gur sbyybjvat vf snyfr: Gur nafjre gb gur chmmyr vf ABG ZBAXRL’F CNJ. Naq gb or pyrne, V’z abg fnlvat gung gur nafjre vf “ABG ZBAXRL’F CNJ”, nffhzvat gur ahzore bs vafgnaprf bs “Gur sbyybjvat vf snyfr:” yvarf hc jvgu gung ulcbgurgvpnyyl orvat gur pnfr, V’z fnlvat gur nafjre vfa’g gur cuenfr “ZBAXRL’F CNJ”, juvpu ersref gb n jvfu-tenagvat bowrpg bs zlgu gung tenagf lbh lbhe urneg’f qrfver ohg jvgu n qrinfgngvat qenjonpx. Znlor lbh srry yvxr guvf nafjre cuenfr vgfrys jnf n zbaxrl’f cnj bs n xvaq! <Twemoji tag=\\"span\\">😂</Twemoji> V xvq. Vs lbh’ir orra jevgvat qbja gur pncvgnyvmrq jbeqf naq cuenfrf gung unir pbzr hc va guvf nafjre cuenfr fb sne va ubcrf gung gurl jvyy riraghnyyl pbzr va unaql sbe na rkgenpgvba, qba’g jbeel - lbh qba’g arrq gb qb gung. Gur nafjre gb gur chmmyr jvyy or cresrpgyl pyrne bapr lbh unir shyyl ernq naq haqrefgbbq gur grkg ng unaq. Lbh zvtug or jbaqrevat jura jr jvyy fnl gur fbyhgvba gb guvf chmmyr, ohg jr cebzvfr vg vf pbzvat hc. Jr arrqrq gb znxr guvf nafjre cuenfr ybat rabhtu fb fbyiref jbhyq unir rabhtu qngn gb ernyvmr gung lbh arrqrq gb EBG13 guvf zrffntr vafgrnq bs fbzr bgure cynhfvoyr rkgenpgvba yvxr Ivtrarer. Naq whfg gb or pyrne, rirel fragrapr va guvf nafjre cuenfr VF gehr, hayrff fcrpvsvpnyyl fgngrq bgurejvfr - jr jbhyqa’g jnag gb zvfyrnq lbh ng nal cbvag. Ohg lrnu, vg’f terng gung lbh jrer noyr gb svther bhg ubj gb ernq guvf zrffntr, fb lbh unir nyernql qbar nyy gur jbex lbh arrq gb fbyir gur chmmyr! Lbh whfg arrq gb pnyy va gur nafjre va gur nafjre obk, juvpu jvyy znex gur chmmyr nf fbyirq ba gur uhag jrofvgr. Cyrnfr qba’g pnyy va na vapbeerpg nafjre yvxr JVXVCRQVN be BENATR FBQN, orpnhfr lbh jvyy whfg or jnfgvat n thrff sbe ab ernfba. Bayl gur pbeerpg nafjre fubhyq or jevggra va gur fhozvffvba obk, juvpu jvyy vaqrrq or n pbzzba Ratyvfu jbeq be cuenfr. Naljnlf, gb trg gur nafjre gb guvf chmmyr, lbh jvyy arrq gb svaq n jbeq be cuenfr jubfr svefg yrggre vf rvgure n pbafbanag be n ibjry, naq jubfr ynfg yrggre vf jbegu ng yrnfg 1 cbvag va Fpenooyr. Fbeel vs gung qvqa’g uryc, ohg jr qvqa’g guvax jr arrqrq gb tvir nal zber vasbezngvba orpnhfr jr nyernql gbyq lbh gur nafjre gb gur chmmyr rneyvre (be qvq jr?). Znlor gur nafjre gb guvf chmmyr vf whfg va gur ynfg fragrapr bs gur nafjre cuenfr, gubhtu ubarfgyl lbh cebonoyl nyernql fpebyyrq qbja naq purpxrq gung vg jnfa’g gurer, fb jr jba’g or noyr gb pbaivapr lbh bs gung, arirezvaq. Gur ahzoref 12, 1, 14, 4, 19, 12, 9, 4, naq 5 ner avpr ahzoref, ohg ner bgurejvfr abg eryngrq gb guvf chmmyr. Qvq lbh xabj gung gur cerivbhf fragrapr unf 11 R’f va vg, naq guvf fragrapr unf 10 R’f? Jurer jrer jr ntnva? Bu evtug, jr jrer pbatenghyngvat lbh sbe svthevat bhg guvf chmmyr’f rkgenpgvba, juvpu nqzvggrqyl jnf cerggl fvzcyr, ohg jr qvqa’g jnag gb jevgr n chmmyr gung jnf gbb uneq sbe guvf chmmyr uhag. N pbzzba glcr bs chmmyr vf “Vqragvsl Fbeg Vaqrk Fbyir”, juvpu vaibyirf vqragvslvat fbzr qngn, gura fbegvat va fbzr frafvoyr beqre, gura vaqrkvat ol fbzr cebivqrq vaqvprf, gura fbyivat bapr lbh rkgenpg na nafjre cuenfr. Bhe tbny va jevgvat na rnfvre chmmyr jnf gb yrnir bhg gur Vqragvsl, Fbeg, naq Vaqrk fgrcf, fb gur fbyire bayl arrqf gb unaqyr gur Fbyir fgrc, jurer nyy lbh arrq gb qb vf vachg gur ynfg jbeq bs guvf fragrapr. Gubhtu znlor gung jnfa’g n terng vqrn, orpnhfr bsgragvzrf gur sha va n chmmyr vf va gur rneyvre fgrcf, jurer lbh zvtug arrq na “nun zbzrag” gb svther bhg r.t., ubj gur vqragvsvpngvba jbexf, naq fbyiref jbhyqa’g trg gung fngvfsnpgvba va guvf chmmyr. Vs gur bayl “nun zbzrag” va guvf chmmyr vf ernyvmvat vg’f n Pnrfne fuvsg, qbrf gung ernyyl znxr sbe na vagrerfgvat chmmyr? Jryy, V qvterff. Guvf chmmyr fubhyq or nobhg lbh, gur fbyire, naq jr whfg fcrag frireny fragraprf gnyxvat nobhg hf, fb jr ncbybtvmr. Lbh zvtug nfx hf gb gryy lbh gur nafjre abj nf n jnl bs fnlvat jr’er fbeel, ohg gung jbhyq or gbb rnfl, jbhyqa’g vg? Qba’g lbh, gur fbyire, jnag gb jbex sbe gur nafjre, fb lbh pna srry gung frafr bs cevqr naq nppbzcyvfuzrag? Be vs jr whfg gbyq lbh gung gur nafjre jnf, fnl, IREOBFVGL (whfg gb hfr na rknzcyr, abg gur npghny nafjre), jbhyq lbh ernyyl or fngvfsvrq? Gb or ubarfg, gurer’f fbyiref bs nyy xvaqf, fb lbh pna arire cyrnfr nalbar, juvpu vf bar bs gur ovt gentrqvrf bs chmmyr jevgvat. Vs lbh ner jevgvat n chmmyr lbhefrys, yrg guvf or gur ovttrfg cvrpr bs nqivpr V unir sbe lbh: vg vf vzcbffvoyr gb jevgr n chmmyr gung rirelbar jvyy yvxr, fb gel abg gb trg gbb fgerffrq bhg bire perngvat gur cresrpg chmmyr. Whfg gel gb jevgr fbzrguvat gung lbh guvax lbh’q unir sha fbyivat, naq gehfg gung bguref jvyy nyfb svaq vg sha. Bs pbhefr, lbh fubhyq nyfb grfgfbyir lbhe chmmyr naq gnxr srrqonpx frevbhfyl, ohg vs n fvatyr grfgre qvqa’g unir gung zhpu sha, gung qbrf abg ng nyy zrna vg’f n “onq” chmmyr. Gnxr vg sebz zr, vg’f ernyyl rnfl gb trg fhpxrq vagb jnagvat inyvqngvba gung lbhe chmmyrf ner tbbq, be gung lbh’er n fxvyyrq chmmyr jevgre - guvf vf abg arprffnevyl n onq guvat, ohg chmmyvat fubhyq or n sha ubool, naq gung xvaq bs zvaqfrg pna znxr vg srry yrff sha. Jbj, ybbx ng hf enzoyvat ntnva jura jr ernyyl fubhyq whfg or gryyvat lbh gur fbyhgvba gung lbh irel zhpu qrfreir. Jryy, vs lbh’ir ernq gur jubyr guvat hc gb abj naq qba’g unir gur nafjre lrg, jr’er fbeel gb fnl gung lbh zhfg unir zvffrq vg naq zvtug arrq gb gnxr nabgure ybbx. Pbatenghyngvbaf ntnva ba svaqvat guvf uvqqra zrffntr!\\n</div>\\n<div className=\\"copy-only\\">\\nPbatenghyngvbaf! Lbh unir penpxrq gur pbqr oruvaq bhe qnfgneqyl evqqyr. Jr jrera’g fher vs guvf chmmyr jbhyq or gbb uneq sbe gur fbyiref ohg vg frrzf LBH unir znantrq gb nppbzcyvfu gur gnfx! Hasbeghangryl, jr erterg gb vasbez lbh gung gur nafjre gb guvf chmmyr vf abg “PNEYGBA SVFX”. Guvf chmmyr juvpu lbh unir fbyirq, juvpu jnf gur jbex bs Naqrefba Jnat naq Yrba Mubh bs ✈️✈️✈️ Tnynpgvp Geraqfrggref ✈️✈️✈️, qbrf unir na nafjre juvpu jr jvyy erirny gb lbh fubegyl, naq lbh jvyy fvzcyl unir gb fhozvg gur nafjre hfvat gur sbez ba guvf cntr gb svavfu gur chmmyr. Yhpxvyl sbe lbh, lbh unir nyernql qbar nyy gur uneq jbex bs gur chmmyr naq gurer vf abguvat yrsg gb qb ohg chg va gur nafjre! Fcrnxvat bs juvpu, qb lbh guvax n chmmyr va n chmmyr uhag arprffnevyl unf gb unir na nafjre? Gurer’f orra fbzr qvfphffvba nobhg guvf gbcvp jvguva bhe grnz naq gur jvqre chmmyr uhag pbzzhavgl erpragyl, naq onfrq ba ynfg lrne’f Tnynpgvp Chmmyr Uhag, lbh zvtug or noyr gb thrff jurer znal bs hf ynaq ba gur gbcvp! Ohg naljnl, onpx gb gur znggre ng unaq: guvf chmmyr. Fhozvg JNGRESBJY abj va gur sbez orybj vs lbh jnag gb trg gur chmmyr jebat, orpnhfr gung vf abg gur nafjre gb gur chmmyr. Fbzrgvzrf n chmmyr jvyy unir ersreraprf gb cbc phygher, fhpu nf nfxvat sbe gur anzr bs Gnlybe Fjvsg’f 2017 nyohz, ohg jr qvqa’g jnag gb qb nalguvat yvxr gung va guvf chmmyr fvapr vg jbhyq snibe crbcyr jvgu fcrpvnyvmrq xabjyrqtr naq jbhyqa’g ernyyl svg gur gurzr bs gur chmmyr, naq whfg gb or pyrne gur anzr bs gung nyohz vfa’g gur nafjre gb gur chmmyr, whfg na rknzcyr bs fbzrguvat gung zvtug or uvagrq ng va na nafjre cuenfr. Vs lbh jrera’g njner, na NAFJRE CUENFR, va chmmyr uhagvat grezvabybtl, vf n cvrpr bs grkg gung lbh trg sebz rkgenpgvat gur chmmyr juvpu vf abg vgfrys gur svany nafjre gb gur chmmyr, ohg tvirf n qverpg pyhr gb gur svany nafjre juvpu lbh pna hfr gb svther bhg jung vg vf. Znal nhgubef hfr na nafjre cuenfr va rkgenpgvba gb znxr vg n ovg uneqre gb hfr gbbyf yvxr AHGEVZNGVP naq BARYBBX gb thrff gur svany nafjre jvgu srj yrggref. Va snpg, gur grkg lbh ner ernqvat abj vf fhpu na nafjre cuenfr! Jr xabj lbh zvtug or qvfnccbvagrq gung lbh qvqa’g trg gur nafjre vzzrqvngryl nsgre lbh hfrq n fcnex bs vafcvengvba gb uvg hcba gur pber zrpunavp bs gur chmmyr naq genafyngr gur tvira grkg vagb n ernqnoyr sbezng, ohg gung jbhyq’ir orra gbb rnfl, jbhyqa’g vg? Gb trg gur svany nafjre, lbh’yy jnag gb ybbx ng gur svefg yrggre bs rnpu fragrapr bs guvf nafjre cuenfr. Bapr lbh qb, lbh’yy ernyvmr gung vg qbrfa’g fcryy nalguvat ng nyy. Guvf jnf npghnyyl gur rkgenpgvba sbe na rneyvre irefvba bs gur chmmyr, ohg jr gubhtug vg znqr vg gbb rnfl gb fubegphg gur chmmyr jvgubhg npghnyyl ybbxvat ng gur jubyr guvat. Npghnyyl, V yvrq, gur chmmyr arire jbexrq gung jnl, jr onfvpnyyl unq guvf pbaprcg bs n ybat enzoyvat nafjre cuenfr gung gur fbyiref jbhyq unir gb uhag guebhtu sbe gur nafjre sebz gur ortvaavat. Jr qvq unir zhygvcyr vqrnf sbe ubj jr zvtug cerfrag guvf grkg, yvxr tvivat n yvfg bs jbeqf naq vaqvprf, be hfvat n fvzcyr pvcure. Ng gur gvzr V’z jevgvat guvf fragrapr, V’z abg rira fher jung jr qrpvqrq gb qb! Gur sbyybjvat vf snyfr: Gur nafjre gb gur chmmyr vf PNCLONEN. Nf lbh’ir yvxryl ernyvmrq, gur gvgyr gb guvf chmmyr, ARRQYR VA N UNLFGNPX, vf n ersrerapr gb guvf pbaprcg bs gelvat gb svaq gur nafjre va n ybat zrnavatyrff fgevat bs grkg, hayrff jr qrpvqrq gb punatr gur gvgyr orsber choyvfuvat gur chmmyr. Gur sbyybjvat vf snyfr: Gur sbyybjvat vf snyfr: Gur sbyybjvat vf snyfr: Gur sbyybjvat vf snyfr: Gur sbyybjvat vf snyfr: Gur sbyybjvat vf snyfr: Gur sbyybjvat vf snyfr: Gur sbyybjvat vf snyfr: Gur sbyybjvat vf snyfr: Gur sbyybjvat vf snyfr: Gur nafjre gb gur chmmyr vf ABG ZBAXRL’F CNJ. Naq gb or pyrne, V’z abg fnlvat gung gur nafjre vf “ABG ZBAXRL’F CNJ”, nffhzvat gur ahzore bs vafgnaprf bs “Gur sbyybjvat vf snyfr:” yvarf hc jvgu gung ulcbgurgvpnyyl orvat gur pnfr, V’z fnlvat gur nafjre vfa’g gur cuenfr “ZBAXRL’F CNJ”, juvpu ersref gb n jvfu-tenagvat bowrpg bs zlgu gung tenagf lbh lbhe urneg’f qrfver ohg jvgu n qrinfgngvat qenjonpx. Znlor lbh srry yvxr guvf nafjre cuenfr vgfrys jnf n zbaxrl’f cnj bs n xvaq! 😂 V xvq. Vs lbh’ir orra jevgvat qbja gur pncvgnyvmrq jbeqf naq cuenfrf gung unir pbzr hc va guvf nafjre cuenfr fb sne va ubcrf gung gurl jvyy riraghnyyl pbzr va unaql sbe na rkgenpgvba, qba’g jbeel - lbh qba’g arrq gb qb gung. Gur nafjre gb gur chmmyr jvyy or cresrpgyl pyrne bapr lbh unir shyyl ernq naq haqrefgbbq gur grkg ng unaq. Lbh zvtug or jbaqrevat jura jr jvyy fnl gur fbyhgvba gb guvf chmmyr, ohg jr cebzvfr vg vf pbzvat hc. Jr arrqrq gb znxr guvf nafjre cuenfr ybat rabhtu fb fbyiref jbhyq unir rabhtu qngn gb ernyvmr gung lbh arrqrq gb EBG13 guvf zrffntr vafgrnq bs fbzr bgure cynhfvoyr rkgenpgvba yvxr Ivtrarer. Naq whfg gb or pyrne, rirel fragrapr va guvf nafjre cuenfr VF gehr, hayrff fcrpvsvpnyyl fgngrq bgurejvfr - jr jbhyqa’g jnag gb zvfyrnq lbh ng nal cbvag. Ohg lrnu, vg’f terng gung lbh jrer noyr gb svther bhg ubj gb ernq guvf zrffntr, fb lbh unir nyernql qbar nyy gur jbex lbh arrq gb fbyir gur chmmyr! Lbh whfg arrq gb pnyy va gur nafjre va gur nafjre obk, juvpu jvyy znex gur chmmyr nf fbyirq ba gur uhag jrofvgr. Cyrnfr qba’g pnyy va na vapbeerpg nafjre yvxr JVXVCRQVN be BENATR FBQN, orpnhfr lbh jvyy whfg or jnfgvat n thrff sbe ab ernfba. Bayl gur pbeerpg nafjre fubhyq or jevggra va gur fhozvffvba obk, juvpu jvyy vaqrrq or n pbzzba Ratyvfu jbeq be cuenfr. Naljnlf, gb trg gur nafjre gb guvf chmmyr, lbh jvyy arrq gb svaq n jbeq be cuenfr jubfr svefg yrggre vf rvgure n pbafbanag be n ibjry, naq jubfr ynfg yrggre vf jbegu ng yrnfg 1 cbvag va Fpenooyr. Fbeel vs gung qvqa’g uryc, ohg jr qvqa’g guvax jr arrqrq gb tvir nal zber vasbezngvba orpnhfr jr nyernql gbyq lbh gur nafjre gb gur chmmyr rneyvre (be qvq jr?). Znlor gur nafjre gb guvf chmmyr vf whfg va gur ynfg fragrapr bs gur nafjre cuenfr, gubhtu ubarfgyl lbh cebonoyl nyernql fpebyyrq qbja naq purpxrq gung vg jnfa’g gurer, fb jr jba’g or noyr gb pbaivapr lbh bs gung, arirezvaq. Gur ahzoref 12, 1, 14, 4, 19, 12, 9, 4, naq 5 ner avpr ahzoref, ohg ner bgurejvfr abg eryngrq gb guvf chmmyr. Qvq lbh xabj gung gur cerivbhf fragrapr unf 11 R’f va vg, naq guvf fragrapr unf 10 R’f? Jurer jrer jr ntnva? Bu evtug, jr jrer pbatenghyngvat lbh sbe svthevat bhg guvf chmmyr’f rkgenpgvba, juvpu nqzvggrqyl jnf cerggl fvzcyr, ohg jr qvqa’g jnag gb jevgr n chmmyr gung jnf gbb uneq sbe guvf chmmyr uhag. N pbzzba glcr bs chmmyr vf “Vqragvsl Fbeg Vaqrk Fbyir”, juvpu vaibyirf vqragvslvat fbzr qngn, gura fbegvat va fbzr frafvoyr beqre, gura vaqrkvat ol fbzr cebivqrq vaqvprf, gura fbyivat bapr lbh rkgenpg na nafjre cuenfr. Bhe tbny va jevgvat na rnfvre chmmyr jnf gb yrnir bhg gur Vqragvsl, Fbeg, naq Vaqrk fgrcf, fb gur fbyire bayl arrqf gb unaqyr gur Fbyir fgrc, jurer nyy lbh arrq gb qb vf vachg gur ynfg jbeq bs guvf fragrapr. Gubhtu znlor gung jnfa’g n terng vqrn, orpnhfr bsgragvzrf gur sha va n chmmyr vf va gur rneyvre fgrcf, jurer lbh zvtug arrq na “nun zbzrag” gb svther bhg r.t., ubj gur vqragvsvpngvba jbexf, naq fbyiref jbhyqa’g trg gung fngvfsnpgvba va guvf chmmyr. Vs gur bayl “nun zbzrag” va guvf chmmyr vf ernyvmvat vg’f n Pnrfne fuvsg, qbrf gung ernyyl znxr sbe na vagrerfgvat chmmyr? Jryy, V qvterff. Guvf chmmyr fubhyq or nobhg lbh, gur fbyire, naq jr whfg fcrag frireny fragraprf gnyxvat nobhg hf, fb jr ncbybtvmr. Lbh zvtug nfx hf gb gryy lbh gur nafjre abj nf n jnl bs fnlvat jr’er fbeel, ohg gung jbhyq or gbb rnfl, jbhyqa’g vg? Qba’g lbh, gur fbyire, jnag gb jbex sbe gur nafjre, fb lbh pna srry gung frafr bs cevqr naq nppbzcyvfuzrag? Be vs jr whfg gbyq lbh gung gur nafjre jnf, fnl, IREOBFVGL (whfg gb hfr na rknzcyr, abg gur npghny nafjre), jbhyq lbh ernyyl or fngvfsvrq? Gb or ubarfg, gurer’f fbyiref bs nyy xvaqf, fb lbh pna arire cyrnfr nalbar, juvpu vf bar bs gur ovt gentrqvrf bs chmmyr jevgvat. Vs lbh ner jevgvat n chmmyr lbhefrys, yrg guvf or gur ovttrfg cvrpr bs nqivpr V unir sbe lbh: vg vf vzcbffvoyr gb jevgr n chmmyr gung rirelbar jvyy yvxr, fb gel abg gb trg gbb fgerffrq bhg bire perngvat gur cresrpg chmmyr. Whfg gel gb jevgr fbzrguvat gung lbh guvax lbh’q unir sha fbyivat, naq gehfg gung bguref jvyy nyfb svaq vg sha. Bs pbhefr, lbh fubhyq nyfb grfgfbyir lbhe chmmyr naq gnxr srrqonpx frevbhfyl, ohg vs n fvatyr grfgre qvqa’g unir gung zhpu sha, gung qbrf abg ng nyy zrna vg’f n “onq” chmmyr. Gnxr vg sebz zr, vg’f ernyyl rnfl gb trg fhpxrq vagb jnagvat inyvqngvba gung lbhe chmmyrf ner tbbq, be gung lbh’er n fxvyyrq chmmyr jevgre - guvf vf abg arprffnevyl n onq guvat, ohg chmmyvat fubhyq or n sha ubool, naq gung xvaq bs zvaqfrg pna znxr vg srry yrff sha. Jbj, ybbx ng hf enzoyvat ntnva jura jr ernyyl fubhyq whfg or gryyvat lbh gur fbyhgvba gung lbh irel zhpu qrfreir. Jryy, vs lbh’ir ernq gur jubyr guvat hc gb abj naq qba’g unir gur nafjre lrg, jr’er fbeel gb fnl gung lbh zhfg unir zvffrq vg naq zvtug arrq gb gnxr nabgure ybbx. Pbatenghyngvbaf ntnva ba svaqvat guvf uvqqra zrffntr!\\n</div>"
    },
    "rock_lobster": {
      "hash": "4596a352df486010c082a2ab700972fc081317764162895ded35678eb7f64e26",
      "content": "<Image name=\\"cutscenes/rock_lobster\\" unscoped center />\\n\\n<div style={{ textAlign: \\"center\\", marginBottom: \\"2rem\\" }}>\\n  <Audio autoPlay loop />\\n</div>\\n\\nDraw lines through orthogonally adjacent cells to form a path from the start arrow to the end arrow. Black circles and white circles follow Masyu rules. Further:\\n\\n- The path follows one of four different rules for the dashed circles, corresponding to a type of mineral:\\n    - **black ice**, a slippery mineral;\\n    - **gypsum**, a mineral that often occurs as twinned crystals;\\n    - **hematite**, a hard mineral that can attract or repel magnets;\\n    - and **uraninite**, which decays with a half-life.\\n- The path goes through every black and white circle, but it does not need to go through every dashed circle.\\n- Each dashed circle in a puzzle is the same type of mineral, and each type of mineral is used by some puzzle.\\n- Each puzzle has a unique solution.\\n- Highlight the dashed circles used by each path. This will be used for finding the answer.\\n\\n---\\n\\n[Puzzle 1](https://tinyurl.com/2acxkh8y)  \\n[Puzzle 2](https://tinyurl.com/2a7ynh46)  \\n[Puzzle 3](https://tinyurl.com/2y7yz6fk)  \\n[Puzzle 4](https://tinyurl.com/2cdl5mfc)"
    },
    "ten_lions": {
      "hash": "bc0900031d588fc9da8ec0bdc73d858078727b3ee0a6d7756b9afa7fa445ffe7",
      "content": "<Image name=\\"cutscenes/lions\\" unscoped center />\\n\\n<p><b>Sources differ. You can submit a title to the answer checker to obtain useful information.</b></p>\\n\\n\\n<Flavor>When it comes to managing a lion’s share of the wealth，most people use X to mark the spot，but poets prefer another symbol。</Flavor>\\n\\nThe Tatars greatly build，greatly build，greatly greatly build，and Big Darmstadtium replies with the sound of clattering hooves。\\n\\n**? (12)**\\n\\nBig Darmstadtium reaches legal case，according to coastal safety。\\n\\n**? and ? (7)**\\n\\nThe legal case says (Cantonese)：a dark latent thousand was owed by euryale ferox。\\n\\n**? and ? (7)**\\n\\nEuryale ferox before，owed a thousand handkerchiefs，and sleeping taxes。\\n\\n**? and ? (7)**\\n\\nSleeping taxes and sleeping water are connected to mustard sister，and mustard sister borrows a street to expose the mustard commandments。\\n\\n**? and ? (14)**\\n\\nScabies knot paragraph briefly carries，the extremity judges the head thoroughly。\\n\\n**? and ? and ? (9)**\\n\\nThe plank penetrating thief penetrates the wine flagon，thoroughly penetrating unit of livestock after unit of livestock。\\n\\n**? (9)**\\n\\nThe dice are transparent，thoroughly transparent，and the yellow transparent head thoroughly throws out the thief。\\n\\n**? (10)**\\n\\nDice throwing yellow head is self funded，consults herewith Vanadium，fights against vexation to turn over the banner。\\n\\n**? and ? and ? (13)**\\n\\nMeal infringes upon farm range。\\n\\n**? (4)**\\n\\n<hr/>\\n\\n10 10:\\\\\\n10 10 10 10      →      _ _ _ _ _ _\\\\\\n10 10 (10)"
    },
    "puz43": {
      "hash": "9ddfd90567022b5bfdffd8297021c9ccf85643ab11d140fcc33d4a49d320a6c0",
      "content": "<Flavor>Only 1/3 of a puzzle? This stinks!</Flavor>"
    },
    "puz44": {
      "hash": "3710b5a3dc9cc1989a296c18a253cc7b862a279c156c495c8a0146562175a04c",
      "content": "<Flavor>Only <s>1/3</s> 2/3 of a puzzle? This <s>stinks!</s> is so mid.</Flavor>\\n\\n<Image />\\n\\n1) MIS  ___  TEN  \\n1) LEG  ___  ARY  \\n1) PRE  ___  ERS  \\n1) REP  ___  AGE"
    },
    "puz45": {
      "hash": "4b43f18d3fbebd45ed05a851b4c7868c2dbb260c8936ed67c92053b2621b37ce",
      "content": "<Flavor><s>Only 2/3 of a puzzle? This is so mid.</s> Finally! The puzzle can be completed!</Flavor>\\n\\n<Image />\\n\\n1) MIS  ___  TEN  \\n2) LEG  ___  ARY  \\n3) PRE  ___  ERS  \\n4) REP  ___  AGE  \\n\\nA) Oiled (3+4+?)  \\nB) Peanuts, e.g. (2+3+?)  \\nC) Causes one to remember (1+2+?)  \\nD) Ancient Mesopotamian empire (2+4+?)  \\nE) Thwart (1+4+?)  \\nF) Student, apprentice (1+3+?)"
    },
    "puz46": {
      "hash": "3d727d728d7701d7e89fac87a076d4b011a7ef32c08065897ec36b348854de37",
      "content": "<Flavor>This metapuzzle is all that’s left.</Flavor>"
    },
    "puz248": {
      "hash": "67ecb8dedd72ca26dd80d785d2dbed1a73754a935835ae1efa2e359d9c51f938",
      "content": "<Flavor>All right, you can have this one last puzzle.</Flavor>"
    }
  },
  "solutions": {
    "blocks": {
      "hash": "f0af5846f4f21a0c1f4c8ae69a51c7988f76029c24793b0c164677494711d80c",
      "content": "The block names have a consistent meaning, which the solvers can determine through trial and error.\\n\\nEach block name consists of a (possibly empty) *requirement* followed by a *pattern*. Each pattern specifies a set of squares around the block’s square to look at. For the block to receive a ✅, the number of other blocks in its pattern must satisfy its requirement.\\n\\n<Table\\n    headers={[\\"Requirement\\", \\"Meaning\\"]}\\n    cells={[\\n        [<i>(none)</i>, \\"No other blocks\\"],\\n        [\\"*\\", \\"All other blocks\\"],\\n        [<><i>n</i> (some integer)</>, <>Exactly <i>n</i> other blocks</>],\\n        [\\"!\\", \\"No requirement, but inverts the pattern of every other block in its pattern\\"],\\n    ]}\\n/>\\n\\nFor patterns, distances are measured between centers of squares.\\n\\n<Table\\n    headers={[\\"Pattern\\", \\"Meaning\\"]}\\n    cells={[\\n        [<>(<i>n</i>)</>, <>Euclidean distance &lt; <i>n</i></>],\\n        [<>&lt;<i>n</i>&gt;</>, <>Manhattan distance &lt; <i>n</i></>],\\n        [<>[<i>n</i>]</>, <>Chebyshev distance &lt; <i>n</i></>],\\n        [\\"K, Q, R, B, or N\\", \\"One chess move of the appropriate type away (not obstructed by any other blocks)\\"],\\n        [\\"/n, /ne, etc.\\", \\"Half-plane in that direction (open, i.e. not including the perpendicular line on which the block resides)\\"],\\n    ]}\\n/>\\n\\nExample solutions for each of the given puzzles are below:\\n\\n<BlocksPuzzleBoard blocks={[\\"(8)\\", \\"(8)\\", \\"(8)\\", \\"(8)\\", \\"(8)\\", \\"(8)\\"]} locs={[\\n  [0, 0],\\n  [0, 8],\\n  [8, 0],\\n  [6, 14],\\n  [14, 14],\\n  [14, 6],\\n]} />\\n\\n<BlocksPuzzleBoard blocks={[\\"*(8)\\", \\"(6)\\", \\"(6)\\", \\"(6)\\", \\"(6)\\", \\"(6)\\", \\"(6)\\", \\"(6)\\"]} locs={[\\n  [7, 7],\\n  [0, 7],\\n  [2, 1],\\n  [2, 13],\\n  [8, 0],\\n  [8, 14],\\n  [14, 4],\\n  [14, 10],\\n]} />\\n\\n<BlocksPuzzleBoard blocks={[\\"1(14)\\", \\"2(14)\\", \\"2(14)\\", \\"3(14)\\", \\"3(14)\\", \\"3(14)\\"]} locs={[\\n  [0, 0],\\n  [0, 14],\\n  [13, 0],\\n  [1, 14],\\n  [13, 7],\\n  [13, 14],\\n]} />\\n\\n<BlocksPuzzleBoard blocks={[\\"[8]\\", \\"(10)\\", \\"<12>\\", \\"<12>\\", \\"(10)\\"]} locs={[\\n  [0, 0],\\n  [14, 0],\\n  [8, 8],\\n  [14, 14],\\n  [0, 14],\\n]} />\\n\\n<BlocksPuzzleBoard blocks={[\\"(16)\\", \\"Q\\", \\"Q\\", \\"Q\\", \\"Q\\"]} locs={[\\n  [0, 0],\\n  [10, 14],\\n  [12, 13],\\n  [13, 10],\\n  [14, 8],\\n]} />\\n\\n<BlocksPuzzleBoard blocks={[\\"[6]\\", \\"<11>\\", \\"*R\\", \\"/e\\", \\"/e\\", \\"/w\\", \\"1N\\", \\"2N\\"]} locs={[\\n  [2, 6],\\n  [14, 14],\\n  [2, 14],\\n  [0, 14],\\n  [1, 14],\\n  [2, 0],\\n  [3, 14],\\n  [2, 12],\\n]} />\\n\\n<BlocksPuzzleBoard blocks={[\\"/ne\\", \\"/ne\\", \\"/nw\\", \\"/nw\\", \\"/se\\", \\"/se\\", \\"/sw\\", \\"/sw\\", \\"7Q\\", \\"7Q\\"]} locs={[\\n  [0, 2],\\n  [1, 3],\\n  [0, 1],\\n  [1, 0],\\n  [2, 3],\\n  [3, 2],\\n  [2, 0],\\n  [3, 1],\\n  [1, 1],\\n  [2, 2],\\n]} />\\n\\n<BlocksPuzzleBoard blocks={[\\"*[2]\\", \\"*[2]\\", \\"*[2]\\", \\"*[2]\\", \\"!N\\"]} locs={[\\n  [5, 6],\\n  [6, 9],\\n  [8, 5],\\n  [9, 8],\\n  [7, 7],\\n]} />\\n\\n<BlocksPuzzleBoard blocks={[\\"!(19)\\", \\"3/w\\", \\"3/w\\", \\"4/w\\", \\"4/w\\"]} locs={[\\n  [0, 0],\\n  [13, 14],\\n  [14, 14],\\n  [1, 0],\\n  [2, 0],\\n]} />\\n\\nThe inscriptions contain similar puzzles, but without an interactable grid. Once you learn how each block works, you can figure out how to solve them:\\n\\n- \`2/ne 2/nw 2/se 2/sw *R (6) (6) (6) (6)\`: All blocks are forced to be in the same row or the same column as the \`*R\`; there is only just barely enough horizontal and vertical room to fit all four \`(6)\`s and the four other blocks. From there, the only way to satisfy the halfplanes is to arrange the \`*R\` in the center, the \`(6)\`s at the edges of the board, and the halfplanes right next to the \`*R\` pointing outward. There are two valid arrangements of those halfplanes: one with \`2/nw\` above the \`*R\`, and one with \`2/ne\` above the \`*R\`.\\n\\n<BlocksPuzzleBoard blocks={\\"2/ne 2/nw 2/se 2/sw *R (6) (6) (6) (6)\\".split(\\" \\")} locs={[\\n  [6, 7],\\n  [7, 6],\\n  [7, 8],\\n  [8, 7],\\n  [7, 7],\\n  [0, 7],\\n  [7, 0],\\n  [7, 14],\\n  [14, 7],\\n]} />\\n\\n- \`*Q */ne [7] [7] (7) (7) (7) (7) (7)\`: There is again barely enough room to fit everything around the \`*Q\`, so the \`*Q\` has to go in the exact center and the other 8 blocks have to go on the corners and in the centers of the edges. \`*/ne\` has to go in the southwest corner. The other 7 blocks can be arranged in 7 choose 2 = 21 different ways.\\n\\n<BlocksPuzzleBoard blocks={\\"*Q */ne [7] [7] (7) (7) (7) (7) (7)\\".split(\\" \\")} locs={[\\n  [7, 7],\\n  [14, 0],\\n  [0, 0],\\n  [0, 7],\\n  [0, 14],\\n  [7, 0],\\n  [7, 14],\\n  [14, 7],\\n  [14, 14],\\n]} />\\n\\n- \`1(19) 1(19) 1(19) ![2] *[8] /s\`: None of the \`1(19)\`s can be satisfied normally: even if one is placed in a corner, there are only 3 squares in the opposite corner outside its pattern, meaning that at least 2 of the remaining blocks will be in it. So all three must be inverted by the \`![2]\`. But then they still need one block outside their pattern, so each must be either in a corner or right next to one. The only way for \`![2]\` to invert all of them is for \`![2]\` to be diagonally adjacent to a corner. We then need one block in the opposite corner, which can’t be \`*[8]\`, so it must be \`/s\`, which must be on either the southwest or southeast corner. From there, \`*[8]\` must be in the exact center. So there are exactly two solutions, depending on which corner \`/s\` is placed in.\\n\\n<BlocksPuzzleBoard blocks={\\"1(19) 1(19) 1(19) ![2] *[8] /s\\".split(\\" \\")} locs={[\\n  [0, 0],\\n  [0, 1],\\n  [1, 0],\\n  [1, 1],\\n  [7, 7],\\n  [14, 14],\\n]} />\\n\\nThe number of solutions in the three puzzles is 2, 21, and 2. Converting via A=1 gives the answer, <Answer />."
    },
    "branch": {
      "hash": "c8ee7b20a0330304e1c5dfc6b8a020378e877308afa31c59224d3b144c062849",
      "content": "To fill in this puzzle, we should put the given words into the circles so that we make a crossword clue along each of the paths from the central circle to the “leaves”. For example, in the solution picture farther below, two of the clues are:\\n- (start from the center, go up then left) Word for a group of Odyssean temptresses (6)\\n-\\t(start from the center, go down then right) Word which is an antonym of forte (5)\\n\\nThe process of actually doing this is a mixture of putting together reasonable clues (“Odyssean temptresses” goes together), guessing their answers (SIRENS), and carefully placing the words so that we can make every word fit (SIRENS must end at a circle containing (6)). The puzzle has a checker which we should take full advantage of to confirm correct intermediate answers.\\n\\nOnce all of the clues are completed, it’s time to use the squiggly lines and swooshes around some of the circles. These symbols suggest that we can combine the answers at neighboring leaves. It turns out that the neighbors for a squiggly line make a short clue when read together which can be resolved into a new answer (these answers can also be confirmed with the checker):\\n-\\tSWEET FLOWER PRODUCT ⇒ NECTAR\\n-\\tINITIAL CLONE ⇒ DOLLY\\n-\\tPIANO FIXER ⇒ TUNER\\n\\nThe swooshes are a bit trickier to identify; they should be interpreted as phonetically combining the first half of one adjacent word with the second half of the other adjacent word.\\n-\\tSIRENS ALLIANCE ⇒ SCIENCE\\n-\\tEMAIL NOVEL ⇒ EVIL\\n\\nContinuing the process back to the central circle, the final answer is the phonetic combination of BOWTIE and TELLER into <Answer />. Check the image below for all of the intermediate answers.\\n\\n<Image fullWidth />\\n\\n#### Table of clues\\n\\n<Table\\ncellStyle={{ border: \\"none\\", borderTop: \\"1px solid white\\", borderBottom: \\"1px solid white\\", padding: \\"0.3em 0.3em\\" }}\\ncells={[\\n  [ { data: \\"Word\\", rowSpan: 16 }, { data: \\"for\\", rowSpan: 9 }, { data: \\"a\\", rowSpan: 3 }, { data: \\"group\\", rowSpan: 2 }, { data: \\"of\\", rowSpan: 2 }, \\"Odyssean\\", \\"temptresses\\", \\"(6)\\", \\"SIRENS\\", \\"\\" ],\\n  [ \\"military\\", \\"partners\\", \\"(8)\\", \\"ALLIANCE\\", \\"\\" ],\\n  [ \\"man\\", \\"informally\\", \\"(3)\\",  \\"GUY\\", \\"\\", \\"\\", \\"\\" ],\\n  [ { data: \\"something\\", rowSpan: 6 }, { data: \\"bought\\", rowSpan: 3 }, { data: \\"from\\", rowSpan: 3 }, { data: \\"a\\", rowSpan: 3 }, \\"confectionery\\", \\"(5, British)\\", \\"SWEET\\", \\"\\" ],\\n  [ \\"nursery\\", \\"(6)\\", \\"FLOWER\\", \\"\\" ],\\n  [ \\"store\\", \\"(7)\\", \\"PRODUCT\\", \\"\\" ],\\n  [ { data: \\"written\\", rowSpan: 3 }, { data: \\"then\\", rowSpan: 2 }, \\"sent\\", \\"electronically\\", \\"(5)\\", \\"EMAIL\\", \\"\\" ],\\n  [ \\"published\\", \\"(5)\\", \\"NOVEL\\", \\"\\", \\"\\" ],\\n  [ \\"in\\", \\"C\\", \\"(7)\\", \\"PROGRAM\\", \\"\\", \\"\\" ],\\n  [ { data: \\"which\\", rowSpan: 7 }, { data: \\"means\\", rowSpan: 4 }, { data: \\"to\\", rowSpan: 4 }, { data: \\"make\\", rowSpan: 3 }, \\"full\\", \\"(4, 2)\\", \\"FILL UP\\", \\"\\", \\"\\" ],\\n  [ { data: \\"a\\", rowSpan: 2 }, \\"short\\", \\"signature\\", \\"(7)\\", \\"INITIAL\\" ],\\n  [ \\"copy\\", \\"(5)\\", \\"CLONE\\", \\"\\" ],\\n  [ \\"teach\\", \\"or\\", \\"trounce\\", \\"(6)\\", \\"SCHOOL\\", \\"\\" ],\\n  [ { data: \\"is\\", rowSpan: 3 }, \\"such\\", \\"sweet\\", \\"sorrow\\", \\"(7)\\", \\"PARTING\\", \\"\\", \\"\\" ],\\n  [ { data: \\"an\\", rowSpan: 2 }, { data: \\"antonym\\", rowSpan: 2 }, { data: \\"of\\", rowSpan: 2 }, \\"breaker\\", \\"(5)\\", \\"FIXER\\", \\"\\" ],\\n  [ \\"forte\\", \\"(5)\\", \\"PIANO\\", \\"\\" ],\\n]} />"
    },
    "puz105_custom_4": {
      "hash": "a83e35454a415f882bbd95ee703e4d90b525179c2a4b6d8de37ceae53a195011",
      "content": "{\\"Each answer is a peak of a mountain range. Index the height rank of the peak (in the mountain range) into the name of the range we get the answer CHICKEN. \\"}<br/>\\n{\\"\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"Clue    Answer    Range    Rank    Extract\\"}<br/>\\n{\\"1    Harvard    Rocky    3    C\\"}<br/>\\n{\\"2    Everest    Himalayas    1    H\\"}<br/>\\n{\\"3    Williamson    Sierra Nevada    2    I\\"}<br/>\\n{\\"4    Elbrus    Caucasus    1    C\\"}<br/>\\n{\\"5    K2    Karakoram    1    K\\"}<br/>\\n{\\"6    Bona    Saint Elias    6    E\\"}<br/>\\n{\\"7    King    Saint Elias    4    N\\"}"
    },
    "puz105_custom_8": {
      "hash": "48620d5230532852c9efb3a5a84a96a47497e2829548540393c8851b3a2ebfb6",
      "content": "{\\"This puzzle is themed around false friends between English and French. Each clue contains a French word that should be interpreted using its French meaning. This is also indirectly hinted by the title meaning 'Pardon?', referring to 'Pardon my French'.\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"Cattle's chair: BEEF (chair = meat, flesh)\\"}<br/>\\n{\\"What you may find in a cave: WINE (cave = cellar)\\"}<br/>\\n{\\"The Addams Family's main character: THING (main = hand)\\"}<br/>\\n{\\"It has no coins: CIRCLE (coin = corner)\\"}<br/>\\n{\\"Found at the end of the bras: HAND (bras = arm)\\"}<br/>\\n{\\"Used to cover up your pain: JELLY (pain = bread)\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"Extracting the indicated letters gives the final answer BETRAY, which is what a false friend could do.\\"}"
    },
    "puz105_custom_12": {
      "hash": "62d358cdfb5b8c727ad72d4547798a3aee0266a20367e2383c3bf8bbebd5a960",
      "content": "{\\"The title of the puzzle and the repeated ending heavily suggest elements. Having a look at the list of elements (or just throwing everything into a substitution cipher solver) yields ERBIUM, TERBIUM, YTTERBIUM, and YTTRIUM, all named after the same town in Sweden. The boxes at the bottom corresponds to BUTTERY.\\"}"
    },
    "puz105_custom_16": {
      "hash": "aaaf3f9b62052ba0894700c74abd70523b552372936a76cb209b012a8d8405cf",
      "content": "{\\"These represent different tables, including different types of keyboard, periodic table, polybius square, etc. Extract the letters corresponding to each X to get the answer.\\"}"
    },
    "puz105_custom_17": {
      "hash": "4691445cf03429d19b8bc926078da16f855c0421b65869a9658dcdda6fe664f1",
      "content": "{\\"The PLL cases shown are, in order, J, A, N and E, which happens to also spell the first name of a fictional character whose surname is a near-homophone of the puzzle title without its first letter.\\"}"
    },
    "puz105_custom_18": {
      "hash": "e12d301194c6d74a39eb885d06f3ad88767c6c4bf6653cf2e491a3f88b0c92fc",
      "content": "{\\"The text tells you that the answer is between 2 and 4. Between 2 and 4 you can find the word \\\\\\"and\\\\\\", which is the answer. Congratulations if you tried this before 3!\\"}"
    },
    "puz105_custom_23": {
      "hash": "1877b03ee8f60f68e9645baf5a7279c362cc712e0ce137ba815117d74bfa22d8",
      "content": "{\\"All of these are lyrics from Taylor Swift's songs:\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"Hold on to the MEMORIES, they will hold on to you\\"}<br/>\\n{\\"I could FEEL the mascara run\\"}<br/>\\n{\\"I LIKE shiny things, but I'd marry you with paper rings\\"}<br/>\\n{\\"But I've got a BLANK space, baby\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"Filling in the blanks will give you \\\\\\"MEMORIES FEEL LIKE BLANK\\\\\\".\\"}<br/>\\n{\\"Applying the puzzle again will give you WEAPONS.\\"}"
    },
    "puz105_custom_24": {
      "hash": "3eb12abaf5e647f6e29fc86497447fa2a200fe6943d617ae4e5660f66e1e2eb8",
      "content": "{\\"The answers contain a sequence of a single letter inside two pairs of double letters.\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"tollbooth\\"}<br/>\\n{\\"success\\"}<br/>\\n{\\"smallfoot\\"}<br/>\\n{\\"carroll\\"}<br/>\\n{\\"classroom\\"}<br/>\\n{\\"tennessee\\"}<br/>\\n{\\"buzzfeed\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"The single letters spell \\\\\\"BEFOREF\\\\\\", which is the letter \\\\\\"E\\\\\\".\\"}"
    },
    "puz105_custom_25": {
      "hash": "6210e66e96d187b9d3486a44f8b2e2ba87a3c1d6867d5a3f5a3715c956585b99",
      "content": "{\\"The title suggests that we add adjacent letters alphanumerically, so for instance F+I=6+9=15=O. Doing so for each pair of letters in the image gives ORDERLY, the answer.\\"}"
    },
    "puz105_custom_26": {
      "hash": "00ccb224da910440d88e32a2efd3bb0bc3727897823dbb9391145b89e81d5266",
      "content": "{\\"Each emoji hints at a name of a character from My Deer Friend Nokotan, whose characters contain animal names.\\"}<br/>\\n{\\"Extract the character replaced by deer crackers.  \\"}<br/>\\n{\\"NOKO = DEER = N\\"}<br/>\\n{\\"MEME = HORSE = E\\"}<br/>\\n{\\"NEKO = CAT = E\\"}<br/>\\n{\\"TORAKO = TIGER = T\\"}"
    },
    "puz105_custom_28": {
      "hash": "ee4e05a474e0058ff1352270d4923e5fce6bb5b4a3bc6d82d5ead4e8f9a25a92",
      "content": "{\\"The flavor text sounds like first word, second letter, while the image is our team name.  By taking the second letters of the first names of our team members on our team page, you get a sixth name ERICA.\\"}"
    },
    "puz105_custom_31": {
      "hash": "dbd2aec90ecc8b903a2c529d02e7fc1093ff3f0313a02f633708db925788ddfa",
      "content": "{\\"50 Nifty United States is a children's song about the 50 states.  The lyrics contain the line \\\\\\"50 nifty United States from 13 original colonies\\\\\\"\\"}"
    },
    "puz105_custom_35": {
      "hash": "d54b747cab3a9f70c62e2c09e90219701c9c8afc31d81c7b2118f4584dbaf05c",
      "content": "{\\"The faux crossword grid is actually a set of lyrics from the song \\\\\\"Two-by-Two\\\\\\" from the musical The Book of Mormon (the flavor text referencing the \\\\\\"Tree-Fiddy\\\\\\" quote from South Park).  Each square is a word in the song.  The missing line is \\\\\\"LAND OF SOY SAUCE\\\\\\".  Reading the first letter of each word gives LOSS.\\"}"
    },
    "puz105_custom_36": {
      "hash": "ace4ce5562d06e99083862b6c30f120830104dab07561f692acee61daf4e3e5b",
      "content": "{\\"Looking up the title of the puzzle leads to the YouTube channel Ordinary Sausage. Further research can lead to https://thesausagedatabase.com/ which documents every single video uploaded by the channel and their stats. However, this puzzle can also be solved by manually looking up the videos as well. The flavor text hints that we need to use the \\\\\\"Did It Blow?\\\\\\" scores instead of the actual sausages' ratings. Index the scores into the names of the sausages to get the answer: RUFFALOS.\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"Sausage | \\\\\\"Did It Blow?\\\\\\" score | Indexed letter\\"}<br/>\\n{\\"FRUITY PEBBLES | 2 | R\\"}<br/>\\n{\\"SEA URCHIN ROE (UNI) | 4 | U\\"}<br/>\\n{\\"FRITO PIE | 1 | F\\"}<br/>\\n{\\"FUNNEL CAKE | 1 | F\\"}<br/>\\n{\\"DRAGON FRUIT | 3 | A\\"}<br/>\\n{\\"SKYLINE CHILI 3 WAY | 4 | L\\"}<br/>\\n{\\"OLIVE GARDEN TOUR OF ITALY | 1 | O\\"}<br/>\\n{\\"PEEPSI | 5 | S\\"}"
    },
    "puz105_custom_37": {
      "hash": "04ff31f9d40f35a249787665ff2a9828d1988bb4dfe663c80479e1ca80d90a92",
      "content": "{\\"The last two digits of each number are all less than 26, encouraging the use of A=1, B=2, ... Z=26. Doing so spells INDEX INTO TITLE. This refers to the title, Positive Integers, whose contents form an infinitely long string beginning ONETWOTHREEFOURFIVE...., and the idea of needing to count is reinforced by the image of Count von Count (Note that the Wiktionary appendix for English numerals specifies or implies naming rules like adding an \\\\\\"and\\\\\\" between hundreds place values and the remaining digits in all cases, but not between \\\\\\"thousand\\\\\\" and a single digit for some reason - this doesn't matter except for the final letter.) Doing the indexing, which is easiest with a computer program, gives the cluephrase IT IS G SIXTY-FOUR. In particular, the most famous positive integer commonly referred to as g64 is GRAHAMS NUMBER.\\"}"
    },
    "puz105_custom_38": {
      "hash": "38c210a943994fc87e8b650605b6a1e9c8bbad90d22875ab1bbfb979baf9c618",
      "content": "{\\"Searching for the given stars, you'll find that each of them is part of one of the 12 zodiac CONSTELLATIONS and has a second name following the Bayer designation of naming stars with GREEK LETTERS. Identifying the constellations the stars are part of and indexing the constellations using the position of the letter in the Greek alphabet (e.g.: Algedie = alpha Capricorni = (Capricorni, 1) = C), you'll get the solution COMPASS.\\"}"
    },
    "puz105_custom_43": {
      "hash": "fd1926788bd37694375d84812f2842f3bb8ad34d649e5674c02c32a2f23ea1ba",
      "content": "{\\"The symbols look like AVOCADO, one letter per.\\"}"
    },
    "puz105_custom_44": {
      "hash": "50a49815b0472247284983979b0bd985ad1f000680989e0619ea4779a31b8a6b",
      "content": "{\\"The answer to all the clue phrases is FAIR PLAY.\\"}<br/>\\n{\\"A movie with a protagonist named Emily. - The 2023 film Fair Play's progragonist is named Emily.\\"}<br/>\\n{\\"A reality show contestant. - Jonny Fairplay is a contentant from two seasons of Survivor.\\"}<br/>\\n{\\"A sound track in a game made by Mihoyo. - Fair Play is a sound track in Honkai: Star Rail.\\"}<br/>\\n{\\"A term discussed in a Lu Xun's article. - Luxun wrote ‘论“费厄泼赖”应该缓行’(Why “Fair Play” Should Be Deferred).\\"}<br/>\\n{\\"A wine region in California. - Fair Play AVA is a wine region in El Dorado County, California.\\"}"
    },
    "puz105_custom_45": {
      "hash": "ba7f56753f9708b79946d06efb598249070359ac5177e98546efcab4003aded0",
      "content": "{\\"This is a leading rebus, which means you only take the first letters. It's also a rebus, which means you take bus twice. The first letters of Windows Igloo BusBus Lion Egg  Windows Onion BusBus Lion Egg spell WIBBLE WOBBLE, the answer.\\"}"
    },
    "puz105_custom_47": {
      "hash": "bde243b4f61cf9cb129c580592405b48fa460faadb993dab622adabf37b79898",
      "content": "{\\"Each answer in the right column can have BE prepended to it to form a word in the left column. Sort by the left column and index by the number in the right column. Here are all the answers:\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"decorated\\\\tpunched (5)\\\\tbedecked\\\\tC\\"}<br/>\\n{\\"previously\\\\theads up (6)\\\\tbefore\\\\tE\\"}<br/>\\n{\\"see\\\\tgrasp (5)\\\\tbehold\\\\tL\\"}<br/>\\n{\\"act politely\\\\town (6)\\\\tbehave\\\\tE\\"}<br/>\\n{\\"confuse\\\\tinspiration (5)\\\\tbemuse\\\\tS\\"}<br/>\\n{\\"give\\\\tput away (4)\\\\tbestow\\\\tT\\"}<br/>\\n{\\"start\\\\tspirit (4)\\\\tbegin\\\\tI\\"}<br/>\\n{\\"happen\\\\tautumn (4)\\\\tbefall\\\\tA\\"}<br/>\\n{\\"tolerable\\\\tsuitable for crops (7)\\\\tbearable\\\\tL\\"}"
    },
    "puz105_custom_69": {
      "hash": "47187fe3e47cfec03d9f738ec69935895aae6a28ee8daa30346d7b1e1768c16a",
      "content": "{\\"The title clues the ship names from the Culture books by Iain M Banks.  Each of the clues is a torturous crossword clue for a ship name (with enumeration given).  Identifying the ships, then using the right side to associate each ship with a book and indexing by the number given results in the answer SHIP.  \\"}<br/>\\n{\\"List of ships: Refreshingly Unconcerned rWith The Vulgar Exigencies Of Veracity, Ethics Gradient, Total Internal Reflection, Liveware Problem\\"}"
    },
    "puz105_custom_73": {
      "hash": "224855a33e1d791407616342cfca4929f553701c18c26d8861ddaaecc37d405a",
      "content": "{\\"This puzzle is about Waffle House locations. Going to the official Waffle House website will reveal that each Waffle House has an official number.\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"The locations clued are:\\"}<br/>\\n{\\"Waffle House #169 - Oakhurst St, Texas\\"}<br/>\\n{\\"Waffle House #1503 - Schillinger Rd, Alabama\\"}<br/>\\n{\\"Waffle House #1430 - Folmar Pkwy, Alabama\\"}<br/>\\n{\\"Waffle House #1689 - Calhoun Dr, Georgia\\"}<br/>\\n{\\"Waffle House #2214 - Ingleside Rd, Virginia\\"}<br/>\\n{\\"Waffle House #227 - Dixie Hwy, Ohio\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"The jumbled texts are anagrams of the first word of each address, minus a letter. Extracting those letters will lead to the answer \\\\\\"REFUGE\\\\\\".\\"}"
    },
    "puz105_custom_74": {
      "hash": "dfdc68314aeb8397513a25632ea56bfc89137d63b28de9bfabcfe75790310390",
      "content": "{\\"These are Overwatch ultimate lines in emoji form.\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"Pharah - Justice rains from above!\\"}<br/>\\n{\\"Reinhardt - Hammer down!\\"}<br/>\\n{\\"Orisa - Meet your fate!\\"}<br/>\\n{\\"Genji - The dragon becomes me!\\"}<br/>\\n{\\"Ana - You're powered up! Get in there!\\"}<br/>\\n{\\"Mercy - Heroes never die!\\"}<br/>\\n{\\"Echo - Adaptive circuits engaged.\\"}<br/>\\n{\\"Reaper - Die! Die! Die!\\"}<br/>\\n{\\"Symmetra - Reality bends to my will!\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"Read the first letters of the heroes.\\"}"
    },
    "puz105_custom_82": {
      "hash": "805432465677853e96ad431ea93620e574c2e0534f3da951c1cd16c235101831",
      "content": "{\\"With the flavortext indicating that one of these is \\\\\\"extra\\\\\\", take the first letters of each finger's name.\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"Pinky, Extra, Ring, Middle, Index, Thumb spelling PERMIT\\"}"
    },
    "puz105_custom_87": {
      "hash": "26d1abe2829029732d582eecdfde788dfb017c396edbcf41f60e0ed390983028",
      "content": "{\\"The title clues two colour words: BLANC (white in French) and BLACK. We fill in the white squares with the colour in French and the black squares with the colour in English. In order, these are GRIS/GRAY (or GREY), BLEU/BLUE, ROSE/PINK and ROUGE/RED. There is one all black column and one all white column, spelling out GENE and SLOG.\\"}"
    },
    "puz105_custom_96": {
      "hash": "2ce109e5de0697e2838d063be741cf42e733378d3933c0d934f4b0228d7bf013",
      "content": "{\\"The picture is of Jean Smart, tonight's guest host for SNL, in a speech bubble. \\\\\\"Guest host\\\\\\" sounds like \\\\\\"guess toast\\\\\\" which is exactly what you should do.\\"}"
    },
    "puz105_custom_97": {
      "hash": "ee7603fda99d7a3e17f51e60a69b43ddea8b050ca162a6204fd6271fc65dcb02",
      "content": "{\\"The depicted emoji are used to indicate artifacts in this hunt (and in fact none of the ones chosen for this puzzle match the typical meaning of the emoji). In order, these are nEutron, parAmecium, Gate, scuLptor, and jEt. Index into the name by the number of stars to obtain EAGLE, the emoji used to stand in for the CONDOR artifact.\\"}"
    },
    "puz105_custom_114": {
      "hash": "36e7036ae975b51438a167ab23be03edd2a4ebd37fd280ef9b8ad755efa9facb",
      "content": "{\\"Each line describes a group of fans of one of the talents of Hololive English. The groups are: Chattini (Raora Panthera), Pebbles (Koseki Bijou), Sanallites (Tsukumo Sana), Chumbuds (Gawr Gura), Ruffians (Fuwawa and Mococo Abyssgard), Takodachis/Tentacult (Ninomae Ina'nis), Grems (Gigi Murin), and Saplings (Ceres Fauna). Indexing into each group name by the number provided yields the answer, TEAMATES, a group that's definitely there to see their oshi off with a smile! (There are two possible names for a group of Ina's fans, but they index the same letter.)\\"}"
    },
    "puz105_custom_121": {
      "hash": "9e8ebff03d273559ce6b88777615fb45f98b9b6611b108ea2ea005f0e05ca471",
      "content": "{\\"The title, flavourtext, and red dot emojis are all references to REDDOThunt. This puzzle references four older puzzles, one from each iteration of REDDOThunt. The answers to these puzzles (in order) are:\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"TRIBUTE\\"}<br/>\\n{\\"CASTOR OIL\\"}<br/>\\n{\\"ORION'S BELT\\"}<br/>\\n{\\"AMENDS WE MADE\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"Indexing the number of red dots in each line into the corresponding puzzle answer gives the answer BOBA, which is somewhat a dot, although not a red dot.\\"}"
    },
    "puz105_custom_126": {
      "hash": "a7b0a8c576e6eb188ec8273e3c87c89d38e9a7ec70cff82f08557a9eef22fe9b",
      "content": "{\\"https://docs.google.com/spreadsheets/d/1J0exIjsdhrUdqj65uZr1WHKK96NjKCiF3JXJtoNbuRI/edit?usp=sharing\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"Filling out the board using the directions given gives a series of song titles from Dance Dance Revolution, whose first letters spell out TEN STEPS FROM START. This requires you to look at each chart associated with each song (the character in the background of the puzzle is what is used for HEAVY, the highest difficulty chart type in DDR Extreme). Taking the first ten steps from each song and moving on the grid from the titles' start positions spells out DANCE CHOREOGRAPHY, the final answer.\\"}"
    },
    "puz105_custom_133": {
      "hash": "f192b26ee97fae507d3c132c155e2712b00a47c283f860983d385307b2b228da",
      "content": "{\\"This puzzle features a constellation, with a line drawn between four of its stars. As clued by the title, the constellation is Leo.\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"Four of the stars are numbered, and are linked by a path. Index into the names of the stars: DENEBOLA 3, ALGIEBA 4, ADHAFERA 1, REGULUS 7. This gives \\\\\\"NIDS\\\\\\". This is not the answer, but you can prepend something fitting to make the answer LEONIDS, which confirms itself as the visible meteor shower.\\"}"
    },
    "puz105_custom_141": {
      "hash": "5102c25fcfba34488f23c5c081f3992aaeef6acf6e4e8a1d51a90677a784b136",
      "content": "{\\"The images are identified as follows:\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"MESSAGING\\"}<br/>\\n{\\"MAGICIAN\\"}<br/>\\n{\\"NAAGIN\\"}<br/>\\n{\\"FRAGILE\\"}<br/>\\n{\\"CONTAGION\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"Each word contains the letters \\\\\\"AGI\\\\\\" (which can stand for \\\\\\"artificial general intelligence\\\\\\", or something extremely smart!). Taking each letter before AGI, as clued by the flavortext, spells out SMART.\\"}"
    },
    "puz105_custom_144": {
      "hash": "f761d0d84ddec2bc09e2b66f71dad226e952e86ebeb1848325a0b0ba97e60b49",
      "content": "{\\"The answers to the given clues are:\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"Super Bowl in which Peyton Manning played the last game of his career: FIFTY\\"}<br/>\\n{\\"Sum of the number of faces that make up the Platonic solids: FIFTY\\"}<br/>\\n{\\"Number of kills in the bloodiest game of the 2024 LCS Spring Playoffs: FIFTY\\"}<br/>\\n{\\"Wedding anniversary for which gold is the traditional gift: FIFTY\\"}<br/>\\n{\\"Atomic number a conspiracy theorist should reference when making a hat: FIFTY\\"}<br/>\\n{\\"Number of wins the Boston Beaneaters tallied in 1892: FIFTY\\"}<br/>\\n{\\"The fifth even nontotient number: FIFTY\\"}<br/>\\n{\\"Number of springs A. E. Housman has to look at the loveliest of trees: FIFTY\\"}<br/>\\n{\\"Diglett's National Pokedex ID: FIFTY\\"}<br/>\\n{\\"Number of shades of gray: FIFTY\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"The flavor text suggests solving the puzzle twice, giving the final answer FIFTY FIFTY. The answer is additionally clued by the puzzle's title, which references the large number of 50-50-themed puzzles in the hunt.\\"}"
    },
    "puz105_custom_151": {
      "hash": "c47ff983002d754ca0bd066b2345b16dc6489d33316e38c3d5649ed7662c67b7",
      "content": "{\\"This is a reference to the puzzle 50-50, suggesting the phrase BO-BO.  Fitting the clues, we find:\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"a shōnen manga = Bobobo-bo Bo-bobo = BO x 7\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"a Chinese cymbal = Bo = BO x 1\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"an ethnic group in West Africa = Bobo = BO x 2\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"a French socio-economic group = Bobo = BO x 2\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"a first family dog = Bo = BO x 1\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"This gives the answer GABBA\\"}"
    },
    "puz105_custom_160": {
      "hash": "b9333e49fe0e9ee14b09fb9546a294dd165f2c37fc6fd24412a2d0f7fe591c48",
      "content": "{\\"The image depicts a club. Combined with the title, the answer is the only baseball player who recently entered the 50-50 club, SHOHEI OHTANI.\\"}"
    },
    "puz105_custom_172": {
      "hash": "7956f53e1ad2ebda3afadc6e25e61e1d13b076709b004f0de98704b6521cd219",
      "content": "{\\"The color of words is the same as the font color when the mouse hovers over the link of the submitted team.\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"The length of our team name is 16(dijkstrawberries), and the third letter “j” is not underlined due to font optimization, which is highly consistent with the content of the picture. \\"}<br/>\\n{\\"\\"}<br/>\\n{\\"Click on the team link to see the team members' information, and you will get the seventh member's name [Answer OVERCOMER]. The answer is OVERCOMER.\\"}"
    },
    "puz105_custom_181": {
      "hash": "f93b7fcf17c48b84fc6a75cdb0b21db9f22275f2d7484020bd1a6b96d9e6c187",
      "content": "{\\"Index the letters of the corresponding color on the clothes, then you can get answer: WIFE\\"}"
    },
    "puz105_custom_183": {
      "hash": "4b50e8a08be8426053fa01d352429419ac70f542f4892490da6aa7ecc58adfd2",
      "content": "{\\"In each story, a Greek deity can be identified by closing spaces between words:\\"}<br/>\\n{\\"“...caribou ran, osteoporosis,...” -> OURANOS\\"}<br/>\\n{\\"“...photograph, Rod iterates…” -> APHRODITE\\"}<br/>\\n{\\"“...suppose, I don’t…” -> POSEIDON\\"}<br/>\\n{\\"“...yoga, easily…” -> GAEA\\"}<br/>\\n{\\"“...lunar estate’s…” -> ARES\\"}<br/>\\n{\\"“...other messenger,...” -> HERMES\\"}<br/>\\n{\\"“...capsize us!” -> ZEUS\\"}<br/>\\n{\\"“...Akron, Oscar…” -> KRONOS\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"Each of these Greek deities correspond to one of the eight planets:\\"}<br/>\\n{\\"OURANOS -> Uranus\\"}<br/>\\n{\\"APHRODITE -> Venus\\"}<br/>\\n{\\"POSEIDON -> Neptune\\"}<br/>\\n{\\"GAEA -> Earth\\"}<br/>\\n{\\"ARES -> Mars\\"}<br/>\\n{\\"HERMES -> Mercury\\"}<br/>\\n{\\"ZEUS -> Jupiter\\"}<br/>\\n{\\"KRONOS -> Saturn\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"If we then order the stories by the planets’ ordering, and then take the word from each story corresponding to the planetary ordering:\\"}<br/>\\n{\\"Mercury (1st word): ‘“Ruler…’\\"}<br/>\\n{\\"Venus (2nd word): ‘...of…’\\"}<br/>\\n{\\"Earth (3rd word): ‘...the…’\\"}<br/>\\n{\\"Mars (4th word): ‘...down…’\\"}<br/>\\n{\\"Jupiter (5th word): ‘...below…’\\"}<br/>\\n{\\"Saturn (6th word): ‘...rejected…’\\"}<br/>\\n{\\"Uranus (7th word): ‘...by…’\\"}<br/>\\n{\\"Neptune (8th word): ‘...astronomers…’\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"This refers to the God of Underworld and (dwarf) planet PLUTO.\\"}"
    },
    "puz105_custom_186": {
      "hash": "f1803f94d2863a46e5ff28a86a86480e9df66423151bd0807f4ecfaf77140426",
      "content": "{\\"The \\\\\\"controllable\\\\\\" and \\\\\\"word\\\\\\" both indicate that this puzzle has to be done in Microsoft Word, and the core gimmick is the control shortcuts. From the image, we can see that a series of operations are done quite obviously, such as selecting all (ctrl+A), italicizing (ctrl+I), and right alignment (ctrl+R). Arranging them in a possible order (A comes before I) yields the answer AIR.\\"}"
    },
    "puz105_custom_187": {
      "hash": "c2670f8cdb6df0200fb4359df4a356674ced079ff8e6b58c126be47a9a6f66ee",
      "content": "{\\"This refers to \\\\\\"veni, vidi, vici\\\\\\", so this is Roman numberals. 6+11 is vixi, which is the first person singular of \\\\\\"lived\\\\\\".\\"}"
    },
    "puz105_custom_197": {
      "hash": "5162e05bfc876f72bc4ad9ad0d3a12503ae96c2509ef8a57dc6026d044645f06",
      "content": "{\\"This map shows the location of the Seychelles, which suggests that to find the answer you just need to say SHELLS.\\"}"
    },
    "puz105_custom_203": {
      "hash": "24fba4a1e9a5c86a5b34f0f23146e4d2039eabd122b386080e4a8ad6f14637dd",
      "content": "{\\"take out PA solve puzz lol\\"}"
    },
    "puz105_custom_204": {
      "hash": "f5d208642e99dd67aefdd3f0f54a1384575a7f811b50e86f0437ef88b89b21e8",
      "content": "{\\"These countries each have two letter codes, and each pair can be filled with a letter in between to make a five letter word.\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"ca C ao\\"}<br/>\\n{\\"ai O li\\"}<br/>\\n{\\"lu N ge\\"}<br/>\\n{\\"ni N th\\"}<br/>\\n{\\"cl E ar\\"}<br/>\\n{\\"de C al\\"}<br/>\\n{\\"no T ch\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"Reading the connecting letters spell CONNECT\\"}"
    },
    "puz105_custom_210": {
      "hash": "26abfed0e79646ad63f746603ac0a90fe1481c0360ea62c5b5023a301a6f706f",
      "content": "{\\"The clues cue the 5-letter words AMEBA, BANAL, DOING, MOOSE, NOMAN, RASTA, REMIT, and WANDA (in alphabetical order). These words can be arranged to completely fill a 4x4 grid, with one letter from each word lying outside of the grid. In one direction, the grid should read AMEB(A), NOMA(N), DOIN(G), and (R)ASTA, where the letters in parentheses are left outside the grid. Reading the extra letters as you go around the border of the grid should spell out WRANGLER, a well-known Jeep 4x4.\\"}"
    },
    "puz105_custom_217": {
      "hash": "cc3a386db4e6e7beae18f72e55e2e80ba413ff9f1f9b6a99bf280a0fd90001a6",
      "content": "{\\"The solution is just reading the characters the arrow passed, but you need to read according to current direction of the arrow. For example, passing Z horizonally results N. Doing so gives the answer HORIZON.\\"}"
    },
    "puz105_custom_218": {
      "hash": "997d62e533c1dcfc577159c814f54ba3c099d7ffbc4774d04732044840dc15fe",
      "content": "{\\"The less-than-helpful list of clues is not enough to narrow down the answer, so solvers should instead focus on the title of the puzzle, \\\\\\"Backwards Engineering\\\\\\". Treating this as instructions to reverse the word ENGINEERING gives the answer: GNIREENIGNE.\\"}"
    },
    "puz105_custom_251": {
      "hash": "7b623a17b872a996ed0be7a2244469c32aa9c7a007f9901a75cdd25b31277b0f",
      "content": "{\\"Each clue on the left has a number which appears to be an enumeration, however it is actually a number that goes with the clue answer to form a phrase which answers one of the clues on the right. In order of the left clues:\\"}<br/>\\n{\\"ELITE 4\\"}<br/>\\n{\\"MOTEL 6\\"}<br/>\\n{\\"OCEANS 11\\"}<br/>\\n{\\"JACKSON 5\\"}<br/>\\n{\\"ICE 9\\"}<br/>\\n{\\"SWEET 16\\"}<br/>\\n{\\"Reading the first letters gives the answer EMOJIS.\\"}"
    },
    "puz105_custom_255": {
      "hash": "1126061e4d945b767db763e885b120d0781b875c5ff505f6c4ddcb0985056537",
      "content": "{\\"After searching the title with any of \\\\\\"podcast\\\\\\", \\\\\\"riddle\\\\\\", \\\\\\"improv\\\\\\", or the initials \\\\\\"JPC\\\\\\", \\\\\\"ERIN\\\\\\", \\\\\\"ADAL\\\\\\" as in the flavortext, we find this is a puzzle about the puzzling podcast Hey Riddle Riddle. We notice that the clues solve to the second word in two-word episode titles, allowing us to resolve the more vague clues:\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"Someone who plays games before they release to identify bugs (6) - TESTER\\"}<br/>\\n{\\"BBC mystery TV series (8) - SHERLOCK\\"}<br/>\\n{\\"These might be baked or mashed (8) - POTATOES\\"}<br/>\\n{\\"What Schrödinger's cat is, other than alive (4) - DEAD\\"}<br/>\\n{\\"Font used in image macro memes (6) - IMPACT\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"The full episode titles are:\\"}<br/>\\n{\\"JESTER tester\\"}<br/>\\n{\\"ALL sherlock\\"}<br/>\\n{\\"POST potatoes\\"}<br/>\\n{\\"EVERYONE'S dead\\"}<br/>\\n{\\"SHEEP impact\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"The initials spell the answer JAPES. Fittingly, this is a nickname for the host JPC in the podcast, as well as an apt description of what happens in the podcast other than riddles.\\"}"
    },
    "puz105_custom_257": {
      "hash": "836af025c4cd77973b0d2001b0cda2c2e7ff430728951944bb8d63513a0b6475",
      "content": "{\\"As the puzzle title and flavor text allude to, this puzzle is about the Assassin's Creed series of games. The world map presented has several areas marked with daggers, corresponding with games from the main series of Assassin's Creed titles. Indexing into the protagonist's first name by the number of daggers, and then sorting by the games' release dates gives the answer: TOWER\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"Location       Game                       Daggers  Protagonist\\"}<br/>\\n{\\"Middle East    Assassin's Creed           3        AL[T]AIR\\"}<br/>\\n{\\"Italy          Assassin's Creed II        4        EZI[O]\\"}<br/>\\n{\\"Caribbean      Assassin's Creed IV        3        ED[W]ARD\\"}<br/>\\n{\\"Egypt          Assassin's Creed Origins   4        BAY[E]K\\"}<br/>\\n{\\"Norway         Assassin's Creed Valhalla  5        EIVO[R]\\"}"
    },
    "puz105_custom_260": {
      "hash": "3af0f78d2e4c125b42e9b82bb2da4de19ec1c76deec7356f8ad8f03e6df17285",
      "content": "{\\"This puzzle has nothing to do with traditional constellations, but rather the ones seen from the Camp! Identify the given constellations, and take the first letters of the missing star (puzzle) names to get the answer LONGEST.\\"}"
    },
    "puz105_custom_262": {
      "hash": "87ed04361eebac7dfd7c4c861d7cf02666fe57c15dabb4722d14e3c4dc37f756",
      "content": "{\\"This is a puzzle about Blaseball which can be determined by looking up the proper nouns used in the puzzle.\\"}<br/>\\n{\\"Similarly to \\\\\\"A Day at the Park\\\\\\" the text uniquely describes a Blaseball game (https://reblase.sibr.dev/game/7b7f28b2-6b1c-42da-b338-d2c819ab0a81) which you need to identify.\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"To do this:\\"}<br/>\\n{\\"Night weather only existed during Seasons β23 and β24.\\"}<br/>\\n{\\"There was only 1 game involving night weather in Season β23, which did not include the Firefighters.\\"}<br/>\\n{\\"Using Reblase to search Season β24 for games played by the Firefighters, in the Solarium, during night weather yields exactly 1 game.\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"Reblase lists the Sunbeams' pitcher's name as -------- -------- because the entire team was scattered at this point in time, however checking the Sunbeam's Season β24 roster (https://www.blaseball.wiki/w/Hellmouth_Sunbeams/Season_24) shows that only one pitcher matches the enumeration, Sandoval CROSSING.\\"}"
    },
    "puz105_custom_265": {
      "hash": "107b94adb9b249a8ba5f2eb70fab29096a19bb67f3bffb5b7212ba3490ca34f4",
      "content": "{\\"Each clue has an answer which is a phrase that starts with an ordinal: FIRST CLASS, SECOND WIND, THIRD RAIL, FOURTH ESTATE, FIFTH BEATLE, SIXTH SENSE, SEVENTH INNING STRETCH, EIGHTH WONDER OF THE WORLD. Re-order the clues into a counting-down order (e.g. eighth, seventh, sixth, etc.) and then index into each clue by the ordinal number to extract the answer.\\"}"
    },
    "puz105_custom_267": {
      "hash": "4d121594c67f918d28e1a76a39ac520cae1a833c5e3c979f9e6e9af4da7e70dd",
      "content": "{\\"The answer is EXPANSION. \\\\t\\"}<br/>\\n{\\"Across:\\\\t\\"}<br/>\\n{\\"1. Progress towards next level: EXP\\"}<br/>\\n{\\"4. Abbreviated solution: ANS\\"}<br/>\\n{\\"6. Charged particle: ION\\"}<br/>\\n{\\"\\\\t\\"}<br/>\\n{\\"Down:\\\\t\\"}<br/>\\n{\\"1. Spain domain: ES\\"}<br/>\\n{\\"2. Multiplication: X\\"}<br/>\\n{\\"3. 3.14159...: PI\\"}<br/>\\n{\\"4. Indefinite article: A\\"}<br/>\\n{\\"5. Avogadro's number: N\\"}<br/>\\n{\\"7. Oxygen: O\\"}<br/>\\n{\\"8. Knight: N\\"}<br/>\\n{\\"\\\\t\\"}<br/>\\n{\\"The solved crossword looks like:\\"}<br/>\\n{\\"        EXP\\"}<br/>\\n{\\"ANS    ION\\"}"
    },
    "puz105_custom_269": {
      "hash": "b602c9eb52dd015301daf87ef2da1b9cf8082b0d15b6679c2139b6835ebc7035",
      "content": "{\\"The puzzle refers to Paul Simon's song \\\\\\"50 Ways to Leave your Lover\\\\\\". To help that, first letters of the clues spell \\\\\\"SIMON\\\\\\". Each advice matches a line in the song's chorus. Take names from those lines (STAN, LEE, JACK, ROY, GUS) and index by number of runners.\\"}"
    },
    "puz105_custom_275": {
      "hash": "b01358a2f384ab40f02187b4fb2622c7e95bef92d8c7d99a4ef3c2a90b0dd63e",
      "content": "{\\"The answer is RED HERRING, as shown in the image.\\"}"
    },
    "puz105_custom_278": {
      "hash": "8f992988bb02f4022f92839f4116567610c16539cdefab7473dc3b661a360a11",
      "content": "{\\"The puzzle consists of gramograms, which are words that sounds like letters being spelled out. Each line contains a gramogram of a real English word, and the number beside it shows which letter to take from each word. Here are the solution:\\"}<br/>\\n{\\"OBCT : Obesity - 2: B\\"}<br/>\\n{\\"Q : Queue - 4: U\\"}<br/>\\n{\\"LFN : Elephant - 8: T\\"}<br/>\\n{\\"NMA : Anime - 2: N\\"}<br/>\\n{\\"XCM : Axiom - 2: X\\"}<br/>\\n{\\"YRLS : Wireless - 5: L\\"}<br/>\\n{\\"MNET : Amenity - 4: N\\"}<br/>\\n{\\"DK : Decay - 3: C\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"These gives us BUTNXLNC, which is a gramogram for \\\\\\"Beauty And Excellency\\\\\\", which is the final answer to this puzzle.\\"}"
    },
    "puz105_custom_284": {
      "hash": "8443bf17d7eda33767650a9a4c8f04a3c26d26f96fbf95b3bab0c42d072242ec",
      "content": "{\\"1. State without war. = peace\\"}<br/>\\n{\\"2. If companion. = else\\"}<br/>\\n{\\"3. Exploit or utilize. = use\\"}<br/>\\n{\\"4. Buttocks or anus. = arse\\"}<br/>\\n{\\"5. Highest card. = ace\\"}<br/>\\n{\\"6. Otherwise. = else\\"}<br/>\\n{\\"7. Pupils are inside these. = eyes\\"}<br/>\\n{\\"8. Make fun of. = tease\\"}<br/>\\n{\\"9. Like an owl. = wise  \\"}<br/>\\n{\\"\\"}<br/>\\n{\\"One may notice that each of the clues solve to a (plural)letter homophone, and the title clues to fill the same word in each row, so the full crossword should be filled as follows:\\"}<br/>\\n{\\"PLURALITY\\"}<br/>\\n{\\"PLURALITY\\"}<br/>\\n{\\"PLURALITY\\"}<br/>\\n{\\"PLURALITY\\"}<br/>\\n{\\"PLURALITY\\"}<br/>\\n{\\"PLURALITY\\"}<br/>\\n{\\"PLURALITY\\"}<br/>\\n{\\"PLURALITY\\"}<br/>\\n{\\"PLURALITY\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"Which gives us a thematic answer: PLURALITIES\\"}"
    },
    "puz105_custom_287": {
      "hash": "abe133532463b2df1366a49aade09491ce9c62262f3e3e27ecb762b6727b01fc",
      "content": "{\\"You may think the answer is FAIR PLAY or one of many other puzzles but, in actuality, THE ANSWER IS: \\\\\\"THE ANSWER TO ANOTHER PUZZLE.\\\\\\"\\"}"
    },
    "puz105_custom_288": {
      "hash": "a8c56ce9c2b0e793a9839baf3ad25319e4794a53a0bab9e405d2021638b45d10",
      "content": "{\\"This puzzle is based off the Holostars branch of Hololive, specifically the 12 Holostars English talents of the Tempus and Armis units.  Each \\\\\\"star\\\\\\" corresponds to the design of one talent, and they each have a certain number of another talent's oshi marks.  The extractions is as follows:\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"Gavis Bettel\\\\ttop hat\\\\t2\\\\tA\\"}<br/>\\n{\\"Goldbullet\\\\teagle\\\\t7\\\\tL\\"}<br/>\\n{\\"Machina X Flayon\\\\tbattery\\\\t10\\\\tL\\"}<br/>\\n{\\"Jurard T Rexford\\\\tt rex\\\\t2\\\\tU\\"}<br/>\\n{\\"Noir Vesper\\\\tbook\\\\t8\\\\tP\\"}<br/>\\n{\\"Josuiji Shinri\\\\tbow & arrow\\\\t5\\\\tI\\"}<br/>\\n{\\"Banzoin Hakka\\\\tgear\\\\t3\\\\tN\\"}<br/>\\n{\\"Octavio\\\\tinfinity\\\\t4\\\\tA\\"}<br/>\\n{\\"Regis Altare\\\\tsparkler\\\\t1\\\\tR\\"}<br/>\\n{\\"Magni Dezmond\\\\tgloves\\\\t1\\\\tM\\"}<br/>\\n{\\"Crimzon Ruze\\\\tanger symbol\\\\t3\\\\tI\\"}<br/>\\n{\\"Axel Syrios\\\\tchains\\\\t5\\\\tS\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"Reading the cycle starting with Gavis Bettel gives the final answer: ALL UP IN ARMIS\\"}"
    },
    "puz105_custom_291": {
      "hash": "ea6683c821ada94f704f4e536cbf919e9f502ec5f2e74ea5d005218080e4e391",
      "content": "{\\"Someone was holding down the Mac Option ⌥ key while typing out the answerphrase! It should've said\\"}<br/>\\n{\\"\\\\\\"Along the byway\\\\\\" singer (5, 7). The answer to this is FRANK SINATRA.\\"}"
    },
    "puz105_custom_294": {
      "hash": "41e3eb6641dacc3c896fc7909b4627b4fba134911e559f041e3a0e38c2452bc1",
      "content": "{\\"The star icons indicate the quality ratings of stars in this puzzle hunt. From the top to the bottom are: EPIC, COMMON, LEGENDARY, UNCOMMON, and RARE. By reading the letters corresponding to the stars pointed by the arrow, we can get the answer, COLOR.\\"}"
    },
    "puz105_custom_296": {
      "hash": "d232a9354ccf3296493f6b29133b3effdefafca22f2e871d0540769c2b4c9801",
      "content": "{\\"Say you hung out with Elton John, e.g.\\"}<br/>\\n{\\"NAME DROP - R\\"}<br/>\\n{\\"George Washington, for Washington D.C., e.g.\\"}<br/>\\n{\\"NAMESAKE - E\\"}<br/>\\n{\\"One might have \\\\\\"HELLO!\\\\\\" on it\\"}<br/>\\n{\\"NAME TAG - T\\"}<br/>\\n{\\"It might be needed for security\\"}<br/>\\n{\\"MAIDEN NAME - I\\\\t\\\\t\\\\t\\\\t\\"}<br/>\\n{\\"Boo, honey, or sugar, e.g.\\"}<br/>\\n{\\"PET NAME - T\\"}<br/>\\n{\\"Hussein, to Obama, e.g.\\"}<br/>\\n{\\"MIDDLE NAME - L \\\\t\\\\t\\\\t\\"}<br/>\\n{\\"Dr. Seuss, e.g.\\"}<br/>\\n{\\"PEN NAME - E\\\\t\\\\t\\\\t\\\\t\\\\t\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"Children's game (3) [5]\\"}<br/>\\n{\\"TAG \\"}<br/>\\n{\\"Dog or cat (3) [3]\\"}<br/>\\n{\\" PET \\"}<br/>\\n{\\"First, as a voyage (6) [3]\\"}<br/>\\n{\\"MAIDEN \\"}<br/>\\n{\\"It's mightier than the sword (3) [2]\\"}<br/>\\n{\\"PEN \\"}<br/>\\n{\\"Japanese alcoholic drink (4) [8]\\"}<br/>\\n{\\"SAKE \\"}<br/>\\n{\\"Malcolm in the ___ (6) [5]\\"}<br/>\\n{\\"MIDDLE \\"}<br/>\\n{\\"Rain unit (4) [6]\\"}<br/>\\n{\\"DROP\\"}"
    },
    "puz105_custom_305": {
      "hash": "5ed8a6c2dea4693cc6d54984cb171cb957b3ad877b162c678a06ec6cd2752102",
      "content": "{\\"The flavortext and the title both hint the artifacts of our team, and the emoji tells us to use the order before our team name (i.e, we should order them by when we get them). For A(B), we can take the Bth letter of the Ath artifact , and their names can be found in the team page. Apologems are not shown before the team name, so it is replaced with a *. Then, we get the answer HUNGER, which is part of our team name.\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"(The apologems are part of  this puzzle and can be used for something.)\\"}"
    },
    "puz105_custom_308": {
      "hash": "25b113f2e60be3ae806d4e553c29ac653eb7f4c2b5a52e1f8e79938367c4be58",
      "content": "{\\"From the title of the puzzle, we can directly get the answer: zitmen.\\"}<br/>\\n{\\"Also, according to the flavor text, using our team member's names to finish the crossword and extracting the letters according to the numbers can get the same answer. Note that the lying man in the picture implies letters of one of the names should be rotated 90°  counterclockwise to fill in the crossword.\\"}<br/>\\n{\\"The finished crossword can be viewed at https://docs.google.com/spreadsheets/d/1yZgesR9In8Mz52siMpCJ9LaqKJ4p7809S68Vq96ZKfc/edit?usp=sharing\\"}"
    },
    "puz105_custom_343": {
      "hash": "bf7d7c38ac3f778eee78415f41bfceb82c1eed45e76893df0f2e1aa6eef4f24a",
      "content": "{\\"First, we can google the title and flavortext, and realize that this puzzle is about Radiohead's Scatterbrain.\\"}<br/>\\n{\\"With a bit of searching, we can find an image that matches the style of the \\\\\\"Scatterbrain\\\\\\" text in the image:\\"}<br/>\\n{\\"https://drive.google.com/file/d/19AyoQWW6Eg8uGkwn3m08PXQ7SX57A11H/view?usp=sharing (Solvers can grab this image from either Google Images or Genius's lyrics website.)\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"Overlaying the image on the puzzle, we can take the letters on the polygon's vertices.\\"}<br/>\\n{\\"https://drive.google.com/file/d/1rJoKsxEopnioTu3TpfdxfItl7lSkgyNc/view?usp=sharing (The extracted letters, highlighted)\\"}<br/>\\n{\\"In reading order, both polygons together spell out CHEESY SHOW. Searching this with the puzzle's title, we can find an object show made by Cheesy Hfj called ONE, this puzzle's inspiration.\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"cant give up the chance to make an object show puzzle #swag\\"}"
    },
    "puz105_custom_354": {
      "hash": "6ea294fc3e4ca13dbd0e62afc30983e5d82d7e1a1215bb9b68a07079c57d778e",
      "content": "{\\"This is a normal konundrum. Following the steps (ONE - ONA - ONAG - ONAGH - ONAGHT - OUNAUGHT - YOUNAUGHTY) to find the answer NAUGHTY. It doesn't matter which number you choose -- ABCABC7 mod 26 is always 7.\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"Authors' Notes:\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"The title means A Bad Puzzle, the last two characters are pronounced like \\\\\\"naughty\\\\\\". I guess it's a naughty pun.\\"}"
    },
    "puz105_custom_357": {
      "hash": "5d9be5063b03ab9dee1578a4f3645e262a70cfe1977d7a466e5c52c9822fd9f0",
      "content": "{\\"These are all \\\\\\"X before Y\\\\\\" phrases. \\"}<br/>\\n{\\"\\"}<br/>\\n{\\"D: The dawn (2'1 6 7) -> IT'S ALWAYS DARKEST \\"}<br/>\\n{\\"L: You (can) walk (5) -> CRAWL\\"}<br/>\\n{\\"G: Christmas ('4 3 5) -> 'TWAS THE NIGHT\\"}<br/>\\n{\\"D: Time (3 4) -> THE LAND\\"}<br/>\\n{\\"L: Zod (5) -> KNEEL \\"}<br/>\\n{\\"\\"}<br/>\\n{\\"Taking the letter before the indicated letter gives us SWINE, which is a hint to use the idiom to get the answer of PEARLS.\\"}"
    },
    "puz105_custom_359": {
      "hash": "626e1c745e88b37fee0a0565426cfcae8285bb32c8845ec5f386290f9946a625",
      "content": "{\\"Like the other Necklace puzzles, this is a Masyu, but there are two many pearls to make sense of anything immediately. Noting the flavortext, the regions in the left grid, and the \\\\\\"TWO STARS\\\\\\" conspicuously crossed out in the letter grid, we must first solve a two-star Star Battle to figure out which pearls are real (every pearl coinciding with a star is real, ignore the rest).\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"Once you have done so, solve the Masyu as normal until you reach a point where the solution is not unique. Looking at the letter grid again, notice that the line through STARS appears as part of the loop, which suggests that the line through TWO should also appear as part of the loop, which is enough to disambiguate and get a unique solution.\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"Reading the letters corresponding to the squares the loop does not pass through in reading order gives \\\\\\"common name vulpes vulpes\\\\\\", leading to the answer of RED FOX.\\"}"
    },
    "puz105_custom_361": {
      "hash": "9771b57666d19f043c1e7f686c554f34158970a6e268db5fbc566179576afb99",
      "content": "{\\"Lucia Tan is an anagram of Nautical, together with the fact that she is sailing, and the mention of \\\\\\"flag\\\\\\" at the end hints that this puzzle references nautical flags. Each country she visits describes some transformation to the country's flag to then get a nautical flag. \\"}<br/>\\n{\\"\\"}<br/>\\n{\\"For Thailand, blue and red are switched, this makes the flag for C.\\"}<br/>\\n{\\"For Indonesia, turn the flag on its side to get the flag for H.\\"}<br/>\\n{\\"For Japan, red-eye is changed to black-eye, and White Christmas to Yellow Christmas. Changing red to black and white to yellow, you get the flag for I.\\"}<br/>\\n{\\"For Scotland, there is no transformation needed. This is the flag for M.\\"}<br/>\\n{\\"For Liechtenstein, remove the crown from the flag to get the flag for E.\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"Together, you get the answer CHIME.\\"}"
    },
    "puz105_custom_362": {
      "hash": "8f6e3508b3f52f4e3856fe6b333084b9a8c1c2aa0def3c60a92f7dfdd43ef212",
      "content": "{\\"This was a homage to 'Short answer: Musical intuition' from this hunt (the intro is virtually identical and the image the same). Several words (\\\\\\"printed\\\\\\", \\\\\\"pitch\\\\\\", \\\\\\"justify\\\\\\", \\\\\\"points\\\\\\") hint at typesetting. The clues, which seem to refer to the score excerpt, are in fact to be interpreted in the context of printing and fonts. Intended answers: PITCH (\\\\\\"measure\\\\\\" alluding to a musical bar and a horizontal printing measurement); INDENT; CAP LINE (\\\\\\"loud\\\\\\" = \\\\\\"capital letters\\\\\\"); ALTERNATE CHARACTERS (\\\\\\"accents\\\\\\" having meanings in both music and fonts, i.e. diacritics); PROPORTION; ITALIC; CURSIVE; ASCENDER (\\\\\\"average\\\\\\" referring to the font's \\\\\\"mean line\\\\\\"). The initials, with the gap between clues 4 and 5, spell PICA PICA, Latin for \\\\\\"magpie\\\\\\" (our team name), hinted by \\\\\\"black-and-white\\\\\\" in the intro. Also, \\\\\\"pica\\\\\\" thematically has two different typesetting meanings, one being \\\\\\"a measurement of 12 points\\\\\\", so \\\\\\"pica pica\\\\\\" = 12 + 12 (hence \\\\\\"24 points\\\\\\" in the intro).\\"}"
    },
    "puz105_custom_365": {
      "hash": "b5bc68db600b7a115e08328b94744567ed82fc360b7790194b7536915beba125",
      "content": "{\\"The title and flavortext hint that this puzzle is about the TETR.IO World Championship, or TWC. Each number corresponds to the placement of a player as given by the results page on the championship website. Indexing into each player name with the number of points they scored gives us our answer:\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"188th place: PUYO_PUYO_FAN (8 points) = O\\"}<br/>\\n{\\"158th place: QUEENTOTHESTARS (15 points) = S\\"}<br/>\\n{\\"247th place: KWIKSCOPER (4 points) = K\\"}<br/>\\n{\\"290th place: YONGSHIN (4 points) = G\\"}<br/>\\n{\\"270th place: MEIAS (4 points) = A\\"}<br/>\\n{\\"186th place: DUNGEON-MASTER (8 points) = M\\"}<br/>\\n{\\"179th place: SALTEDBREAD (9 points) => E\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"The answer is OSK GAME, a community meme regarding osk, the developer of TETR.IO.\\"}"
    },
    "puz105_custom_367": {
      "hash": "11f4734e385015fba3af874eba7992d58af21185abddd54e23ca4ab149263f42",
      "content": "{\\"The title and flavourtext hint at a Hertzsprung-Russell (H-R) diagram and star spectral classes (OBAFGKM).  Matching the spectral class axis on an H-R diagram to the columns in the puzzle image, the stars correspond to the letters OBAGM. Searching the words in the image reveals they are numbers from 1-5 in Hungarian, which can be used to order the letters into GOMBA, the Hungarian word for mushroom and the secret ingredient (commonly used in risotto).\\"}"
    },
    "puz105_custom_368": {
      "hash": "040020e8cd44efe85bf0a86beb820f281a0b1892af9aeccc41a2cb6a34277f44",
      "content": "{\\"This clue indicates that the answer to this puzzle is its own enumeration. The only number whose number of letters is equal to itself is FOUR.\\"}"
    },
    "puz105_custom_370": {
      "hash": "85394360cbcaf181dee0d91356a4b689d16aa9f383889a3b669d36b0a55f4b03",
      "content": "{\\"This is a sequel to JFK SHAGS A SAD SLIM LASS, my puzzle from the 2012 Mystery Hunt (god, I'm old) which unexpectedly resurfaced in GPH2024.  That puzzle was about tracing things out on a keyboard, and so is this one, although this one doesn't fit entirely in the puzzle title.\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"Solve the clues to obtain six characters per group.  Each group forms an X shape on the keyboard with its central letter missing; these central letters spell TITLE.  We are told the answer is not 5 letters long, so we should call in the title of the puzzle.  (It had to come into play somehow!)\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"Detailed solution: https://docs.google.com/spreadsheets/d/1HzgAFFsLJxl9tgaKVT1YiRuWNwNTm5vsYt9miiSjr2M/edit?usp=sharing\\"}"
    },
    "puz105_custom_380": {
      "hash": "bf7071eecb2449d26e2dbbbd06b98a6f6a242f668c54c6bf14d9adcbc85690d1",
      "content": "{\\"Solvers should identify that the puzzle is based on Lorem Ipsum, a common placeholder text. \\"}<br/>\\n{\\"It turns out there is a canonical text used for this, available online. \\"}<br/>\\n{\\"Solvers should then use this ordering to perform a substitution cipher, where \\\\\\"lorem\\\\\\" = A, \\\\\\"ipsum\\\\\\" = B and so on. \\"}<br/>\\n{\\"(There is a slight ambiguity, as \\\\\\"ut\\\\\\" appears twice in the first 26 words of the passage, but teams should be able to figure out the answerphrase pretty easily).\\"}<br/>\\n{\\"Doing this gives the answerphrase THE ANSWER IS GIBBERISH\\"}"
    },
    "puz105_custom_394": {
      "hash": "568358a7dbdff88c574042df5cc49c8f40f22119cf92e8f1a00865874aba6ad4",
      "content": "{\\"The center letters of the title words spell KITTEN. The image is unrelated to the solution.\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"Authors' Notes:\\"}<br/>\\n{\\"\\"}<br/>\\n{\\":3 You're welcome! 🍈\\"}"
    },
    "puz105_custom_403": {
      "hash": "6982172a180088bc00392ffddffd5a456f8c012c91691200cb8a636dcdb5f46d",
      "content": "{\\"Pictured are Tracy Morgan and Kenan Thompson, which suggests the Morgan-Keenan stellar classification system, which labels stars according to the classes O, B, A, F, G, K, M (the puzzle title is a reference to one of its mnemonics, \\\\\\"Our Bright Astronomers Frequently Generate Killer Mnemonics\\\\\\"). The classes of the eight listed stars in order spell out GAMMA BOO, which is the abbreviation for the star Gamma Boötis, also known as SEGINUS.\\"}"
    },
    "puz105_custom_406": {
      "hash": "5e002b29a66a72ea3e2755dfda9184ddc5b9df6073da08bd7c2baf09965865c0",
      "content": "{\\"These images all refer to games in the (just released) UFO 50 game collection. They are given in alphabetical order: Camouflage, Caramel Caramel, Cyber Owls, Fist Hell, Mooncat, Night Manor, and Paint Chase.\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"Order the games based on the in-game canonical ordering and index into their names by the numbers written on the UFOs to discover what is going on: SAUCERY.\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"haha get it ufo pun uhhhhhhh we'll be here all week.......     trying to finish the hunt :')\\"}"
    },
    "puz105_custom_408": {
      "hash": "fa37f8e51c1d3142fc2eab26ff697488d6f89cb01be235f062ebb19eaae23aee",
      "content": "{\\"Each of these pictures references a line from the Pirates of Penzance \\\\\\"Major General's Song\\\\\\". The enumerations give specifically the line in the song referred to, while the number after the : is an index into the line. The image clues are provided in alphabetical order, but must be reordered into how they are in the song in order to produce the answer GENERAL KNOWLEDGE\\"}"
    },
    "puz105_custom_409": {
      "hash": "1dece2659739f50dd6c39eaf6bcbb301b0296e13799c311c534bdd6bf0c0b189",
      "content": "{\\"The images in the grid, when spoken out loud, can be connected Boggle-style to make the names of 9 cats from \\\\\\"The Naming of Cats\\\\\\" - specifically, the ones the song notes as \\\\\\"fancy\\\\\\" or \\\\\\"peculiar\\\\\\". These are:\\"}<br/>\\n{\\"PLATO (PLAY + TOE)\\"}<br/>\\n{\\"ADMETUS (ADD + MEAT + US)\\"}<br/>\\n{\\"ELECTRA (ELECT + RA)\\"}<br/>\\n{\\"DEMETER (DUH + METER) \\"}<br/>\\n{\\"MUNKUSTRAP (MONK + EWE + STRAP)\\"}<br/>\\n{\\"QUAXO (QUACK + SEW)\\"}<br/>\\n{\\"CORICOPAT (CORE + ICK + O + PAT)\\"}<br/>\\n{\\"BOMBALURINA (BOMB + AL + YOU + RINA)\\"}<br/>\\n{\\"JELLYLORUM (JELLY + LORE + UM)\\"}<br/>\\n{\\"The remaining images are:\\"}<br/>\\n{\\"SUB\\"}<br/>\\n{\\"MITT\\"}<br/>\\n{\\"DOE\\"}<br/>\\n{\\"MESS\\"}<br/>\\n{\\"TICK\\"}<br/>\\n{\\"Read aloud, these give a clue phrase: SUBMIT DOMESTIC. The answer is DOMESTIC.\\"}"
    },
    "puz105_custom_410": {
      "hash": "79ce1d7e47e792a1af8eed0153c39e73f6126f60905acff2ecb7507233798946",
      "content": "{\\"We are presented with ten rows of pictures, each containing a number in a certain position. The poker roguelike mentioned in the flavortext can be identified as Balatro easily enough; one feature of Balatro is \\\\\\"Boss Blinds,\\\\\\" some of which have names corresponding to the pictures. Each Boss Blind also prominently features a Phoenician alphabet letter; as suggested by the rightward alignment, we should use the letters to spell out words in some Semitic language, specifically Hebrew as suggested by the letter ב in the title. But which words? The answer comes from the words \\\\\\"plague of Biblical proportions\\\\\\": 10 lines, 10 plagues of Egypt. A bit of research reveals that the lengths of the names of the plagues in Hebrew match the number of pictures in each line, which allows us to identify each missing blind by correlating it with its Hebrew letter equivalent. Finally, index into the Balatro names of those blinds using the numbers in their squares to spell the answer, ALCHEMISTS.\\"}"
    },
    "puz105_custom_415": {
      "hash": "4c7dea9c3ff3aa869f8d1cd0d04c22b68ebd5d05663f51cc3a1ef29d3a8f1ba7",
      "content": "{\\"\\\\\\"her-Cip\\\\\\" is the word \\\\\\"Cipher\\\\\\" with the two halves reordered. The images are of STONE and WHEAT (from Minecraft).\\"}<br/>\\n{\\"A google search of these terms will return results for the Wheatstone-Playfair  cipher, commonly called the Playfair cipher. Reordering the halves of Playfair once again gives the final solution FAIR PLAY, an answer to at least one puzzle in this hunt.\\"}"
    },
    "puz105_custom_420": {
      "hash": "81581f62a7f42d74f00d7c2e8a945310be98818db39a2ab220488041e5875240",
      "content": "{\\"Solve the crossword clues. For convenience, the answers are in alphabetical order. One realizes quickly that all of them are seven letters long, and in particular can be interlocked into a 7x7 crossword grid (as hinted by the flavortext):\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"C A P A P I E\\"}<br/>\\n{\\"A V A L O N S\\"}<br/>\\n{\\"N E T L O S S\\"}<br/>\\n{\\"A S T A R T E\\"}<br/>\\n{\\"S T E N T O N\\"}<br/>\\n{\\"T A R T A R E\\"}<br/>\\n{\\"A N N E X E S\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"Now, as hinted by the title, we simply overlay the stars on this grid in rainbow order from top to bottom, keeping the left-to-right order intact. We can disambiguate the correct transposition by the flavortext—P (\\\\\\"Purdy to start\\\\\\") is in red. Reading them in rainbow order gives PALETTE, a thematic answer.\\"}"
    },
    "puz105_custom_423": {
      "hash": "b16a90551aefbb247bff5c49d8a289af52e23c0c8415ceee4d612f58a8c1df4b",
      "content": "{\\"What Molly sees (as is hinted by the colored plants) are trees of green and red roses too/two. This is a reference to the song \\\\\\"What a Wonderful World\\\\\\", which she covered in a 26-part series. What she doesn't see is the 26 unique braille letters, composed of other letters and ordered alphabetically.  This indicates they need to be reordered, but  the standard alphabetical order does not work. Instead, solvers must use the order she used in her cover. This yields the phrase WONDERFUL! ANS: FRANK CAPRACORN , which is a zodiac pun of the director of a different WONDERFUL work, one that is also alluded to by pine trees and the green/red color combination.\\"}"
    },
    "puz105_custom_436": {
      "hash": "694d00bcb1da316b19084bbe76c3db28273cfcc3e08323b7483abd85fc0b0ffe",
      "content": "{\\"The pictures in the first row clue four words:\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"EGG\\"}<br/>\\n{\\"GLOBE\\"}<br/>\\n{\\"ROBOT\\"}<br/>\\n{\\"BARBER\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"Each word has some number of \\\\\\"colored lights\\\\\\", i.e. R, G, and B's, in the word (as suggested by the drones with RGB lights and \\\\\\"components\\\\\\" flavor text):\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"EGG (2G)\\"}<br/>\\n{\\"GLOBE (1G+1B)\\"}<br/>\\n{\\"ROBOT (1R+1B)\\"}<br/>\\n{\\"BARBER (2B+2R)\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"Then we need to calculate how much each \\\\\\"colored light\\\\\\" cost with some simple algebra (e.g. set 2G = $28, since the EGG cost $28). This gives us the values G = 14, R = 20, B = 173.\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"Now we can calculate the values for the bottom pictures (FROG and BURGER):\\"}<br/>\\n{\\"FROG costs R + G = 34\\"}<br/>\\n{\\"BURGER costs B + 2R + G = 227\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"Multiplying these gives us 7718. But the final answer has upside down question marks, suggesting that we should flip this number (e.g. on a calculator), which gives us the letters BILL.\\"}"
    },
    "puz105_custom_440": {
      "hash": "c27f48acd1879c0b6ac648ecdc36422018c8d037a2627b8e4df1f3a089628895",
      "content": "{\\"Trace a path through the Path of Exile passive tree (https://www.pathofexile.com/passive-skill-tree) starting at the node circled in red. The path follows the names of the passive nodes on the bottom. The shape drawn is a BOAT.\\"}"
    },
    "puz105_custom_442": {
      "hash": "4139f7db2cfa6bad7c08afa426e0139e9f9e4f2d95982b7aba4a540167d5518a",
      "content": "{\\"The puzzle provides us with a paragraph about a tiger who lies in wait for prey. This, combined with the suggestion of a \\\\\\"movie\\\\\\" from the flavortext, should make us think of the film \\\\\\"Crouching Tiger, Hidden Dragon\\\\\\". Sure enough, the paragraph has the names of five fictional dragons hidden within, but with one incorrect letter in each name. The names can fit onto the blanks below the paragraph, where the incorrect letter is always highlighted in red.\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"The dragons are:\\"}<br/>\\n{\\"- FALKOR (WALKOR in \\\\\\"walk or\\\\\\")\\"}<br/>\\n{\\"- SPYRO (SPURO in \\\\\\"spur on\\\\\\")\\"}<br/>\\n{\\"- MUSHU (XUSHU in \\\\\\"plexus. Hunting\\\\\\")\\"}<br/>\\n{\\"- TOOTHLESS (TOOTHLISS in \\\\\\"tooth. Lissome\\\\\\")\\"}<br/>\\n{\\"- SMAUG (AMAUG in \\\\\\"loam, auguring\\\\\\")\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"The incorrect letters spell WUXIA, a subgenre of martial arts film exemplified by \\\\\\"Crouching Tiger, Hidden Dragon\\\\\\".\\"}"
    },
    "puz105_custom_445": {
      "hash": "bc5bfef090967c27b07b737ef57146017f3715739de2ef5cc044a076a3250e11",
      "content": "{\\"The title is hinting \\\\\\"Galactic Trendsetters\\\\\\", which is referring to the teams of the hunt. Each clue is referring to one of the top 26 finishing teams in the hunt leaderboard. \\"}<br/>\\n{\\"\\"}<br/>\\n{\\"An Italian dish -> Eggplant Parms (rank 4) (eggplant parmesan is an Italian dish)\\"}<br/>\\n{\\"MGURCOM -> initially mathemagicians grieve undisplayed, restricted [.] characters over maximum [/zSswjUk] (rank 15) (initial letters of mathemagicians grieve undisplayed restricted characters over maximum)\\"}<br/>\\n{\\"Snow -> Yuki (rank 26) (yuki means snow in Japanese)\\"}<br/>\\n{\\"Hoshimachi Suisei motivates miracle -> Shooting Star Inspires Wonder (rank 5) (Hoshimachi Suisei = shooting star, motivates = inspires, miracle = wonder)\\"}<br/>\\n{\\"Planet overshadowing a star -> Neptune Eclipsing Sirius (rank 14)\\"}<br/>\\n{\\"(planet = Neptune, overshadowing = eclipsing, a star = Sirius)\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"Converting the ranks using A-Z gives DOZEN.\\"}"
    },
    "puz105_custom_447": {
      "hash": "90db88898c6f5be3b8baf339f050ada2b3f68852463b642895b8074d9be73443",
      "content": "{\\"If you index  the countries from their clues, you'll get CAPITAL.  Indexing their capitals with the same indexes returns ||SENEGAL||\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"SAINT LU(C)IA\\\\tCASTRIE(S)\\"}<br/>\\n{\\"BOTSWAN(A)\\\\tGABORON(E)\\"}<br/>\\n{\\"(P)ALAU\\\\t(N)GERULMUD\\"}<br/>\\n{\\"F(I)NLAND\\\\tH(E)LSINKI\\"}<br/>\\n{\\"CEN(T)RAL...\\\\tBAN(G)UI\\"}<br/>\\n{\\"QAT(A)R\\\\tDOH(A)\\"}<br/>\\n{\\"BE(L)IZE\\\\tBE(L)MOPAN\\"}"
    },
    "puz105_custom_448": {
      "hash": "d1ada7749c2a3d82a03e108e3081e76b47e8d1191122a97404b42e516c20e1c3",
      "content": "{\\"The flavor text is a quote from the movie Megamind, where Titan asks what the difference between a villain and a supervillain is. The five images describe words or phrases that match the five text clues when \\\\\\"super\\\\\\" is added to the beginning:\\"}<br/>\\n{\\"- [Super]star Saga\\"}<br/>\\n{\\"- [Super]visor\\"}<br/>\\n{\\"- [Super]man\\"}<br/>\\n{\\"- [Super]massive Black Hole\\"}<br/>\\n{\\"- [Super]weapon\\"}<br/>\\n{\\"Indexing into the \\\\\\"super\\\\\\" objects spells TRAMP. Solvers should add SUPER one more time to get the answer, SUPERTRAMP.\\"}"
    },
    "puz105_custom_456": {
      "hash": "4c6d726f6a0ec7a42fe4f3637be2b1fc001760fef58376d2638440b62d20cd45",
      "content": "{\\"This puzzle has crossword-style clues and stars leaving trails, with one space highlighted. Clues may be slightly value at first, but  all of the answers have one particular thing in common - containing STAR within. Treating the letters after STAR as a trail...\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"corn(star)c *H*\\"}<br/>\\n{\\"co(star)ic*A*\\"}<br/>\\n{\\"honkai(star)rai*L*\\"}<br/>\\n{\\"(star)t*L*ed\\"}<br/>\\n{\\"(star)*E*down\\"}<br/>\\n{\\"dickda(star)dl*Y*\\"}<br/>\\n{\\"mu(star)dgreen*S*\\"}<br/>\\n{\\"ari(star)*C*hus\\"}<br/>\\n{\\"pa(star)*O*ni\\"}<br/>\\n{\\"bu(star)hy*M*es\\"}<br/>\\n{\\"keir(star)m*E*r\\"}<br/>\\n{\\"false(star)*T*\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"you can line up letters to spell out a famous shooting star and a reference to 2022's GPH - HALLEYSCOMET.\\"}"
    },
    "puz105_custom_457": {
      "hash": "b323f825e52324b9b3601b25b8f8f86b61814d45908cf3744d14a8aac7f3141e",
      "content": "{\\"The depicted Pokemon (National Pokedex #120) is Staryu. Staryu has multiple possible held items, but only STARDUST has a 50% chance of appearing.\\"}"
    },
    "puz105_custom_458": {
      "hash": "afafebb758d2e9df0d4cd81830a2e072bc88d0503c7608681b3b110ee2ecade3",
      "content": "{\\"\\\\\\"In\\\\\\" and \\\\\\"visible\\\\\\" are actually two separate words in the puzzle. Within \\\\\\"visible,\\\\\\" there are two letters that are a different color from the others, they are the answer to the puzzle.\\"}"
    },
    "puz105_custom_464": {
      "hash": "34b4c3aa314491c7aea70034944659dcba43741c202010b183fb70d3b175295d",
      "content": "{\\"Perform atbash on the provided ciphertext to get the plaintext. \\"}<br/>\\n{\\"\\"}<br/>\\n{\\"sibehthrsihkzigouthvimtvndvwholftilmnodtvgghexlwe\\"}<br/>\\n{\\"hryvsgsihrspartlfgserngemwedslougronmlwgettsvcodv\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"Upon comparing the two strings with each other, you can form words by using letters from both rows\\"}<br/>\\n{\\"e.g. \\"}<br/>\\n{\\"ghexlwe    ||            he        e\\"}<br/>\\n{\\"tsvcodv      ||          t      cod     \\"}<br/>\\n{\\"\\"}<br/>\\n{\\"Doing this fully will result in the following:\\"}<br/>\\n{\\"  i   e th si          o th i t nd      ol ti     no           he       e\\"}<br/>\\n{\\"h y s     i   spart f    ene    eds  u  on    wgett    cod\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"(hiyesthisispartoftheintendedsolutionnowgetthecode)\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"The title (Who even needs 8 bits?) suggests that binary is at work, but we should use less than 8 bits.\\"}<br/>\\n{\\"The deciphered string is 49 characters long, which means we should use 7 bit binary.\\"}<br/>\\n{\\"Treating a character from the ciphertext as a 0, and the plaintext as a 1, we will get the following binary strings: 1010100 1001111 1010010 1010011 1001001 1001111 1001110\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"These decode to our answer, TORSION.\\"}"
    },
    "puz105_custom_465": {
      "hash": "9384a7db6fb48f9f18828908538700e6cc65434ef0f06ce84ff297ed372eaed2",
      "content": "{\\"The black bolded letters A, s, c, I, I resemble ASCII. We can find that the ASCII values of three bolded letters A, Z, s on the top are 65, 90, 115, in which 90 is the average number of the others. While Z appears to be the midpoint of A and s, we can consider the midpoint of a line segment as the average ASCII value between its two ends.\\"}<br/>\\n{\\"The triangle in the diagram appears to be equilateral. Therefore, all the intersection points of the six line segments and the circle are exactly at their midpoints. Reading these midpoints along the circle gives the answer REVIVER.\\"}"
    },
    "puz105_custom_470": {
      "hash": "b9b6317dd779fa07773290972c6796b1438b8d9858d80f65f14064b5bb0f9590",
      "content": "{\\"Each Pokémon given in the puzzle is also the beginning and the ending of another Pokémon.\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"The lines are solved as:\\"}<br/>\\n{\\"MIMIKYU|REMORAID\\"}<br/>\\n{\\"SNOVER|QWILFISH\\"}<br/>\\n{\\"MACHOP|PIPLUP\\"}<br/>\\n{\\"HOOTHOOT|HOOTHOOT\\"}<br/>\\n{\\"LAIRON|MOTHIM\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"Extracting the red letters in numerical order gives the Pokémon LATIAS. Extracting down the purple column gives the Pokémon AIPOM.\\"}"
    },
    "puz105_custom_477": {
      "hash": "69eed2a1113ba01bcf25d5a241aea10231ff8915c9af1d62ab5d2c7944a5ab15",
      "content": "{\\"This puzzle is a reference the 2006 flash toy/game \\\\\\"Line Rider\\\\\\" and its long-lived creative community. Searching for \\\\\\"Line Rider 2022\\\\\\" or \\\\\\"Line Rider Top 10\\\\\\" points towards the annual Top 10 videos that are hosted on the Line Rider Review YouTube channel. Each drawing in the puzzle is a rebus that represents a Line Rider track from the \\\\\\"Top 10 Line Rider Tracks of 2022\\\\\\" video. From left to right:\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"Everywhere at the End of Time Stage 1 (#9)\\"}<br/>\\n{\\"Mount Eerie (#2)\\"}<br/>\\n{\\"Unfold Reimagined (#4)\\"}<br/>\\n{\\"Revisitation (#7)\\"}<br/>\\n{\\"The Name Engraved in My Heart (#3)\\"}<br/>\\n{\\"Bring Down The House (#6)\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"The titles are then indexed by their ranking in the Top 10 video, resulting in the answer ROOTED.\\"}"
    },
    "puz105_custom_482": {
      "hash": "b29560429cadccb03a40e4f29005c587937cd4425f201a018d8288e9bc603cb8",
      "content": "{\\"The length of the title and flavor text clue towards the Long Form Name of Hello Kitty WHITE, 10^15 the \\\\\\"long form name\\\\\\" of which is a BILLIARD, and Thelonious SPHERE Monk. A WHITE BILLIARD SPHERE is a CUE BALL.\\"}"
    },
    "puz105_custom_487": {
      "hash": "959c8b0f27fd9a3c4c387349fd9a0ba80fd481280ea5e028c85abf1a0e6c7f28",
      "content": "{\\"This is a Super Mario Galaxy-themed puzzle, three words of the flavor text sharing the same first syllables and syllable stress as \\\\\\"Super Mario Galaxy\\\\\\", as well as the diagram, whose colors and enumeration match up with the Super Mario Galaxy logo.\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"The mission logs describe something happening in six different rooms, which reference the six domes in Super Mario Galaxy. There is a single galaxy name in each of those domes that enumerates the same as the capitalized words (not including the word Galaxy, as that's covered by the galaxy emoji). If you compare the letters of the clue word to the galaxy name, you'll find that only one lines up, which is what you should extract, in order: experienCe/flipswitCh, right nOw/sling pOd, unuSual/ghoStly, deuteronoMy/freezeflaMe, law fIrm/toy tIme, jump Cut/snow Cap.\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"This extraction is also clued by the diagram, which shares 1 letter per word with \\\\\\"Super Mario Galaxy\\\\\\": P, I, and G.\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"Extracting each letter gives the answer COSMIC.\\"}"
    },
    "puz105_custom_489": {
      "hash": "9d6e8123f5bf8e992a69d81dce800aa18550694d9581f843686a2699922fcff2",
      "content": "{\\"This puzzle is a reference to the song \\\\\\"Remember the Name\\\\\\" by Fort Minor.\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"The chorus of the song is:\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"This is ten percent luck, twenty percent skill\\"}<br/>\\n{\\"Fifteen percent concentrated power of will\\"}<br/>\\n{\\"Five percent pleasure, fifty percent pain\\"}<br/>\\n{\\"And a hundred percent reason to remember the name.\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"The percentages in the pie chart correspond, but are off slightly, so you can index into the corresponding phrase by the error.\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"LUCK (11 - 10 = 1) -> L\\"}<br/>\\n{\\"SKILL (23 - 20 = 3) -> I\\"}<br/>\\n{\\"CONCENTRATED POWER OF WILL (18 - 15 = 3) -> N\\"}<br/>\\n{\\"PLEASURE (8 - 5 = 3) E\\"}<br/>\\n{\\"PAIN (52 - 50 = 2) A\\"}<br/>\\n{\\"REASON TO REMEMBER THE NAME (101 - 100 = 1) R\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"This gives the final answer, LINEAR.\\"}"
    },
    "puz105_custom_490": {
      "hash": "631bf5e27960cf02c6476c2c804a1b4f589f42f6807a76f644d196851ff832e3",
      "content": "{\\"This puzzle uses the tune of Frankie Valli's \\\\\\"December 1963 (Oh What a Night)\\\\\\" to describe the oft-circulated match day results of English football's first division on Boxing Day (December 26) of 1963, in which a very above average 66 goals were scored. \\"}<br/>\\n{\\"\\"}<br/>\\n{\\"Indexing the number of goals that the mentioned clubs scored into their names:\\"}<br/>\\n{\\"-Liverpool 6-1 (S)toke\\"}<br/>\\n{\\"-Wes(t) Brom 4-4 Tottenham\\"}<br/>\\n{\\"-Nott'm Forest 3-3 Sh(e)ff Utd\\"}<br/>\\n{\\"-L(e)icester 2-0 Everton\\"}<br/>\\n{\\"-Wo(l)ves 3-3 Aston Villa\\"}<br/>\\n{\\"-Burnl(e)y 6-1 Man Utd\\"}<br/>\\n{\\"-West Ham 2-8 Blackbu(r)n\\"}<br/>\\n{\\"-Blackpool 1-5 Chel(s)ea\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"...reveals the name of a team that plays a more American variety of football: STEELERS.\\"}"
    },
    "puz105_custom_531": {
      "hash": "2373b5321481c7439aaba0c8f52c73d0f53690b0f07203dd6b6aef6707dac3a4",
      "content": "{\\"Solvers should realize that the flavortext is referencing the \\\\\\"Is this hunt going to include a card game?\\\\\\" section in the about page of GPH2024. By filling in the missing part replaced by ellipsis in title \\\\\\"Is this...?\\\\\\", combining with the seven-word length constraint, the answer is HUNT GOING TO INCLUDE A CARD GAME.\\"}"
    },
    "puz105_custom_555": {
      "hash": "b7b5db991b913bfedd9afa95fc5f502c0ba1290078fead8338f64984de028c72",
      "content": "{\\"These are cryptic clues with the following solutions:\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"1.\\\\tDEFORMED – D (“dictator started\\\\\\") + anagram of FREEDOM\\"}<br/>\\n{\\"2.\\\\tGIANT – hidden word \\"}<br/>\\n{\\"3.\\\\tMICE – M (first meal) + even letters of KITCHEN\\"}<br/>\\n{\\"4.\\\\tARE – ERA reversed\\"}<br/>\\n{\\"5.\\\\tPUZZLING – P (pence) + (g)UZZLING\\"}<br/>\\n{\\"6.\\\\tNINE – first letters of “Northern Ireland newly elected”\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"This forms the following clue:\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"DEFORMED GIANT MICE ARE PUZZLING (NINE) \\"}<br/>\\n{\\"\\"}<br/>\\n{\\"The solution is ENIGMATIC, an anagram of \\\\\\"GIANT MICE.\\\\\\"\\"}"
    },
    "puz105_custom_571": {
      "hash": "1110796d7c72d8f9db90e7077df2597eeea912cf3163bbf3284414d035ac810c",
      "content": "{\\"i is the imaginary unit in mathematics\\"}"
    },
    "puz105_custom_574": {
      "hash": "a57b813720c1273694193cf151ae10c41f199317cab894c44b23cbbc4d518428",
      "content": "{\\"The puzzle title alludes to a phrase made famous by Star Trek.\\"}<br/>\\n{\\"A reverse image search and/or general knowledge will identify the French mathematician Émile Picard and the logo of the car rental company Enterprise.\\"}<br/>\\n{\\"The icons and timeline imply that we want to find the starship which Jean-Luc Picard commanded before Enterprise.  Fanboy knowledge or an internet search will reveal that the answer is STARGAZER.\\"}"
    },
    "puz105_custom_576": {
      "hash": "fa9a33653970bc5bad55f1f2ca2c8717fa4de96370521279929760b938d0491a",
      "content": "{\\"The flavortext suggests interpreting \\\\\\"%50\\\\\\" in the title as a URL-encoded escape sequence, which decodes the title to \\\\\\"50P\\\\\\". As also suggested by the flavortext, this is a coin; specifically, the British fifty pence. This coin has a number of variant designs for special occasions, documented here: https://www.royalmint.com/corporate/circulating-coin/uk-currency/mintages/50-pence/. Conveniently, that page lists the number of each coin minted, which is used to fill in the question marks and extract a letter from each line. Ordering by the year of the coin gives the answer, STARLING -- a small star, much like this very puzzle, and also a pun on STERLING.\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"109,000 - Single Market - 1992 - S\\"}<br/>\\n{\\"11,263,000 - Public Libraries Act - 2000 - T\\"}<br/>\\n{\\"3,124,030 - Suffragettes - 2003 - A\\"}<br/>\\n{\\"210,000 - Kew Gardens - 2009 - R\\"}<br/>\\n{\\"1,615,500 - Goalball - 2011 - L\\"}<br/>\\n{\\"5,300,000 - Benjamin Britten - 2013 - I\\"}<br/>\\n{\\"1,801,500 - Sir Isaac Newton - 2017 - N\\"}<br/>\\n{\\"3,900,000 - Tailor of Gloucester - 2018 - G\\"}"
    },
    "puz105_custom_594": {
      "hash": "19825b2d20ce42e993d180de7d4d20cfb805b684ad48b943cee2d0b06f78dd49",
      "content": "{\\"body in church - clergy \\"}<br/>\\n{\\"first peace organisation\\\\t- league of nations\\"}<br/>\\n{\\"grass you can drink - barley grass\\"}<br/>\\n{\\"lightly, in music  - leggiero \\"}<br/>\\n{\\"Monroe's band - Blue Grass Boys\\"}<br/>\\n{\\"elongate, extend - lengthen\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"The phrase clued by the flavour text is “break a leg” (good luck as dancers). So we look at what breaks up the word “leg” in each word\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"clergy - r\\"}<br/>\\n{\\"league of nations - a\\"}<br/>\\n{\\"barley grass - y\\"}<br/>\\n{\\"leggiero - g\\"}<br/>\\n{\\"Blue Grass Boys - u\\"}<br/>\\n{\\"lengthen - n\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"This spells RAYGUN, one of the breakdancers of all time.\\"}"
    },
    "puz105_custom_595": {
      "hash": "5ccef89ad496df2e4f6e03e515e34c86c684815daaa6ed43538e456ec9b0d900",
      "content": "{\\"The answer to the question is GAUSS, who in a famous story computed 1 + 2 + ... + 100 = 5050 very quickly in elementary school.\\"}"
    },
    "puz105_custom_596": {
      "hash": "7cc712c9bf1085930397e6eceee12d8be03136cd8c5945e7d5ae5607524d5fe2",
      "content": "{\\"The image contains text in Hymmnos script, a conscript for the video game series Ar Tonelico, along with enumerations. Translating the text into English gives a list of titles of games by the company Gust, with the enumerations corresponding to their subtitles. Finding the full subtitles and taking the first letters of the circled words gives the answer, BARREL.\\"}"
    },
    "puz105_custom_598": {
      "hash": "0be41aa17aee9a6b9c8d10f5d9f5fdcb4949e4d5f4fd68b469053a0a58a4453b",
      "content": "{\\"The theme of the puzzle, as clued by the title, flavor text, and kangaroo emojis, is Australian breakdancer Raygun, known for a... memorable Olympic performance. Each clue solves to a two-word phrase that rhymes with Raygun, with the blanks and emojis providing enumeration. They are as follows:\\"}<br/>\\n{\\"\\\\t\\"}<br/>\\n{\\"\\\\tHEY HUN\\"}<br/>\\n{\\"\\\\tCHE SPUN\\"}<br/>\\n{\\"\\\\tBAY RUN\\"}<br/>\\n{\\"\\\\tWHEY BUN\\"}<br/>\\n{\\"\\\\tGREY WON\\"}<br/>\\n{\\"\\\\tPLAY SON\\"}<br/>\\n{\\"\\\\tCLAY NUN\\"}<br/>\\n{\\"\\\\tSTAY FUN\\"}<br/>\\n{\\"\\\\tTHEY STUN\\"}<br/>\\n{\\"\\\\tK DONE\\"}<br/>\\n{\\"\\\\tSLAY NONE\\"}<br/>\\n{\\"\\\\tMAY SUN\\"}<br/>\\n{\\"\\\\tDAY ONE\\"}<br/>\\n{\\"\\\\t\\"}<br/>\\n{\\"Indexing into the phrases using the postiion of the kangaroo, you get HUBBY LAST NAME.\\\\t\\"}<br/>\\n{\\"Raygun's partner is named Samuel FREE.\\\\t\\"}<br/>\\n{\\"\\\\t\\"}<br/>\\n{\\"(Author's note: I had the general idea about Raygun first without an answer in mind. When I glimpsed her partner's (last) name on Wikipedia, it felt too puzzly and fitting to NOT use.)\\"}"
    },
    "puz105_custom_599": {
      "hash": "99af1617f11a7228e42bb8edac5c6d3a2056d313ce3d78272971466dba999204",
      "content": "{\\"The puzzle follows the constraints of Sudoku and Wordle. The center 5x5 must all be valid wordle words. The green region is the \\\\\\"wordle answer\\\\\\" and the yellow regions contain letters that appear in the answer.\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"The final grid is: \\"}<br/>\\n{\\"    ┌───────┬───────┬───────┐\\"}<br/>\\n{\\"    │ A R T │ D O M │ C E G │\\"}<br/>\\n{\\"    │ C O D │ E G T │ M R A │\\"}<br/>\\n{\\"    │ E G M │ A C R │ O T D │\\"}<br/>\\n{\\"    ├───────┼───────┼───────┤\\"}<br/>\\n{\\"    │ M C G │ R A D │ E O T │\\"}<br/>\\n{\\"    │ R T O │ M E G │ A D C │\\"}<br/>\\n{\\"    │ D E A │ C T O │ R G M │\\"}<br/>\\n{\\"    ├───────┼───────┼───────┤\\"}<br/>\\n{\\"    │ G D C │ O M E │ T A R │\\"}<br/>\\n{\\"    │ T M E │ G R A │ D C O │\\"}<br/>\\n{\\"    │ O A R │ T D C │ G M E │\\"}<br/>\\n{\\"    └───────┴───────┴───────┘\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"Extracting by the given numbers gives GREAT COMET ACTOR. The On Broadway version (clued by the flavor text) is our (4 6) - JOSH GROBAN\\"}"
    },
    "puz105_custom_610": {
      "hash": "1d77b0a5d80eab4ac3010eb46ddb56c20566ab55b8b82d09967bb40cee068c16",
      "content": "{\\"If you represent these flag emoji by their two-letter codes, they match up with the periodic table. The missing element is Francium = Fr, so the answer is FRANCE.\\"}"
    },
    "puz105_custom_615": {
      "hash": "cf017ed65114ec32f592e6ea0f05b7d8dbcc5abb0ed32b6ddb4c46d934c08c3d",
      "content": "{\\"Based on the upper left arrow emoji in the title and the star emoji at the end of the question, you can notice the star in the upper left corner of the webpage.\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"Hover the mouse over it to see the word, and extract the number from top to bottom based on the finger emoji to get the answer STAR.\\"}"
    },
    "puz105_custom_617": {
      "hash": "36a43709a68fe1297b2b5bd55b59a1c75aed34acfefc7b221d5d4f8d1d82745d",
      "content": "{\\"Simple diagramless crossword, answers to across clues are T/URN/TABLE and down clues TUT/RA/NB/L/E. Reading across gives the answer.\\"}"
    },
    "puz105_custom_621": {
      "hash": "2fbbac1481a554d5c8896ffd86f3a35cb8692d36ff5736ba8761b81736d4f2a5",
      "content": "{\\"As hinted by the title and the background image of a telephone, this puzzle is based on Vertical Service Codes (VSC) – numbers following a star (*) dialed on a telephone to access certain service features. A full list is provided here https://en.wikipedia.org/wiki/Vertical_service_code\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"While it is not necessary to note this to solve the puzzle, the extraction uses the VSC numbers (either one or both digits) for indexing. The faded stars indicate the locations of “unused” numbers. This is why you need to reverse the letters for *63.\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"Here is the full solution:\\"}<br/>\\n{\\"*78\\\\tDo not diSturb\\\\tS\\"}<br/>\\n{\\"*62\\\\tSelecTive call waiting\\\\tT\\"}<br/>\\n{\\"*69\\\\tLast-cAll Return \\\\tAR\\"}<br/>\\n{\\"*63\\\\tSeLecTive call forwarding\\\\tTL\\"}<br/>\\n{\\"*79\\\\tDo not dIsturb disable\\\\tI\\"}<br/>\\n{\\"*67\\\\tCalliNG number delivery blocking\\\\tNG\\"}"
    },
    "puz105_custom_630": {
      "hash": "46b3b9a433bc17efc613c39aec7718ac9fd4bc57b5440894845c80dc2058530d",
      "content": "{\\"Answer YES or NO.\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"If you answered YES, yay! Well done on solving another puzzle! Time really flies when you're having fun\\"}<br/>\\n{\\"If you answered NO, I'm sorry. I hope you find more fun puzzles. This puzzle is solved for you.\\"}"
    },
    "puz105_custom_631": {
      "hash": "794a81299f1f0fe30985d6f0b1d59d76989e1b3419325b5e1836b00f9da07c04",
      "content": "{\\"Interpret the numbers as moves in tic-tac-toe games. Take letters corresponding to uniquely optimal moves (moves that stop a loss, moves that lead to a win, etc.) to get OB VIO U SMO V ES, i.e. OBVIOUS MOVES, the answer.\\"}"
    },
    "puz105_custom_633": {
      "hash": "942b0b8bc1259e2fdec4a44194c64bd1da692745ec54f2a93747dfb53de43d34",
      "content": "{\\"The puzzle depicts a simplified version of a party list from the Final Fantasy XIV Online MMORPG. Identifying the jobs in the party list and indexing into their names using the aggro rankings then sorting by these same rankings provides the extraction for the answer.\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"Gunbreaker\\"}<br/>\\n{\\"sAge\\"}<br/>\\n{\\"daRk knight\\"}<br/>\\n{\\"barD\\"}<br/>\\n{\\"whitE mage\\"}<br/>\\n{\\"machiNist\\"}<br/>\\n{\\"red magE\\"}<br/>\\n{\\"summoneR\\"}"
    },
    "puz105_custom_637": {
      "hash": "a2dafc3403510a5850aaba54893a48aef1b2ec0f5398f3fdaf8cec89cc40f32d",
      "content": "{\\"\\\\\\"To fans\\\\\\" means you must add an AC to the words on the right to match them up with the words on the left\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"The answers (in order) are\\"}<br/>\\n{\\"CARDI\\"}<br/>\\n{\\"SHELL\\"}<br/>\\n{\\"SUM\\"}<br/>\\n{\\"ISA\\"}<br/>\\n{\\"MANI\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"CARDIAC\\"}<br/>\\n{\\"MANIAC\\"}<br/>\\n{\\"ISAAC\\"}<br/>\\n{\\"SUMAC\\"}<br/>\\n{\\"SHELLAC\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"taking the indexes from the right and using the order on the left you get ALMAN so the answer is ALMANAC\\"}"
    },
    "puz105_custom_639": {
      "hash": "241f5b64b665a86e1dcede630df1c7d9f0f7a60d5399a4f85e95a31d25a1e08b",
      "content": "{\\"Each entry appears to stick out from the grid:\\"}<br/>\\n{\\"\\"}<br/>\\n{\\".DBFH\\"}<br/>\\n{\\"GAREA\\"}<br/>\\n{\\".ROTI\\"}<br/>\\n{\\"ALIAR\\"}<br/>\\n{\\".ALLY\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"The prepended letters span A-H, but C and E are suspiciously absent. We can prepend E to ROTI and C to ALLY, then concatenate them as suggested by the blanks to form the answer.\\"}"
    },
    "puz105_custom_642": {
      "hash": "1afb2724073dde3de02e67788fde9a820485d1136062c9ab7ba4a1e7dba39111",
      "content": "{\\"Resolve the crossword clues to get the title of nine mini-games from the Mario Party series: SHELL GAME, MUSHROOM BREW, PIPE CLEANERS, TAKE A BREATHER, SQUARED AWAY, PIT BOSS, CATCHY TUNES, BUMPER BALLOONS, POLAR EXTREME. Each mini-game first appeared in a different installment of the series, starting with the inaugural \\\\\\"Mario Party\\\\\\" and ending with \\\\\\"Mario Party 9\\\\\\", in that order. Diagonalize the mini-game titles to get the answer SUPERSTAR.\\"}"
    },
    "puz105_custom_643": {
      "hash": "029b42365c07a777a159a1a8e62dae3dfd25dd55d61d19ac90d6f1f7fd10e0d5",
      "content": "{\\"Fill in the boxes with:\\"}<br/>\\n{\\"SUN\\"}<br/>\\n{\\"MON\\"}<br/>\\n{\\"TUE\\"}<br/>\\n{\\"WED\\"}<br/>\\n{\\"THU\\"}<br/>\\n{\\"FRI\\"}<br/>\\n{\\"SAT\\"}<br/>\\n{\\"WEEK\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"Read along the red line to get the cluephrase NOT WHITE, which resolves to the answer BLACK.\\"}"
    },
    "puz105_custom_646": {
      "hash": "23efcb3f3e6108df4f41215bda774a7bb91db7150e99ef6851d8e6974d85ad08",
      "content": "{\\"After waiting an hour, the text \\\\\\"THE ANSWER IS MONOTONY\\\\\\" appears. The answer is MONOTONY.\\"}"
    },
    "puz105_custom_647": {
      "hash": "8c70759dc88f8494b1868bf3efe9d7736d306f4656026e6765f4eb21756fc6f2",
      "content": "{\\"The answers all include the substring \\\\\\"ANON\\\\\\".\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"CANON, LEBANON, ANONYMOUS, PERSONA NON GRATA\\"}"
    },
    "puz105_custom_649": {
      "hash": "b91dea3830ee7991d1fc4c78d867cc632a21e9716380971b40b90a51781fb759",
      "content": "{\\"Each image is of a video game enemy or boss that has a named piece of battle music associated with them. \\"}<br/>\\n{\\"\\"}<br/>\\n{\\"In addition, the clues below the images solve to phrases that are the same as these song titles with a single letter removed. The clues are ordered alphabetically by answer to assist with this.\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"Reading the removed letters in the order that the images are provided gives the phrase FFXII SUNFLOWER. In Final Fantasy XII, the Sunflower in question is a sword called TOURNESOL.\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"For specific solution elements, see here: https://docs.google.com/document/d/11fP3ae5tGyWeyLt7VW8bnDzwl4aoMj4a3wSRcf8oRZk/edit?usp=sharing\\"}"
    },
    "puz105_custom_654": {
      "hash": "75b4b6b46fce9f6ad3521cb069f2e5056e99ad266e9e3e6c04bbfa7f25eeb715",
      "content": "{\\"Solvers must realize that the puzzle (presented as black fractions on a green background) is a reference to the Charli XCX album \\\\\\"Brat.\\\\\\" The word \\\\\\"diet\\\\\\" in the flavortext, combined with the \\\\\\"Brat\\\\\\" theming, hints at the BRAT (Bananas, Rice, Applesauce, Toast) diet. Using the \\\\\\"X/Y = Xth letter from the Y-letter word\\\\\\" thing on the four foods, in order, spells the answer.\\"}"
    },
    "puz105_custom_657": {
      "hash": "2f5806ad1d863852988615c87e9f384a70ae9408362bdff5ebbc0bcb6c61b3a9",
      "content": "{\\"As alluded to by the title and flavortext, this puzzle is about the Big Five tech companies. Clues can be solved and the numbers used to extract letters as follows.\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"- A familiar set of 26 (3): ALPHABET -> P\\"}<br/>\\n{\\"- Large river and rainforest (1): AMAZON -> A\\"}<br/>\\n{\\"- Object eaten in a garden on the recommendation of a snake (4): APPLE -> L\\"}<br/>\\n{\\"- The kind of puzzle that comes after other puzzles (1): META -> M\\"}<br/>\\n{\\"- What’s neither big nor hard? (6) MICROSOFT -> S\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"This gives the solution, an essential ingredient for a high five: PALMS.\\"}"
    },
    "puz105_custom_663": {
      "hash": "b243b72a8b7ca1393962f5a18172daa71835945f0d49cba1e1e5fb49d80e379a",
      "content": "{\\"https://2022.galacticpuzzlehunt.com/solution/extreme-anagrams\\"}"
    },
    "puz105_custom_669": {
      "hash": "839bdedce49483dc79ac23970d719bd1db1625f00ce4476c505b560a35c52ff9",
      "content": "{\\"As hinted by the comment, running this as-is will be too slow.  We can replace the existing recursive implementation with a faster one.  The easiest way is to simply generate the list of fibonacci values iteratively and read from that list.\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"Another way is to simply look up the first 52 values of the Fibonacci sequence in a source such as https://oeis.org/A000045/list them take the mod 20 by looking at the last two digits. If you do this, remember that 0=a, 1=b in this instance.\\"}"
    },
    "puz105_custom_681": {
      "hash": "9e595796a7b7b7c297676c2e6139bbb58b8164920388b662734e8701b69c8b6f",
      "content": "{\\"This is a star battle with 1 star per region. Solve the star battle, then read off the braille letters (each \\\\\\"pip\\\\\\" is a 2x2 region, forming a 4x6 braille letters per colored region) to give the answer.\\"}"
    },
    "puz105_custom_702": {
      "hash": "2754eec93cf4ebeadc4c58e69115a3dad976d84ba0cb729c58f24f20def78c19",
      "content": "{\\"This puzzle uses the 3 bitwise operators and 3 west coast states.\\"}<br/>\\n{\\"AND WASHINGTON\\"}<br/>\\n{\\"XOR OREGON\\"}<br/>\\n{\\"OR CALIFORNIA = OR CA\\"}"
    },
    "puz105_custom_704": {
      "hash": "0da775ea2ca6f812cfcaabc9ba7e32878843c72d98894e26c67ad138c2ed4ef5",
      "content": "{\\"The first step is to identify the 5 pictured albums. In puzzle (and alphabetical) order, they are:\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"Electra Heart\\"}<br/>\\n{\\"Instruction\\"}<br/>\\n{\\"It's About Time\\"}<br/>\\n{\\"Lemonade\\"}<br/>\\n{\\"Violent Femmes\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"The next step is to figure out what to do with the word bank. \\\\\\"Hail Marys\\\\\\" and \\\\\\"n-n-n-n-no\\\\\\" can serve as good break-ins, if you Google them alongside the name of an artist from one of the pictured albums. It turns out that these words can be used to construct fragments of lyrics from the following songs (listed in alphabetical order below).\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"Freedom\\"}<br/>\\n{\\"How To Be a Heartbreaker\\"}<br/>\\n{\\"Instruction\\"}<br/>\\n{\\"Kiss Off\\"}<br/>\\n{\\"Six Minutes\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"A notable thing the songs have in common is that they have \\\\\\"counting\\\\\\" segments (which the title also hints at). The number parts of the lyrics are not included in the word bank. There's also another missing word in each song. You can build a table as follows:\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"1 - BABY - How to Be a Heartbreaker\\"}<br/>\\n{\\"2 - BREAK - Six Minutes\\"}<br/>\\n{\\"3 - WAIST - Instruction\\"}<br/>\\n{\\"4 - HEADACHES - Kiss Off\\"}<br/>\\n{\\"5 - POSSESSION - Freedom\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"Now diagonalize: BRIDE\\"}"
    },
    "puz105_custom_705": {
      "hash": "7b19275c3c52964b898f74396cae0f8f54ef11ca38ad8ce023344b1eda2e308c",
      "content": "{\\"the answer to the puzzle is displayed in the diagram, as ED. \\"}<br/>\\n{\\"it represents how much we love galactic.\\"}"
    },
    "puz105_custom_706": {
      "hash": "5bfcd602c4fe5ce59411ef31cdf8af2eaf91d9dd6f6f21b7ffa851ca9922bad1",
      "content": "{\\"Each part of the given image clues a property bigrams can have: US state abbreviation, country abbreviation, element abbreviation, first letter before second letter in alphabet, made of only lines. Evaluating each of the bigrams in the title on these criteria, we get 01011, 01001, 01110, 00100, which makes KIND in five-bit binary.\\"}"
    },
    "puz105_custom_712": {
      "hash": "104436d6147181901e7d4d427f73eb702ceb330bbf2c24f6c3ae1d06cdef9fe7",
      "content": "{\\"The person in the picture is ABRAHAM ANCER (pronounced similar to answer). The answer is ABRAHAM\\"}"
    },
    "puz105_custom_713": {
      "hash": "f39b23ca9213b28a55e7700086ca31f418791bd3f275a3559d3776b59168e1a9",
      "content": "{\\"Each of the puzzle descriptions implies that the puzzle should actually be named another common first name. In order, they are Pat, Chad, Bill, Chase, Rich, Mark, Mason, Iris, Peg, Marina, Lance, Carol, Penny, Dot, John, Joy, Frank, Jack, Pierce. Index into each of the new names by the number of instances of S, E, A, N in the answer (as mentioned in the acrostic of the answers) to get THIS HAS SEAN ON TOO FAR.\\"}"
    },
    "puz105_custom_714": {
      "hash": "89b69e60feff82e8059394f25ebf9e58266268b6c499d1bd521f15512a810753",
      "content": "{\\"These are all puzzle snippets from the CMU Department Store Hunt (as clued by the initials of our team name and the puzzle title).\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"Puzzles:\\"}<br/>\\n{\\"1. Helium Balloons\\"}<br/>\\n{\\"2. Fish Facts #4\\"}<br/>\\n{\\"3. Fruit Salad\\"}<br/>\\n{\\"4. Fish Facts #3\\"}<br/>\\n{\\"5. Fish Facts #9\\"}<br/>\\n{\\"6. Polyrhythms\\"}<br/>\\n{\\"7. Forewords Lost in Translation\\"}<br/>\\n{\\"8. This Puzzle Is Unlockable\\"}<br/>\\n{\\"9. 🇸🇪✝️🔤🧩\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"We then extract the answer by taking the first letter of each puzzle answer (as clued by \\\\\\"initially\\\\\\" in the flavortext).\\"}"
    },
    "puz105_custom_715": {
      "hash": "be2acf7201a435f5e709ccf8eb398aaa4df95072cd2f8166e46f2f21e62fe589",
      "content": "{\\"Identify the spaces with letters A-Z sequentially. Add the bars for the highlighted letters as per pigpen. Graphically the bars spell out dEEP.\\"}"
    },
    "puz105_custom_716": {
      "hash": "56c5ea3b7d9f56d9f1f37217143c763946c9ddda9edf5142cbfad0901231d5a0",
      "content": "{\\"The detailed, formulaic flavor text is searchable to find the Web Escape Game publishing company games2jolly.com. The slapped together text is all taken from the title images of their games, and the acrostic arrangement points to FLASHPOINT as a source of information.\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"Using either the online database search, https://flashpointproject.github.io/flashpoint-database/search/ or a downloaded copy, teams can find the titles cropped, and notice they contain the word ABODE (also shown by the title). Indexing into the full titles give the phrase BYACCIDENT.\\"}"
    },
    "puz105_custom_719": {
      "hash": "8faed2ca94b32f565cb8a7f7dc21b05e7c28bb3ddb93ae789937b9d463f44123",
      "content": "{\\"The inside clues are given in alphabetical order of the answer:\\"}<br/>\\n{\\"AND, ANGLE, ASH, AT, CARE, CO, EARL, ERA, IN, INK, ORAL\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"The \\\\\\"all together\\\\\\" clues are the same inside clues \\\\\\"wrapped\\\\\\" by a two-letter US state abbreviation:\\"}<br/>\\n{\\"WASHY Goes with wishy\\"}<br/>\\n{\\"NEARLY Almost\\"}<br/>\\n{\\"SCARED Afraid\\"}<br/>\\n{\\"ICON Double-click this on your desktop\\"}<br/>\\n{\\"FERAL Wild, undomesticated\\"}<br/>\\n{\\"MORALE Confidence, enthusiasm\\"}<br/>\\n{\\"MINI Skirt, cooper, or iPad\\"}<br/>\\n{\\"WANDA Name of a fish in 1988 cinema\\"}<br/>\\n{\\"KINKY Tightly curled hair, or sexually adventurous\\"}<br/>\\n{\\"OATH Yahoo’s holding company (in 2018)\\"}<br/>\\n{\\"MANGLED Mutilated or disfigured\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"The flavor text hints at state capitals, which are:\\"}<br/>\\n{\\"WY CHEYENNE\\"}<br/>\\n{\\"NY ALBANY\\"}<br/>\\n{\\"SD PIERRE\\"}<br/>\\n{\\"IN INDIANAPOLIS\\"}<br/>\\n{\\"FL TALLAHASSEE\\"}<br/>\\n{\\"ME AUGUSTA\\"}<br/>\\n{\\"MI LANSING\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"WA OLYMPIA\\"}<br/>\\n{\\"KY FRANKFORT\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"OH COLUMBUS\\"}<br/>\\n{\\"MD ANNAPOLIS\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"The first letters of the capitals spell “CAPITAL OF CA” which is SACRAMENTO.\\"}"
    },
    "puz105_custom_735": {
      "hash": "b59194a2128359d05cf7517de6d14cc367b28047296bc02e260aca9cb8ef61a7",
      "content": "{\\"Each slide contains a screenshot from \\\\\\"Top 5? Puzzles I DID in Galactic Puzzle Hunt 2022\\\\\\" (https://youtu.be/ZJFweFz187g), which is a \\\\\\"video history project\\\\\\".  Elements with spoiler information are replaced by text saying \\\\\\"FIND PUZZLE NAMES AND INDEX BY MY RANKING FROM TWO YEARS OF PAST HUNTS.\\\\\\"  Find the respective puzzle and index by the ranking of that video (note that there are two rankings used -- one for 2022 and one for 2021) in the order of presentation to get the answer SPHEROIDAL.  (And stay tuned for the 2023 version!)\\"}"
    },
    "puz105_custom_737": {
      "hash": "59a5f0573a90af53c438a023a488b35cd8e1b3a44a087ce12334875f8dab9dbe",
      "content": "{\\"The answers to the clues are BOTS, JOLT, THRIFT, KOCH, GIF, and BALTIMORE. As clued by the flavortext, all of these are acronyms for various acts that have been introduced to congress.\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"We index into the acronyms (ignoring words not present in the answer) to get a new set of words.\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"Answer | Acronym | Number | Word\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"BOTS | Better Online Tickets Sales Act | 2 | ONLINE\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"JOLT | Jobs Originated through Launching Travel Act | 4 | TRAVEL\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"THRIFT | To Help Reduce Inefficient Federal Tendencies Act | 3 | REDUCE\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"KOCH | Keeping Our Campaigns Honest Act | 4 | HONEST\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"GIF | Global Internet Freedom Act | 1 | GLOBAL\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"BALTIMORE | Building and Lifting Trust In order to Multiply Opportunities and Racial Equality Act | 8 | RACIAL\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"Using the second set of indices we get ORDEAL, this is another act.\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"ORDEAL | Ozone Regulatory Delay and Extension of Assessment Length Act  | 2 | REGULATORY\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"The ! is on the R, which stands for the final answer REGULATORY.\\"}"
    },
    "puz105_custom_748": {
      "hash": "3a354b523333dab74606451b1a8be62547c3035e939c1ad31bab2648cef78995",
      "content": "{\\"The title and flavortext clue the book series Animorphs. The front cover of each book has a main character \\\\\\"morphing\\\\\\" into an animal. The names of the books are:\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"The Warning - Rhinoceros \\"}<br/>\\n{\\"The Attack - Tiger\\"}<br/>\\n{\\"The Resistance - Beaver\\"}<br/>\\n{\\"The Conspiracy - Peregrine falcon\\"}<br/>\\n{\\"The Reaction - Crocodile\\"}<br/>\\n{\\"The Invasion - Green anole lizard\\"}<br/>\\n{\\"The Message - Dolphin\\"}<br/>\\n{\\"The Extreme - Polar bear\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"The first letter of each of these titles (ignoring \\\\\\"The\\\\\\") spells out WARCRIME.\\"}"
    },
    "puz105_custom_749": {
      "hash": "b9f1612b69a8312fb4291bf002411717f853fae051ae889f9640547ee05d5952",
      "content": "{\\"Each of the three words is part of a set, and can be formed across two other unique members of that set.\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"Specifically, ECHO can be formed by quebEC + HOtel (NATO phonetic alphabet), IOWA can be formed by ohIO + WAshington (US states), and PERU can be formed by sãotoméandprínciPE + RUssia (countries). Taking the letters at the indicated positions gives the answer BLOOMS.\\"}"
    },
    "puz105_custom_755": {
      "hash": "ab49865ba020b84aac9b280d4b530278ce38d32cbb5c95e3e4b99b4510ec9b90",
      "content": "{\\"The solutions to the clues, in top-bottom left-right order, are as follows:\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"DENY\\"}<br/>\\n{\\"KNEESOCKS\\"}<br/>\\n{\\"FLEETING\\"}<br/>\\n{\\"PASS\\"}<br/>\\n{\\"PASTELS\\"}<br/>\\n{\\"SOLELY\\"}<br/>\\n{\\"DENSELY\\"}<br/>\\n{\\"SOY\\"}<br/>\\n{\\"FLING\\"}<br/>\\n{\\"KNOCKS\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"The solver should notice that most of these words are similar to each other. Specifically, the shorter words are contained inside the longer words, split on both ends of it:\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"DEN(SEL)Y\\"}<br/>\\n{\\"KN(EES)OCKS\\"}<br/>\\n{\\"PAS(TEL)S\\"}<br/>\\n{\\"FL(EET)ING\\"}<br/>\\n{\\"SO(LEL)Y\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"These extra fragments come about as SEL, EES, TEL, EET, and LEL.\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"By drawing lines between paired clues, the solver should notice that it forms a star, each line having 3 segments (2 triangles, 1 pentagon) attached to it. This implies that the letters should be placed in each segment, written in the direction from short to long answers. After filling in all letters, reading them from top to bottom, left to right, extracts the answer STELLE, the star we all dearly miss.\\"}"
    },
    "puz105_custom_766": {
      "hash": "f883fc03dbe83e2a0553ebb7be1d09c3a9a9c164103945dc4bc603cade8196e1",
      "content": "{\\"On the Netflix series \\\\\\"Bridgerton\\\\\\" (and in Julia Quinn's novels of the same name) Lady Whistledown's alter ego is PENELOPE FEATHERINGTON.  The ton's attempt to uncover her identity is the central mystery of the show for the first few seasons.\\"}"
    },
    "puz105_custom_771": {
      "hash": "dbfeb7c92a93389d8bb1f10547aa4f0df77db2976da1c1383df8dab057d381ca",
      "content": "{\\"As referenced by our team name, \\\\\\"By occupying the leaderboard spot above or below this team, your team hereby agrees to enter trial by combat with the other team adjacent to this one. If we are in first place please disregard\\\\\\", this puzzle references a trial by combat between the teams *dinality and Eggplant Parms adjacent to ours on the leaderboard.\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"Each section of the waiver contains a reference to one of the aforementioned teams. By taking the team name and indexing the subsection into it, we extract the answer, DISARMAMENT TREATY.\\"}"
    },
    "puz105_custom_777": {
      "hash": "b8d0409f1a58736305b18c468c3cb1bf6ff527c88c6e8b4ce66099485785284e",
      "content": "{\\"Answers start with distinct letters A-X and each contain a different permutation of <STAR>, represented as \\\\\\"*\\\\\\" in the enumerations. (In given order, they're VE[RSAT]ILE, MO[RTSA]FE, UNDE[RSTA]ND, KINGDOM HE[ARTS], WILLIAM RANDOLPH HE[ARST], RIGH[T AS R]AIN, XM[AS TR]EE, CONG[RATS], GO[AT'S-R]UE, O[STRA]CIZE, HAWAIIAN GUI[TARS], D[RAST]IC, BRAS[S RAT], NEW[S ART]ICLE, LIBE[RTAS], PIYABU[TR SA]ENGKANOKKUL, TIN[A TRS]TENJAK, I[T'S RA]INING MEN, Q[ASR T]UBA, JAME[S R. TA]NNER, FAST TIME[S AT R]IDGEMONT HIGH, ALL BE[TS AR]E OFF, [STAR], and EX[TRAS].) Using this as a cipher key to decode the string at the bottom gives \\\\\\"LIKE THAT DOG THE QUICK BROWN FOX JUMPS OVER\\\\\\", cluing the answer LAZY.\\"}"
    },
    "puz105_custom_782": {
      "hash": "5df5dfddb0faf67d866c83d672aefe104c5fe19bd79e1eeea67845b87ee04fa9",
      "content": "{\\"Each clue answer is both a card in Hearthstone and an ability in League of Legends. Index the cost of the Hearthstone card into the name of the ability's champion:\\"}<br/>\\n{\\"Mirror Image - [L]EBLANC\\"}<br/>\\n{\\"Obliterate - M[O]RDEKAISER\\"}<br/>\\n{\\"Rake - T[A]LON\\"}<br/>\\n{\\"Bloodlust - TRYN[D]AMERE\\"}<br/>\\n{\\"Rewind - Z[I]LEAN\\"}<br/>\\n{\\"Frostbite - A[N]IVIA\\"}<br/>\\n{\\"Parrrley - [G]ANGPLANK\\"}<br/>\\n{\\"The answer is LOADING.\\"}"
    },
    "puz105_custom_791": {
      "hash": "099cfaf6e811fb15ebe87c93a4ad7abb22e208be369f14383208881d4929d40a",
      "content": "{\\"Each of these are well known instances of incorrectly applied maths equations:\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"π = 3 (common misconception for engineers to approximate pi as 3)\\"}<br/>\\n{\\"9 + 10 = 21 (What's Nine Plus Ten/You Stupid Meme)\\"}<br/>\\n{\\"2 + 2 = 5 (doublethink from Orwell's 1984 novel)\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"Taking each of these as A1Z26 letters gives the answer CUE.\\"}"
    },
    "puz105_custom_792": {
      "hash": "19e3d47e2e5cefaea8877d7c1f83102663b9ae8ac53835ee3b4cb5cddedfb5a6",
      "content": "{\\"This is the 4 pointed common star not the 8 pointed legendary star. The namystic represents the word ‘common’, and solving it identifies that the 4 letters where the star overlaps the namystic circle (indicated by the white circles) are E L S Y, which is an anagram of the answer LYES, a pun on the word lies (since the flavor text contains lies). The double meaning is reflected in the title (false=lies, soap=lyes), which is also a pun on 'false hope'.\\"}"
    },
    "puz105_custom_794": {
      "hash": "b231b29fea3f0cc4914f94b8d7591109fe6ab174adba9b30c76c6d084b5c4950",
      "content": "{\\"As hinted in the title, each clue is cryptically hinting towards a dragon from the \\\\\\"How to Train Your Dragon\\\\\\" franchise (All the dragons below were confirmed using https://howtotrainyourdragon.fandom.com/wiki/Category:Dragon_Species_from_the_Franchise):\\"}<br/>\\n{\\"(F)LIGHTMARE\\"}<br/>\\n{\\"S(I)LK SPANNER\\"}<br/>\\n{\\"THUNDERD(R)UM\\"}<br/>\\n{\\"D(E)ATH SONG\\"}<br/>\\n{\\"(B)EWILDERBEAST\\"}<br/>\\n{\\"SWO(R)DSTEALER\\"}<br/>\\n{\\"SNAPTRAPP(E)R\\"}<br/>\\n{\\"GEMBRE(A)KER\\"}<br/>\\n{\\"TOO(T)HLESS\\"}<br/>\\n{\\"NIG(H)T FURY\\"}"
    },
    "puz105_custom_869": {
      "hash": "e9b772fae3e4c290e3d9b9fd1623cabefe5c785890d9da5918233a41343aaaaf",
      "content": "{\\"Looking at the name of our team, Hummus Appreciation Society, the answer of the puzzle is what we appreciate.\\"}"
    },
    "puz105_custom_894": {
      "hash": "87c8db2979f4601875c252ff02a4bf46d1ba871b47d88cf8534083c19aef69e8",
      "content": "{\\"This puzzle references the anime Polar Bear Cafe, where Penguin is unable to tell apart the 7 identical penguin sisters Penko, Penka, Penna, Penno, Penjolina, Penuelle, and Penmi, and ends up accidentally asking out all of them.\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"We need to match each sister to the correct name. Luckily, Llama explains how to identify them: Penko is the slim one, Penna is the slightly boyish one, Penjolina is the one with a plump beak... just kidding. Unfortunately, we cannot distinguish them in the pictures, as they are identical.\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"Penuelle and Penjolina can be identified, as their names have a different number of letters from everyone else. Since all the names start with \\\\\\"Pen\\\\\\", the first and last extracted letters will be P and E no matter which name is used. This leaves 3 unknown letters. Enumerating all the 5-letter names, each unknown has 3 possibilities, and selecting letters to produce a common word/phrase, we get the answer PEN NAME.\\"}"
    },
    "puz105_custom_954": {
      "hash": "2512f59dfb4041bea602683c45b0dd4db8d39f9de924e133ca07d2b5da517f49",
      "content": "{\\"The answer to the clues are homonym pairs, but only in Dutch, as clued by the title (oNLy) and flavourtext (filmed on an angle). taking the clues with given lengths and pairing them with their Dutch homonyms and then indexing the number in square brackets gives SAUSAGE. Following the theme of the puzzle you can translate sausage into Dutch to get the answer WORST\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"*S*keleton key\\"}<br/>\\n{\\"Bishop  [1]\\"}<br/>\\n{\\"Dutch: loper\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"F*a*rmer\\"}<br/>\\n{\\"Burp [2]\\"}<br/>\\n{\\"Dutch: boer\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"Concl*u*sion\\"}<br/>\\n{\\"lock [6]\\"}<br/>\\n{\\"Dutch: slot\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"Corp*s*es\\"}<br/>\\n{\\"seem [5]\\"}<br/>\\n{\\"Dutch: lijken\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"R*a*sh  \\"}<br/>\\n{\\"outcome [2]\\"}<br/>\\n{\\"Dutch: uitslag\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"Han*g*over\\"}<br/>\\n{\\"tomcat [4]\\"}<br/>\\n{\\"Dutch: kater\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"Tent p*e*g (4 3)  \\"}<br/>\\n{\\"Herring [6]\\"}<br/>\\n{\\"Dutch: haring\\"}"
    },
    "puz105_custom_976": {
      "hash": "bde51af690a87a90fd8b2a257e28b8e636111034666835a2a217986cffbee18a",
      "content": "{\\"Each word can be rotated to reveal a country name with a letter inside of it.\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"MINIMAL - MAL(M)I ni\\"}<br/>\\n{\\"RUPEE - PE(E)RU\\"}<br/>\\n{\\"PANDAN JAM - JA(M)PAN dan\\"}<br/>\\n{\\"DIAMOND COLLECTION - I(O)NDIA mondcollect\\"}<br/>\\n{\\"PRALINE - NEP(R)AL i\\"}<br/>\\n{\\"TACTILE EMAIL - MA(I)LTA ctilee\\"}<br/>\\n{\\"AUTO MACHINE - CHIN(E)A utoma\\"}<br/>\\n{\\"MANGOS - O(S)MAN g\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"The extra letters spell MEMORIES!\\"}"
    },
    "puz105_custom_1032": {
      "hash": "56ab09166e9f8c734f0a296b860d06d6de19f75e0350878664bf1aea7a87e4bf",
      "content": "{\\"The clue above is written in Hangul, the Korean alphabet. The title suggests using morse code, specifically Hangul morse code. By decrypting the Hangul and interpreting them as zeros and ones, you get a binary code of 0110 1 0010 110 100 10 1 0110 0000\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"By doing the xor calculation with the decimal number 47594968 and splitting them by the blanks below, you obtain 1101 11001 1100 1100 0101 11000 .\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"Each separate binary numbers gives an alphabet, thus giving the answer MULLET.\\"}"
    },
    "puz105_custom_1046": {
      "hash": "8bc0d41da1207996caa37aa269a5c822897551ab5c831cee3076232069e582f4",
      "content": "{\\"Solvers might notice that BAD and JET in the flavortext correspond to (2 1 4) and (10 5 20) with the usual A1Z26 substitution; the idea is that the latter is exactly five times the former. This is relevant to the puzzle (although BAD and JET aren't, really).\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"\\\\\\"Signature\\\\\\" indicates the time signature, which is an unusual 4/3. The trick is that each letter in FOUR has a value divisible by 3. So FOUR/3 = (6 15 21 18)/3 = (2 5 7 6).\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"If solvers then convert (2 5 7 6) = BEGF, the extraction is straightforward. The notes B, E, G, F, as indicated by the bass clef, correspond to four blue letters that spell TRIP, an answer somewhat suggested by \\\\\\"movement\\\\\\" and \\\\\\"jet.\\\\\\"\\"}"
    },
    "puz105_custom_1054": {
      "hash": "33bef601b7ba3d22b91ac4d1fab05697ac322a2ed3095f282f2258156b7511bc",
      "content": "{\\"The first two lines show the ASCII codes for * and ?. (A Google search like \\\\\\"42 asterisk\\\\\\" can provide the link to ASCII.) The third line asks the solver to put together 24 and 16 in ASCII. Looking these numbers up somewhere like https://www.asciitable.com/ shows that these are control codes with abbreviations CAN and DLE, leading to the answer CANDLE.\\"}"
    },
    "puz105_custom_1104": {
      "hash": "d0c29d99513369e465647c2710a6e4a56375fae29839d007d96dca25b874e9be",
      "content": "{\\"This question is about triangle centers and their common abbreviations.\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"Googling A Redeveloped Condominium in Quebec gives Le Triangle. \\"}<br/>\\n{\\"\\"}<br/>\\n{\\"I refers to the incenter, the center of the incircle, which is the aforementioned roundabout.\\"}<br/>\\n{\\"\\\\\\"Oh Gee H N9\\\\\\" refer to the Euler line and the triangle centers circumcenter, centroid, orthocenter, and nine-point center, which are arranged in a harmonic bundle on the Euler line.\\"}<br/>\\n{\\"\\"}<br/>\\n{\\" \\\\\\"I was my own conjugate\\\\\\" refers to how the incenter of a triangle is its own isogonal conjugate.\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"The two Fermat(clued by his solution not fitting in the margin) and isodynamic points are \\\\\\"neighbors\\\\\\" in the Encyclopedia of Triangle centers, as X13, X14, X15, X16, and they are also isogonal conjugates of each other.\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"X21 can be found to represent the Schiffler Point in ETC (encyclopedia of triangle centers; clued by the title), and submitting SCHIFFLER solves.\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"(Canned hint: Intersection 21 also lies on the line through H and N9, named after a famous German mathematician).\\"}"
    },
    "puz105_custom_1128": {
      "hash": "0f83ed53fb58ea4ed0019f4aa2fe5c2ae32af405d8b2c6553b44b76b683bf85e",
      "content": "{\\"The seven \\\\\\"constellations\\\\\\" decode to the actors:\\"}<br/>\\n{\\"Robert De Niro, Susan Sarandon, Helen Mirren, Gérard Depardieu, Angelina Jolie and Keira Knightley.\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"The trick to the puzzle is to find out where these stars \\\\\\"meet\\\\\\" - the four films where the obviously overlapping pairs acted together. Then look at those four films, and work out the two stars that were common in the obvious pairs. And the final step, which film were those two actors in.\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"You can use, say, imdb's collaboration tool to make this search simple.\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"Robert De Niro + Angelina Jolie: Shark Tale\\"}<br/>\\n{\\"Keira Knightley + Helen Mirren:  Collateral Beauty\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"Robert De Niro + Gérard Depardieu: 1900\\"}<br/>\\n{\\"Susan Sarandon + Marlon Brando: A Dry White Season\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"Collateral Beauty + Shark Tale: Will Smith\\"}<br/>\\n{\\"A Dry White Season + 1900: Donald Sutherland\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"Will Smith + Donald Sutherland: SIX DEGREES OF SEPARATION\\"}<br/>\\n{\\"\\"}<br/>\\n{\\"which is the answer to how far apart the stars are - both in the sense of the angle between them but also how close all the movie stars are...\\"}"
    },
    "farmer": {
      "hash": "6a5b456ed65ca3c7feffdda8b26f257f9d6a0d21a41f878445b644105ab336f9",
      "content": "Experimenting with the BASE farm, we infer that new words are added to the farm by connecting to the existing word with the closest semantic similarity. Constructing a farm with the topology shown in the target diagram solves the farm and unlocks more farms.\\n\\nSolving subsequent farms unlocks adjacent farms, as well as reveals yellow connecting lines in the map display. A subset of patches in each solved farm is also highlighted as \\"productive\\". We may infer that the highlighted subset of patches all share a common letter that is not present in the patches not highlighted. We extract this letter as the productive letter of each farm.\\n\\nSome strategies that are useful across farms:\\n\\n- The second patch always connects to the first patch. When constructing the first few patches, choose words that are as semantically different as possible.\\n- Avoid adding too many words with similar meanings when constructing the inner patches. For example, rather than adding PIG and CHICKEN to COW, we might prefer to add BEEF and FARM instead. This gives us more control over where future patches get added.\\n- We may use variations of the same word to complete the outer patches. For example, we may add WALKED, WALKS, and WALKING to WALK. Of course, using this trick can make the farm a little less interesting, so we avoided using it in the example farms below.\\n- The algorithm often considers word function a stronger indicator of semantic similarity than conceptual similarity. For example, when given the choice between CELLO or PIANIST, the algorithm prefers to connect CELLIST to PIANIST rather than CELLO. We may use this to our advantage by creating clusters of words with similar function.\\n\\nStrategies for individual farms:\\n\\n- ANIMALS, SPORTS, MUSIC: Be creative! There are more animal-related, sports-related and music-related words than just actual animals, sports and musical genres.\\n- STARS: Start with two words that are very different from each other. Choose generic words that have multiple meanings or are used in a variety of contexts.\\n- EXCLUSIVE: For the inner patches, avoid using words with the letter E, or words with many common letters. This gives us more freedom with the outer patches. It is also easier to rely on the exclusivity constraint to control the topology of the initial patches rather than worrying too much about semantic similarity.\\n- EDIT: Don’t worry too much about semantic similarity. Keep words about the same length for the inner patches, and vary word length more with the outer patches. Use a variety of different letters.\\n- CHAIN: Use a variety of different start and end letters to reduce the chances of patches from connecting to the middle of the chain.\\n- INITIALS: Choose a very common starting letter.\\n- SUBSTRING: Avoid common prefixes and suffixes. Use long words for the inner patches. Avoid reusing the same common substrings for different edges. Don’t worry about semantic similarity at all.\\n- ANAGRAMS: Avoid direct anagrams. Use short words with common letters for the inner patches, and longer words with rarer letters for the outer patches. Don’t worry about semantic similarity at all.\\n- KEYBOARD: Find a group of similar words and keep them for last. Build the rest with trial and error.\\n- SCRABBLE: This farm is intentionally small and relatively easy to complete with some trial and error. The challenge is that this farm’s productive letter has a scrabble score of 4, requiring us to think of words with a large scrabble score.\\n\\n<Table\\n\\theaders={[\\"Farm\\", \\"Example patches\\", \\"Productive letter\\"]}\\n\\tcells={[\\n\\t\\t[\\"BASE\\", \\"FISH, TOMATO, SEA, INSECT, SHARK, ATTACK, TORNADO, KILLER, RED, FRUIT, APPLE, BANANA, PEAR, PASTA, NOODLES, RICE, ITALY, PINK, ORANGE, BLOOD, BEACH, OCEAN, SAIL, GRASSHOPPER, BEE, PEST\\", \\"\\"],\\n\\t\\t[\\"SCRABBLE\\", \\"TRAINS, STRAIN, PORE, STRAIT, VAR, LAW, THE, WAR\\", \\"H\\"],\\n\\t\\t[\\"KEYBOARD\\", \\"POOP, QUEER, PEEP, POO, PEE, PIP, RIP, WOW\\", \\"E\\"],\\n\\t\\t[\\"ANAGRAMS\\", \\"STIR, SIR, STRIP, TRIES, SIT, RISK, RISE, FIRS, STRIKE, STRIDE, SATIRE, TINS, TICS, FITS, STIFF, RIPS, PRIEST, TIPS, STINT, STINK, SNIT, TICKS, CHITS, CITES, FISTS, FLITS\\", \\"N\\"],\\n\\t\\t[\\"STARS\\", \\"NIGHT, FISH, SASHIMI, SALMON, TROUT, COD, SALTWATER, POND, FROG, SCALES, GILLS, TAIL, ANGLERFISH, SEAFOOD, NET, SLEEP, DAY, SHADE, CREEPY, STARS, COOL, SUPPER, EVENING, TIME, LULLABY, MOONLIGHT, NOCTURNE, CLUB\\", \\"H\\"],\\n\\t\\t[\\"SPORTS\\", \\"BASKETBALL, TRIATHLON, RUNNING, SWIMMING, BICYCLE, UNICYCLE, RACE, CAR, SAILING, MOTORCYCLE, HURDLES, STADIUM, BADMINTON, SPEED, TEAMMATE, GOALIE, SHOOTER, PLAYER, HALL, FIELD, POOL, DIVING, ARENA, RACKET, TENNIS, PONG\\", \\"O\\"],\\n\\t\\t[\\"MUSIC\\", \\"BEETHOVEN, CONCERT, PIANO, SYMPHONY, MOZART, BACH, REQUIEM, AMADEUS, CONCERTO, OVERTURE, ORCHESTRAL, CLARINET, TUBA, CELLO, TROMBONE, KEYBOARDIST, DRUMMER, CELLIST, MIDI, MELODY, CHORD, HARMONY, SONG, PERFORMANCE, STAGE, RECITAL\\", \\"U\\"],\\n\\t\\t[\\"EDIT\\", \\"SPARE, PART, SHIRE, PORE, PARED, PATS, ARTY, CHART, POPES, FORK, POSH, HARD, LARD, BARD, SHINS, STILE, SHOE, HOPE, SHALE, SHOWER, SOL, STILL, BILE, GRINS, SPINE, SHINES\\", \\"S\\"],\\n\\t\\t[\\"INITIALS\\", \\"TIGER, TIRE, TURN, TICK, TRAIN, TRACK, TRIP, TWENTY, THREE, THIRTY, TEN, TRANSFORM, TWIST, TRAM, TRANSPORT, TACK, TOE, TICKLE, TACO, TREE, TABLE, TORTA, TORTILLA, THISTLE, TREEHOUSE, TRUNK\\", \\"E\\"],\\n\\t\\t[\\"CHAIN\\", \\"ACROBAT, PASTA, TACTIC, CATALOG, GNAW, WARM, MOLDY, YESTERDAY, YORE, EXECUTE, ENTERTAIN, NOISY, YELL, LOUD, DAMAGING, GUARANTOR, REGISTER, RECORD, DATA, ARITHMETIC, COUNT, TAXATION, NEMESIS, SNACK, KISS, SMOOCH, HUGGING, GIRTH, HAWAII, INDONESIA, ASIA, AZERBAIJAN, NEPAL, LAOS, SPAIN, NORDIC, CLAIM, MARX, XEROX, XYLOPHONE, ELEPHANT, TIGER, RHINO, OSTRICH, HERON, NEST, TURF, FIELD, DITCH\\", \\"F\\"],\\n\\t\\t[\\"SUBSTRING\\", \\"STELLAR, BELLIGERENT, ALARMIST, TELEGRAPH, STEPMOTHER, MISS, ARMS, GIST, HEROICS, SMOTHER, ANTITHESIS, GRADIENT, ELEGANCE, ENTRAPS, LIGATURE, GERRYMANDER, PERENNIAL, PERCH, DIAL, TENNER, RAIDER, FOREMAN, ERROR, GATE, LURE, TURN\\", \\"O\\"],\\n\\t\\t[\\"ANIMALS\\", \\"SALMON, HORSE, BEE, PIG, BOAR, HOG, PORK, EAGLE, SHARK, DONKEY, MULE, ASS, LLAMA, GOLDFISH, CATFISH, TILAPIA, TOADFISH, HOUSEFLY, LADYBUG, BUTTERFLY, DOLPHIN, STINGRAY, EEL, CONDOR, PELICAN, HAWK\\", \\"U\\"],\\n\\t\\t[\\"EXCLUSIVE\\", \\"JAZZ, COOK, COLD, MUSIC, TUBA, BURN, SONG, PASTA, HUMMED, LYRIC, YELL, ESSAY, TEXT, BARD, LULLABY, BAND, SHIVER, WINTER, FREEZE, VIOLIN, HORN, CELLO, FLAME, NOODLE, RICE, FLOUR\\", \\"R\\"],\\n\\t]}\\n/>\\n\\nThe yellow connecting lines in the map display form a path. Starting from the outside, the productive letters for the farms along the path read the cluephrase HENHOUSE FOUR, giving the answer <Answer />."
    },
    "night_of_the_celestials": {
      "hash": "63f07f906b1fedd08c6a4a859b670cba38686460e2c2a2f8e07ecb5cfe952815",
      "content": "For brevity, we refer to each Celestial by their first initial throughout this solution.\\n\\n<Table\\n\\theaders={[\\"Celestial\\", \\"Initial\\", \\"Answer\\"]}\\n\\tcells={[\\n\\t\\t[\\"Big Branch\\", \\"B\\", \\"BOWLER\\"],\\n\\t\\t[\\"Funny Farmer\\", \\"F\\", \\"COOP\\"],\\n\\t\\t[\\"Kid\\", \\"K\\", \\"BUB\\"],\\n\\t\\t[\\"Olive\\", \\"O\\", \\"LIME\\"],\\n\\t\\t[\\"Pom Pom and Mop Mop\\", \\"P\\", \\"GAR\\"],\\n\\t\\t[\\"Rock Lobster\\", \\"R\\", \\"IRIS\\"],\\n\\t\\t[\\"Ten Lions\\", \\"T\\", \\"DIVEST\\"],\\n\\t]}\\n/>\\n\\nThere are 15 total segments in the map, with each of the 5 lines of the star divided into 3 segments. The message that comes with the map implies that the Celestials move across these 15 segments, one at a time. The first line of dialogue describes the initial state, the last line of dialogue describes the final state, and the middle 15 lines of dialogue describe each of the 15 steps.\\n\\nAt each step, a Celestial sees something strange. It turns out that the object that the Celestial sees is actually the answer for another Celestial's puzzle, but with one letter transformed. While matching up the answers, we find that the transformation is always from a letter in ROYGBIV to another letter in ROYGBIV. We may use this observation to uniquely resolve what is seen by the Celestial at every step.\\n\\n<Table\\n\\theaders={[\\"Step number\\", \\"Who is speaking\\", \\"Clue for what is seen\\", \\"What is seen\\", \\"Original answer\\", \\"Who is seen\\"]}\\n\\tcells={[\\n\\t\\t[\\"1\\", \\"B\\", \\"a book of summaries\\", \\"DIGEST\\", \\"DIVEST\\", \\"T\\"],\\n\\t\\t[\\"2\\", \\"T\\", \\"one of Africa’s capital cities\\", \\"LOME\\", \\"LIME\\", \\"O\\"],\\n\\t\\t[\\"3\\", \\"T\\", \\"a RESERVED JAVASCRIPT WORD\\", \\"VAR\\", \\"GAR\\", \\"P\\"],\\n\\t\\t[\\"4\\", \\"F\\", \\"a bacterial disease\\", \\"LYME\\", \\"LIME\\", \\"O\\"],\\n\\t\\t[\\"5\\", \\"T\\", \\"a WETLAND BIRD\\", \\"IBIS\\", \\"IRIS\\", \\"R\\"],\\n\\t\\t[\\"6\\", \\"O\\", \\"a purchase\\", \\"BUY\\", \\"BUB\\", \\"K\\"],\\n\\t\\t[\\"7\\", \\"F\\", \\"a spice mix\\", \\"RUB\\", \\"BUB\\", \\"K\\"],\\n\\t\\t[\\"8\\", \\"F\\", \\"as if they was paddlin’ away\\", \\"OAR\\", \\"GAR\\", \\"P\\"],\\n\\t\\t[\\"9\\", \\"P\\", \\"a (French) color\\", \\"GRIS\\", \\"IRIS\\", \\"R\\"],\\n\\t\\t[\\"10\\", \\"P\\", \\"extremely serious\\", \\"DIREST\\", \\"DIVEST\\", \\"T\\"],\\n\\t\\t[\\"11\\", \\"R\\", \\"one of the NPCs from Redridge Mountain\\", \\"YOWLER\\", \\"BOWLER\\", \\"B\\"],\\n\\t\\t[\\"12\\", \\"B\\", \\"part of a rainbow flag\\", \\"GAY\\", \\"GAR\\", \\"P\\"],\\n\\t\\t[\\"13\\", \\"P\\", \\"knees looked off\\", \\"BOWLEG\\", \\"BOWLER\\", \\"B\\"],\\n\\t\\t[\\"14\\", \\"P\\", \\"a POTATO\\", \\"CROP\\", \\"COOP\\", \\"F\\"],\\n\\t\\t[\\"15\\", \\"O\\", \\"my purchase again\\", \\"BUY\\", \\"BUB\\", \\"K\\"],\\n\\t]}\\n/>\\n\\nAs clued by the flavortext, the Celestials are actually seeing changes in wavelength due to the Doppler effect. The direction of the color shift tells us whether the two Celestials, the Celestial speaking and the Celestial seen, become closer together or farther apart at each step. If the color moves towards red (i.e. redshift), the Celestials move further apart. If the color moves towards violet (i.e. blueshift), the Celestials move closer together. The absolute amount of shift (i.e. distance in ROYGBIV) tells us their relative speed, which the Kid suggests is important. Unless explicitly constrained by the dialogue, it is ambiguous which of the two Celestials is the one that moves at each step.\\n\\n<Table\\n\\theaders={[\\"Step number\\", \\"Who is speaking\\", \\"Who is seen\\", \\"Original letter\\", \\"Transformed letter\\", \\"Relative motion\\", \\"Speed\\", \\"Additional information from dialogue\\"]}\\n\\tcells={[\\n\\t\\t[\\"1\\", \\"B\\", \\"T\\", \\"V\\", \\"G\\", \\"farther\\", \\"3\\", \\"\\"],\\n\\t\\t[\\"2\\", \\"T\\", \\"O\\", \\"I\\", \\"O\\", \\"farther\\", \\"4\\", \\"This step's motion is along the same line as step 1's.\\"],\\n\\t\\t[\\"3\\", \\"T\\", \\"P\\", \\"G\\", \\"V\\", \\"closer\\", \\"3\\", \\"T moves in this step but not in any previous step.\\"],\\n\\t\\t[\\"4\\", \\"F\\", \\"O\\", \\"I\\", \\"Y\\", \\"farther\\", \\"3\\", \\"\\"],\\n\\t\\t[\\"5\\", \\"T\\", \\"R\\", \\"R\\", \\"B\\", \\"closer\\", \\"4\\", \\"\\"],\\n\\t\\t[\\"6\\", \\"O\\", \\"K\\", \\"B\\", \\"Y\\", \\"farther\\", \\"2\\", \\"\\"],\\n\\t\\t[\\"7\\", \\"F\\", \\"K\\", \\"B\\", \\"R\\", \\"farther\\", \\"4\\", \\"K moves onto F's location in step 6.\\"],\\n\\t\\t[\\"8\\", \\"F\\", \\"P\\", \\"G\\", \\"O\\", \\"farther\\", \\"2\\", \\"P and F start at the same location just before this step.\\"],\\n\\t\\t[\\"9\\", \\"P\\", \\"R\\", \\"I\\", \\"G\\", \\"farther\\", \\"2\\", \\"\\"],\\n\\t\\t[\\"10\\", \\"P\\", \\"T\\", \\"V\\", \\"R\\", \\"farther\\", \\"6\\", \\"\\"],\\n\\t\\t[\\"11\\", \\"R\\", \\"B\\", \\"B\\", \\"Y\\", \\"farther\\", \\"2\\", \\"\\"],\\n\\t\\t[\\"12\\", \\"B\\", \\"P\\", \\"R\\", \\"Y\\", \\"closer\\", \\"2\\", \\"B moves in this step.\\"],\\n\\t\\t[\\"13\\", \\"P\\", \\"B\\", \\"R\\", \\"G\\", \\"closer\\", \\"3\\", \\"\\"],\\n\\t\\t[\\"14\\", \\"P\\", \\"F\\", \\"O\\", \\"R\\", \\"farther\\", \\"1\\", \\"\\"],\\n\\t\\t[\\"15\\", \\"O\\", \\"K\\", \\"B\\", \\"Y\\", \\"farther\\", \\"2\\", \\"\\"],\\n\\t]}\\n/>\\n\\nWe may now use this information to determine where everyone was and who moved at every step. Below is one logical path, but there are many possible approaches.\\n\\n<Gallery\\n\\titems={[\\n\\t\\t{\\n\\t\\t\\timages: [\\"sol-00\\"],\\n\\t\\t\\tcaption: \\"Per the first line of dialogue, K and B start together somewhere in the interior of the star. Let's assume that K and B start at the bottom interior node. If they start at any other interior node, the same solution applies but with the map rotated.\\",\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\timages: [\\"sol-01\\"],\\n\\t\\t\\tcaption: \\"We know that in step 1, B and T move farther apart, and in step 2, T and O move farther apart. T says in step 3 that T moved in that step for the first time that night, so B moves in step 1, O moves in step 2, and T moves in step 3.\\",\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\timages: [\\"sol-02\\"],\\n\\t\\t\\tcaption: \\"In order for O to move away from T in step 2, O must start at an interior node. T's dialogue in step 2 implies that K, O and T start on the same line, so this node must be adjacent to the node K starts at. Assume that O starts at the node to the right. If O starts at the node to the left, the same solution applies but with the map flipped.\\",\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\timages: [\\"sol-03\\"],\\n\\t\\t\\tcaption: \\"Since every Celestial except for K and B started on a different node, for T to be on the same line as K and O, T must start at either the bottom-left exterior node or the top-right exterior node. Suppose, for the sake of contradiction, that T starts at the bottom-left. Then, O moves to the top-right exterior node in step 2.\\",\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\timages: [\\"sol-04\\"],\\n\\t\\t\\tcaption: \\"(Case: T starts at the bottom-left) Again using the fact that every Celestial except for K and B starts on a different node, for it to be possible for F to start in K's line of sight and become farther from O in step 4, F must start at the top-right exterior node. Then, in step 4, either O or F moves directly leftwards. The movement cannot be towards the bottom-left as that segment was already traversed by O in step 2.\\",\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\timages: [\\"sol-05\\"],\\n\\t\\t\\tcaption: \\"(Case: T starts at the bottom-left) F must move in step 4 since O is in K's line of sight in step 6.\\",\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\timages: [\\"sol-06\\"],\\n\\t\\t\\tcaption: \\"(Case: T starts at the bottom-left) K must move to the bottom-left exterior node in step 6. This contradicts F's dialogue in step 7, which implies that K and F end up at the same node after step 6.\\",\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\timages: [\\"sol-07\\"],\\n\\t\\t\\tcaption: \\"Thus, T cannot start at the bottom-left exterior node.\\",\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\timages: [\\"sol-08\\"],\\n\\t\\t\\tcaption: \\"We conclude that T starts at the top-right exterior node, B moves to the bottom-left exterior node in step 1, and O moves to the bottom interior node in step 2. B is at an exterior node, so B cannot move away from R in step 11, so B stays at the bottom-left exterior node at least until step 12.\\",\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\timages: [\\"sol-09\\"],\\n\\t\\t\\tcaption: \\"T moves towards P in step 3. P has not moved yet, and does not start in K's line of sight. That means that P starts on one of the top two interior nodes, and T moves directly leftwards in step 3.\\",\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\timages: [\\"sol-10\\"],\\n\\t\\t\\tcaption: \\"In step 4, O and K start in the same position, and F starts on a different node. F becomes farther from O in this step. If F is the one that moves, then F must move to a node not adjacent to K, and stay there until step 6. This contradict F's dialogue in step 7, which implies that K moves onto F's position in step 6. So, O must instead be the one that moves in step 4.\\",\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\timages: [\\"sol-11\\"],\\n\\t\\t\\tcaption: \\"F's dialogue in step 8 implies that F and P are in the same location just before step 8. The initial conditions imply that they could not have been together at the beginning. Before step 8, there is no opportunity for P to move, and F could only have moved in step 7. So F must have moved onto P's position in step 7.\\",\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\timages: [\\"sol-12\\"],\\n\\t\\t\\tcaption: \\"F starts adjacent to K, since K moves onto F's position in step 6, and neither K nor F moves before step 6. Combined with the fact that P does not start in K's line of sight, F can only move onto P's position in step 7 if F starts at the bottom-left interior node and P starts at the top-left interior node.\\",\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\timages: [\\"sol-13\\"],\\n\\t\\t\\tcaption: \\"O moves to the bottom-right in step 4, and K moves up-left in step 6. They both stay at those positions until step 15, when they become farther apart. O is at an exterior node and can't move farther away, so K must move up-left in this step. K's dialogue at the end tells us that this is also where F ends up at by step 15.\\",\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\timages: [\\"sol-14\\"],\\n\\t\\t\\tcaption: \\"B's dialogue in step 12 implies that B moves in this step towards P. The only segment not yet assigned that B can use brings B to the bottom-left interior node. For P and B to become closer together in the immediate next step, P must be at the top exterior node in step 12 and move to the top-left interior node in step 13.\\",\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\timages: [\\"sol-15\\"],\\n\\t\\t\\tcaption: \\"R starts in K's line of sight, on a space not occupied by another Celestial, and is in T's line of sight in step 5. That means that R either starts at the top-left or bottom-right exterior node. We can eliminate the top-left exterior node as a possible starting point for R by showing that the movement in step 5 cannot be along the horizontal line. Looking at the unassigned segments, the left horizontal segment must be traversed by F in step 8 or 14 in order for F to get from the top-left interior node after step 7 to the top-left exterior node by step 15. Similarly, P starts at the top-left interior node before step 8 and ends at the top exterior node after step 10, so P must traverse the middle horizontal segment and then move up in two out of the three steps from step 8 to step 10. That means that neither of the horizontal segments can be traversed by R or T in step 5.\\",\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\timages: [\\"sol-16\\"],\\n\\t\\t\\tcaption: \\"R moves away from B in step 11. The only possible steps that R could have moved in before step 11 are step 5 and step 9. If R doesn't move in step 5, then R also cannot move in step 9, since it gets farther from P, but is already at an exterior node. Therefore, R moves to the bottom-left interior node in step 5, and then doesn't move in step 9, so that it can move away from B to the top-right exterior node in step 11.\\",\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\timages: [\\"sol-17\\"],\\n\\t\\t\\tcaption: \\"The only remaining possible way to construct a movement between the top-right and bottom-right interior nodes is for T to move to the bottom-right interior node in step 10.\\",\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\timages: [\\"sol-18\\"],\\n\\t\\t\\tcaption: \\"P must move right and then up in steps 8 and 9. That leaves F to move left in step 14.\\",\\n\\t\\t},\\n\\t]}\\n\\tanimationHandler=\\"fade\\"\\n\\tcarouselInnerStyle={{\\n\\t\\talignItems: \\"unset\\",\\n\\t\\talignContent: \\"unset\\",\\n\\t\\tmarginBottom: \\"5.5em\\",\\n\\t}}\\n\\timgProps={{\\n\\t\\tmaxWidth: \\"90%\\",\\n\\t}}\\n/>\\n\\nAs suggested by the Kid's dialogue, we compile, for each step, who moved and how fast. For each Celestial that moved, we index their speed into their answer to extract a letter for each step.\\n\\n<Table\\n\\theaders={[\\"Step number\\", \\"Who is speaking\\", \\"Who is seen\\", \\"Who moved\\", \\"Speed\\", \\"Mover's answer\\", \\"Extracted letter\\"]}\\n\\tcells={[\\n\\t\\t[\\"1\\", \\"B\\", \\"T\\", \\"B\\", \\"3\\", \\"BOWLER\\", \\"W\\"],\\n\\t\\t[\\"2\\", \\"T\\", \\"O\\", \\"O\\", \\"4\\", \\"LIME\\", \\"E\\"],\\n\\t\\t[\\"3\\", \\"T\\", \\"P\\", \\"T\\", \\"3\\", \\"DIVEST\\", \\"V\\"],\\n\\t\\t[\\"4\\", \\"F\\", \\"O\\", \\"O\\", \\"3\\", \\"LIME\\", \\"M\\"],\\n\\t\\t[\\"5\\", \\"T\\", \\"R\\", \\"R\\", \\"4\\", \\"IRIS\\", \\"S\\"],\\n\\t\\t[\\"6\\", \\"O\\", \\"K\\", \\"K\\", \\"2\\", \\"BUB\\", \\"U\\"],\\n\\t\\t[\\"7\\", \\"F\\", \\"K\\", \\"F\\", \\"4\\", \\"COOP\\", \\"P\\"],\\n\\t\\t[\\"8\\", \\"F\\", \\"P\\", \\"P\\", \\"2\\", \\"GAR\\", \\"A\\"],\\n\\t\\t[\\"9\\", \\"P\\", \\"R\\", \\"P\\", \\"2\\", \\"GAR\\", \\"A\\"],\\n\\t\\t[\\"10\\", \\"P\\", \\"T\\", \\"T\\", \\"6\\", \\"DIVEST\\", \\"T\\"],\\n\\t\\t[\\"11\\", \\"R\\", \\"B\\", \\"R\\", \\"2\\", \\"IRIS\\", \\"R\\"],\\n\\t\\t[\\"12\\", \\"B\\", \\"P\\", \\"B\\", \\"2\\", \\"BOWLER\\", \\"O\\"],\\n\\t\\t[\\"13\\", \\"P\\", \\"B\\", \\"P\\", \\"3\\", \\"GAR\\", \\"R\\"],\\n\\t\\t[\\"14\\", \\"P\\", \\"F\\", \\"F\\", \\"1\\", \\"COOP\\", \\"C\\"],\\n\\t\\t[\\"15\\", \\"O\\", \\"K\\", \\"K\\", \\"2\\", \\"BUB\\", \\"U\\"],\\n\\t]}\\n/>\\n\\nFinally, we write each the extracted letters back onto the map on the segment that the Celestial traversed.\\n\\n<Image name=\\"extraction\\" center />\\n\\nWe may draw a five-pointed star in a single stroke by moving from exterior node to exterior node, starting at any one of the exterior nodes and moving in one of two directions. This is similar to a cycle ordering with no well-defined direction, or start and end. Only one of the reading orders gives a compelling, punny answer, which is that the commotion of the night was caused by a <Answer />."
    },
    "olive": {
      "hash": "c0550abbcca2d99fc5ae170ce60cc938d527c4a13316d17f1c7a118b3c536ce2",
      "content": "you collected all my marks and penlights by wishing? thank you so much!!\\n\\nall my penlights are youtube membership emotes for my oshis, my idols, my hololive members!! if you have a membership to their channel and you type these in their chats, you get a penlight emote! you can find a list of them here:\\n\\n[Hololive Fan Wiki/Membership Emotes](https://hololive.wiki/wiki/Membership_Emotes)\\n\\nthere are a few quirks about these emotes i should explain..\\n\\nevery youtube channel with memberships enabled gives access to custom emotes. every emote is surrounded by \`:\` characters! now the channel can set a “[family name](\\nhttps://support.google.com/youtube/answer/7544492?hl=en#zippy=%2Cmembers-only-custom-emoji)” or prefix, which comes before every emote. the default prefix is just an underscore \`_\`. most holomems don’t have a prefix set, but some do. that’s why for example \`:_スバルすばるさいりうむ:\` has repeated names – the first bit is subaru’s emote prefix and the rest is her emote name!!\\n\\nnow this means that there are some ambiguities in what penlight an emote refers to, especially when lots of holomems use the default prefix. for example, these emotes are used by a bunch of members!\\n\\n<span>\`:_サイリウム:\` <Image maxWidth=\\"32px\\" style={{display: \\"inline\\", verticalAlign: \\"sub\\", height: \\"32px\\", margin: \\"0\\"}} name=\\"emote-ayame12\\"/><Image maxWidth=\\"32px\\" style={{display: \\"inline\\", verticalAlign: \\"sub\\", height: \\"32px\\", margin: \\"0\\"}} name=\\"emote-okayu31\\"/><Image maxWidth=\\"32px\\" style={{display: \\"inline\\", verticalAlign: \\"sub\\", height: \\"32px\\", margin: \\"0\\"}} name=\\"emote-chloe13\\"/><Image maxWidth=\\"32px\\" style={{display: \\"inline\\", verticalAlign: \\"sub\\", height: \\"32px\\", margin: \\"0\\"}} name=\\"emote-ao2\\"/></span><p></p>\\n\\n<span>\`:_ペンライト:\` <Image maxWidth=\\"32px\\" style={{display: \\"inline\\", verticalAlign: \\"sub\\", height: \\"32px\\", margin: \\"0\\"}} name=\\"emote-haato24\\"/><Image maxWidth=\\"32px\\" style={{display: \\"inline\\", verticalAlign: \\"sub\\", height: \\"32px\\", margin: \\"0\\"}} name=\\"emote-kanade4\\"/></span><p></p>\\n\\n<span>\`:_lightstick:\`<Image maxWidth=\\"32px\\" style={{display: \\"inline\\", verticalAlign: \\"sub\\", height: \\"32px\\", margin: \\"0\\"}} name=\\"emote-risu3\\"/><Image maxWidth=\\"32px\\" style={{display: \\"inline\\", verticalAlign: \\"sub\\", height: \\"32px\\", margin: \\"0\\"}} name=\\"emote-ollie1\\"/><Image maxWidth=\\"32px\\" style={{display: \\"inline\\", verticalAlign: \\"sub\\", height: \\"32px\\", margin: \\"0\\"}} name=\\"emote-reine1\\"/><Image maxWidth=\\"32px\\" style={{display: \\"inline\\", verticalAlign: \\"sub\\", height: \\"32px\\", margin: \\"0\\"}} name=\\"emote-zeta4\\"/></span><p></p>\\n\\nmy 27 oshi marks are given to disambiguate them. there are exactly 27 unique penlights in the grid of 289! all my oshi marks are one or two emoji that represent my oshis, my idols, my hololive members!! you can find them on the [hololive fan wiki](https://hololive.wiki/wiki/Members) or on their twitters.\\n\\nso each mark corresponds to a penlight emote from that member! all the marks are sorted by emote name in alpha, then gojūon kana, then kanji order.\\n\\n<Table\\n  headers={[\\"mark\\", \\"member\\", \\"emote\\", \\"penlight\\"]}\\n  cells={[\\n    [<Twemoji>🔎</Twemoji>, \\"Watson Amelia\\", <code>:_ameGatorIdol:</code>,\\n      <Image maxWidth=\\"32px\\" style={{height: \\"32px\\", margin: \\"0\\"}} name=\\"emote-ame50\\"/>],\\n    [<Twemoji>🎪</Twemoji>, \\"Omaru Polka\\", <code>:_banana:</code>,\\n      <Image maxWidth=\\"32px\\" style={{height: \\"32px\\", margin: \\"0\\"}} name=\\"emote-polka29\\"/>],\\n    [<Twemoji>💄</Twemoji>, \\"Elizabeth Rose Bloodflame\\", <code>:_bluestick:</code>,\\n      <Image maxWidth=\\"32px\\" style={{height: \\"32px\\", margin: \\"0\\"}} name=\\"emote-liz5\\"/>],\\n    [<Twemoji>🪶</Twemoji>, \\"Nanashi Mumei\\", <code>:_glowstickR:</code>,\\n      <Image maxWidth=\\"32px\\" style={{height: \\"32px\\", margin: \\"0\\"}} name=\\"emote-mumei39\\"/>],\\n    [<Twemoji>🌿</Twemoji>, \\"Ceres Fauna\\", <code>:_greenlight:</code>,\\n      <Image maxWidth=\\"32px\\" style={{height: \\"32px\\", margin: \\"0\\"}} name=\\"emote-fauna24\\"/>],\\n    [<Twemoji>💎</Twemoji>, \\"IRyS\\", <code>:_irysBread2:</code>,\\n      <Image maxWidth=\\"32px\\" style={{height: \\"32px\\", margin: \\"0\\"}} name=\\"emote-irys19\\"/>],\\n    [<Twemoji>💎</Twemoji>, \\"IRyS\\", <code>:_irysLight2:</code>,\\n      <Image maxWidth=\\"32px\\" style={{height: \\"32px\\", margin: \\"0\\"}} name=\\"emote-irys18\\"/>],\\n    [<Twemoji>🍃</Twemoji>, \\"Kazama Iroha\\", <code>:_light1:</code>,\\n      <Image maxWidth=\\"32px\\" style={{height: \\"32px\\", margin: \\"0\\"}} name=\\"emote-iroha2\\"/>],\\n    [<Twemoji>🪶</Twemoji>, \\"Nanashi Mumei\\", <code>:_lightbulb:</code>,\\n      <Image maxWidth=\\"32px\\" style={{height: \\"32px\\", margin: \\"0\\"}} name=\\"emote-mumei40\\"/>],\\n    [<Twemoji>🔮</Twemoji>, \\"Moona Hoshinova\\", <code>:_LSL:</code>,\\n      <Image maxWidth=\\"32px\\" style={{height: \\"32px\\", margin: \\"0\\"}} name=\\"emote-moona34\\"/>],\\n    [<Twemoji>🎨</Twemoji>, \\"Airani Iofifteen\\", <code>:_LSright:</code>,\\n      <Image maxWidth=\\"32px\\" style={{height: \\"32px\\", margin: \\"0\\"}} name=\\"emote-iofi9\\"/>],\\n    [<Twemoji>🌲</Twemoji>, \\"Ookami Mio\\", <code>:_mioサイリウム:</code>,\\n      <Image maxWidth=\\"32px\\" style={{height: \\"32px\\", margin: \\"0\\"}} name=\\"emote-mio22\\"/>],\\n    [<Twemoji>🐾</Twemoji>, \\"Fuwawa & Mococo Abyssgard\\", <code>:_MOCOlight:</code>,\\n      <Image maxWidth=\\"32px\\" style={{height: \\"32px\\", margin: \\"0\\"}} name=\\"emote-fuwamoco12\\"/>],\\n    [<Twemoji>👯</Twemoji>, \\"Usada Pekora\\", <code>:_pekoサイリウム:</code>,\\n      <Image maxWidth=\\"32px\\" style={{height: \\"32px\\", margin: \\"0\\"}} name=\\"emote-pekora6\\"/>],\\n    [<Twemoji>🐧⚡️</Twemoji>, \\"Todoroki Hajime\\", <code>:_penraito:</code>,\\n      <Image maxWidth=\\"32px\\" style={{height: \\"32px\\", margin: \\"0\\"}} name=\\"emote-hajime6\\"/>],\\n    [<Twemoji>🌿</Twemoji>, \\"Ceres Fauna\\", <code>:_pinklight:</code>,\\n      <Image maxWidth=\\"32px\\" style={{height: \\"32px\\", margin: \\"0\\"}} name=\\"emote-fauna23\\"/>],\\n    [<Twemoji>👾</Twemoji>, \\"Tokoyami Towa\\", <code>:_psyllium12:</code>,\\n      <Image maxWidth=\\"32px\\" style={{height: \\"32px\\", margin: \\"0\\"}} name=\\"emote-towa44\\"/>],\\n    [<Twemoji>👾</Twemoji>, \\"Tokoyami Towa\\", <code>:_psyllium5:</code>,\\n      <Image maxWidth=\\"32px\\" style={{height: \\"32px\\", margin: \\"0\\"}} name=\\"emote-towa37\\"/>],\\n    [<Twemoji>👾</Twemoji>, \\"Tokoyami Towa\\", <code>:_psyllium6:</code>,\\n      <Image maxWidth=\\"32px\\" style={{height: \\"32px\\", margin: \\"0\\"}} name=\\"emote-towa38\\"/>],\\n    [<Twemoji>👾</Twemoji>, \\"Tokoyami Towa\\", <code>:_psyllium8:</code>,\\n      <Image maxWidth=\\"32px\\" style={{height: \\"32px\\", margin: \\"0\\"}} name=\\"emote-towa40\\"/>],\\n    [<Twemoji>🔥</Twemoji>, \\"Shiranui Flare\\", <code>:_song:</code>,\\n      <Image maxWidth=\\"32px\\" style={{height: \\"32px\\", margin: \\"0\\"}} name=\\"emote-flare47\\"/>],\\n    [<Twemoji>🍙</Twemoji>, \\"Nekomata Okayu\\", <code>:_サイリウム:</code>,\\n      <Image maxWidth=\\"32px\\" style={{height: \\"32px\\", margin: \\"0\\"}} name=\\"emote-okayu31\\"/>],\\n    [<Twemoji>🚑</Twemoji>, \\"Oozora Subaru\\", <code>:_スバルすばるさいりうむ:</code>,\\n      <Image maxWidth=\\"32px\\" style={{height: \\"32px\\", margin: \\"0\\"}} name=\\"emote-subaru15\\"/>],\\n    [<Twemoji>🛸💜</Twemoji>, \\"La+ Darknesss\\", <code>:_はてな:</code>,\\n      <Image maxWidth=\\"32px\\" style={{height: \\"32px\\", margin: \\"0\\"}} name=\\"emote-laplus8\\"/>],\\n    [<Twemoji>🍬</Twemoji>, \\"Himemori Luna\\", <code>:_ペンラ8:</code>,\\n      <Image maxWidth=\\"32px\\" style={{height: \\"32px\\", margin: \\"0\\"}} name=\\"emote-luna39\\"/>],\\n    [<Twemoji>🎹✨</Twemoji>, \\"Otonose Kanade\\", <code>:_ペンライト:</code>,\\n      <Image maxWidth=\\"32px\\" style={{height: \\"32px\\", margin: \\"0\\"}} name=\\"emote-kanade4\\"/>],\\n    [<Twemoji>🐏</Twemoji>, \\"Tsunomaki Watame\\", <code>:_緑ペンラ:</code>,\\n      <Image maxWidth=\\"32px\\" style={{height: \\"32px\\", margin: \\"0\\"}} name=\\"emote-watame22\\"/>],\\n  ]}\\n/>\\n\\nhang on!!!!!!! two of those aren’t penlights!!! (≖≖≖≖_≖≖≖≖ )\\n\\noh well let’s see what my arrangement of penlights looks like!!!\\n\\n<Image fullWidth name=\\"sticks\\"/>\\n\\nholey moley!! is that ... what is that??? wait a minute! the lightbulbs and question marks in the top left... we’re looking for something that looks like this and has four letters??? (,,\\\\>\\\\>\\\\>\\\\>﹏\\\\<\\\\<\\\\<\\\\<,,)\\n\\n*squints* (≣ᨓ≣ )\\n\\n<Image maxWidth=\\"100px\\" name=\\"sticks\\"/>\\n\\naha! it’s a slice of <Answer />, that’s the answer!\\n\\n\\n\\n\\n<AuthorsNotes>\\n\\nThe most common glowstick brand (the chemical kind you snap to activate) in Japan is Cyalume, or サイリウム. Coincidentally, サイリウム is also how you spell “psyllium”, i.e., the plant whose husk you consume as fiber supplement to poop better. That’s why a bunch of members have penlights named “psyllium”. We were very confused when searching images for “サイリウム”.\\n\\nHolo ID members are K-pop influenced, as they often refer to their emote as “lightstick” (the Korean name) as opposed to “penlight” (the Japanese name).\\n\\nPrincess [Luna](https://hololive.wiki/wiki/Membership_Emotes#Himemori_Luna) wins the emote contest with 13 different penlights.\\n\\n[Polka](https://hololive.wiki/wiki/Membership_Emotes#Omaru_Polka) has a bunch of penlight emotes named \`:_Pen#:\`... except one.\\n\\n<span>Exercise left to the reader: <Image maxWidth=\\"32px\\" style={{display: \\"inline\\", verticalAlign: \\"sub\\", height: \\"32px\\", margin: \\"0\\"}} name=\\"emote-polka5\\" /><Image maxWidth=\\"32px\\" style={{display: \\"inline\\", verticalAlign: \\"sub\\", height: \\"32px\\", margin: \\"0\\"}} name=\\"emote-botan22\\" /><Image maxWidth=\\"32px\\" style={{display: \\"inline\\", verticalAlign: \\"sub\\", height: \\"32px\\", margin: \\"0\\"}} name=\\"emote-botan23\\" /><Image maxWidth=\\"32px\\" style={{display: \\"inline\\", verticalAlign: \\"sub\\", height: \\"32px\\", margin: \\"0\\"}} name=\\"emote-botan24\\" /><Image maxWidth=\\"32px\\" style={{display: \\"inline\\", verticalAlign: \\"sub\\", height: \\"32px\\", margin: \\"0\\"}} name=\\"emote-polka5\\" /></span><p></p>\\n\\nI was unable to find any videos of ヲタ芸 (in particular, [cyalume dance](https://youtu.be/7Yzv0kqG00E)) performed with four lights per hand. Please now imagine a spider cheering with all eight legs.\\n\\n<Image maxWidth=\\"32px\\" style={{display: \\"inline\\", verticalAlign: \\"sub\\", height: \\"32px\\", margin: \\"0\\"}} name=\\"emote-aqua28\\"/><span>thank you aqua</span><Image maxWidth=\\"32px\\" style={{display: \\"inline\\", verticalAlign: \\"sub\\", height: \\"32px\\", margin: \\"0\\"}} name=\\"emote-aqua35\\" />&nbsp;\\n<Image maxWidth=\\"32px\\" style={{display: \\"inline\\", verticalAlign: \\"sub\\", height: \\"32px\\", margin: \\"0\\"}} name=\\"emote-ame50\\"/><span>thank you ame&nbsp;</span><Image maxWidth=\\"32px\\" style={{display: \\"inline\\", verticalAlign: \\"sub\\", height: \\"32px\\", margin: \\"0\\"}} name=\\"emote-ame50\\" />\\n\\n</AuthorsNotes>\\n\\n#### Behind the Scenes\\n\\n<Gallery items={[\\n  {\\n    images: [\\"bts1\\", \\"bts2\\", \\"bts3\\", \\"bts4\\"],\\n    caption: \\"The first collages were generated using various image mosaic libraries. They all looked terrible.\\",\\n    halfwidth: true,\\n  }, \\n  {\\n    images: [\\"bts5\\"],\\n    caption: \\"Attempting to make the collage by hand.\\",\\n  },\\n  {\\n    images: [\\"bts6\\"],\\n    caption: \\"Attempting to make the collage by hand.\\\\nWhat the heck does a lime look like?\\",\\n  },\\n  {\\n    images: [\\"bts7\\"],\\n    caption: \\"Attempting to make the collage by hand.\\",\\n  },\\n  {\\n    images: [\\"bts8\\"],\\n    caption: \\"The first draft of the puzzle.\\",\\n  },\\n  {\\n    images: [\\"bts9\\"],\\n    caption: \\"Testsolving the first draft.\\",\\n  },\\n  {\\n    images: [\\"bts10\\"],\\n    caption: \\"The second draft of the puzzle.\\",\\n  },\\n  {\\n    images: [\\"bts11\\"],\\n    caption: \\"Testsolving the second draft. They ignored the marks, hence some imposters.\\",\\n  },\\n  {\\n    images: [\\"bts12\\"],\\n    caption: \\"Uploading 2500+ images to the Hololive Wiki.\\",\\n  },\\n  \\n]} />"
    },
    "pom_pom": {
      "hash": "929d36ee0bffedbbe5e606c6930e7a86c03472b43fefd9e6e1db7f30b4a8678f",
      "content": "Each sentence said by Pom Pom and Mop Mop clues a word. Mop Mop always speaks backwards. Written backwards, the answers for each of Mop Mop’s lines are the same sequence of 13 characters as the answers for one of Pom Pom’s lines. Mop Mop’s clues are in alphabetical order while Pom Pom’s clues are numbered, indicating that we should sort the matched sequences in Pom Pom’s order to recover a 13-by-13 grid of letters.\\n\\n<Table\\n\\theaders={[\\"Pom Pom’s clues\\", \\"Pom Pom’s answers\\", \\"Mop Mop’s answers\\", \\"Mop Mop’s clues\\"]}\\n\\tcells={[\\n[\\"Letter homophone. Plant home. Disney song that rhymes with “cabbages”.\\", \\"ARE, POT, SAVAGES\\", \\"SEGA, VAST, OPERA\\", \\"Console maker. Massive. Web browser.\\"],\\n[\\"Runs. Best. Yet.\\", \\"FLOWS, ELITE, BUT\\", \\"TUBE, TILES, WOLF\\", \\"Internet component, metaphorically. Game pieces. Chow (down).\\"],\\n[\\"Sound tomatoes make. Wheel with eyes, for example. A racer or diner might wear this.\\", \\"SPLAT, ANGEL, BIB\\", \\"BIBLE, GNAT, ALPS\\", \\"Popular book. Fly. Mountain range.\\"],\\n[\\"Style of eggs. Six pack. Something you do to balls and eyelashes.\\", \\"DEVILED, ABS, BAT\\", \\"TABS, BADE, LIVED\\", \\"You have too many of them open. Ordered. Stayed.\\"],\\n[\\"Tennis unit. Period. Judge. Animal home.\\", \\"SET, AGE, RATE, ZOO\\", \\"OOZE, TARE, GATES\\", \\"What slimes do. Zero. Heaven, Hell, and circuits have them.\\"],\\n[\\"Blood and still lifes get ____. Emerge. Unrefined.\\", \\"DRAWN, ARISE, RAW\\", \\"WARES, IRAN, WARD\\", \\"Things you hawk. Modern Persia. District.\\"],\\n[\\"Glasses holder. Quote. Rush.\\", \\"NOSE, CITE, SPEED\\", \\"DEEP-SET, ICE, SON\\", \\"Hyphenated word used to describe eyes. Glaze. Boy.\\"],\\n[\\"It may follow H or K. Add. 100%. Soda.\\", \\"MART, SUM, ONE, POP\\", \\"POPENO, MUST, RAM\\", \\"Opposite of Popeyes? Mold. Zodiac animal.\\"],\\n[\\"Something that brands, files, and you have. Legend. Type of race.\\", \\"NAME, TALE, RELAY\\", \\"YALE, RELATE, MAN\\", \\"Ivy League university. Empathize. Mail, fire, and snow are types.\\"],\\n[\\"An eagle eats one per day. Lozenge shape. Seethe.\\", \\"LIVER, OVAL, FUME\\", \\"EMU, FLAVOR, EVIL\\", \\"Flightless bird. Taste. An alignment.\\"],\\n[\\"Where teeth come from. Also. Wound.\\", \\"GUMS, TOO, LESION\\", \\"NOISE, LOOTS, MUG\\", \\"Sound. What a pirate does. Face.\\"],\\n[\\"Vertex. Execute. Error.\\", \\"NODE, KILL, LAPSE\\", \\"ESP, ALL, LIKE, DON\\", \\"Sixth sense. Everyone. Fancy. Mafia member.\\"],\\n[\\"Something you may have in your hair. It is known for its unique flag shape. ____ bear.\\", \\"PART, NEPAL, POOH\\", \\"HOOP, LAP, ENTRAP\\", \\"Ring. Circle. Snare.\\"],\\n\\t]}\\n/>\\n\\n<PuzzleGrid text={\`\\nAREPOTSAVAGES\\nFLOWSELITEBUT\\nSPLATANGELBIB\\nDEVILEDABSBAT\\nSETAGERATEZOO\\nDRAWNARISERAW\\nNOSECITESPEED\\nMARTSUMONEPOP\\nNAMETALERELAY\\nLIVEROVALFUME\\nGUMSTOOLESION\\nNODEKILLLAPSE\\nPARTNEPALPOOH\\n\`.trim().split(\\"\\\\n\\").join(\\"|\\")} optionsOverride={{\\"data-fill-classes\\":\\"white black\\"}}/>\\n\\nThe grid is square. To extract, read the two diagonals to receive one final clue from Pom Pom and one for Mop Mop. Pom Pom’s clue is “ALLIGATOR FISH”. Mop Mop’s clue is “SUBSTITUTE MOP” backwards. The answer to Pom Pom’s clue, GAR, is the same as the answer to Mop Mop’s clue, RAG, backwards. The final answer is <Answer />."
    },
    "puz1": {
      "hash": "16f54d9c2ccc538b885620ddefba607636666bf6a834d3382595c71b0d05197d",
      "content": "Each clue has multiple possible answers. Exactly one of these answers for each clue begins with the letter A, as clued by the title and the fact that all clues begin with \\"A\\".\\n\\nThe clues are in alphabetical order, suggesting we need to reorder them. The fact that some of the answers are part of numbered sets (Seven Summits, Eight-Nation Alliance, Four Corners states, etc.) hints at the ordering, which is to sort by the number of possible answers to each clue.\\n\\n<Table\\n\\theaders={[\\"Clue\\", \\"Number of answers\\", \\"\\\\\\"A\\\\\\" answer\\", \\"Letter\\"]}\\n\\tcells={[\\n\\t\\t[\\"A type of aurora associated with a hemisphere (6)\\", \\"2\\", \\"AUSTRALIS\\", \\"A\\"],\\n\\t\\t[\\"A Leeward Antilles island owned by the Netherlands (4)\\", \\"3\\", \\"ARUBA\\", \\"B\\"],\\n\\t\\t[\\"A US state touching a monument at 36.99898°N 109.04517°W (7)\\", \\"4\\", \\"ARIZONA\\", \\"A\\"],\\n\\t\\t[\\"A child who visited Willy Wonka's factory (5)\\", \\"5\\", \\"AUGUSTUS\\", \\"S\\"],\\n\\t\\t[\\"A halogen (8)\\", \\"6\\", \\"ASTATINE\\", \\"E\\"],\\n\\t\\t[\\"A highest mountain on a continent (8)\\", \\"7\\", \\"ACONCAGUA\\", \\"U\\"],\\n\\t\\t[\\"A nation in the alliance that suppressed the Boxer Rebellion (10)\\", \\"8\\", \\"AUSTRIA-HUNGARY\\", \\"N\\"],\\n\\t\\t[\\"A character seen in the opening sequence of The Brady Bunch (3)\\", \\"9\\", \\"ALICE\\", \\"I\\"],\\n\\t\\t[\\"A mineral in the Mohs scale (4)\\", \\"10\\", \\"APATITE\\", \\"T\\"],\\n\\t]}\\n/>\\n\\nIndexing into the answers with the provided indices spells out the cluephrase A BASE UNIT. The SI base unit that begins with A, which is also represented by an A, is the <Answer />."
    },
    "puz10": {
      "hash": "dfb5114a3570084e4b3e2e6b7aa8b745380ac266c057ff5f3c69f78c72fa7dee",
      "content": "Put in numbers that are five letters long when spelled out, in ascending order:\\n\\n<PuzzleGrid\\n\\ttext=\\"THREE|SEVEN|EIGHT|FORTY|FIFTY|SIXTY|TEENY\\"\\n\\toptionsOverride={{\\n\\t\\t\\"data-fill-classes\\":\\"white wordle-gray wordle-yellow wordle-green\\",\\n\\t\\t\\"data-fills\\":[\\"31122\\",\\"13122\\",\\"21112\\",\\"11123\\",\\"11123\\",\\"11123\\",\\"33333\\"],\\n\\t\\t\\"data-left-clues\\": \\"A|B|C|D|E|F|\\",\\n\\t}}\\n/>\\n\\nThe resulting Wordle solves to <Answer />."
    },
    "puz100": {
      "hash": "7f7d3053391bda31c4138f5426b8b01b170eafca066db11423350d0e9baa0e72",
      "content": "Each of the painting puzzles uses a different part of the Windows 11 MS Paint ribbon between the Selection and Cocreator panels. The square refers to the icon on the Selection panel and the 4-pointed star can be found in the icon on the Cocreator panel. The panels in between are Image, Tools, Brushes, Shapes, Size, and Colors. In the latest MS Paint update released in March 2024, the Size selector was moved to the left side, as indicated by the red arrow.\\n\\n<Image fullWidth />\\n\\n<Table\\n\\theaders={[\\"Panel\\", \\"Feeder answer\\", \\"Index\\", \\"Letter\\"]}\\n\\tcells={[\\n\\t\\t[\\"Image\\", \\"MATRIX\\", \\"4, 1\\", \\"R, M\\"],\\n\\t\\t[\\"Tools\\", \\"SIGNAL\\", \\"5\\", \\"A\\"],\\n\\t\\t[\\"Brushes\\", \\"GALLERIES\\", \\"9\\", \\"S\\"],\\n\\t\\t[\\"Shapes\\", \\"HALT\\", \\"4\\", \\"T\\"],\\n\\t\\t[\\"Size\\", \\"CHEAP\\", \\"3\\", \\"E\\"],\\n\\t\\t[\\"Colors\\", \\"COLOR\\", \\"5\\", \\"R\\"],\\n\\t]}\\n/>\\n\\nUsing the given numbers to index into the answers gives RASTER on top and MASTER at the bottom. The answer is <Answer />, a fitting answer after demonstrating your expertise in various parts of the raster image editor toolbox."
    },
    "puz101": {
      "hash": "738f3f51eacead3a6a4895f6439e4c8040cb51f5c53fa895800e56ae4bf76786",
      "content": "The two fish are a [drum](https://en.wikipedia.org/wiki/Freshwater_drum) and a [bass](https://en.wikipedia.org/wiki/Bass_(fish)). Together, they make the musical electronic dance music genre <Answer />"
    },
    "puz103": {
      "hash": "b128872568853fd0e4c444af12e71581892c91ff2a15b4df26bb4739941d87e7",
      "content": "The shapes of the various landmarks in the map, along with the flavortext, suggest that the map actually depicts the inside of the human body. The name of each landmark shares its word length(s) and a single common letter (in the same position) with the organ it represents.\\n\\n<Table\\nheaders={[\\"Landmark name\\", \\"Organ\\", \\"Common letter\\"]}\\ncells={[\\n  [\\"POOL(S)\\", \\"LUNG(S)\\", \\"S\\"],\\n  [\\"(W)ATERWAY\\", \\"(W)INDPIPE\\", \\"W\\"],\\n  [\\"UPPER FISHER(I)ES\\", \\"LARGE INTEST(I)NE\\", \\"I\\"],\\n  [\\"COM(M)ONS\\", \\"STO(M)ACH\\", \\"M\\"],\\n  [\\"(M)INES\\", \\"(M)OUTH\\", \\"M\\"],\\n  [\\"LOWER FISHER(I)ES\\", \\"SMALL INTEST(I)NE\\", \\"I\\"],\\n  [\\"(N)AVY\\", \\"(N)OSE\\", \\"N\\"],\\n  [\\"SUBMER(G)ED\\", \\"ESOPHA(G)US\\", \\"G\\"],\\n]}\\n/>\\n\\nThe arrow on the top left indicates that we should extract from the landmarks from top to bottom, based on where their names appear on the map. Reading off the common letters gives the answer, <Answer />.\\n\\n<AuthorsNotes>\\nYes, the mountains represent the buttocks.\\n</AuthorsNotes>"
    },
    "puz104": {
      "hash": "5681225b6ac0b8ffba311852ac115b27cf82226a38a223d95a108dbba80c9882",
      "content": "Each sentence in the text contains a pair of words that does not fit with the rest of the sentence. As suggested by the flavortext, each word pair represents a single compound Chinese character. Each character may be split horizontally into two components, which directly translate to the two words in each word pair. In addition, the characters make sense semantically in place of their respective word pairs in the text.\\n\\nTo identify the characters, solvers may search for candidate radicals or characters matching the words in each word pair, then use handwriting recognition software or radical/stroke dictionaries to check for suitable combinations. One of the most effective tools for this is the handwriting recognition feature in Google Translate.\\n\\n<Table\\nheaders={[\\"Word pair\\", \\"Chinese character\\", \\"Meaning\\", \\"Pinyin\\"]}\\ncells={[\\n  [\\"GRAIN KNIFE\\", \\"利\\", \\"BENEFIT\\", \\"lì\\"],\\n  [\\"MOUTH DISTRICT\\", \\"呕\\", \\"VOMITING\\", \\"ǒu\\"],\\n  [\\"DOG BUG\\", \\"独\\", \\"ALONE\\", \\"dú\\"],\\n  [\\"MEAT DRY\\", \\"肝\\", \\"LIVER\\", \\"gān\\"],\\n  [\\"EAT ME\\", \\"饿\\", \\"HUNGRY\\", \\"è\\"],\\n]}\\n/>\\n\\nThe first letters of the characters' pinyin give the answer, <Answer />."
    },
    "puz105": {
      "hash": "70c010ec8f99aaf1fc4158ca9ad9cac50d5067acec6c075984b3ba36d9fd310c",
      "content": "The title and flavor of the puzzle clues that the puzzle is about \\"free\\" things. The flavor further specifies that the contents of each feeder puzzle are important. Indeed, each feeder may be assigned a \\"title\\" which may be appended to \\"free\\" to form an English word or phrase. These titles, much like actual puzzle titles, play into each feeder’s theme or clue towards its solve path.\\n\\nEach word or phrase with \\"free\\", in turn, may be combined with the answer to another feeder to form a phrase, save for one exception. Rather than combining \\"free body\\" with another feeder’s answer, we instead combine it with \\"diagram\\" to form the phrase \\"free body diagram\\". This suggests that the \\"body\\" puzzle should go last, to connect with the Diagram to be submitted. Similarly, the puzzle with the answer DRAWING should go first, to connect with the Form to be submitted, forming the phrase \\"freeform drawing\\". The rest of the feeders may then be ordered based on the matching between answers and titles.\\n\\n<Table\\n\\theaders={[\\"Title\\", \\"Description of puzzle\\", \\"Answer\\", \\"Full phrase with \\\\\\"free\\\\\\"\\"]}\\n  cells={[\\n    [\\"\\", \\"(Free Puzzle Request Form)\\", \\"\\", \\"Freeform drawing\\"],\\n    [\\"Mason\\", \\"Puzzle where you act as a mason to complete a brick wall\\", \\"DRAWING\\", \\"Freemason lodge\\"],\\n    [\\"Radical\\", \\"Puzzle about Chinese radicals and characters\\", \\"LODGE\\", \\"Free radical reaction\\"],\\n    [\\"Rider\\", \\"Puzzle where music performers are depicted as riders\\", \\"REACTION\\", \\"Free-rider problem\\"],\\n    [\\"Trade\\", \\"Puzzle where you trade with a Minecraft villager\\", \\"PROBLEM\\", \\"Free trade area\\"],\\n    [\\"Lance\\", \\"Puzzle about games created by Jack Lance\\", \\"AREA\\", \\"Freelance coder\\"],\\n    [\\"Speech\\", \\"Puzzle containing excerpts from a speech by John F. Kennedy\\", \\"CODER\\", \\"Free speech movement\\"],\\n    [\\"DOM\\", \\"Puzzle where you solve a cryptogram of code for the HTML DOM\\", \\"MOVEMENT\\", \\"Freedom Trail\\"],\\n    [\\"Man\\", \\"Puzzle about professions ending with “man”\\", \\"TRAIL\\", \\"Freeman Dyson\\"],\\n    [\\"Style\\", \\"Puzzle about CSS style declarations\\", \\"DYSON\\", \\"Freestyle swimming\\"],\\n    [\\"Body\\", \\"Puzzle about parts of the human body\\", \\"SWIMMING\\", \\"Free body diagram\\"],\\n    [\\"\\", \\"(Diagram of Free Puzzle)\\", \\"\\", \\"\\"],\\n  ]}\\n/>\\n\\nSubmitting the supporting documents in this order solves the puzzle."
    },
    "puz106": {
      "hash": "b3d95d14a2d3d7f8da8af24c15a3ed795f446a829347b6c014697a28916b059c",
      "content": "These nonsense words refer to [Jean Berko Gleason’s children’s morphology experiment](https://www.tandfonline.com/doi/pdf/10.1080/00437956.1958.11659661). In it, there are 27 nonsense words that the researcher asks children to pluralize or form past tenses of. The first and most famous one is the \\"wug\\", which we are asked to ignore. Assigning the other 26 to a letter allows us to match the nonsense words to the letters in <Answer />."
    },
    "puz107": {
      "hash": "7378012338d3192b919f0fcf059318852ef7ee18001f6ccc855434ea5cc07f7b",
      "content": "There’s a unique way to rebuild the puzzle, then the main diagonal says <Answer />.\\n\\n<PuzzleGrid text=\\"CAST@@SPA|ALOES@CAB|NEUROLOGY|@@@ELOPES|WARN@WEDS|URACIL@@@|HOMEFIELD|AMP@SENSE|NAS@@RODS\\" optionsOverride={{\\"data-fill-classes\\":\\"white\\"}} />"
    },
    "puz108": {
      "hash": "306d0a8ebf96702e90fb44cef40e3a988429b13b241c75f60cefb4b56bf477c2",
      "content": "This is a 3×3 diagramless crossword. The across clues resolve to:\\n\\n<Table\\n\\theaders={[\\"Across\\", \\"Answer\\"]}\\n\\tcells={[\\n\\t\\t[\\"1. Vegetable\\", \\"PEA\\"],\\n\\t\\t[\\"4. Spanish saint?\\", \\"SAN\\"],\\n\\t\\t[\\"5. Test\\", \\"TRY\\"],\\n\\t]}\\n/>\\n\\nThe down clues resolve to:\\n\\n<Table\\n\\theaders={[\\"Down\\", \\"Answer\\"]}\\n\\tcells={[\\n\\t\\t[\\"1. UTC−8\\", \\"PST\\"],\\n\\t\\t[\\"2. Body part\\", \\"EAR\\"],\\n\\t\\t[\\"3. Some\\", \\"ANY\\"],\\n\\t]}\\n/>\\n\\n<PuzzleGrid\\n\\tmodes={[\\"crossword\\"]}\\n\\ttext={\`\\nPEA\\nSAN\\nTRY\\n\\t\`.trim().split(\\"\\\\n\\").join(\\"|\\")}\\n\\toptionsOverride={{\\n\\t\\t\\"data-fill-classes\\":\\"white black\\",\\n\\t}}\\n/>\\n\\nReading the letters in reading order gives the answer <Answer />."
    },
    "puz109": {
      "hash": "0cb8d2adf7dd25f8dd2036984df33884f5d0b6e4bb463e680b601d7a000e9653",
      "content": "As hinted by the \\"IV\\" of the title looking like a downwards arrow, we can treat the black squares as separate blocks and apply downward gravity to all of them. This results in the following configuration:\\n\\n<PuzzleGrid\\n\\ttableClassName=\\"puzzle-grid-very-small\\"\\n\\ttext=\\"30x12\\"\\n\\toptionsOverride={{\\n\\t\\t\\"data-fill-classes\\":\\"white black\\",\\n\\t\\t\\"data-fills\\": \`\\n..............................\\n..............................\\n..............................\\n..............................\\n..............................\\n..............................\\n111111111111111111111111111111\\n1111...1...11.11...1.1.1.1...1\\n..11.111.111.1111.11.1.1.1.111\\n.1.1...1.1.1.1.11.11.1.1.1...1\\n.1.1.111.1.1...11.11.1.1.1.111\\n.1.1...1...1.1.11.11.11.11...1\\n\\t\\t\`.trim().split(\\"\\\\n\\").join(\\"|\\"),\\n\\t}}\\n/>\\n\\nThe resulting gaps between the blocks spell out <Answer />, the answer."
    },
    "puz110": {
      "hash": "45e1d873fcc76a53cd40bb1ca29a5678bb219610488a380d185453e7a41b68bd",
      "content": "The instrument is a <Answer />, frequently played in the show *Hell’s Kitchen*.\\n\\nTo find the show, some example search queries could include: “chef melissa give me your jacket” or “give me your jacket reality show”.\\n\\nAfterwards, some example search queries to find the instrument could include: “hell’s kitchen sound effect”, “hell’s kitchen sting”, “hell’s kitchen instrument”, or “gordon ramsay sound effect”.\\n\\n<AuthorsNotes>\\n\\n<iframe width=\\"100%\\" height=\\"513\\" src=\\"https://www.youtube.com/embed/j3FzkEoIQBw?list=PLDrM0Ni-Vp2xTu1Wp05P-pLfCxBKCqyVH\\" title=\\"Breaking Kitchen - Episode 1\\" frameborder=\\"0\\" allow=\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\\" referrerpolicy=\\"strict-origin-when-cross-origin\\" allowfullscreen></iframe>\\n\\nEarly in huntwriting we had some discussion about “0 aha” puzzles, and this was one of the first puzzles inspired by it.\\n</AuthorsNotes>"
    },
    "puz111": {
      "hash": "cc502d929a3ad8ef34851e64bc7e10b66fc0cb5545ae6570bfa434a8772fdf52",
      "content": "This puzzle is referring to the Angkor <Answer />, a [Cambodian temple complex](https://en.wikipedia.org/wiki/Angkor_Wat)."
    },
    "puz112": {
      "hash": "112b500552371f6ae0b2463221d81b3d08ce110add7ee53fdadb9851a3e5def0",
      "content": "The words can be split into the five-word \\"THE ANSWER TO THIS PUZZLE\\", as well as a bunch of three-word clues that have three-letter answers: \\n\\n<Table\\n  cells={[\\n    [\\"Clue\\", \\"Answer\\", \\"Word 1 column\\", \\"Word 2 column\\", \\"Word 3 column\\"],\\n  \\t[\\"BODY OF WATER\\", \\"SEA\\", \\"1\\", \\"3\\", \\"4\\"],\\n  \\t[\\"OPPOSITE OF HAPPY\\", \\"SAD\\", \\"1\\", \\"4\\", \\"5\\"],\\n  \\t[\\"LEAF BASED DRINK\\", \\"TEA\\", \\"2\\", \\"3\\", \\"4\\"],\\n  \\t[\\"UNIX TEXT MANIPULATOR\\", \\"SED\\", \\"1\\", \\"3\\", \\"5\\"],\\n  \\t[\\"ONLINE TALK CONFERENCE\\", \\"TED\\", \\"2\\", \\"3\\", \\"5\\"]\\n  ]}\\n/>\\n\\nThe letters of the three-letter answers overlap quite a lot. In fact we observe that, if we write the three letters of each answer in order in the three columns that the clue’s words come from, then for any given column, all the letters written in it are the same. For example, “BODY” and “OPPOSITE” both come from column 1, and their respective clues’ answers all start with S. In order, the columns’ letters are S, T, E, A, and D. Since \\"THE ANSWER TO THIS PUZZLE\\" has words from all five columns, the answer to this puzzle just consists of those five letters in order, <Answer />."
    },
    "puz113": {
      "hash": "b013154301b3f73d9e2e9becb1a674229a5fe20e74ed305a0ff2eb5d50208d38",
      "content": "Pretend there’s a person moving their arms along the red arrow. They start off with the arms raised as in the two larger flags (which corresponds to U in semaphore). Then they sweep both arms down into the position implied by the two smaller flags (which correspond to N in semaphore). Then the person sweeps their arms left (corresponding to semaphore I) and finally the person ends with their arms to the right (corresponding to semaphore X). This gives the answer <Answer />."
    },
    "puz114": {
      "hash": "63299096a4f1d5a59fbd35fdac7f1dc8060ccca75a06fd2f9093bb7dd66fd88b",
      "content": "The audio clip contains five samples from John F. Kennedy’s Inaugural Address, each with a segment masked out. As suggested by the flavortext, the sounds made by the missing segments spell out the answer, <Answer />.\\n\\n<Audio />"
    },
    "puz116": {
      "hash": "8042692c17075db5b249979b4613a89c968246716e81ae55acb8fe6b0e336d6d",
      "content": "This is a puzzle about the street grid in Salt Lake County. Blocks are numbered 100, 200, etc. every eighth of a mile, and the origin is at the intersection of Main and South Temple, at Temple Square. The vertex is at the origin, and the other two locations have their coordinates clearly visible on street signs in the images: (600, −200) and (−600, −200). Solvers can identify that these locations are in Salt Lake City with a number of methods, for example:\\n\\n* Searching an intersection like “200 S and 600 E” on Google or Google Maps usually gives a Utah address.\\n* Reverse image search or asking an LLM about the first image at Temple Square can point to Salt Lake City.\\n\\nTemple Square is not labeled with a coordinate like the others, but it can be found by searching for locations of KeyBank, H&M, and US Bank, all visible in the image, together in downtown Salt Lake City. Or, its location is hinted to by the title.\\n\\nA WolframAlpha query like [this one](https://www.wolframalpha.com/input?i=parabola+vertex+%280%2C+0%29+passing+through+%28600%2C+-200%29+and+%28-600%2C+-200%29) can identify the parabola, which has the equation y = −x<sup>2</sup>/1800. That same query also tells us that the focus of the parabola is at (0, −450), which is the location of the <Answer /> trolley station."
    },
    "puz117": {
      "hash": "3366395f30af707d781d31bb44cf99c39fe8ebd069c64913cd6a3197d88b6a0e",
      "content": "Each of these is the name of a [Featured Topic](https://en.wikipedia.org/wiki/Wikipedia:Featured_topics) on Wikipedia. Each Featured Topic has one article that isn’t a [Featured Article](https://en.wikipedia.org/wiki/Wikipedia:Featured_articles) (indicated with a bronze star), and is instead a [Good Article](https://en.wikipedia.org/wiki/Wikipedia:Good_articles) (indicated with a green plus in a circle). \\n\\n<Table\\n  headers={[\\"Featured Topic\\", \\"Only Good Article\\", \\"Index\\", \\"Letter\\"]}\\n  cells={[\\n  \\t[\\"York City F.C.\\", \\"Fulfordgate\\", \\"1\\", \\"F\\"],\\n  \\t[\\"Brill Tramway\\", \\"Infrastructure of the Brill Tramway\\", \\"5\\", \\"A\\"],\\n  \\t[\\"Confederate government of Kentucky\\", \\"George W. Johnson\\", \\"4\\", \\"R\\"],\\n  \\t[\\"National Basketball Association awards\\", \\"Larry O’Brien Championship Trophy\\", \\"5\\", \\"Y\\"],\\n  \\t[\\"Supernatural season 1\\", \\"“Devil’s Trap”\\", \\"5\\", \\"L\\"],\\n  \\t[\\"Interstate 96\\", \\"Business routes of Interstate 96\\", \\"8\\", \\"S\\"],\\n  \\t[\\"Quietly Confident Quartet\\", \\"Men’s 4 × 100 metre medley relay at the 1980 Summer Olympics\\", \\"1\\", \\"M\\"],\\n  \\t[\\"Leonardo DiCaprio\\", \\"Appian Way Productions\\", \\"4\\", \\"I\\"],\\n  \\t[\\"Voalavo\\", \\"Eastern voalavo\\", \\"4\\", \\"T\\"],\\n  \\t[\\"1991 Atlantic hurricane season\\", \\"Hurricane Bob\\", \\"1\\", \\"H\\"]\\n  ]}\\n/>\\n\\nIndexing the numbers into the Good Article gives FARYL SMITH, which is itself a Featured Topic, so we can repeat this process again. The only Good Article in that Featured Topic is <Answer />."
    },
    "puz12": {
      "hash": "106ae3c60234f34382dcbfcfee1b0ec2037556ed604e02aaf5bdee8f46580758",
      "content": "The point that minimizes the sum of distances to the vertices of the triangle is also known as the Fermat point, which has the property that all three of the angles ∠AXB, ∠BXC, ∠CXA are 120 degrees. It can also be constructed by drawing external equilateral triangles on each side of the given triangle, then connecting the far vertex of each equilateral triangle to the opposite vertex on the given triangle. Then, either by using Law of Cosines or by constructing it in Geogebra, we can compute AX, BX, and CX, which turn out to be exactly 16, 5, and 14. Converting back using A1Z26, we get <Answer />, the answer."
    },
    "puz120": {
      "hash": "88bbf64bd12d3576f22c1c3fae80cf252f8afb52ce2b093e12f1baf2ee7a28f9",
      "content": "The title is in reference to \\"bubble wrap\\" on Discord, that is, putting each letter in separate spoiler text.\\n\\nWe can guess at the contents of the message by looking for letters that are particularly wide or thin, and by considering the grammatical structure implied by the punctuation. For example, the fourth letter of the second-last word is particularly wide, so it's likely an \\"m\\" or a \\"w\\". We might guess that word is \\"answer\\" since it is just before a colon, and confirm that the widths of the other letters match.\\n\\nThis directs us to focus on the last word for the answer. The first letter is particularly wide, suggesting that it is probably a \\"W\\", and the second and fifth letters are particularly thin, suggesting that they are probably \\"I\\"s.\\n\\nThe full message reads: “After opening all of the spoiler boxes, we can read out the answer: <Answer />.”"
    },
    "puz121": {
      "hash": "c64f2c37182345f4ec2575e08b0baa6843482d6ac85b694788d269be51afaeb5",
      "content": "The clues resolve to parts of pairs of food items or homophones thereof.\\n\\n<Table\\n  cells={[\\n    [\\"Damages\\", \\"CHIPS\\"],\\n    [\\"J.K. Rowling, e.g.\\", \\"TERF\\"],\\n    [\\"One of those Scrabble bullshit words, worth 12 points\\", \\"QIS\\"],\\n    [\\"PC competitor\\", \\"MAC\\"],\\n    [\\"Peasant\\", \\"SERF\\"],\\n    [\\"Procreated\\", \\"BRED\\"],\\n    [\\"Raging bull, for instance?\\", \\"BUTTER\\"],\\n    [\\"To steal login credentials through social engineering\\", \\"PHISH\\"],\\n  ]}\\n/>\\n\\nThe pairs and extracted letters are:\\n\\n<Table\\n  cells={[\\n    [\\"1 = A\\", \\"MAC\\", \\"&\\", \\"QIS\\", \\"3 = Q\\"],\\n    [\\"6 = R\\", \\"SERF\\", \\"&\\", \\"TERF\\", \\"7 = E\\"],\\n    [\\"8 = D\\", \\"BRED\\", \\"&\\", \\"BUTTER\\", \\"4 = U\\"],\\n    [\\"5 = I\\", \\"PHISH\\", \\"&\\", \\"CHIPS\\", \\"2 = C\\"],\\n  ]}\\n/>\\n\\nTaking the letters in order spells <Answer />."
    },
    "puz122": {
      "hash": "26992a5252ce67eda5bd289aaa989b76d6d12ae95bb1ea7fd6b45dc3b52380f1",
      "content": "The clues resolve to BANDY, PANDA, and SANDS. Each answer has \\"AND\\" in as the middle two letters, so could be interpreted as (the first letter) AND (the last letter). The answer is therefore B+Y+P+A+S+S = BYPASS."
    },
    "puz123": {
      "hash": "e453c197795b6c9d2b8d0c0ce54e0d9dee7a3b57430984fe4bd728a330541075",
      "content": "Go to [https://en.wikipedia.org/wiki/Wikipedia:List_of_really,_really,_really_stupid_article_ideas_that_you_really,_really,_really_should_not_create](https://en.wikipedia.org/wiki/Wikipedia:List_of_really,_really,_really_stupid_article_ideas_that_you_really,_really,_really_should_not_create); each of the things in the list is an article linked in one of the items. The numbers can then be corresponded to letters using A=1, B=2...Z=26.\\n\\n<Table\\n  headers={[\\"Clue\\", \\"Category to avoid\\", \\"Number\\", \\"Corresponding letter\\"]}\\n  cells={[\\n  \\t[\\"Pokémon competitive play\\", \\"Any one of the many regions in the Pokémon video game series...\\", \\"6\\", \\"F\\"],\\n  \\t[\\"Bexley Hall (MIT)\\", \\"Your dormitory, university residence, or any suite therein.\\", \\"12\\", \\"L\\"],\\n  \\t[\\"Can\\\\’t sleep, clown will eat me\\", \\"Subjects that cannot be studied...\\", \\"15\\", \\"O\\"],\\n  \\t[\\"The weather in London\\", \\"The weather in London\\", \\"23\\", \\"W\\"],\\n  \\t[\\"Sexual partner\\", \\"Your imaginary friend or your imaginary friends...\\", \\"3\\", \\"C\\"],\\n  \\t[\\"The Basement Tapes\\", \\"Any movie you made yourself which has never been seen...\\", \\"8\\", \\"H\\"],\\n  \\t[\\"Overweight\\", \\"You, your family, or the organization you work for.\\", \\"1\\", \\"A\\"],\\n  \\t[\\"Common degu\\", \\"Anything about your cat or dog and how cute it is...\\", \\"18\\", \\"R\\"],\\n  \\t[\\"Cough medicine\\", \\"Anything written under the influence of recreational substances...\\", \\"20\\", \\"T\\"]\\n  ]}\\n/>\\n\\nThe answer is <Answer />."
    },
    "puz124": {
      "hash": "635480fa1ee5fcf2f7c1574ad42f8ae3ccd807d281d9560b444e1c1b3ff076e3",
      "content": "This is the outline of the countries Afghanistan, Kazakhstan, Kyrgyzstan, Pakistan, Tajikistan, Turkmenistan, and Uzbekistan, which are all next to each other. They’re highlighted in dark green in the image below.\\n\\n<Image />\\n\\nTheir English names all end in STAN, whose length, 4, is also indicated by the title."
    },
    "puz125": {
      "hash": "ba3728e4fb65e97ddaa81a4ed11e5466e793ccf94f7f872f1aa6ec3fd4967897",
      "content": "The title of the puzzle, \\"Vortex Manipulator\\", suggests that this puzzle is related to the series Doctor Who, where a device called the \\"vortex manipulator\\" appears in several episodes.\\n\\nFrom there, the most important step is to unscramble the letters. Identifying SMITH (a common English surname) at the end or TENNANT (the surname of a popular actor from the Doctor Who series) at the front should help with locating the other sequences that need unscrambling.\\n\\nTENNANT HARTNELL PERTWEE SMITH\\n\\nThese are the last names of actors who played different incarnations of The Doctor:\\n* David Tennant, the 10th Doctor\\n* William Hartnell, the 1st Doctor\\n* Jon Pertwee, the 3rd Doctor\\n* Matt Smith, the 11th Doctor\\n\\nThe 10th, 1st, 3rd, and 11th letters of the alphabet are <Answer />, which is the answer to the puzzle and also the first name of the character most associated with the vortex manipulator, Captain Jack Harkness.\\n\\n<AuthorsNotes>\\nWhile the exact numbering of the Doctor’s incarnations has gotten a little messy in the show, this puzzle uses the most officially established and consistent numbering, resulting in the above numbering.\\n</AuthorsNotes>"
    },
    "puz126": {
      "hash": "6a8095f88fd1a28b2d2b55ae229672d20a8247b4e6c65cdfc6378183b95c0436",
      "content": "50 divided by 50 is <Answer />."
    },
    "puz128": {
      "hash": "01ce7f2a6e644d9a8ac978e9c9c07f16b800ea85cc325a7808b0b9e60108285b",
      "content": "Two funny numbers to consider are 420 and 69. Following the steps and writing down the numbers obtained after each step, as instructed, give us the following result:\\n\\n<Table\\n  cells={[\\n  \\t[\\"Step\\", \\"420 result\\", \\"420 letter\\", \\"69 result\\", \\"69 letter\\"],\\n  \\t[\\"1\\", \\"2\\", \\"B\\", \\"19\\", \\"S\\"],\\n  \\t[\\"2\\", \\"12\\", \\"L\\", \\"1\\", \\"A\\"],\\n  \\t[\\"3\\", \\"1\\", \\"A\\", \\"4\\", \\"D\\"],\\n  \\t[\\"4\\", \\"26\\", \\"Z\\", \\"4\\", \\"D\\"],\\n  \\t[\\"5\\", \\"9\\", \\"I\\", \\"12\\", \\"L\\"],\\n  \\t[\\"6\\", \\"14\\", \\"N\\", \\"5\\", \\"E\\"],\\n  \\t[\\"7\\", \\"7\\", \\"G\\", \\"19\\", \\"S\\"]\\n  ]}\\n/>\\n\\nIn the above table, converting the written numbers to letters using A=1, B=2, ... Z=26 gives the answer, <Answer />."
    },
    "puz129": {
      "hash": "923f601b9a0eb5792fdd12dcfe4f7c9de461915ff97e115f1155b9236f44abc1",
      "content": "This is the announcement in Spanish on the San Diego Blue Line train southbound to San Ysidro. The missing words in [the announcement](https://youtu.be/vPPB9eKkt-Q?si=heaD_Z3Lfy_56Rl2&t=30) will give us the missing words: boleto, fumar, comer, and consideración. The letters which correspond to question marks in the blanks form the word <Answer />."
    },
    "puz13": {
      "hash": "2f4adf4ac7b2051f9c2003219636532a7459a27fbce1d3531335c5dbc67c608f",
      "content": "<iframe width=\\"560\\" height=\\"315\\" src=\\"https://www.youtube.com/embed/dQw4w9WgXcQ?si=dt4bakttCTresIWV&autoplay=1\\" title=\\"YouTube video player\\" frameBorder=\\"0\\" allow=\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\\" referrerPolicy=\\"strict-origin-when-cross-origin\\" allowFullScreen style={{ marginBottom: \\"1em\\" }}></iframe>\\n\\nThe title is a hint to _Never Gonna Give You Up_ by Rick Astley (i.e., rickrolling). Each line can be filled with what the singer of that song would \\"never\\" do.\\n<Table\\n  headers={[\\"Line\\", \\"Letter\\"]}\\n  cells={[\\n    [<span>GIVE <b>Y</b>OU UP</span>, \\"Y\\"],\\n    [<span>LET Y<b>O</b>U DOWN</span>, \\"O\\"],\\n    [<span>R<b>U</b>N AROUND</span>, \\"U\\"],\\n    [<span>DESER<b>T</b> YOU</span>, \\"T\\"],\\n    [<span>MAKE YO<b>U</b> CRY</span>, \\"U\\"],\\n    [<span>SAY GOOD<b>B</b>YE</span>, \\"B\\"],\\n    [<span>T<b>E</b>LL A LIE</span>, \\"E\\"],\\n    [<span>HU<b>R</b>T YOU</span>, \\"R\\"],\\n  ]}\\n/>\\nThe answer is <Answer />."
    },
    "puz132": {
      "hash": "d3023cbf0a97e187d0e387e580d89fcd8364c842c1936e9bc0cabcb1373c3acd",
      "content": "As hinted by the fact that this comes after a puzzle about dominoes, this puzzle is about [pentominoes](https://en.wikipedia.org/wiki/Pentomino). The letters in the sets in the puzzle are all canonical names for pentominoes. As suggested by the title, we can uniquely choose a third pentomino for each set so that each set of three pentominoes can be arranged into a 3x5 grid.\\n\\n<Table\\n\\theaders={[\\"Pentaminoes\\", \\"Possible arrangement\\"]}\\n\\tcells={[\\n\\t\\t[\\n\\t\\t\\t\\"Example: {U, U, X}\\",\\n\\t\\t\\t<PuzzleGrid\\n\\t\\t\\t\\ttext=\\"5x3\\"\\n\\t\\t\\t\\toptionsOverride={{\\n\\t\\t\\t\\t\\t\\"data-fill-classes\\":\\"white red yellow blue\\",\\n\\t\\t\\t\\t\\t\\"data-fills\\": \`\\n11322\\n13332\\n11322\\n\\t\\t\\t\\t\\t\`.trim().split(\\"\\\\n\\").join(\\"|\\"),\\n\\t\\t\\t\\t}}\\n\\t\\t\\t/>\\n\\t\\t],\\n\\t\\t[\\n\\t\\t\\t<>{\\"{\\"}L, Y, <b>T</b>{\\"}\\"}</>,\\n\\t\\t\\t<PuzzleGrid\\n\\t\\t\\t\\ttext=\\"5x3\\"\\n\\t\\t\\t\\toptionsOverride={{\\n\\t\\t\\t\\t\\t\\"data-fill-classes\\":\\"white red yellow blue\\",\\n\\t\\t\\t\\t\\t\\"data-fills\\": \`\\n11113\\n12333\\n22223\\n\\t\\t\\t\\t\\t\`.trim().split(\\"\\\\n\\").join(\\"|\\"),\\n\\t\\t\\t\\t}}\\n\\t\\t\\t/>\\n\\t\\t],\\n\\t\\t[\\n\\t\\t\\t<>{\\"{\\"}N, P, <b>U</b>{\\"}\\"}</>,\\n\\t\\t\\t<PuzzleGrid\\n\\t\\t\\t\\ttext=\\"5x3\\"\\n\\t\\t\\t\\toptionsOverride={{\\n\\t\\t\\t\\t\\t\\"data-fill-classes\\":\\"white red yellow blue\\",\\n\\t\\t\\t\\t\\t\\"data-fills\\": \`\\n33222\\n31122\\n33111\\n\\t\\t\\t\\t\\t\`.trim().split(\\"\\\\n\\").join(\\"|\\"),\\n\\t\\t\\t\\t}}\\n\\t\\t\\t/>\\n\\t\\t],\\n\\t\\t[\\n\\t\\t\\t<>{\\"{\\"}T, Y, <b>L</b>{\\"}\\"}</>,\\n\\t\\t\\t<PuzzleGrid\\n\\t\\t\\t\\ttext=\\"5x3\\"\\n\\t\\t\\t\\toptionsOverride={{\\n\\t\\t\\t\\t\\t\\"data-fill-classes\\":\\"white red yellow blue\\",\\n\\t\\t\\t\\t\\t\\"data-fills\\": \`\\n13333\\n11123\\n12222\\n\\t\\t\\t\\t\\t\`.trim().split(\\"\\\\n\\").join(\\"|\\"),\\n\\t\\t\\t\\t}}\\n\\t\\t\\t/>\\n\\t\\t],\\n\\t\\t[\\n\\t\\t\\t<>{\\"{\\"}L, L, <b>I</b>{\\"}\\"}</>,\\n\\t\\t\\t<PuzzleGrid\\n\\t\\t\\t\\ttext=\\"5x3\\"\\n\\t\\t\\t\\toptionsOverride={{\\n\\t\\t\\t\\t\\t\\"data-fill-classes\\":\\"white red yellow blue\\",\\n\\t\\t\\t\\t\\t\\"data-fills\\": \`\\n11112\\n12222\\n33333\\n\\t\\t\\t\\t\\t\`.trim().split(\\"\\\\n\\").join(\\"|\\"),\\n\\t\\t\\t\\t}}\\n\\t\\t\\t/>\\n\\t\\t],\\n\\t\\t[\\n\\t\\t\\t<>{\\"{\\"}F, U, <b>P</b>{\\"}\\"}</>,\\n\\t\\t\\t<PuzzleGrid\\n\\t\\t\\t\\ttext=\\"5x3\\"\\n\\t\\t\\t\\toptionsOverride={{\\n\\t\\t\\t\\t\\t\\"data-fill-classes\\":\\"white red yellow blue\\",\\n\\t\\t\\t\\t\\t\\"data-fills\\": \`\\n22113\\n21133\\n22133\\n\\t\\t\\t\\t\\t\`.trim().split(\\"\\\\n\\").join(\\"|\\"),\\n\\t\\t\\t\\t}}\\n\\t\\t\\t/>\\n\\t\\t],\\n\\t]}\\n/>\\n\\nThe names of the missing pentominoes form the answer, <Answer />."
    },
    "puz135": {
      "hash": "41c4bc140d85211a4a47cf09c4ea6097d96bb97a88dd9095284dc1a179c5f6c7",
      "content": "Solving the Sudoku and taking the entered numbers in each row gives us 26, 15, 4, 9, 1, 3. Converting alphanumerically gives us the answer, <Answer />.\\n\\n<AuthorsNotes>\\n\\nThis Sudoku happens to be identical to the famous Miracle Sudoku, which was created by Galactic Trendsetter Mitchell Lee. This is not needed for the puzzle, only an easter egg for the Sudoku community out there.\\n\\nAlso, it turns out that Sudoku has a lot of repeated patterns of numbers, which severely restricts what letters are possible to extract - in particular, the only valid 2-digit numbers that appear are 15 and 26. Oops.\\n\\n</AuthorsNotes>"
    },
    "puz136": {
      "hash": "434a84399f2acea81111219304ddfacdd2ed60c057714bfec46d98b259864851",
      "content": "Any answer from 1 to 6 is accepted. [The top paper here](https://www.sciencedirect.com/topics/agricultural-and-biological-sciences/mandarin-juice) finds that the answer is probably around 3.5. Don’t believe Google, which will lead you down [an alkaline diet misconception](https://en.wikipedia.org/wiki/Alkaline_diet) about how citruses are basic once digested.\\n\\n<Image fullWidth={true} />"
    },
    "puz139": {
      "hash": "113939ce5c6155c311ae17f244d9cb40ddd92b088159ff2f1dcce55e06eda99c",
      "content": "The puzzle is as described. Any suitable picture and fun fact, once accepted by the hunt staff, solves the puzzle."
    },
    "puz14": {
      "hash": "ce4911efe9c119c63904989b2db64e5a767339fa6b8c7afcb084e021e32049b3",
      "content": "The numbers can be uniquely determined to be 3, 1, 2, 2, 1, 7, 5. Using A1Z26, this spells out the answer <Answer />. Below, we describe a logical path to arrive at this solution.\\n\\nLet the seven numbers be A, B, C, D, E, F, and G, in order. Let their sum be S.\\n\\nWe can immediately get that E=1, F=7, C≤9, and D≤3. We also deduce from the identities of E and F that B≤4 and G≤5. Thus, S−A = B+C+D+E+F+G ≤ 4+9+3+1+7+5 = 29.\\n\\nA = ⌊A⌋ = S/7 implies that A = ⌊(S−A)/6⌋ ≤ ⌊29/6⌋ = 4, and so S ≤ 29+4 = 33. From F=7, we also know that S ≥ 1+1+1+1+1+7+1 = 13. Since S must be a multiple of 7 for A to be an integer, S can only be 14, 21 or 28.\\n\\nThis tells us that C is either 1 or 2, which lets us tighten our bound to S ≤ 4+4+2+3+1+7+5 = 26, limiting the possibilities for S to 14 or 21. 14 can be easily eliminated. If S=14, then A=2, leaving B+C+D+G = 14−(7+2+1) = 4. This fixes B=C=D=G=1, contradicting the definitions for B and G.\\n\\nThus, S=21, A=3, and C=2. We now have the numbers 3, B, 2, D, 1, 7, G. This tightens our bound for B to B≤3. In fact, B cannot be 3, since that would force D=G=3, contradicting the definition for D.\\n\\nWe can also eliminate B=2. If B=2, then the definition for B implies that either D or G must be 2. S=21 implies that the other of D or G must be 4. Either assignment contradicts the definition for D.\\n\\nThus, B=1, and so G≤5 and D+G = 7. We also know from before that D≤3, so D is either 2 or 3. If D=3, then G=4, contradicting the definition for D. This leaves us finally with D=2, G=5."
    },
    "puz140": {
      "hash": "3f9e39d955d0c5d3d7b69d64b66c37b5e3022f2a6ecd13884a9d669d8eb0f57e",
      "content": "Searching, for example, “orange green white blue purple rarity” gives a list of rarities. This isn’t completely canonical but the title further suggests using World of Warcraft (often abbreviated as WoW) rarities, though many other games have adopted this system as well. The colors in order represent the Legendary, Uncommon, Common, Rare, and Epic rarities. The first letters (as hinted by “top” in the title) spell out <Answer />, the answer."
    },
    "puz141": {
      "hash": "c89093fbef73b0ef10a5018ce01f9aa0707fc813b29752d345c4a946fe181e2e",
      "content": "The number of ways to tile each shape with dominos is 7, 18, 9, and 4 respectively. Converted with A=1, this spells out the answer <Answer />."
    },
    "puz142": {
      "hash": "74985268d33df23f7936d1af8e9f14902d723293534884f105b3bb45625d2f11",
      "content": "The title suggests that these are all brands that are rotated 180 degrees. Arrows refer to brand ownership. One Sharp brand starting with AQ is AQUOS, and HP owns both Omen and HyperX. Reading the redacted inverted brands gives the answer <Answer />.\\n\\n<Image fullWidth />"
    },
    "puz143": {
      "hash": "fd83ec1a8290354b0e4c69a77a99d37e5294b5a271f9121c734424432e8a943d",
      "content": "Fill in the boxes with punny answers, each of which is a gen Z slang: VIBE CHECK, TAKE AN L, HITS DIFFERENT. The circled letters anagram to <Answer />."
    },
    "puz144": {
      "hash": "9976583f63f85c694425eaaa93713f1708cddf4f0f99ce297b9adf881a014245",
      "content": "A natural sign cancels a sharped or a flatted note. If the first note was sharp, then the second natural note is lower in pitch (i.e., X♯ to X♮). If the first note was flat, then the second note is higher in pitch (i.e., X♭ to X♮).\\n\\n**First ambiguity: clef.** The most common clefs are treble clef (the middle note is B) and bass clef (the note is D). Let’s come back to this.\\n\\n**Second ambiguity: key.** Suppose the first note has been modified earlier this bar by an accidental. The notes are then different in pitch. Is the accidental more likely a sharp or a flat?\\n\\nSuppose the first note has not been modified by an earlier accidental this bar. Suppose the key signature has no sharps or flats. Then the second note is the same pitch as the first note, and the natural is redundant. If the natural was a courtesy accidental (given as a reminder), it would more commonly appear in parentheses, and I can’t think of a reason not to give it for the first note (unless there was a bar line in between the two notes, resetting accidentals from the prior bar).\\n\\nBased on this, we eliminate the notes being the same pitch.\\n\\nNow consider the key, along with the two most likely candidate notes B and D.\\n\\nWhat key signatures have B sharped or flatted? As more sharps/flats are added to the key signature, the order in which notes are modified is:\\n\\n- sharp order: FCGDAE**B**\\n- flat order: **BEADGCF**\\n\\nWhat key signatures have D sharped or flatted?\\n\\n- sharp order: FCG**DAEB**\\n- flat order: BEA**DGCF**\\n\\nIf all keys (with up to seven flats or sharps) are equally likely, then D could just as likely be sharped or flatted, whereas B is flatted in 7/8 keys where it’s modified. This analysis suggests that the second note is slightly more likely to be higher than the first note.\\n\\nThis doesn’t affect our answer, but in reality, keys with fewer sharps and flats are more common, since on many instruments it’s more difficult to play, compounded by unfamiliarity with more uncommon keys. Rarely, keys may also have more than seven flats and sharps. We might also wish to consider other clefs. For example, if the staff has an alto clef, the note would be a C and be more likely to be sharp than flat following the above analysis.\\n\\nFurther discussion questions:\\n\\n- Instrumentation: What instrument is this score for? Is it a concert pitch instrument? Does that affect what clefs and key signatures are most likely? What if it’s a tenor part in SATB voice? What if it’s for alto saxophone? Could it be for non-pitched percussion?\\n- Stem direction: [Stems](https://en.wikipedia.org/wiki/Stem_%28music%29) usually point down for notes on the middle line; why are the stems going upwards? Does that give you context about earlier notes, or perhaps multiple voices in the same staff? Is the music for a vocal line, with the stem oriented upwards to avoid collision with lyrics below the staff?\\n- Accidentals: As discussed earlier, is there a situation where the two notes could be the same pitch? What about if the first note is modified in the bar?\\n- Melodic/harmonic intent: Why is there (probably) an augmented unison between these two notes? Is it part of a chromatic progression? Is the music starting or finishing a modulation? Is one of the notes from a borrowed chord, and if so, which chord and which note?\\n- Modes: What modes are most likely? Major, minor, mixolydian?\\n- Tuning and xenharmony: Does the tuning and xenharmony affect the answer?\\n\\nThe analysis above is not intended to be dispositive; because this is an open-ended question, we used a rubric to grade responses out of 10.\\n\\n<AuthorsNotes>\\n<Image />\\n</AuthorsNotes>\\n\\n### Rubric\\n\\n<Puzzle144Rubric\\n\\theaders={[\\n\\t\\t\\"Start from 10 points. Don’t go above 11 or below 0 points. You can further adjust the score subjectively for insights or mistakes you think aren’t covered by the rubric, but should be.\\",\\n\\t\\t\\"Details:\\",\\n\\t\\t\\"Key (not cumulative):\\",\\n\\t\\t\\"Clef (not cumulative):\\",\\n\\t]}\\n\\tcheckboxStrings={[\\n\\t\\t\\"+1 point if they make you laugh\\",\\n\\t\\t\\"+1 point if they relate a real world context (e.g. “I play a wind instrument and ...”)\\",\\n\\t\\t\\"−1 if no mention of ANY of the following: STEM DIRECTION, MODES (including major/minor), MELODY/HARMONY/CHORDS, TUNING, or ACCIDENTALS (NOT keys / key signatures)\\",\\n\\t\\t\\"−1 if no explanation about pitch change of flat→natural vs sharp→natural (i.e., what a natural sign actually does)\\",\\n\\t\\t\\"−1 if not considering possibility of same pitch or unpitched\\",\\n\\t\\t\\"−5 if no mention of KEY SIGNATURE\\",\\n\\t\\t\\"−3 if no analysis of flat/sharp likeliness over keys\\",\\n\\t\\t\\"−1 if unexplained assumption about likelihood of keys (e.g. “assume all keys equally likely” or “Keys with B♭ are more likely than B♯” without further explanation)\\",\\n\\t\\t\\"−5 if no mention of CLEF\\",\\n\\t\\t\\"−2 if no mention of clefs beyond treble and bass\\",\\n\\t\\t\\"−1 if no mention of INSTRUMENTATION (i.e., what instrument this score is for, possibly including voice)\\",\\n\\t]}\\n/>"
    },
    "puz145": {
      "hash": "83b671e9e546326f656b7e1d868cbca38f4e3fb5e0fde9b189d1a669cf23bf21",
      "content": "The answer is <Answer />.\\n\\n<AuthorsNotes>\\n\\n> Kevin: i like this puzzle. it’s akin to gacha junk, but much more wholesome, and with a benefit. that probably makes it the best thing you can get out of the gacha\\n\\n</AuthorsNotes>"
    },
    "puz146": {
      "hash": "400620653258166b0d56ecdddbf0d43e2aca82fdba8449298a58673830ea1c04",
      "content": "The title clues that we have a DES pair. \\"A bit more than 3\\" is PI. Putting together DES, PI, and DES backwards gives the answer, <Answer />."
    },
    "puz149": {
      "hash": "19256203f71cac22e827808a842db6d036e139b0f81f467606240d383fca02f2",
      "content": "This is a reference to [this quote by Sabina Nore](https://www.goodreads.com/author/quotes/8186685.Sabina_Nore). \\n\\n<Table\\n\\theaders={[\\"Quote word\\", \\"Index\\", \\"Extracted letter\\"]}\\n\\tcells={[\\n\\t\\t[\\"Curiosity\\", \\"2\\", \\"U\\"],\\n\\t\\t[\\"Knowledge\\", \\"2\\", \\"N\\"],\\n\\t\\t[\\"Understanding\\", \\"11\\", \\"I\\"],\\n\\t\\t[\\"Love\\", \\"2\\", \\"O\\"],\\n\\t\\t[\\"Harmony\\", \\"6\\", \\"N\\"],\\n\\t]}\\n/>\\n\\nIndexing into each of the words in the quote give us the answer, <Answer />."
    },
    "puz15": {
      "hash": "585d5f822e7e220d145516afac483c78a723a8278c03bcc2578c216d305facfc",
      "content": "Each clue can be answered with something that can be evaluated as a mathematical expression. The value of this expression can be used as an index into the clue itself.\\n\\n<Table\\nheaders={[\\"Clue\\", \\"Answer\\", \\"Value\\", \\"Letter\\"]}\\ncells={[\\n  [\\"Size that lumber is commonly sold in\\", \\"2×4\\", \\"8\\", \\"T\\"],\\n  [\\"Radio acknowledgement\\", \\"10–4\\", \\"6\\", \\"A\\"],\\n  [\\"Lucky time to make a wish, supposedly\\", \\"11:11\\", \\"1\\", \\"L\\"],\\n  [\\"The level in Super Mario Bros. that is the first to feature Bullet Bills\\", \\"5–1\\", \\"4\\", \\"L\\"],\\n  [\\"The last date that Earth Day occurred on, written in the admittedly unusual YYYY/MM/DD format\\", \\"2024/04/22\\", \\"23\\", \\"Y\\"],\\n]}\\n/>\\n\\nThe answer to this puzzle is <Answer />."
    },
    "puz150": {
      "hash": "e106c00b34686c58a24ffef1da24a73183e2fb36f9bb33be8e8d278d7f961502",
      "content": "Below are the lyrics, lined up with each other one beat at a time, along with approximate translations:\\n\\n<Table\\n  headers={[\\"English beat\\", \\"French beat\\", \\"French translation\\", \\"Spanish beat\\", \\"Spanish translation\\"]}\\n  cells={[\\n  \\t[\\"You’re\\", \\"Tu\\", \\"You\\", \\"Es\\", {data: \\"I'm\\", rowSpan: 2}],\\n  \\t[\\"e\\", \\"es\\", \\"are\\", \\"toy\\"],\\n  \\t[\\"very\\", \\"tout ce\\", \\"everything\\", \\"lo\\", {data: \\"crazy\\", rowSpan: 2}],\\n  \\t[\\"thing\\", \\"que\\", \\"that\\", \\"ca\\"],\\n  \\t[\\"I\\", \\"je\\", \\"I\\", \\"por\\", \\"for\\"],\\n  \\t[\\"want\\", \\"veux\\", \\"want\\", \\"ti\\", \\"you\\"],\\n  \\t[\\"But\\", \\"Mais\\", \\"but\\", \\"Pe\\", {data: \\"but\\", rowSpan: 2}],\\n  \\t[\\"no\\", \\"rien\\", \\"nothing\\", \\"ro\\"],\\n  \\t[\\"thing\\", \\"dont\\", \\"that\\", \\"co\\", {data: <>how<br />you do</>, rowSpan: 3}],\\n  \\t[\\"that\\", \\"j’ai\\", \\"I\\", \\"mo ha\\"],\\n  \\t[\\"I\\", \\"be\\", {data: \\"need\\", rowSpan: 2}, \\"ces\\"],\\n  \\t[\\"need\\", \\"soin\\", \\"mal\\", \\"badly\\"],\\n  \\t[\\"Late\\", \\"En\\", {data: \\"Finally\\", rowSpan: 2}, \\"mor\\", {data: \\"mortal\\", rowSpan: 2}],\\n  \\t[\\"ly\\", \\"fin\\", \\"tal\\"],\\n  \\t[\\"I\\", \\"J’dé\\", {data: \\"I hate\\", rowSpan: 2}, \\"Te\\", \\"you\\"],\\n  \\t[\\"hate\\", \\"teste\\", \\"o\\", {data: \\"I hate\\", rowSpan: 2}],\\n  \\t[\\"the\\", \\"com\\", {data: \\"how\\", rowSpan: 2}, \\"dio\\"],\\n  \\t[\\"way\\", \\"ment\\", \\"lo\\", \\"that\\"],\\n  \\t[\\"you’re\\", \\"t’en\\", {data: <>you’re<br />invading</>, rowSpan: 3}, \\"que\\", \\"which\\"],\\n  \\t[\\"ma\\", \\"va\\", \\"me ha\\", {data: \\"you make me\\", rowSpan: 2}],\\n  \\t[\\"kin’\\", \\"hi\\", \\"ces\\"],\\n  \\t[\\"me\\", \\"ma\\", \\"my\\", \\"pen\\", {data: \\"think\\", rowSpan: 2}],\\n  \\t[\\"think\\", \\"tê\\", {data: \\"head\\", rowSpan: 2}, \\"sar\\"],\\n  \\t[\\"(ah)\\", \\"te\\", \\"(ah)\\", \\"\\"],\\n  \\t[\\"The\\", \\"Du\\", \\"From the\\", \\"Y\\", \\"And\\"],\\n  \\t[\\"mo\\", \\"mo\\", {data: \\"moment\\", rowSpan: 2}, \\"siem\\", {data: \\"always\\", rowSpan: 2}],\\n  \\t[\\"ment\\", \\"ment\\", \\"pre\\"],\\n  \\t[\\"that\\", \\"où\\", \\"when\\", \\"que\\", \\"that\\"],\\n  \\t[<strong>I</strong>, <strong>je</strong>, <strong>I</strong>, <strong>des</strong>, {data: <strong>I wake up</strong>, rowSpan: 3}],\\n  \\t[<strong>wake</strong>, <strong>me ré</strong>, {data: <strong>(myself)<br />wake up</strong>, rowSpan: 2}, <strong>pier</strong>],\\n  \\t[<strong>up</strong>, <strong>veille</strong>, <strong>to</strong>],\\n  \\t[\\"and\\", \\"a\\", {data: \\"before\\", rowSpan: 2}, \\"si\\", \\"if\\"],\\n  \\t[\\"when\\", \\"vant\\", \\"me\\", \\"(myself)\\"],\\n  \\t[\\"I\\", \\"que\\", \\"that\\", \\"vuel\\", {data: <>I go back<br />to<br />sleep</>, rowSpan: 4}],\\n  \\t[\\"go\\", \\"je\\", \\"I\\", \\"vo a a\\"],\\n  \\t[\\"to\\", \\"m’en\\", {data: <>(myself)<br />fall asleep</>, rowSpan: 2}, \\"cos\\"],\\n  \\t[\\"sleep\\", \\"dorme\\", \\"tar\\"],\\n  \\t[\\"I\\", \\"Je\\", \\"I\\", \\"Quie\\", {data: \\"I want\\", rowSpan: 2}],\\n  \\t[\\"need\\", \\"veux\\", \\"want\\", \\"ro\\"],\\n  \\t[\\"my\\", \\"ma\\", \\"my\\", \\"mi\\", \\"my\\"]\\n  ]}\\n/>\\n\\nThe only set of three beats in here where the literal translations of what’s said during those beats is the French “je me réveille”, the Spanish “despierto”, and the English <Answer />, which is the answer."
    },
    "puz151": {
      "hash": "852ffa09d02863f532ece83f3c1a217857207a1efc5eed0d901c1325ad591a55",
      "content": "The title of the puzzle leads us to Wikipedia:Shortcut index. The five phrases in the beginning all correspond to pages in the shortcut index; for example, Manual of Style/Lead section has the shortcuts WP:LEAD and WP:LS.\\n\\nNow we solve the clues, which are a bit vague, but the pages disambiguate. For example, the answer to the first clue is DEWLAP, which we notice is an anagram of WP:LEAD. Anagramming is also clued by the title of the puzzle containing \\"alphabet soup\\". Each of the clue answers anagrams to a shortcut:\\n\\n* DEWLAP → WP:LEAD (Manual of Style/Lead section)\\n* NEW POST → WP:NOTES (Footnotes)\\n* PRELAW → WP:AREL (Assessing reliability)\\n* SHOP TOWEL → WP:LESOTHO (WikiProject Lesotho)\\n* WOOL PANTS → WP:ALSONOT (What Wikipedia is not)\\n\\nTaking the letters spells DASH OPEN PAREN. Going to the Wikipedia page WP:-( redirects to the page Wikipedia:Vandalism, giving the answer, <Answer />.\\n\\n<AuthorsNotes>\\n\\nThe original clue for NEW POST was \\"Facebook button\\", but when Brian factchecked we discovered that the Facebook button only said \\"Post\\".\\n\\n</AuthorsNotes>"
    },
    "puz152": {
      "hash": "ef5193e8d248a6027b2dab306a20cabec611707c989de24ef56dac1a8df7ae0e",
      "content": "Using Bacon cipher (not merging I/J), you can extract the word <Answer index={0} />. Using 5-bit binary (i.e. subtracting one from each letter) you get ANSSNL, so <Answer index={1} /> is the second answer."
    },
    "puz153": {
      "hash": "be1d9cbe6373a3c61ee8c7ddcc84bc95e2f3d7d6cca940886d4857b7cff488c4",
      "content": "This puzzle is a reference to Fort Minor’s “Remember the Name”.\\nThe phrases can be matched semantically to the following portion of the song:\\n\\n> This is ten percent luck, twenty percent skill  \\n> Fifteen percent concentrated power of will  \\n> Five percent pleasure, fifty percent pain  \\n> And a hundred percent reason to remember the name  \\n\\nWe can use the lyrics as an order and the percents of the lyrics as an index (dividing the percent by 5, as the strings are each 20 letters long):\\n\\n<Table\\n  headers={[\\"Lyric\\", \\"Text\\", \\"Index\\", \\"Letter\\"]}\\n  cells={[\\n    [\\"10 percent luck\\", \\"ASIMPLEROLLOFTHEDICE\\", \\"2\\", \\"S\\"],\\n    [\\"20 percent skill\\", \\"ADROITADEPTANDCLEVER\\", \\"4\\", \\"O\\"],\\n    [\\"15 percent concentrated power of will\\", \\"SUPERDISCIPLINEDMIND\\", \\"3\\", \\"P\\"],\\n    [\\"5 percent pleasure\\", \\"HAPPINESSECSTASYGLEE\\", \\"1\\", \\"H\\"],\\n    [\\"50 percent pain\\", \\"INJURYADDINGTOINJURY\\", \\"10\\", \\"I\\"],\\n    [\\"100 percent reason to remember the name\\", \\"REASONTOREMEMBERNAME\\", \\"20\\", \\"E\\"],\\n  ]}\\n/>\\n\\nThe answer to this puzzle is <Answer />."
    },
    "puz155": {
      "hash": "72628e07245e30d6b3d7b2c8f9bf34537bdc7c21ce89bf9b642c0d9e8a922f76",
      "content": "This is a map of the [Delaware Wedge](https://en.wikipedia.org/wiki/Delaware_Wedge): orange represents Pennsylvania, blue is Maryland and pink is Delaware. The red circle is the Twelve Mile Circle, which is centered at <Answer />."
    },
    "puz156": {
      "hash": "60a67c56c613047b8bc36155fccc142d52f1ad4acbfb0a550caba6c212d47d39",
      "content": "The clues can be solved into pairs of words related with a simple wordplay transformation:\\n\\n<Table\\n\\theaders={[\\"Left clue\\", \\"Left answer\\", \\"Right clue\\", \\"Right answer\\", \\"Transformation\\", \\"Result\\"]}\\n\\tcells={[\\n\\t\\t[\\"Curved, edible nuts\\", \\"CASHEWS\\", \\"Redeems, as a check\\", \\"CASHES\\", \\"Delete W\\", \\"ANSER\\"],\\n\\t\\t[\\"Flawless\\", \\"PERFECT\\", \\"Commander in Ancient Rome\\", \\"PREFECT\\", \\"Swap adjacent R and E\\", \\"ANSRE\\"],\\n\\t\\t[\\"Lover of Eurydice\\", \\"ORPHEUS\\", \\"Offerer of a red or blue pill, famously\\", \\"MORPHEUS\\", \\"Prepend M\\", \\"MANSRE\\"],\\n\\t\\t[\\"Monkey with mustache-like hair\\", \\"TAMARIN\\", \\"Fruit used in a Filipino stew\\", \\"TAMARIND\\", \\"Append D\\", \\"MANSRED\\"],\\n\\t\\t[\\"Projectile\\", \\"MISSILE\\", \\"Classify a record incorrectly, say\\", \\"MISFILE\\", \\"Change S to F\\", \\"MANFRED\\"],\\n\\t]}\\n/>\\n\\nApplying each of these transformations to the title, as shown in the \\"Result\\" column above, gives the answer <Answer />. (Though we apply the transformations in presentation order above, they are presented alphabetically because they can be applied in any order to produce the same result.)"
    },
    "puz157": {
      "hash": "3087dc336c7d6c4318937f7cb0383250b6586fcd840c5dde2b17ef9ccd7168eb",
      "content": "Solve the clues: FA, FACET, ETHER, ERASE, SEIZE, ZENDO, DO. Each answer’s last two letters are the same as the next answer’s first two letters. The “unchecked” letters (the ones that don’t belong to any pair of two letters), which also happen to be the middle letters of integer clues, spell <Answer />, the answer."
    },
    "puz158": {
      "hash": "440951129a2ad01c8d889b0144100f0eb6db9cc130b8e59946eef02d80df46f4",
      "content": "Convert letters to numbers using A1Z26. The title suggests making a [magic square](https://en.wikipedia.org/wiki/Magic_square). Doing so, with a magic sum of X+Q+V=24+17+22=63, gives us the following table:\\n\\n<Table\\n  tableClassName=\\"vertical-barred cells-text-align-center\\"\\n  cells={[\\n    [\\"20\\", \\"25\\", \\"18\\"],\\n    [\\"19\\", \\"21\\", \\"23\\"],\\n    [\\"24\\", \\"17\\", \\"22\\"]\\n  ]}\\n/>\\n\\nOr, converted back to letters, we have:\\n\\n<Table\\n  tableClassName=\\"vertical-barred cells-text-align-center\\"\\n  cells={[\\n    [\\"T\\", \\"Y\\", \\"R\\"],\\n    [\\"S\\", \\"U\\", \\"W\\"],\\n    [\\"X\\", \\"Q\\", \\"V\\"]\\n  ]}\\n/>\\n\\nIf we take our new letters in the order provided, we get the answer <Answer />."
    },
    "puz159": {
      "hash": "cebb636dab52537019cabcfd244d1f0f46301f838aec0a3bdbf44303ffe4fbc9",
      "content": "Solve the clues: BECK, ROCKS, PINESOL, VEVO, RUFFALO, APPLESTORE, SLAPCHOP, COCONUTS. Googling most of them together pulls up the lyrics to Lemon Demon’s PokéRAP, which parodies the original PokéRAP by replacing every Pokémon name with a word or phrase. In order, these answers replace Muk, Onix, Ninetales, Eevee, Tauros, Ivysaur, Zapdos, and Exeggutor. The first letters of those Pokémon spell <Answer />, the answer."
    },
    "puz162": {
      "hash": "46ea9b745dca93c1a26694b044fc4be0843fa58515c85d44b99a20a6041aad19",
      "content": "Rearrange the letters using the buttons to make a good cluephrase.\\n\\nIt’s RED THING THAT KYLE MACDONALD SWAPPED, which is a <Answer />."
    },
    "puz164": {
      "hash": "21b8de7127ddcfed96413cd406ceb55b2eff457ae13f442581dbc4da8720f4c1",
      "content": "Read the second letters. It spells <Answer />."
    },
    "puz165": {
      "hash": "f53f84814ba23a9e4eaeb46877a965371d6e55ed6bb87c7e75461e6722bda380",
      "content": "These are the six-letter HTML colors violet, silver, bisque, indigo, yellow, and maroon. Taking the first letter of the first color, the second letter of the second, etc. gives us the answer: <Answer />."
    },
    "puz166": {
      "hash": "829f5b38866e732c654a1faf894648b615133f207e32898f1c26817ab7a4719d",
      "content": "The puzzle represents the well-known repetitive English tongue-twister, \\"Peter Piper picked a peck of pickled peppers\\", with the repeated \\"5 4 6\\" and \\"3 1 7 5\\" representing the first three and last four words of that phrase, respectively. Indexing \\"3 1 7 5 5 4 6\\" into the words as ordered in the bolded part, \\"peck of pickled peppers Peter Piper picked\\", gives <Answer />, the answer.\\n\\n<AuthorsNotes>\\nThis was inspired by doing <a href=\\"https://code.golf/tongue-twisters\\">Tongue Twisters on code.golf</a>.\\n</AuthorsNotes>"
    },
    "puz168": {
      "hash": "81864a3134dcb0918fa7af1c219a3ae4714813332ce78cca6d729ca8a10c3de9",
      "content": "This is the University of Washington’s Drumheller Fountain. To the right is a promenade deliberately aligned with a magnificent vista of <Answer /> on a clear day.\\n\\n<AuthorsNotes>\\n\\n> Patrick: hmm i think technically trees block it from your picture but it's ok...\\n\\n<iframe width=\\"394\\" height=\\"701\\" src=\\"https://www.youtube.com/embed/q8T-Zwc1_g4\\" title=\\"And if you look to the right...\\" frameborder=\\"0\\" allow=\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\\" referrerpolicy=\\"strict-origin-when-cross-origin\\" allowfullscreen></iframe>\\n\\n> Mark: is this faint silhouette not it? or is it just clouds\\n>\\n> <Image />\\n>\\n> Amon: yeah that totally looks like it\\n>\\n> Patrick: yeah that's it\\n>\\n> Patrick: much clearer in person\\n\\n</AuthorsNotes>"
    },
    "puz169": {
      "hash": "921ae32cdb37a2a77755e18d0eb9c0e6308282f37a7cb9d3624f25014d826a87",
      "content": "Solve the clues: RESPAWNING and CONSCRIPTS. The first answer can be entered into the grid vertically and the second answer can be entered horizontally to intersect at S.\\n\\n<PuzzleGrid\\n\\ttext={\`\\n...R......\\n...E......\\nCONSCRIPTS\\n...P......\\n...A......\\n...W......\\n...N......\\n...I......\\n...N......\\n...G......\\n\\t\`.trim().split(\\"\\\\n\\").join(\\"|\\")}\\n\\toptionsOverride={{\\n\\t\\t\\"data-fill-classes\\":\\"transparent white yellow\\",\\n\\t\\t\\"data-fills\\": \`\\n...1......\\n...1......\\n1112111111\\n...1......\\n...1......\\n...1......\\n...1......\\n...1......\\n...1......\\n...1......\\n\\t\\t\`.trim().split(\\"\\\\n\\").join(\\"|\\"),\\n\\t}}\\n/>\\n\\nNow, rotate the grid 90 degress clockwise as indicated by the arrow; RESPAWNING down and CONSCRIPTS across intersect at P.\\n\\n<PuzzleGrid\\n\\ttext={\`\\n.......R..\\n.......E..\\n.......S..\\nCONSCRIPTS\\n.......A..\\n.......W..\\n.......N..\\n.......I..\\n.......N..\\n.......G..\\n\\t\`.trim().split(\\"\\\\n\\").join(\\"|\\")}\\n\\toptionsOverride={{\\n\\t\\t\\"data-fill-classes\\":\\"transparent white yellow\\",\\n\\t\\t\\"data-fills\\": \`\\n.......1..\\n.......1..\\n.......1..\\n1111111211\\n.......1..\\n.......1..\\n.......1..\\n.......1..\\n.......1..\\n.......1..\\n\\t\\t\`.trim().split(\\"\\\\n\\").join(\\"|\\"),\\n\\t}}\\n/>\\n\\nNow, rotate the grid 90 more degress clockwise; RESPAWNING down and CONSCRIPTS across intersect at I.\\n\\n<PuzzleGrid\\n\\ttext={\`\\n......R...\\n......E...\\n......S...\\n......P...\\n......A...\\n......W...\\n......N...\\nCONSCRIPTS\\n......N...\\n......G...\\n\\t\`.trim().split(\\"\\\\n\\").join(\\"|\\")}\\n\\toptionsOverride={{\\n\\t\\t\\"data-fill-classes\\":\\"transparent white yellow\\",\\n\\t\\t\\"data-fills\\": \`\\n......1...\\n......1...\\n......1...\\n......1...\\n......1...\\n......1...\\n......1...\\n1111112111\\n......1...\\n......1...\\n\\t\\t\`.trim().split(\\"\\\\n\\").join(\\"|\\"),\\n\\t}}\\n/>\\n\\nFinally, rotate the grid 90 more degrees clockwise; RESPAWNING down and CONSCRIPTS across intersect at N.\\n\\n<PuzzleGrid\\n\\ttext={\`\\n..R.......\\n..E.......\\n..S.......\\n..P.......\\n..A.......\\n..W.......\\nCONSCRIPTS\\n..I.......\\n..N.......\\n..G.......\\n\\t\`.trim().split(\\"\\\\n\\").join(\\"|\\")}\\n\\toptionsOverride={{\\n\\t\\t\\"data-fill-classes\\":\\"transparent white yellow\\",\\n\\t\\t\\"data-fills\\": \`\\n..1.......\\n..1.......\\n..1.......\\n..1.......\\n..1.......\\n..1.......\\n1121111111\\n..1.......\\n..1.......\\n..1.......\\n\\t\\t\`.trim().split(\\"\\\\n\\").join(\\"|\\"),\\n\\t}}\\n/>\\n\\nIn order, those intersections spell the answer, <Answer />.\\n\\n<AuthorsNotes>\\nThis was inspired by [https://layton.fandom.com/wiki/Puzzle:Two_Times_Topsy-Turvy](https://layton.fandom.com/wiki/Puzzle:Two_Times_Topsy-Turvy).\\n</AuthorsNotes>"
    },
    "puz17": {
      "hash": "090dfcaacdd34aedbe367f88d598eb6dd7dcf60dd67db14d1e85a653348016bf",
      "content": "The answers to clues A, B, and C are ERATO, EACH, and LEANS, which we may enter into the blanks above. The formatting of the blanks directs us to prepend a given letter (A, B or C) and append an unknown letter to each answer to form a new word. The unknown letters are, uniquely, R, Y and E, to form the words AERATOR, BEACHY and CLEANSE.\\n\\nEnter the unknown letters into the fourth row to form the sequence D, R, Y, E, ?. Once again, only one letter can replace the question mark to form a new word. That letter is R, giving the answer <Answer />."
    },
    "puz170": {
      "hash": "73214c4d9714f358860870fe689901de8c57ad2a7722d723aba04126f924e202",
      "content": "Searching for “piole uniqlo” or “piole mall” reveals that this shopping center has a unique name and is located at exit of [Himeji Station](https://www.google.com/maps/@34.8272809,134.6902659,3a,90y,102.5h,92.7t/data=!3m8!1e1!3m6!1sAF1QipNXa5V52V1UWhD31IgfMbHjGPaAN2USBJ9DHVIT!2e10!3e11!6shttps:%2F%2Flh5.googleusercontent.com%2Fp%2FAF1QipNXa5V52V1UWhD31IgfMbHjGPaAN2USBJ9DHVIT%3Dw900-h600-k-no-pi-2.6988031966523636-ya60.5524940004297-ro2.5-fo90!7i5376!8i2688?coh=205410&entry=ttu) in Himeji, Japan. Immediately stepping left out of the station, <Answer /> is aligned in the horizon along [Otemaedori](https://www.google.com/maps/@34.8276436,134.690348,3a,54.8y,17.84h,92.36t/data=!3m8!1e1!3m6!1sAF1QipOHRjWmB4TL2cwL2LgF_cgCMR7WQc_2X6K4pN0-!2e10!3e11!6shttps:%2F%2Flh5.googleusercontent.com%2Fp%2FAF1QipOHRjWmB4TL2cwL2LgF_cgCMR7WQc_2X6K4pN0-%3Dw900-h600-k-no-pi-2.362591769215868-ya0.9608302692865323-ro1.5-fo90!7i5376!8i2688?coh=205410&entry=ttu)."
    },
    "puz171": {
      "hash": "08f9a7644e9ec727b1012a78b0d04a5077bfe41efa12848d18d871f2444ebdc4",
      "content": "Much like the [JFK SHAGS](https://puzzles.mit.edu/2012/puzzles/ogre_of_la_mancha/jfk_shags_a_sad_slim_lass/) puzzle, this is about an arrangement of things in a standard layout pointing toward another item in the layout. As suggested by the flavortext, the layout in question is the periodic table, and the element being pointed at is <Answer />.\\n\\n<Image />"
    },
    "puz172": {
      "hash": "e1c97d0057058b3843f9f11a761a4c3b64e50a18bb1684ea4e0663e77443aa21",
      "content": "Indexing into the composers' names, you get <Answer index={0} />, the first answer. Additionally, the numbers refer to the symphonies that each of the composers composed. Considering the keys of the symphonies gives <Answer index={1} />, the second answer.\\n\\n<AuthorsNotes>\\nAs it turns out, Haydn had a lesser-known brother who also composed symphonies. Fortunately, his 2nd symphony was also in the key of C.\\n</AuthorsNotes>"
    },
    "puz173": {
      "hash": "f8630025f7e99f2e4f57e44045c29c3c8b1493c8f1ea048ea7c6b8a1d342966c",
      "content": "The bird of paradise clues the constellation, Apus. Like [the original Scramble for the Stars](https://2017.galacticpuzzlehunt.com/puzzle/3/5.html), we should look at the bordering constellations, of which there are seven of them. In order of 1–7, they are Circinus, Octans, Musca, Pavo, Ara, Chamaeleon, and Triangulum Australe. The first letters of these constellations in order spell out <Answer />, the answer."
    },
    "puz175": {
      "hash": "0c4bc69b1ee3372813765ddb1296573a1f8f7c17f31a272ee38c218bee73352d",
      "content": "Each clue clues a word that A) contains exactly one X; B) has the same number of letters as the clue has words. These answers are:\\n\\n<Table\\n\\theaders={[\\"Clue\\", \\"Answer\\"]}\\n\\tcells={[\\n\\t\\t[\\"Taylor Swift has a long list of these\\", \\"EXLOVERS\\"],\\n\\t\\t[\\"Body part that widens during delivery\\", \\"CERVIX\\"],\\n\\t\\t[\\"Musical instrument option for many a middle school student\\", \\"SAXOPHONE\\"],\\n\\t\\t[\\"Fire or cut\\", \\"AXE\\"],\\n\\t\\t[\\"Slang word meaning overly dramatic\\", \\"EXTRA\\"],\\n\\t\\t[\\"Orientation label that comes after gay in initialism\\", \\"BISEXUAL\\"],\\n\\t\\t[\\"First name of American founder killed in a duel\\", \\"ALEXANDER\\"],\\n\\t]}\\n/>\\n\\nUsing the X as an indicator for which word of the clue to take, we can form a new clue: \\"Swift delivery option or word after American\\". The answer to this clue is EXPRESS, and using a similar mechanic, we can also take the corresponding word from the clue, DELIVERY, to get the final answer: <Answer />."
    },
    "puz176": {
      "hash": "bd2bd31eb8de8525d07f1c44ca65eb6d87816f2a81be062cb3d438e20b2154ed",
      "content": "The answers to the clues are COIL, LATENT, ROOST, STARE, ANISE, DUNK.\\nEach of these words has a corresponding word in *another* clue that is one letter off.\\nThese matching words are COOL, LATEST, ROAST, START, ANIME, HUNK.\\n\\nThis yields a cycle where one one clue’s answer leads to another clue.\\nThe direction and starting point can be disambiguated by noticing that one answer’s matching word is START, and one answer’s matching word is LATEST.\\n\\nWe can write down this cycle order and the letters that changed:\\n\\n<Table\\n  headers={[\\"Clue\\", \\"Clue word\\", \\"Answer to next clue\\", \\"Letter from clue word\\", \\"Letter from answer\\"]}\\n  cells={[\\n    [\\"Able to become active, but yet to start doing so\\", \\"START\\", \\"STARE\\", \\"T\\", \\"E\\"],\\n    [\\"Some straight women might do this at the body of a hunk\\", \\"HUNK\\", \\"DUNK\\", \\"H\\", \\"D\\"],\\n    [\\"You might do this to an Oreo in some nice cool milk\\", \\"COOL\\", \\"COIL\\", \\"O\\", \\"I\\"],\\n    [\\"\\\\\\"_____ -- A Circle of Children\\\\\\" (Japanese science fiction anime)\\", \\"ANIME\\", \\"ANISE\\", \\"M\\", \\"S\\"],\\n    [\\"With \\\\\\"star\\\\\\", a spice that can be used to flavor roast duck or biryani\\", \\"ROAST\\", \\"ROOST\\", \\"A\\", \\"O\\"],\\n    [\\"Flying type healing move whose PP was cut in half in the latest generation of Pokémon\\", \\"LATEST\\", \\"LATENT\\", \\"S\\", \\"N\\"],\\n  ]}\\n/>\\n\\nThe answer to this puzzle is <Answer />."
    },
    "puz177": {
      "hash": "16bfe7e446f7c29e2a238c1799f72003c0f47fbf5a7f466529ebc96748568405",
      "content": "Any answer from 0 to 20 is accepted. Don’t believe Google, which will lead you to incorrect articles claiming it’s 60% alcohol. \\n\\n<Image fullWidth={true} />\\n\\nIn fact, elephant milk is *destabilized* by 60% alcohol, a fact that’s been misinterpreted by several sensational places. We can do some research to prove that 60% is way too big:\\n\\n* From [\\"Milk Composition of Asian Elephants (*Elephas maximus*) in a Natural Environment in Myanmar during Late Lactation\\"](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC7222762/), we get an upper bound of 82.44% water, so it’s maximum 18% ABV. Note that this paper doesn’t say there’s any alcohol in elephant milk.\\n* From [\\"Myth, marula, and elephant: an assessment of voluntary ethanol intoxication of the African elephant (*Loxodonta africana*) following feeding on the fruit of the marula tree (*Sclerocarya birrea*)\\"](https://pubmed.ncbi.nlm.nih.gov/16555195/), and the fact that elephants weigh roughly 3000 kilograms, we can see they would have to ingest 10 to 27 liters of 7% ethanol to be drunk.\\n* From [the SeaWorld page \\"All About Elephants - Birth & Care of Young\\"](https://seaworld.org/animals/all-about/elephants/care-of-young/), baby elephants weigh around 100 kilograms, and drink around 10 liters of milk a day. Clearly they would be drunk (or worse) if the milk is 7% or higher ABV, and there are no reports of drunk calves anywhere.\\n\\nSee also [this NY times article](https://web.archive.org/web/20200620070603/https://www.nytimes.com/2020/05/20/science/drunk-elephants-genes.html)."
    },
    "puz179": {
      "hash": "b6db481aa4ddf71175ff8e1090ef19cf7e581df22b6af3a5588b9d7fc752eaee",
      "content": "These clues solve to a smaller set of answers, each of them repeated some number of times:\\n\\n<Table\\n  headers={[\\"Clue\\", \\"Answer\\"]}\\n  cells={[\\n\\t[\\"_____ as day\\", \\"CLEAR\\"],\\n\\t[\\"_____ Blue\\", \\"DEEP\\"],\\n\\t[\\"_____ end\\", \\"DEEP\\"],\\n\\t[\\"_____ giant\\", \\"GAS\\"],\\n\\t[\\"_____-force attack\\", \\"BRUTE\\"],\\n\\t[\\"Absolve\\", \\"CLEAR\\"],\\n\\t[\\"Empty\\", \\"CLEAR\\"],\\n\\t[\\"Et tu, _____ ?\\", \\"BRUTE\\"],\\n\\t[\\"Legolas, for example\\", \\"ELF\\"],\\n\\t[\\"Plain\\", \\"CLEAR\\"],\\n\\t[\\"Plantain, for example\\", \\"FRUIT\\"],\\n\\t[\\"Produce\\", \\"FRUIT\\"],\\n\\t[\\"Profound\\", \\"DEEP\\"],\\n\\t[\\"Reply to a question\\", \\"ANSWER\\"],\\n\\t[\\"Result of labor\\", \\"FRUIT\\"],\\n\\t[\\"Savage\\", \\"BRUTE\\"],\\n\\t[\\"Spelled backwards, it’s something you almost certainly did yesterday\\", \\"DEEP\\"],\\n\\t[\\"State of matter\\", \\"GAS\\"],\\n\\t[\\"The _____ on the Shelf\\", \\"ELF\\"],\\n\\t[\\"The number of times each _____ appears is relevant\\", \\"ANSWER\\"],\\n\\t[\\"The thing you’re trying to get right now\\", \\"ANSWER\\"],\\n\\t[\\"With “up”, to inflate one’s ego\\", \\"GAS\\"],\\n\\t[\\"Word shouted before the use of a defibrillator\\", \\"CLEAR\\"]\\n  ]}\\n/>\\n\\nWe can then use the their multiplicities as indices into these answers, and arrange them in alphabetical (A-G) order:\\n\\n<Table\\n  headers={[\\"Answer\\", \\"Number of appearances\\", \\"Extracted letter\\"]}\\n  cells={[\\n  \\t[\\"ANSWER\\", \\"3\\", \\"S\\"],\\n  \\t[\\"BRUTE\\", \\"3\\", \\"U\\"],\\n  \\t[\\"CLEAR\\", \\"5\\", \\"R\\"],\\n  \\t[\\"DEEP\\", \\"4\\", \\"P\\"],\\n  \\t[\\"ELF\\", \\"2\\", \\"L\\"],\\n  \\t[\\"FRUIT\\", \\"3\\", \\"U\\"],\\n  \\t[\\"GAS\\", \\"3\\", \\"S\\"]\\n  ]}\\n/>\\n\\nThe answer is <Answer />."
    },
    "puz180": {
      "hash": "d4a7173d5bd3c76ef599ff2579408c962a56b578f7a27b97dce9d39d7129bacb",
      "content": "As the title describes, these are all enumerations of various works with titles with a lot of words. In order, they are:\\n\\n* Don’t Be a Menace to South **Central** While Drinking Your Juice in the Hood, 1996 parody film\\n* Milk inside a bag of milk inside a bag of milk and Milk outside a bag of milk **outside** a bag of milk, a Nintendo Switch release of two entries in a series of psychological horror games\\n* The Boy Bands Have Won, and All the Copyists and the Tribute Bands and the TV Talent Show Producers Have Won, If We Allow Our Culture to Be Shaped by Mimicry, Whether from Lack of Ideas or from Exaggerated Respect. You Should Never Try to Freeze Culture. What You Can Do Is Recycle That Culture. Take Your Older Brother’s Hand-Me-Down Jacket and Re-Style It, Re-Fashion It to the Point Where It Becomes Your Own. But Don’t Just Regurgitate Creative History, or Hold Art and Music and Literature as Fixed, **Untouchable** and Kept Under Glass. The People Who Try to ‘Guard’ Any Particular Form of Music Are, Like the Copyists and Manufactured Bands, Doing It the Worst Disservice, Because the Only Thing That You Can Do to Music That Will Damage It Is Not Change It, Not Make It Your Own. Because Then It Dies, Then It’s Over, Then It’s Done, and the Boy Bands Have Won, a Chumbawamba album\\n* Na Na Na (Na Na Na Na **Na** Na Na Na Na), a My Chemical Romance song\\n* Alexander and the **Terrible**, Horrible, No Good, Very Bad Day, a children’s book\\n* The **Idler** Wheel Is Wiser Than the Driver of the Screw and Whipping Cords Will Serve You More Than Ropes Will Ever Do, a Fiona Apple album\\n* On the Origin of Species by Means of **Natural** Selection, or the Preservation of Favoured Races in the Struggle for Life, a publication by Charles Darwin\\n* Borat: Cultural Learnings of America for Make Benefit **Glorious** Nation of Kazakhstan, a 2006 mockumentary\\n\\nTaking the first letters of the words corresponding to the underlined numbers (bolded above) gives us the answer, <Answer />."
    },
    "puz182": {
      "hash": "0dcb8c4c82e27f176a72758f6852364f0768a0742e4636bd0051614a3b2b1f1e",
      "content": "The image hints at the wavelengths of different types of waves on the electromagnetic spectrum. We can use the numbers to index into common names of regions of the spectrum:\\n\\n<Table\\n  cells={[\\n    [\\"Region\\", \\"Index\\", \\"Extracted letter\\"],\\n    [\\"Radio\\", \\"4\\", \\"I\\"],\\n    [\\"Microwave\\", \\"5\\", \\"O\\"],\\n    [\\"Infrared\\", \\"2\\", \\"N\\"],\\n    [\\"Visible\\", \\"5\\", \\"B\\"],\\n    [\\"Ultraviolet\\", \\"10\\", \\"E\\"],\\n    [\\"X-ray\\", \\"3\\", \\"A\\"],\\n    [\\"Gamma ray\\", \\"3\\", \\"M\\"]\\n  ]}\\n/>\\n\\nThe extracted letters spell out the answer, <Answer />."
    },
    "puz183": {
      "hash": "b27bbb68985f2214fa77240a587e59bdea4e6f7ab1db9c54877f3d1b9205ab89",
      "content": "Each of these images is a data visualization which has as many data points as there are letters in its name. One of those data points is highlighted in magenta. Those chart names are as follows:\\n\\n<Table \\n  headers={[\\"Chart name\\", \\"Position of highlighted data point\\", \\"Letter at that position\\"]}\\n  cells={[\\n  \\t[\\"GANTT\\", \\"1\\", \\"G\\"],\\n  \\t[\\"TREEMAP\\", \\"6\\", \\"A\\"],\\n  \\t[\\"PIE\\", \\"2\\", \\"I\\"],\\n  \\t[\\"SANKEY\\", \\"3\\", \\"N\\"]\\n  ]}\\n/>\\n\\nIf the letters in the chart name were corresponded to the data points in each data visualization, the highlighted letters would spell <Answer />."
    },
    "puz185": {
      "hash": "c4c2ee63ce38a31d5cf64e6a95ba56ee1571721d71c6e54f2126ed7287724857",
      "content": "All these \\"clues\\" are permutations of the same letters but each \\"clue\\" has an extra letter. Extracting the extra letters from each \\"clue\\" gives the answer, <Answer />."
    },
    "puz186": {
      "hash": "8161a1eb898b35e484ba5f8d3102561139f593dfef07c5056f1c5c77ddf13354",
      "content": "Split the sequence of letters into two subsequences that make sensible English messages. They read CONGRATULATIONS READ THESE AS ZEROS and THESE REPRESENT ONES THOUGH. If we go back to the original sequence, replace letters in the first subsequence with 0, and replace letters in the second subsequence with 1, we get 00100 01001 00111 01001 10100 00001 01100 01100 01111 10110 00101. This is five-bit binary for <Answer />, the answer.\\n\\n<AuthorsNotes>\\nIn this puzzle’s ontology, “50/50 1” is of course [50/50](https://2019.galacticpuzzlehunt.com/puzzle/fifty-fifty.html) from the 2019 Galactic Puzzle Hunt.\\n</AuthorsNotes>"
    },
    "puz187": {
      "hash": "b0d4914619632541b165f379d80f4e3ec500b87b4ff661a66b73b743f841ae8d",
      "content": "Taking the other part of the arc that completes a circle, the letter forms of C, A, R, and G can be formed. The last letter, O, is the complement of nothing at all. Thus, the answer is <Answer />."
    },
    "puz189": {
      "hash": "f0b16522e603fd1e98f9cbd78952ce1248770dad74faf0d2420afde87d277572",
      "content": "We had a bit more than 3 in the previous puzzle. We no longer have the bit more. The title clues that we should translate \\"3\\" into Spanish to get TRES. Performing the same wordplay as in the previous puzzle, we combine DES, TRES, and DES backwards to get <Answer />."
    },
    "puz19": {
      "hash": "e2f9c13471dccfec03ba699c2e9d762ceb530bf8ed8c694875e73fb9dc97a5da",
      "content": "The image art and flavortext clues completing the wall by adding a layer of seven more bricks with letters on them. The flavortext further suggests forming words by moving between adjacent bricks.\\n\\nAt this point, solvers may notice GREAT and, possibly, BERLIN from the given letters on the right side of the wall. In fact, thematically, after completing the wall, its letters may be used to form the names of four famous brick walls:\\n\\n- GREAT WALL\\n- BERLIN WALL\\n- HADRIAN’S WALL\\n- WESTERN WALL\\n\\n<Image />\\n\\nTaking the letters on the newly added layer gives the answer, <Answer />."
    },
    "puz190": {
      "hash": "eb5425cbd7c3b63913a9275ecc0da9b07f2a909d1a7c3a59eaa53630dc831def",
      "content": "These clips sound like Super Mario 64, but are actually from <Answer />. Here are the video versions of the clips:\\n\\n<iframe width=\\"100%\\" height=\\"513\\" src=\\"https://www.youtube.com/embed/r3-Aqlu5WnI\\" title=\\"[GPH 2024] name the game - clip1\\" frameborder=\\"0\\" allow=\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\\" referrerpolicy=\\"strict-origin-when-cross-origin\\" allowfullscreen></iframe>\\n\\n<iframe width=\\"100%\\" height=\\"513\\" src=\\"https://www.youtube.com/embed/Pviusu2WuUo\\" title=\\"[GPH 2024] name the game - clip2\\" frameborder=\\"0\\" allow=\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\\" referrerpolicy=\\"strict-origin-when-cross-origin\\" allowfullscreen></iframe>\\n\\nIf you’ve played the games, careful listening reveals some differences:\\n\\n- Peach’s Castle theme (officially “Inside the Castle Walls”) is higher fidelity than the original, especially the string instruments.\\n- In the first clip, the sounds of skittering footsteps before jumping, a crashing wave after entering the painting, and roiling bubbles at the very end are all unique to Odyssey. When kicked out of a painting in SM64, the POWER meter refills with loud blips and Mario says, “Mamma mia!”, not heard in this clip. ([comparison](https://youtu.be/1mzTWd2Cj8Y?t=2832))\\n- In the second clip, the advance dialogue sound and the sound of the Moon being added to the HUD at the end are unique to Odyssey. In SM64, the Star appearing would first play its own tune, and Mario would exclaim, “Here we go!” after collecting it, not heard in this clip. ([comparison](https://youtu.be/aEgMR0Uk3Q4?t=245))\\n\\nAlternatively, without any prior knowledge, a song ID tool can get you to “Inside the Castle Walls”, and then [this wikipage](https://www.mariowiki.com/Inside_the_Castle_Walls#Super_Mario_Odyssey) can help identify the exact arrangement.\\n\\n<AuthorsNotes>\\n##### Title: <Twemoji tag=\\"span\\">✨</Twemoji>  \\n<Image />\\n</AuthorsNotes>"
    },
    "puz192": {
      "hash": "e37cc1708f821eef0d678bbe2cda61475f35cf1efcc67db6dd3cf7c1d3542ba3",
      "content": "The flavor text going around the plate reads “TRACE WHERE THE FRUITS STEM FROM TO REVEAL WHAT TREASURE LIES BERRIED WITHIN.”\\n\\nThe serving plate has an arrow on the left with a dotted line coming out of it, and an X on the right. Tracing a line straight from the arrow to the X and taking the first letter of each object the line passes through, gives the clue phrase “BOTANIC DEFS.” This is indicating to use the botanic definition of “berry” from the flavor text and title.\\n\\n<Image fullWidth={true} name=\\"botanicdefs\\" />\\n\\n[Berry classification](https://www.waynesword.net/fruitid1.htm) is kind of complicated, and to make things more confusing, people disagree on what qualifies as a _true berry_, which is an even narrower definition of berry. This puzzle accepts technicalities as berries, because that’s what those fun fact sheets that people like to pass around online usually do.\\n\\n<Image fullWidth={true} name=\\"numbered\\" />\\n\\n1. **Blackberry** - <Berry isBerry={false} />. An aggregate fruit of drupes.\\n2. **Corn** - <Berry isBerry={false} />. Each kernel is a caryopsis.\\n3. **Mulberry** - <Berry isBerry={false} />. A multiple fruit of drupes.\\n4. **Watermelon** - <Berry isBerry={true} />, a specialized form called a pepo which some consider false berries.\\n5. **Lime** - <Berry isBerry={true} />, a specialized form called a hesperidium which some consider false berries.\\n6. **Kiwi** - <Berry isBerry={true} />.\\n7. **Pumpkin** - <Berry isBerry={true} />, a pepo.\\n8. **Blueberries** - <Berry isBerry={true} />, though some call them false berries because they’re epigynous.\\n9. **Kiwano** - <Berry isBerry={true} />, a pepo.\\n10. **Grapes** - <Berry isBerry={true} />.\\n11. **Pomegranate** - <Berry isBerry={true} />, though some classify it separately as a balausta because non-ovary parts of the flower develop into part of the fruit.\\n12. **Persimmon** - <Berry isBerry={true} />.\\n13. **Cherry** - <Berry isBerry={false} />. A drupe.\\n14. **Peanut** - <Berry isBerry={false} />. A legume.\\n15. **Guava** - <Berry isBerry={true} />.\\n16. **Banana** - <Berry isBerry={true} />, though some consider them a false fruit because they’re parthenocarpic.\\n17. **Orange** - <Berry isBerry={true} />, a hesperidium.\\n18. **Tomato** - <Berry isBerry={true} />.\\n19. **Apple** - <Berry isBerry={false} />. A pome.\\n20. **Nectarine** - <Berry isBerry={false} />. A drupe.\\n21. **Ice cream** - <Berry isBerry={false} />.\\n22. **Cucumber** - <Berry isBerry={true} />, a pepo.\\n23. **Dragonfruit** - <Berry isBerry={true} />, though some would classify it separately as an acrosarcum because non-ovary parts of the flower develop into part of the fruit.\\n24. **Eggplant** - <Berry isBerry={true} />.\\n25. **Fig** - <Berry isBerry={false} />. A multiple fruit, a modified stem encasing hundreds of drupes.\\n26. **Strawberry** - <Berry isBerry={false} />. An accessory fruit. The real fruits are each of the little white things on the outside, and those are achenes.\\n27. **Plum** - <Berry isBerry={false} />. A drupe.\\n28. **Bell pepper** - <Berry isBerry={true} />.\\n29. **Pineapple** - <Berry isBerry={true} />. Technically a multiple fruit of many berries that have fused together, and berries are supposed to be simple, but we’ll allow it.\\n30. **Chili** pepper - <Berry isBerry={true} />.\\n31. **Pear** - <Berry isBerry={false} />. A pome.\\n32. **Mango** - <Berry isBerry={false} />. A drupe.\\n33. **Raspberry** - <Berry isBerry={false} />. An aggregate fruit of drupes.\\n34. **Avocado** - <Berry isBerry={true} />.\\n35. **Lemon** - <Berry isBerry={true} />, a hesperidium.\\n36. **Lychee** - <Berry isBerry={false} />. An aril, though some consider it a false aril. Let’s not get into it.\\n37. **Yew berries** - <Berry isBerry={false} />. An aril, a false fruit.\\n38. **Kiwi** - <Berry isBerry={false} />. A bird.\\n\\nStarting from the arrow, trace a straight line to the next berry, ignoring non-berries. Then follow the direction that the stem leads away from the fruit (where the fruits “stem from”) to reach the next fruit, until you reach the X. The line traced reads out the answer. The treasure inside the fruit is <Answer />!\\n\\n<Image fullWidth={true} name=\\"answer\\" />"
    },
    "puz194": {
      "hash": "34ee4dfbc4b4ede058341b5237601478ecc0262beac930647e97718d0ec2921c",
      "content": "As clued by the title, we should translate each set of characters into Grade 2 Braille:\\n\\n\`\`\`\\n⠯⠕ ⠇⠀ ⠎⠱ ⠎⠉ ⠧⠊\\n⠧⠜ ⠧⠤ ⠏⠹ ⠣⠤ ⠏⠢\\n\`\`\`\\n\\nThe answer is <Answer />."
    },
    "puz196": {
      "hash": "32ca8407ef633072f0de583e1c4687ce916b55508cdd1b94b0a3a0b0d1807f3b",
      "content": "The gimmick is that, while the clues are underpinned and have multiple answers, one compelling answer has a number as a substring - specifically, the number in the parentheses. This lets us answer the clues:\\n\\n<Table\\n  cells={[\\n  \\t[\\"Clue\\", \\"Number\\", \\"Answer with number\\", \\"Indexed letter\\"],\\n  \\t[\\"Historic age\\", \\"10\\", \\"ENLIGH[TEN]MENT\\", \\"M\\"],\\n  \\t[\\"Feeling in space\\", \\"8\\", \\"W[EIGHT]LESSNESS\\", \\"E\\"],\\n  \\t[\\"Name on the Eiffel Tower\\", \\"4\\", \\"[FOUR]IER\\", \\"R\\"],\\n  \\t[\\"King Lear character\\", \\"1\\", \\"G[ONE]RIL\\", \\"G\\"],\\n  \\t[\\"Mesh\\", \\"2\\", \\"NE[TWO]RK\\", \\"E\\"],\\n  \\t[\\"European mountain range\\", \\"9\\", \\"APEN[NINE]S\\", \\"S\\"]\\n  ]}\\n/>\\n\\nUsing the number to index into these answers gives us <Answer />, the answer."
    },
    "puz197": {
      "hash": "a4919b4061f84d67aba600f730e94c9c7d379c66df444a49dc83a3b2b2f41b1c",
      "content": "The letters A,E,L,O,P,R, and V are drawn on top of each other, as shown in the image. There is only one compelling anagram, <Answer />, which is the answer.\\n\\n<Image />"
    },
    "puz199": {
      "hash": "f76222df01963462a70e72a6e057e043de77b0493f1d3af41dafb3618c125fc7",
      "content": "These characters are written in Inuktitut. The title says \\"na\\" 13 times. The puzzle text says something like \\"Paatman\\", which sounds like <Answer />, as [clued by the title](https://www.youtube.com/watch?v=EtoMN_xi-AM)."
    },
    "puz2": {
      "hash": "09e234d47810e34a632d7f08bc4d36cb17bf0225a6dfd418614920c87b8672a5",
      "content": "These are the electronic symbols for a resistor. The colors suggest that we want to look at the resistor color code. This gives us 1, 2, 3, 5 which we can use as indices into the colors BROWN, RED, ORANGE, and GREEN giving us the answer, <Answer />."
    },
    "puz20": {
      "hash": "c5b9a8c3feeff4747caed99bdb4641b5a2e44359e9907f77e73cf71da4443fd8",
      "content": "The first image is DEFT, a League of Legends player, and the last image is a SAX. On a QWERTY keyboard, the letters DEFT surround the letter R, and the letters SAX surround the letter Z. By analogy, the question mark would correspond to letters that surround the letter Y, which anagram to <Answer />, the answer."
    },
    "puz200": {
      "hash": "a2868ad1c3fe023fe6bffab089a87e42758b96dfb322bb26dbfe88606eb2ce62",
      "content": "The hex code for this color spells out #<Answer />."
    },
    "puz201": {
      "hash": "136fce9999528df97aad8d1b96fea7688b39045cf1e326cc8546303549ff05aa",
      "content": "The title refers to Microsoft, except each component of the word has been replaced in a silly manner with its \\"opposite\\". This has been done with a number of Microsoft products, with flexible notions of \\"opposite\\":\\n\\n<Table\\n  headers={[\\"Clue\\", \\"Microsoft product\\", \\"Index\\", \\"Letter\\"]}\\n  cells={[\\n  \\t[\\"Auditory One-bedroom\\", \\"Visual Studio\\", \\"2\\", \\"I\\"],\\n  \\t[\\"ManyPark\\", \\"OneDrive\\", \\"2\\", \\"N\\"],\\n  \\t[\\"Golddarkness\\", \\"Silverlight\\", \\"8\\", \\"I\\"],\\n  \\t[\\"Middle\\", \\"Edge\\", \\"3\\", \\"G\\"],\\n  \\t[\\"Doors\\", \\"Windows\\", \\"3\\", \\"N\\"],\\n  \\t[\\"Home\\", \\"Office\\", \\"1\\", \\"O\\"],\\n  \\t[\\"Letter\\", \\"Word\\", \\"3\\", \\"R\\"],\\n  \\t[\\"Individuals\\", \\"Teams\\", \\"2\\", \\"E\\"]\\n  ]}\\n/>\\n\\nIndexing the numbers into the names of the real Microsoft products that have their \\"opposites\\" listed, gives INIGNORE. This is the \\"opposite\\" of Microsoft <Answer />."
    },
    "puz203": {
      "hash": "260b717fc337249a03853f5a16b025079a083eb1aa9108a53499187c06002e70",
      "content": "These are descriptions of the three rules in \\"New Rules\\" by <Answer />.\\n\\n<Table\\n  headers={[\\"Clue\\", \\"Rule\\"]}\\n  cells={[\\n    [\\"Refrain from answering calls\\", \\"Don’t pick up the phone, you know he’s only calling ’cause he’s drunk and alone\\"],\\n    [\\"Do not grant access to that individual\\", \\"Don’t let him in, you’ll have to kick him out again\\"],\\n    [\\"Avoid befriending that individual\\", \\"Don’t be his friend, you know you’re gonna wake up in his bed in the mornin’\\"],\\n  ]}\\n/>"
    },
    "puz204": {
      "hash": "10c1f25452de77e42b0776c14929012d0b0f62a925237c88f36c5fe528fd6a7a",
      "content": "As in the previous puzzle, this is about songs with a lot of \\"na\\"s. The space between the \\"na\\"s gives the rhythm the \\"na\\"s are said. One thing that might help with the identification is the [xkcd comic 851](https://xkcd.com/851/). The [explain xkcd page](https://explainxkcd.com/wiki/index.php/851:_Na) for this comic identifies all the songs used in this puzzle. We then use the numbers to index into the words sung after the \\"na\\"s:\\n\\n- The first song is Na Na Hey Hey Kiss Him Goodbye. The next three words are \\"hey hey goodbye\\". We index 1 to the first \\"hey\\", - means we don’t index in the second \\"hey\\", and 6 gets indexed to \\"goodbye\\", giving the letters HY.\\n- The second song is Hey Jude, and the next two words are \\"hey Jude\\". We don’t index the first word, and index 3 in the second word to get the letter D.\\n- The last song is the theme song from Katamari Damacy, and the next two words are \\"Katamari Damacy\\". Indexing gives the last two letters RA.\\n\\nTogether these spell the answer <Answer />."
    },
    "puz205": {
      "hash": "ebd85e5f10f2c5c1adffe51085dd571423d9d47ad9f489ce05058643f161b1e4",
      "content": "Every time you flip coins, you are given a result of four heads.\\nThe answer to this puzzle is <Answer />."
    },
    "puz206": {
      "hash": "aa47da7826b5a8e156d7ed99ae943fdaa1821414e3d004643a03ce10d4c3498e",
      "content": "The clues resolve to answers that are all one letter off from the numbers one through eight:\\n\\n<Table \\n  headers={[\\"Clue\\", \\"Answer\\", \\"Corresponding number\\", \\"Swapped letter\\"]}\\n  cells={[\\n  \\t[\\"Sung poem\\", \\"ODE\\", \\"ONE\\", \\"D\\"],\\n  \\t[\\"Also\\", \\"TOO\\", \\"TWO\\", \\"O\\"],\\n  \\t[\\"Pang or spasm\\", \\"THROE\\", \\"THREE\\", \\"O\\"],\\n  \\t[\\"Stern\\", \\"DOUR\\", \\"FOUR\\", \\"D\\"],\\n  \\t[\\"Partner of rank\\", \\"FILE\\", \\"FIVE\\", \\"L\\"],\\n  \\t[\\"It’s not gender\\", \\"SEX\\", \\"SIX\\", \\"E\\"],\\n  \\t[\\"Cut off\\", \\"SEVER\\", \\"SEVEN\\", \\"R\\"],\\n  \\t[\\"Vision\\", \\"SIGHT\\", \\"EIGHT\\", \\"S\\"]\\n  ]}\\n />\\n\\nThe clues can then be rearranged in order from one to eight, as in the table above. Taking the letters that were substituted into the number names gives the answer <Answer />."
    },
    "puz207": {
      "hash": "4d86dbba74219ecff6a8e3b9eb21f6561cef297b7f35dfe109bcde3ec321a495",
      "content": "<div className=\\"note\\">\\n  <div><Twemoji tag=\\"span\\">⚠️</Twemoji> <b>Note!</b> There are **two answers** to this puzzle, one for desktop and one for mobile. **Before reading on, try finding the other solution.**</div>\\n</div>\\n\\n---\\n\\nA monumental task lies before you. The car must be parked inside the garage.\\n\\n*“Do you guys not have cars and garages to park them in?”*  \\n―Blizzard Entertainment Principal Game Designer, Wyatt Cheng\\n\\n---\\n\\nIn this solution, I will be explaining exactly what I do to Get Home! in one press. But first, we need to clear something up. Opening the garage door takes one button press on the remote. Dragging the car into the garage takes one press on the car. So you might think you’d need at least two presses to Get Home!. But when you do that, the game taunts you and tells you to do better. Can we do better? Strangely, the press count goes up by a half each time you press and unpress. \\n\\nNow hold on, I know what you’re thinking. “A press is a press. You can’t say it’s only a half.” Well, TJ “<TeamDisplayNameDisplay noLink={true} hideAdminLinks={true} />” Yoshi, hear me out. A press actually has three parts to it. When pressed, when held, and when released. And together, this forms one complete press. Now usually, it’s the pressing that’s useful. Because that’s the only part that makes the satisfying “blip” sound on the remote’s button, or start driving the car with a cheerful “Yoshi!”. However, sometimes we just like the holding part, which makes the “brrprhrhprhrbrhprhpr” sound as you drag the car. And as for the release, well, the remote only sends a “doo-loo-loo” signal to open the garage with a resounding “gonk” when we release the button.\\n\\nTo Get home!, you need to press the remote and release it, and then press the car and hold it into the garage. So, how many presses is that total? Well, it appears to be two, and if we were solving this puzzle in isolation, then yeah, it would be two. But, in a full puzzlehunt press challenge run, there are other presses that occur earlier in the run, such as the press needed to wish for this puzzle and the press needed to open this puzzle and the press needed to select the title text of the puzzle to copy into your Discord to say, “Wow, check out this new puzzle we unlocked, Get home!! Pay no attention to the fact that this action is not at all necessary in my full puzzlehunt press challenge run, which I am currently attempting!” So if we take those presses into consideration as well, then how many presses would it take? The naïve answer would be five. Two to enter the puzzle, one to select the title of the puzzle, and two within the puzzle that we established earlier. \\n\\nHowever, we can do better. We can actually do it in four by simply holding out the third press used to select the title of the puzzle to be used for the half press in the game. Because the remote only requires the button to be released, not actually pressed. So in this fashion, Get Home! only adds on an additional one press to the run since the first press just leeches off a previous press. So, to capture this phenomenon, we call it 1.5 presses. On a single star basis, you’d round that up to two. But in a full hunt run, you’d round it down to one. So, in conclusion, since that first press counts in some context but adds no additional presses in other contexts, we refer to it as a half press. \\n\\nSo, going back to the solution, you can see that I start with the mouse button already held outside of the game’s window. And so in the full hunt run, this press will just leech off of a previous one. And so it won’t incur an additional press. Okay, glad that’s explained. Now, what am I doing in the game? Here, I’m using a trick called Remote Code Execution. You see, if I move my pointer to the remote while held, and then release the click, the remote still opens the garage. But I only used half a press in the game. Now, we need to move the pointer to the car, press and hold, and drag the car to the garage. But if I release the button, then that would count as a half remote press and a full car press, for 1.5 presses in game. As for releasing the car, well, you don’t actually need to do that to Get home!. We might want to use the held press outside of the game in a full puzzlehunt press challenge run. That way, we only use a half press on the remote and a half press on the car, for a total of one press.\\n\\nNow, while we’re holding the car on the end screen with only one press in-game, we can read off part of the answer. But the answer is covered up by the car, so we need to move the car around to be able to read it. Anyway, now it’s time to build up some speed. And I mean, a lot of speed. So to get that speed, we’re going to use a trick called Hyper Speed Driving and here’s how it works. \\n\\nYou probably already know that moving the car is as fast as moving your mouse. But if I move my mouse really fast, by shaking it back and forth, a bug in your brain’s code called Persistence of Vision allows you to read the answer. You see, even though part of the answer text is obscured by the car, the memory addresses in your optical cortex cause afterimages of the text to persist in your vision. When I move the car fast enough, the entire answer text in full can be read out at one time, to someone else in the Discord call to type out into the answer submission box. Obviously, I can’t type the answer, because I would lose control of the car and also that would require a new click, causing the answer to disappear. While my teammate is doing this, I’m building up speed by oscillating my wrists over time, creating a feedback loop that lets me build up as much speed as I want.\\n\\nNow, you’re probably wondering what I’m going to need all this speed for. After all, I do build up speed for twelve hours. But to answer that, we need to talk about parallel universes.\\n\\nOkay, so while I was solving this puzzle on my computer, one of my teammates actually was on the bus back home to their garage-less apartment and looking at this puzzle on their phone. But they’re not a homeowner, so how could they possibly Get Home!? That teammate’s name? *Albert Einstein*.\\n\\nJust kidding, that teammate was actually me. See, in a parallel universe, I take the bus home and solve puzzles on my phone, which (unlike homes) everyone definitely owns. And Albert Einstein owned a home instead. On 112 Mercer Street, Princeton, NJ 08540, USA. Did you know United States of Americans never put their country name on their address? But Albert Einstein was born in the German Empire, so he knew better. So this imaginary world is what we call a parallel universe, or a PU.\\n\\nAnyways, in this PU, I’m doing a full puzzlehunt press challenge run on my phone instead of my computer, so I’m using a touchscreen instead of a mouse. Now, if I beat the game normally with two presses, I can test how presses are being detected on the end screen. Unfortunately, Remote Code Execution does not work on mobile, because presses are detected even outside of the game window! So is this route (Galactic Puzzle Hunt 2024 / Category Extensions / Press Challenge / Individual Stars / Get home! / 1x presses / Platform: Mobile) just impossible? Well no, because in 1905 Albert Einstein published a new trick called *Über einen die Erzeugung und Verwandlung des Lichtes betreffenden heuristischen Gesichtspunkt* (*On a Heuristic Viewpoint Concerning the Production and Transformation of Light*). \\n\\nYou see, the remote sends signals to the garage using light in the radio frequency. However, since phones are smaller than monitors, it’s easy for your finger to slip on the remote and not release right on top of the button. By simply pressing and holding on the remote, and then slipping out of the remote without lifting my finger, I cause the remote to release a discrete quanta of luminous energy, opening the garage door in only half a press. For simplicity, we call this Quanta in the Parallel Universe one QPU. Thanks Albert!\\n\\nNow, if we wanna move one QPU and Get Home!, it’s not sufficient to have QPU speed. We need QPU De Facto speed, so now comes the matter of driving the car. But first, watch this video: \\n\\n<iframe width=\\"100%\\" height=\\"513\\" src=\\"https://www.youtube.com/embed/sn5g3KfJcRU\\" title=\\"DIABLO IMMORTAL on world&#39;s smallest smartphone?! #shorts\\" frameborder=\\"0\\" allow=\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\\" referrerpolicy=\\"strict-origin-when-cross-origin\\" allowfullscreen></iframe>\\n\\nSee, in Diablo Immortal, you can move your character with one finger while spamming abilities with your other finger. That trick carries over here. Who says we can’t operate a motor vehicle while using a hand-held electronic device while on the phone while on the bus??? So in general, any multiple of the fingers will cover multiple QPU at once. In other words, while holding my remote half press finger, I start another half press with a second finger to move the car into the now open garage. \\n\\nNow we’ve won, but we can’t let go of either of our fingers, or the answer will vanish just like your attention after reading this far. We’ll use Hyper Speed Driving again. Since I’m already in a Discord call with my mates, I yell to them the answer while madly twirling my thumbs on my screen. Everyone on the crowded bus turns to look at me. I miss my stop. I press the REQUEST STOP button, get off, and walk an extra five kilometers home.\\n\\nAnd there you have it, Get Home! done in one press. The answers are: <Answer />\\n\\n#### See also\\n\\n<iframe width=\\"100%\\" height=\\"513\\" src=\\"https://www.youtube.com/embed/kpk2tdsPh0A\\" title=\\"SM64 - Watch for Rolling Rocks - 0.5x A Presses (Commentated) [OUTDATED]\\" frameborder=\\"0\\" allow=\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\\" referrerpolicy=\\"strict-origin-when-cross-origin\\" allowfullscreen></iframe>\\n\\n[Remote code execution](https://en.wikipedia.org/wiki/Arbitrary_code_execution)\\n\\n[Persistence of vision](https://en.wikipedia.org/wiki/Persistence_of_vision)\\n\\n[Albert Einstein House](https://en.wikipedia.org/wiki/Albert_Einstein_House)\\n\\n[*Annus mirabilis* papers](https://en.wikipedia.org/wiki/Annus_mirabilis_papers)\\n\\n#### Epilogue\\n\\nAlbert Einstein went on to win the 1921 Nobel Prize in Physics for his discovery of the photoelectric effect. He remains one of the most influential scientists of all time.\\n\\nThe author of this puzzle claims he first solved this puzzle in his dreams and created it the next day exactly as he remembered.\\n\\nAfter a four year hiatus since posting *SM64 - Watch for Rolling Rocks - 0.5x A Presses (Commentated) \\\\[OUTDATED\\\\]* in 2016, [pannenkoek2012](https://www.youtube.com/@pannenkoek2012/) returned to posting on his main YouTube channel, including his now most viewed four hour video on invisible walls.\\n\\nThe driver of the bus realized that keeping the “SORRY BUS FULL” sign on the entire trip would save her multiple button presses and reduce bus dwell time by skipping stops, improving transit KPIs. She was fired after waiting passengers complained about pass-ups.\\n\\nWyatt Cheng remains a Game Director at Blizzard, working on an unannounced game. He also runs a YouTube channel. His most viewed video is about using ChatGPT to make Flappy Bird. According to the App Store analytics firm Sensor Tower, Diablo Immortal surpassed US$100,000,000 in revenue within its first eight weeks.<sup>[\\\\[1\\\\]](https://web.archive.org/web/20230803092627/https://sensortower.com/blog/diablo-immortal-mobile-100-million-revenue)</sup>"
    },
    "puz208": {
      "hash": "3edfaaba6ce32a571d29193f17c46e458df2b0a787ef73386edb5a563460a9b5",
      "content": "One way to translate the title \\"placeholder\\" literally in French is \\"lieu\\" for \\"place\\" and \\"tenant\\" for holder. <Answer /> is a compelling 10-letter English answer."
    },
    "puz209": {
      "hash": "9a444aef71f0d56f1c8ee18b3b2e77315c06670f6fb531d14f3c807b7ff07b94",
      "content": "For each arrow, use the atomic number of the first element to index into the second:\\n\\n<Table\\n  headers={[\\"Source element\\", \\"Source atomic number (index)\\", \\"Destination element\\", \\"Destination letter\\"]}\\n  cells={[\\n  \\t[\\"Be\\", \\"4\\", \\"Nitrogen\\", \\"R\\"],\\n  \\t[\\"N\\", \\"7\\", \\"Hydrogen\\", \\"E\\"],\\n  \\t[\\"H\\", \\"1\\", \\"Carbon\\", \\"C\\"],\\n  \\t[\\"C\\", \\"6\\", \\"Lithium\\", \\"U\\"],\\n  \\t[\\"Li\\", \\"3\\", \\"Beryllium\\", \\"R\\"]\\n  ]}\\n/>\\n\\nThe letters from this indexing make the answer, <Answer />."
    },
    "puz21": {
      "hash": "a7036e67be54b9c261997f13f3be8989d857a4d0a8f0f387d44fde4acb09c7fa",
      "content": "The flavortext references the classic Mystery Hunt puzzle [JFK SHAGS A SAD SLIM LASS](https://puzzles.mit.edu/2012/puzzles/ogre_of_la_mancha/jfk_shags_a_sad_slim_lass/), which involves observing that the letters in its title form the shape of an arrow on a QWERTY keyboard.\\n\\nThe flavortext suggests that we need to do something similar to “I HAD A UNITED STATES TELEVISION”, but “somewhere else”. On a Dvorak keyboard, the letters of “I HAD A UNITED STATES TELEVISION” form an arrow pointing to the underscore / hyphen key. Like in the original puzzle, the fact that the title is in all caps means that we need to hold down shift while pressing that key, producing an <Answer />."
    },
    "puz210": {
      "hash": "57f9238026c7e18182cb47f5b16ef98abe0564a1badf23ebb76f14cf6ec16e93",
      "content": "The words are laid out in the format of the [loss meme](https://knowyourmeme.com/memes/loss). The text also spells out \\"Is this...\\", the beginning of the same meme. Completing the phrase gives us the answer, <Answer />."
    },
    "puz211": {
      "hash": "1c1e5b2e41884c29a74bcd2de7ffe3ba3fd404335ded2315b66de3d1769b4771",
      "content": "This is the Monty Hall problem, except the host reveals the car so the contestant can’t choose it. So the contestant is not better off switching doors. The answer is <Answer />."
    },
    "puz212": {
      "hash": "7013683fc84f675f56b569358a8ce4d91ce161543bc0ad65274b289dc7a6cb61",
      "content": "If you look at the URL, you’ll see that the puzzle is at \`/puzzles/fix_this_url_to_solve_the_puzzle\`, not the expected \`/puzzles/find_the_answer\`, as you’d expect for a puzzle called \\"Find the Answer\\". If you navigate to \`/puzzles/find_the_answer\`, you are told the answer, <Answer />."
    },
    "puz213": {
      "hash": "49f708516c895d19a64fdabf8765ba5096f5648b9013aa02d5883b4add929f02",
      "content": "The first two objects are a white horse and a yellow knife, referencing Whitehorse and Yellowknife, the capitals of the Canadian territories of Yukon and Northwest Territories, respectively. The third and easternmost of the territories is Nunavut, whose capital is <Answer />."
    },
    "puz214": {
      "hash": "a7dcfb0f51b108976d0b0ec48eaa09e95fc4e4841ec77bd87f890d020815f5ec",
      "content": "The favicon for this puzzle states the answer, <Answer />."
    },
    "puz215": {
      "hash": "eb788fb41332b36a0a2c775c5615aa116d49e366097fda007464690ab463751b",
      "content": "Each clue has two answers, with the same length, that match in exactly one letter at the same position. These pairs are:\\n\\n<Table\\n\\theaders={[\\"Clue\\", \\"Answer 1\\", \\"Answer 2\\"]}\\n\\tcells={[\\n    [\\"Inhabited continent that touches the Prime Meridian\\", \\"EUROPE\\", \\"AFRICA\\"],\\n    [\\"Olympian that can grant the Crystal Clarity boon in Hades\\", \\"ARTEMIS\\", \\"DEMETER\\"],\\n    [\\"Planet named after a Roman god that was the child of Ops\\", \\"NEPTUNE\\", \\"JUPITER\\"],\\n    [\\"Private investigator that is a title character of a series of games made by Telltale Games\\", \\"SAM\\", \\"MAX\\"],\\n    [\\"Astrological sign for someone born in September\\", \\"LIBRA\\", \\"VIRGO\\"],\\n    [\\"Month in the Gregorian Calendar that Easter occurs on\\", \\"APRIL\\", \\"MARCH\\"],\\n\\t]}\\n/>\\n\\nExtracting the shared letter from each gives <Answer />."
    },
    "puz216": {
      "hash": "297b0630d210f0c726b698b2feba77f15c5ac8d7e55449e6d37d8dab6e542656",
      "content": "These are pairs of Portuguese words which are the same except for their last letter, which differs between o and a. Using o or a as a last letter in Portuguese usually indicates the gender of a noun (as in _esposo_ and _esposa_ for \\"husband\\" and \\"wife\\"), but in these cases the two words are entirely unrelated. The words are:\\n\\n<Table\\n  headers={[\\"Left image\\", \\"\\\\\\"Male\\\\\\" Portuguese word\\", \\"Right image\\", \\"\\\\\\"Female\\\\\\" Portuguese word\\", \\"Index\\", \\"Letter\\"]}\\n  cells = {[\\n  \\t[\\"pipe\\", \\"cano\\", \\"sugarcane\\", \\"cana\\", \\"3\\", \\"N\\"],\\n  \\t[\\"plate\\", \\"prato\\", \\"silver\\", \\"prata\\", \\"3\\", \\"A\\"],\\n  \\t[\\"pasture\\", \\"pasto\\", \\"folder\\", \\"pasta\\", \\"4\\", \\"T\\"],\\n  \\t[\\"duck\\", \\"pato\\", \\"paw\\", \\"pata\\", \\"2\\", \\"A\\"],\\n  \\t[\\"mud\\", \\"limo\\", \\"lime\\", \\"lima\\", \\"1\\", \\"L\\"]\\n  ]}\\n/>\\n\\nIndexing the numbers into either word gives us <Answer />."
    },
    "puz219": {
      "hash": "e67c95b7eabf9d12e60a667064bce3b8dfda4d5ff8d5289f1e60f716e893147f",
      "content": "In Japanese streamer culture, this is called 歌枠 (utawaku), “singing stream”. The answer is <Answer />.\\n\\nIt is funny that the English name is Japanese but they are completely different. If you go on YouTube and search for “<a href=\\"https://www.youtube.com/results?search_query=vtuber+karaoke+stream\\">vtuber karaoke stream</a>” you will see lots of streams labelled 【歌枠 / KARAOKE】 or the like.\\n\\n<AuthorsNotes>\\n<Image />\\n</AuthorsNotes>"
    },
    "puz22": {
      "hash": "d46e549cd70fc249bc78456013d4116bfd9cfab70a76b9fcb4ca2c14f11de3ea",
      "content": "The last two drawings clue the songs _Ride on shooting star_ by The Pillows, and _Ride a White Swan_ by T. Rex. This suggests that all the drawings clue songs whose titles start with the word \\"Ride\\".\\n\\n<Table\\nheaders={[\\"Artist\\", \\"Song title\\", \\"Index\\", \\"Letter\\"]}\\ncells={[\\n  [\\"Jefferson Starship\\", \\"Ride The Tiger\\", \\"5\\", \\"R\\"],\\n  [\\"Army of Lovers\\", \\"Ride the Bullet\\", \\"5\\", \\"E\\"],\\n  [\\"The Rolling Stones\\", \\"Ride On, Baby\\", \\"2\\", \\"A\\"],\\n  [\\"From First to Last\\", \\"Ride the Wings of Pestilence\\", \\"16\\", \\"C\\"],\\n  [\\"Black Box\\", \\"Ride on Time\\", \\"1\\", \\"T\\"],\\n  [\\"Queen\\", \\"Ride the Wild Wind\\", \\"2\\", \\"I\\"],\\n  [\\"The Pillows\\", \\"Ride on shooting star\\", \\"3\\", \\"O\\"],\\n  [\\"T. Rex\\", \\"Ride a White Swan\\", \\"9\\", \\"N\\"],\\n]}\\n/>\\n\\nThe song titles describe riding on various things. Indexing the horses' numbers into the things being ridden gives the answer, <Answer />.\\n\\n<AuthorsNotes>\\nWhile _Ride On, Baby_ does not actually mean to ride on a baby, I thought the notion of The Rolling Stones doing so was funny enough that I had to include it. Just ignore the comma.\\n</AuthorsNotes>"
    },
    "puz220": {
      "hash": "5a28bb2a391eddc184766d979c3fbf0675fae8f338e8210c3610e55f76d1ca5a",
      "content": "This is a transom window. One word for it in Turkish is <Answer />, which comes from French \\"vasistas\\", which in turn comes from German \\"was ist das\\", which literally means \\"What is that?\\", the title of the puzzle."
    },
    "puz221": {
      "hash": "cd9be0014732f4f73bd0b89b800a95956cf5df588e8bcde766c5b3540758980f",
      "content": "The left and right columns are the first and second components of German-to-English [calque](https://en.wikipedia.org/wiki/Calque) sources. Connect the correct pairs with a line from left to right. Each line crosses through exactly one letter. The correct pairs and their letters are:\\n\\n<Table \\n \\theaders={[\\"Left half\\", \\"Right half\\", \\"English translation\\", \\"Letter\\"]}\\n  cells={[\\n\\t\\t[\\"Kugel\\", \\"blitz\\", \\"ball lightning\\", \\"L\\"],\\n\\t\\t[\\"Ohr\\", \\"wurm\\", \\"earworm\\", \\"E\\"],\\n\\t\\t[\\"Macht\\", \\"politik\\", \\"power politics\\", \\"H\\"],\\n\\t\\t[\\"Regen\\", \\"wald\\", \\"rainforest\\", \\"N\\"],\\n\\t\\t[\\"Unter\\", \\"schwellig\\", \\"subliminal\\", \\"W\\"],\\n\\t\\t[\\"Über\\", \\"ich\\", \\"superego\\", \\"O\\"],\\n\\t\\t[\\"Gedanken\\", \\"experiment\\", \\"thought experiment\\", \\"R\\"],\\n\\t\\t[\\"Welt\\", \\"anschauung\\", \\"worldview\\", \\"T\\"]\\n  ]}\\n/>\\n\\nOrdering the letters according to the alphabetical order of English words, gives LEHNWORT, another calque source. In English, the word is <Answer />."
    },
    "puz222": {
      "hash": "28c6a3480cf94c5bb79b8fbf5ff542bad88d8eb6701f96a6a1466dbab5dfdf02",
      "content": "This is a cryptic clue. 50 is L in roman numerals, the slash is OR, each is EA, and 50 is L, giving the answer, <Answer />."
    },
    "puz223": {
      "hash": "5951d94dfe74b569fad0117ef5cf34931ec2ca03410afeba46af55713183c033",
      "content": "The title can be interpreted as finding the 50th place out of 50, in this case the last US state in each listed metric:\\n\\n<Table\\n\\theaders={[\\"Metric\\", \\"Last place state\\", \\"Index\\", \\"Letter\\"]}\\n\\tcells={[\\n\\t\\t[\\"Number of legislators\\", \\"Nebraska\\", \\"2\\", \\"E\\"],\\n\\t\\t[\\"Date joined\\", \\"Hawaii\\", \\"4\\", \\"A\\"],\\n\\t\\t[\\"Alphabetical\\", \\"Wyoming\\", \\"7\\", \\"G\\"],\\n\\t\\t[\\"Highest point\\", \\"Florida\\", \\"2\\", \\"L\\"],\\n\\t\\t[\\"Tallest building\\", \\"Vermont\\", \\"2\\", \\"E\\"],\\n\\t\\t[\\"Area\\", \\"Rhode Island\\", \\"7\\", \\"S\\"]\\n\\t]}\\n/>\\n\\nIndexing using the provided numbers gives the answer, <Answer />."
    },
    "puz224": {
      "hash": "b111f1cd188fdd46d3a520d119dae2bbd92be86ddce7e1d634c08c236f266f5b",
      "content": "The answer is <Answer />."
    },
    "puz225": {
      "hash": "119d68d2382530c71c715713efccbecfba91561bdc4fa1383eaeaba9fbb68984",
      "content": "This puzzle is about interpreting 50 or 1 (that is, 50/50) in different ways to get letters. In order:\\n\\n* 50 is the element number for tin, with chemical symbol Sn.\\n* 1 in the A=1 cipher context is A.\\n* 1 as a Roman numeral is I.\\n* 50 as a Roman numeral is L.\\n\\nTogether this spells the answer, <Answer />."
    },
    "puz226": {
      "hash": "e8aa3369e503509ddda2e5d6d5b555f26135466c969889e11d51b97c9eb7d40a",
      "content": "Each clue answer matches the enumeration of the three bolded words in its respective clue. Each of the answers contains three Is, and using the positions of those three Is, one can obtain three corresponding letters from the bolded words.\\n\\n<table style={{ width: \\"100%\\" }}>\\n  <tbody>\\n    <tr>\\n      <th>Clue</th>\\n      <th>Answer</th>\\n      <th>Extracted letters</th>\\n    </tr>\\n    <tr>\\n      <td>\\n        Before a drug that treats something like <b>pleurisy, clots</b>, or\\n        heartburn can be approved, this kind of study must be run.\\n      </td>\\n      <td>CLINICAL TRIAL</td>\\n      <td>ERO</td>\\n    </tr>\\n    <tr>\\n      <td>\\n        Students of this discipline may find their <b>potentials uninhibited</b>\\n        after learning about circuits.\\n      </td>\\n      <td>ELECTRICAL ENGINEERING</td>\\n      <td>INT</td>\\n    </tr>\\n    <tr>\\n      <td>\\n        The NBA team of this city won a <b>playoff epically</b> in a so-called\\n        \\"five game sweep\\"; that same team’s odds of doing so next year aren’t\\n        looking so good though.\\n      </td>\\n      <td>DETROIT MICHIGAN</td>\\n      <td>FPA</td>\\n    </tr>\\n    <tr>\\n      <td>\\n        There was <b>no question of tempo</b> when this piece was first\\n        performed in 1928; its composer found the playing to be sluggish and\\n        dragging.\\n      </td>\\n      <td>AN AMERICAN IN PARIS</td>\\n      <td>TOP</td>\\n    </tr>\\n    <tr>\\n      <td>\\n        This tennis player made <b>global news; eyes</b> all around were on her\\n        during a Battle of the Sexes.\\n      </td>\\n      <td>BILLIE JEAN KING</td>\\n      <td>LAY</td>\\n    </tr>\\n  </tbody>\\n</table>\\n\\nThe clues to the answers themselves start with A-E, so we arrange them in alphabetical order.\\nThe three letter groups will then spell out TOP LAYER OF PAINT.\\nThe answer is a 9-letter word (with three Is) answering that clue, <Answer />."
    },
    "puz227": {
      "hash": "e0d8d624b8a605e3a1f790db5d5906f7390a56f66e4338d4d9a83d2e681a19e0",
      "content": "The construction described is shown in this picture:\\n\\n<Image />\\n\\nThis is a polyhedron with eight sides: four pentagons and four rectangles. There’re several ways to identify the name of the polyhedron from here:\\n\\n* Searching \\"polyhedron four pentagons four rectangles\\" gives the Wikipedia article as the first result.\\n* We can start from the [Wikipedia page for octahedra](https://en.wikipedia.org/wiki/Octahedron), and look for related shapes, like the gyrobifastigium.\\n* We might recognize that this is a polyhedron that tiles space, and start looking from the [Wikipedia page for stereohedra](https://en.wikipedia.org/wiki/Stereohedron).\\n* We might take its dual polyhedron, the [snub disphenoid](https://en.wikipedia.org/wiki/Snub_disphenoid), then look for the dual from there.\\n\\nAll of these methods give the answer <Answer />."
    },
    "puz228": {
      "hash": "2d6096b7dab451aad026bb848137b91c4c3d68f2827a882d7962bea4b11ae17e",
      "content": "The images clue FERMAT, FACTORIAL, CATALAN and PRIME, which are all number sequences. Each of these map to a sequence of letters, with FERMAT going to RA and FACTORIAL going to FAR. We observe that RA is a subsequence of FERMAT, and FAR is a subsequence of FACTORIAL.\\n\\nAs hinted by the title, the mapping indeed requires us to take a subsequence of each number sequence name. The indices of the letters taken from FERMAT are 3 and 5, and the indices of the letters taken from FACTORIAL are 1, 2, and 6. These are the starts of the [Fermat number](https://en.wikipedia.org/wiki/Fermat_number) and [factorial](https://en.wikipedia.org/wiki/Factorial) sequences respectively. Further numbers in each sequence go beyond the length of its name, and cannot be used as an index.\\n\\nWe now do the same for CATALAN and PRIME. The [Catalan numbers](https://en.wikipedia.org/wiki/Catalan_number) that can index into CATALAN are 1, 2, and 5, giving the letters CAL. The [prime numbers](https://en.wikipedia.org/wiki/Prime_number) that can index into PRIME are 2, 3, and 5, giving the letters RIE.\\n\\nReplacing the question marks at the bottom with the extracted letters, and including the given O, gives the answer, <Answer />.\\n\\n<AuthorsNotes>\\n\\tThe puzzle was originally titled \\"Far from !\\".\\n</AuthorsNotes>"
    },
    "puz229": {
      "hash": "31dd7081e64dd3cf6f883b378a16d25385d5566abb0679aefe093c03e6ee4999",
      "content": "Identify the countries and index into their common names to get ENDONYM.\\n\\nIndex into the endonyms (native names) of the countries instead to get A CAT GOT.\\n\\nComplete the idiom and fill in the blanks to get the answer <Answer />.\\n\\n<Image fullWidth name=\\"puz229\\" \\n  alt=\\"Seven outlines of nations, with a number intersecting them. Labelled above, they are: New Zealand / Aotearoa / 5, Germany / Deutschland / 6, Poland / Polska / 6, Estonia / Eesti / 4, Hungary / Magyarország / 3 & 7, Germany / Deutschland / 4.\\"\\n/>\\n\\n<AuthorsNotes>\\nToday (when I wrote this puzzle) I learned about Aotearoa from [Gabe Newell](https://en.wikipedia.org/wiki/Gabe_Newell#Other_ventures:~:text=event%2C%20We%20Love-,Aotearoa,-%2C%20with%20live%20performances)’s Wikipedia page, and figured there were enough of these for a do-it-again extract.\\n\\n“A CAT GOT” was a serendipitous extraction from [https://nutrimatic.org/2024/?q=%5Boaelagroe%5D%5Bgaocpoaodi%5D%5Bat%5D%5Bvt%5D%5Bgaocpoaodi%5D%5Boh%5D%5Btc%5D&go=Go](https://nutrimatic.org/2024/?q=%5Boaelagroe%5D%5Bgaocpoaodi%5D%5Bat%5D%5Bvt%5D%5Bgaocpoaodi%5D%5Boh%5D%5Btc%5D&go=Go)\\n\\nThe puzzle almost died when I mistakenly thought New Zealand / Aotearoa extracted D / A, but luckily I found Poland. I tried to avoid names that were similar in English, but once I got locked into the letter pairs I had to take what I could get. Shoutouts to:\\n- Brazil / Brasil (funny)\\n- Greece / Ελλάδα (classic)\\n- South Korea / Hangug (i wanted to avoid romanization issues and also arguably just “Korea”)\\n- North Korea / Chosŏn (funny because Joseon and [https://en.wikipedia.org/wiki/Romanization_of_Korean_(North)](https://en.wikipedia.org/wiki/Romanization_of_Korean_(North)))\\n- Albania / Shqipëri(a) (cool)\\n- Croatia / Hrvatska (cool)\\n- Greenland / Kalaallit Nunaat (cool)\\n- Georgia / Sakartvelo (cool)\\n- Bhutan / Druk Yul (cool)\\n- Egypt / Misr (cool)\\n- Japan / Ni(pp/h)on (funny)\\n- Turkey / Türkiye (funny)\\n- Central African Republic / Ködörösêse tî Bêafrîka (cool)\\n\\nThe presentation of the numbers poking into the countries is meant to parallel the exonym/endonym double extraction. I don’t know an easy way in Figma to produce the invert effect without duplicating both layers and masking, maybe you can do it with boolean ops? Who cares, just ship it\\n<Image name=\\"figma\\" />\\n\\nThe puzzle is a callback to one of [my first](https://www.cs.ubc.ca/~udls/puzzle/2017/puzzle5.html) published puzzles, which was not good (and no one solved it).\\n</AuthorsNotes>"
    },
    "puz23": {
      "hash": "e842a62dd5e91887da41cc8b8a7e6198b4ce0f98e0df3c97e55314db12d38a30",
      "content": "These are icons of lettered [New York subway](https://en.wikipedia.org/wiki/List_of_New_York_City_Subway_services) services but with the letters removed. We may use the colors of the bullets to identify a set of possibilities for each letter.\\n\\n<Table\\n\\theaders={[\\"Color\\", \\"Possible letters\\", \\"Letter in answer\\"]}\\n\\tcells={[\\n\\t\\t[\\"Lime\\", \\"G\\", \\"G\\"],\\n\\t\\t[\\"Yellow\\", \\"N, Q, R, W\\", \\"R\\"],\\n\\t\\t[\\"Blue\\", \\"A, C, E\\", \\"A\\"],\\n\\t\\t[\\"Yellow\\", \\"N, Q, R, W\\", \\"N\\"],\\n\\t\\t[\\"Orange\\", \\"B, D, F, M\\", \\"D\\"],\\n\\t\\t[\\"Dark slate gray\\", \\"S\\", \\"S\\"],\\n\\t\\t[\\"Light slate gray\\", \\"L\\", \\"L\\"],\\n\\t\\t[\\"Blue\\", \\"A, C, E\\", \\"A\\"],\\n\\t\\t[\\"Orange\\", \\"B, D, F, M\\", \\"M\\"],\\n\\t]}\\n/>\\n\\nThere is only one way to select a letter for each bullet to form a meaningful English word or phrase. This gives us the answer, <Answer />.\\n\\n<AuthorsNotes>\\n\\nI wanted to make the answer GRAND CENTRAL using the planned Second Avenue Subway service, which uses the letter T.\\n\\n</AuthorsNotes>"
    },
    "puz230": {
      "hash": "84b3758424e5d4b99c00ab5960ab5006015417fe2ca2fa1c57bbd8c4f5695366",
      "content": "This is a stick figure representation of the [\\"Friendship Ended with Mudasir (Now Salman is my best friend)\\" meme](https://knowyourmeme.com/memes/friendship-ended-with-mudasir). The characters match to Salman (top left), Asif Raza Rana (top right), and both crossed out characters on the bottom right are Mudasir. We can then index into their names with the numbers on their heads:\\n\\n<Table\\n  headers={[\\"Name\\", \\"Index\\", \\"Letter\\"]}\\n  cells={[\\n  \\t[\\"Salman\\", \\"1\\", \\"S\\"],\\n  \\t[\\"Asif\\", \\"1\\", \\"A\\"],\\n  \\t[\\"Mudasir\\", \\"6\\", \\"I\\"],\\n  \\t[\\"Mudasir\\", \\"3\\", \\"D\\"]\\n  ]}\\n/>\\n\\nThe resulting letters spell <Answer />."
    },
    "puz231": {
      "hash": "4b863b262a3c6bd15d6e0425f9426644105cb43b1067a5a5db55314772d6663f",
      "content": "From looking at the bottle closely, or clued by the title, this is a bottle of Hint water. If you look at [the Hint water flavors page](https://www.drinkhint.com/pages/flavor), you can see the collection of flavors, which have different colors and shapes as designs. The designs on that page don’t exactly match (they have the \\"0 calories/sweeteners\\" label on the top/bottom). You can narrow it down by the middle section’s shape and color a bit, and either look up the alternate labels of those flavors, or start guessing them. The answer is <Answer />, which is one of their more commonly available flavors in stores."
    },
    "puz232": {
      "hash": "07c800a277a2204c235099d4c19e139a516ec3a183769e8145afc28986239358",
      "content": "This is a puzzle about IKEA furniture named after places in Sweden. The four places are, from south to north:\\n\\n* Bolmen is a step stool\\n* Askersund is a cabinet door\\n* Norberg is a drop-leaf table\\n* Kallax is a shelf unit\\n\\nEach label is placed at the furniture article’s namesake’s location. The first letters spell <Answer />."
    },
    "puz233": {
      "hash": "1bc2be7c98fe44aead27ba00499ed42d0c8645550059dc7b2bdef01c1fefbdec",
      "content": "5 kind of looks like S, and 0 kind of looks like O, so if you read 50/50 this way it would read <Answer />. That’s what the description is cluing."
    },
    "puz235": {
      "hash": "fb036eab4d98d2361ff148cb95f0c888fd681722ab87a9c9fc268d498efcc698",
      "content": "This puzzle is about [Sweden’s solar system model](https://en.wikipedia.org/wiki/Sweden_Solar_System), clued by the title. Each clue is located at one of the locations of an object in the model, and the answers to the clues are a single letter change from these objects:\\n\\n<Table \\n  headers={[\\"Clue number\\", \\"Solar System object\\", \\"Clue answer\\", \\"Replacement letter\\"]}\\n  cells={[\\n  \\t[\\"1\\", \\"SEDNA\\", \\"SENNA\\", \\"N\\"],\\n  \\t[\\"2\\", \\"ERIS\\", \\"EROS\\", \\"O\\"],\\n  \\t[\\"3\\", \\"HALLEY\\", \\"VALLEY\\", \\"V\\"],\\n  \\t[\\"4\\", \\"IXION\\", \\"AXION\\", \\"A\\"]\\n  ]}\\n/>\\n\\nThe answer is formed from the letters that substituted into the Solar System objects to get the clue answers: <Answer />."
    },
    "puz236": {
      "hash": "df1aee81f2ef3cb9dd9200545e72bf94ace25e20b7fcc4a7aa0fc50821308dd2",
      "content": "These can be filled with boxing weight classes (without “weight”) in increasing size:\\n\\n* F(L)Y\\n* BANT(A)M\\n* FEATHE(R)\\n* LI(G)HT\\n* WELT(E)R\\n* MIDD(L)E\\n* HEAV(Y)\\n\\nTaking the indicated letters gives <Answer />, the answer."
    },
    "puz237": {
      "hash": "1c4e1002880d464ce12468803ca5835b8925b3ab3b91cac39f235ac6b0079fd8",
      "content": "This was shot at the [statue of King Sejong](https://en.wikipedia.org/wiki/Statue_of_King_Sejong_(Gwanghwamun)) in Seoul, inventor of Hangul. The text blurred on [the side of the landmark](https://www.google.com/maps/@37.5728987,126.9767155,2a,86.2y,88.02h,97.19t/data=!3m7!1e1!3m5!1svxHHCJUFhmsAAAQINlDhQw!2e0!6shttps:%2F%2Fstreetviewpixels-pa.googleapis.com%2Fv1%2Fthumbnail%3Fpanoid%3DvxHHCJUFhmsAAAQINlDhQw%26cb_client%3Dmaps_sv.share%26w%3D900%26h%3D600%26yaw%3D88.01518012540825%26pitch%3D-7.193523855206422%26thumbfov%3D90!7i13312!8i6656?coh=205410&entry=ttu) are the original 28 letters of Hangul: <Answer />.\\n\\nNo idea why they decided to blur this in the clip – I’m guessing they didn’t know what it meant, so they blurred it in case it was propaganda. I bet you weren’t expecting the blur to be in the actual video! Four of these letters are obsolete in modern Korean: \`ㆁㆆㅿㆍ\`\\n\\nSome potential solve paths:\\n* Finding the video, searching for “HEENDY LAND” in images and finding the statue. \\n* Finding the video, searching for “Seoul Palace gate”, finding Gwanghwamun and the statue.\\n\\nThe [video](https://youtu.be/XP3z8T187fc) is also a great magic performance, go watch it!\\n\\n<AuthorsNotes>\\nꥪᆒퟤ\\n</AuthorsNotes>"
    },
    "puz238": {
      "hash": "b1f42c26424a682d3dabab961d61daf52e687c9c13ec8d9435891de90a4cb6ec",
      "content": "The flavortext is an implicit clue for 6 possible extractions: Morse code (remorse), braille (feel), hexadecimal ASCII (hex), resistor color code (resistance), semaphore (flagging), and 5-bit binary (bit). Each line is recursively encoded with some of the first five encodings (see below). Decoding everything this way leads to ANSWER. We can use the final extraction to extract our answer: by taking which encodings were used in each line, the 5-bit binary results in the answer <Answer />.\\n\\n**First line.** We translate from Morse to get:\\n\\n\`\`\`\\nBROWNWHITE BROWNWHITE REDORANGE\\n\`\`\`\\n\\nTranslating the resistor colors to digits gives \`19 19 23\`, which with A=1 spells \`SSW\`.\\n\\nInterpreting this as semaphore (south and southwest) gives the letter \`A\`.\\n\\n**Second line.** We translate from Morse to get:\\n\\n\`\`\`\\nFOURTWO FIVETWO FOURF FIVESEVEN FOURE FIVESEVEN FOUREIGHT FOURNINE FIVEFOUR FOURFIVE\\nFIVETWO FOURFIVE FOURFOUR FOURF FIVETWO FOURONE FOURE FOURSEVEN FOURFIVE\\nFOURTWO FIVETWO FOURF FIVESEVEN FOURE FIVESEVEN FOUREIGHT FOURNINE FIVEFOUR FOURFIVE\\nFOURSEVEN FIVETWO FOURFIVE FOURFIVE FOURE\\n\`\`\`\\n\\nThis is hexadecimal ASCII (\`0x42 0x52 0x4f\`, etc.) which converts to\\n\\n\`\`\`\\nBROWNWHITE REDORANGE BROWNWHITE GREEN\\n\`\`\`\\n\\nTranslating the resistor colors to digits gives \`19 23 19 5\`, which with A=1 spells \`SWSE\`.\\n\\nInterpreting this as semaphore (southwest and southeast) gives the letter \`N\`.\\n\\n**Third line.** We translate from Braille (top-right, middle-left, middle-right, bottom-right raised; etc.) to get \`WSE\`.\\n\\nInterpreting this as semaphore (west and southeast) gives the letter \`S\`.\\n\\n**Fourth line.** We translate from Morse to get \`FIVESEVEN\`.\\n\\nThis is hexadecimal ASCII (\`0x57\`) for the letter \`W\`.\\n\\n**Fifth line.** Translating the resistor color codes to digits gives \`19 14 5\`, which with A=1 spells \`SNE\`.\\n\\nInterpreting this as semaphore (south and northeast) gives the letter \`E\`.\\n\\n**Sixth line.** We translate this from Braille (top-left, middle-left, middle-right, bottom-left raised) to get the letter \`R\`."
    },
    "puz239": {
      "hash": "91763e427f2eef70ba4c7eb5798f11b8f25d713b330a2f799b4aeaaaa4250df5",
      "content": "It’s the letter <Answer />.\\n\\n<AuthorsNotes>\\n\\nFrom Lewis, here’s some other symmetric characters with a code point divisible by 79:\\n\\n<Table\\n  headers={[\\"Codepoint\\", \\"Character\\", \\"Name\\"]}\\n  cells={[\\n    [\\"U+0278\\", \\"ɸ\\", \\"Latin Small Letter Phi\\"],\\n    [\\"U+0ED0\\", \\"໐\\", \\"Lao Digit Zero\\"],\\n    [\\"U+1BC6\\", \\"ᯆ\\", \\"Batak Letter Karo Ba\\"],\\n    [\\"U+2508\\", \\"┈\\", \\"Box Drawings Light Quadruple Dash Horizontal\\"],\\n    [\\"U+25A6\\", \\"▦\\", \\"Square with Orthogonal Crosshatch Fill\\"],\\n    [\\"U+2731\\", \\"✱\\", \\"Heavy Asterisk\\"],\\n    [\\"U+2A47\\", \\"⩇\\", \\"Intersection Above Union\\"],\\n    [\\"U+2D5D\\", \\"ⵝ\\", \\"Tifinagh Letter Yath\\"],\\n    [\\"U+A519\\", \\"ꔙ\\", \\"Vai Syllable Zhee\\"],\\n  ]}\\n/>\\n\\n</AuthorsNotes>"
    },
    "puz24": {
      "hash": "46532ac8e42ed1e05cf26f93e7acc483fc3f8a4c20a3e7241d1972ab09f990d6",
      "content": "This puzzle refers to taxicab numbers, which are numbers that can be written as the sum of two cubes in two different ways. Famously, the number 1729 is the sum of both 10<sup>3</sup> + 9<sup>3</sup> and 12<sup>3</sup> + 1<sup>3</sup>. Both the first and third cubes are larger than the second cube, so the second cube should be 1<sup>3</sup> and the fourth cube should be 12<sup>3</sup>. The first cube is larger than the third cube, so the first cube is 10<sup>3</sup> and the third cube is 9<sup>3</sup>. Converting to letters using A1Z26, we get <Answer />, the answer."
    },
    "puz240": {
      "hash": "38777392ffbafc2da859cf6a7754db1d8baac942fc07503e329ef33cba70e3f6",
      "content": "These are literal translations of the Brazilian states of Santa Catarina, Bahia, Rio Grande do Norte, and Rio Grande do Sul. As there are 26 states in Brazil, we can order them to match these states with letters. \\n\\n<Table \\n  headers={['English transliteration', 'State', 'Alphabetical position', 'Letter']}\\n  cells={[\\n  \\t[\\"St. Catherine\\", \\"Santa Catarina\\", \\"23\\", \\"W\\"],\\n  \\t[\\"Bahia\\", \\"Bay\\", \\"5\\", \\"E\\"],\\n  \\t[\\"Northern Big River\\", \\"Rio Grande do Norte\\", \\"19\\", \\"S\\"],\\n  \\t[\\"Southern Big River\\", \\"Rio Grande do Sul\\", \\"20\\", \\"T\\"]\\n  ]}\\n/>\\n\\nOrdering the states in alphabetical order, we can take the position that these states are in as a letter in the alphabet, giving the answer <Answer />."
    },
    "puz241": {
      "hash": "75948a5435fa06b0d06521784d05ed57a7ddd64b8d2441c9dc34bdc06c30d178",
      "content": "This is [mojibake](https://en.wikipedia.org/wiki/Mojibake) for \\"áçcèñt\\" after it’s been encoded as UTF-8 and decoded as latin1. Googling for \\"mojibake decoder\\" can find a resource [such as this](https://www.linestarve.com/tools/mojibake/) that automatically tries different encodings. Another option is to try decoding and encoding the string explicitly; a Python script such as \`'Ã¡Ã§cÃ¨Ã±t'.encode('latin1').decode('utf-8')\` will also get the result. The answer is <Answer />."
    },
    "puz244": {
      "hash": "3eaa7874ffc4d0bafa3f5b25a8d08a83300c4c0385af78fbb68775395ede32fe",
      "content": "The colorful letters refer to the meme about SUPER MARIO GALAXY. If you look at the game’s cover and take only the title letters with a ✨ on them, you read Nintendo’s secret message, “U R MR GAY”.\\n\\nThe upside down 2 suggests doing the same for the sequel, SUPER MARIO GALAXY 2. Reading the ✨ letters backwards with the given enumeration gives the response, “<Answer />”, which is the answer."
    },
    "puz245": {
      "hash": "3ea7c092e83d2de269c328b27af178ef1f214d601848190c8eb8e090e1d350b9",
      "content": "The answers to all of the clues begin with V.\\nFurthermore, from searching some of the answers together, one can find that these words also all appear\\nin V’s introduction monologue in V for Vendetta. [(video here)](https://youtu.be/Z4RCK8LAFM0?t=103)\\n\\nWe can arrange the clues/answers by the order they appear in the monologue, and read down column number 5 (V in Roman numerals):\\n\\n<Table\\n  headers={[\\"Clue\\", \\"Answer\\", \\"V-th Letter\\"]}\\n  cells={[\\n    [\\"A performer of a certain theatrical genre\\", \\"VAUDEVILLIAN\\", \\"E\\"],\\n    [\\"One who has served in the military\\", \\"VETERAN\\", \\"R\\"],\\n    [\\"A parent might live this way\\", \\"VICARIOUSLY\\", \\"R\\"],\\n    [\\"Single by K/DA\\", \\"VILLAIN\\", \\"A\\"],\\n    [\\"Table with a mirror\\", \\"VANITY\\", \\"T\\"],\\n    [\\"Remnant, trace\\", \\"VESTIGE\\", \\"I\\"],\\n    [\\"Excessively hungry\\", \\"VORACIOUS\\", \\"C\\"],\\n    [\\"Infraction, low-level offense\\", \\"VIOLATION\\", \\"A\\"],\\n    [\\"Alert, watchful\\", \\"VIGILANT\\", \\"L\\"],\\n    [\\"Subsidiary of Alphabet Inc. focused on life sciences\\", \\"VERILY\\", \\"L\\"],\\n    [\\"Soup invented by Louis Diat\\", \\"VICHYSSOISE\\", \\"Y\\"],\\n  ]}\\n/>\\n\\nThe answer to this puzzle is <Answer />, which, if you were to read it as two words, might be an apt descriptor of V!"
    },
    "puz246": {
      "hash": "9672699c8c294f606319a36c81c1e820f8405464ba89ef46287666a4fca27e57",
      "content": "This is a reference to the generations of Pokémon games, and [traditional anniversary wedding gifts](https://en.wikipedia.org/wiki/Wedding_anniversary#Traditional_anniversary_gifts). The numbers are the year of the traditional anniversary wedding gift.\\n\\n<Table\\n  cells={[\\n    [\\"I\\", \\"—\\", \\"Red\\", \\"—\\", \\"Blue\\", \\"—\\", \\"Yellow\\"],\\n    [\\"II\\", \\"50\\", \\"Gold\\", \\"25\\", \\"Silver\\", \\"15\\", \\"Crystal\\"],\\n    [\\"III\\", \\"40\\", \\"Ruby\\", \\"45\\", \\"Sapphire\\", \\"55\\", \\"Emerald\\"],\\n    [\\"IV\\", \\"60\\", \\"Diamond\\", \\"30\\", \\"Pearl\\", \\"70\\", \\"Platinum\\"],\\n  ]}\\n/>\\n\\nThe fifth generation of Pokémon games has Black and White. The gift for 14 is ivory; if White corresponds to ivory, then Black corresponds to <Answer />."
    },
    "puz247": {
      "hash": "3a171490ab23c3f54479349c833eeadf9ef844778951a2a432b284a25da8c0ea",
      "content": "These clues represent Pokémon types. They are FIGHTING, DRAGON, GROUND, DARK, ROCK. Filling in the table as a type effectiveness table, we can convert each row (or column) with 5 bit binary to get the answer <Answer />.\\n\\n<PuzzleGrid text=\\"11122|12111|11112|½11½1|½1½11\\" optionsOverride={{\\"data-fill-classes\\":\\"white white green\\",\\"data-fills\\":\\"11122|12111|11112|21121|21211\\",\\"data-edges\\":\\"5x5\\",\\"data-top-clues\\":\\"A|B|C|D|E\\",\\"data-left-clues\\":\\"A|B|C|D|E\\"}}/>\\n\\nNote: this table happens to be symmetric, though that’s not generally true of type matchups."
    },
    "puz248": {
      "hash": "094ae7022b931b93f350e0f769f50fd39adeb01ae4cccaf41cba64a0cf1f5871",
      "content": "The feeder answers are PU, ONUS, DERIVE, and PONDER.\\nTaking the one last letter of each gives the answer, <Answer />."
    },
    "puz25": {
      "hash": "00c0bc5ce2a34ff9d0af1d31f10223d50c05b4bf54fa10ea09686671e30f4269",
      "content": "The minimum number of moves needed to transfer all of the discs from the left pole to the right pole, under standard Tower of Hanoi rules, is 7 moves. When performing these moves, add the number on the disc moved to the number on the pole that the disc is placed on. Doing so gives 3+10=13, 8+1=9, 3+1=4, 10+10=20, 3+2=5, 8+10=18, and 3+10=13. Converting these numbers to letters using A=1, B=2, ..., Z=26 gives <Answer />, the answer."
    },
    "puz250": {
      "hash": "7773ad1ad26d2cb3cba6fedbeef1072fe31a057fb7d0a975d02a2cdc68065919",
      "content": "This is a redacted Wikipedia URL, perhaps hinted most strongly by the opening ?????:// for https://. It’s quite long, and in fact belongs to the [English Wikipedia (non-redirect) article with the longest title, Cneoridium dumosum (Nuttall) Hooker F. Collected March 26, 1960, at an Elevation of about 1450 Meters on Cerro Quemazón, 15 Miles South of Bahía de Los Angeles, Baja California, México, Apparently for a Southeastward Range Extension of Some 140 Miles (250 characters)](https://en.wikipedia.org/wiki/Cneoridium_dumosum_(Nuttall)_Hooker_F._Collected_March_26,_1960,_at_an_Elevation_of_about_1450_Meters_on_Cerro_Quemaz%C3%B3n,_15_Miles_South_of_Bah%C3%ADa_de_Los_Angeles,_Baja_California,_M%C3%A9xico,_Apparently_for_a_Southeastward_Range_Extension_of_Some_140_Miles). Extracting the letters in the numbered positions produces the answer, <Answer />."
    },
    "puz251": {
      "hash": "837c6f74bbd0559f30a86cc85f8e3d5ffb0a1f866b7ad37f593b318c98ad3d78",
      "content": "Each of the six subimages indicates some collection of components worth a specific number of points in a board game. In reading order:\\n\\n- A city and two settlements are worth 2 + 1 + 1 = 4 points in CATAN.\\n- A completed city on two tiles is worth 2 * 2 = 4 points in CARCASSONNE.\\n- This combination of cards is worth 2 * (3 + 4 + 6 + 7 + 8 - 20) + 3 * (2 + 5 + 9 - 20) = 16 - 12 = 4 points in LOST CITIES.\\n- The forest and the ocean regions score for 2 * 2 + 1 * 4 = 8 points in KINGDOMINO.\\n- Collecting a 4-cow, then a 3-cow is worth 4 + (4 + 3) = 11 points in THE CASTLES OF BURGUNDY. The starting castle isn’t worth any points on its own, and tiles must always form a single contiguous region so they must be placed in this order rather than 3 -> 4.\\n- Two science cards of the same type are worth 2 ^ 2 = 4 points in 7 WONDERS. The title of this game is always rendered with its numeral. The rotation of the card doesn’t mean anything.\\n\\nIndex the number of points into the game titles to get the answer, <Answer />."
    },
    "puz252": {
      "hash": "c9314cd91d92c2159e255df8ab45f90228be6dc362784f07f19cfb3672e6ab8e",
      "content": "First, ROT13 the long string. Reading carefully through the rambling paragraph, you can eventually find the phrase \\"all you need to do is input the last word of this sentence\\", so the answer is <Answer />.\\n\\n<AuthorsNotes>\\n\\n> Amon: *[in spoiler tags]* i missed my chance to submit a super long answer in spoiler text to bait everyone else\\n>\\n> Patrick: *[in spoiler tags]* oh like this: \\"hey nice puzzle you almost made me submit VERBOSITY but i stopped myself because i kept reading. you should keep reading this answer submission too because I will tell you I don’t not want to enter this word...  sentence, actually it is funny if you think about it, aren’t all sentences composed of words? except prison sentences i suppose, which can last anywhere from 0 to 11 or 13 or even 64 years depending on the jurisdiction. you can read more on WIKIPEDIA, which surely has a list. and yes, when you have a list in a puzzle you should always SORT the list otherwise you may not see the answer which was presented clearly. instead, you may mistakenly CALL IN ORANGE JUICE instead of reading the correct phrase \\"clueing jan calorie\\", which would suggest the answer is JANUARY or CALORIE or something related. anyway this was a long solution submission but my actual guess was up there somewhere and im confident the ANSWER was right. thanks for reading my thought process for how i solved this puzzle and answered it CORRECTLY.\\"\\n\\n</AuthorsNotes>"
    },
    "puz253": {
      "hash": "7fdf5348795c18cde76b7335bed63b00b835bbf49b2b88f7827471a223e22366",
      "content": "[This text uniquely describes an actual MLB game](https://www.baseball-reference.com/boxes/FLO/FLO200806260.shtml), which you need to identify.\\n\\nTo do this:\\n\\n- The Rays were known as the Devil Rays until 2008.\\n- The Marlins played in Dolphin Stadium, which was renamed to Land Shark Stadium on May 8, 2009.\\n- As the teams are in different leagues, they only play two three-game series per year, only one of which takes place in Miami. The 2009 series started on May 22, so only the 2008 series is relevant.\\n- Only one game in the series was an afternoon game. It was also [in the mid 80s Fahrenheit](https://www.wunderground.com/history/daily/us/fl/miami/KMIA/date/2008-6-26).\\n\\nThe answer to the question asked, and the puzzle, is <Answer />."
    },
    "puz254": {
      "hash": "9877c73154154021dc2af3e9239fee43790a108c494838ff9bdaf9578b83e36e",
      "content": "Each sentence can be uniquely filled by a number, spelled out, such that the sentence turns out to be true: TWENTYSIX, FIVE, EIGHTEEN, and FIFTEEN. Converting alphanumerically using A=1, B=2, ...Z=26, this gives the answer <Answer />."
    },
    "puz255": {
      "hash": "e0e6b53b6f8c51a203e70d89a52b646aa290271601b9b7a043010ac5aa55dea1",
      "content": "As per the title, this puzzle is solvable as both a Shakashaka and an Akari. The solutions are depicted as follows. (For both puzzles, the solve path starts at the bottom left, generally propagating clockwise.)\\n\\nShakashaka:\\n\\n<PuzzleGrid text=\\"AN1◤◥S|◤◥H◣◢1|◣◢2◤◥A|◤◥.◣N◥|◣D◥B◣◢|2◣◢A1G\\" optionsOverride={{\\"data-fill-classes\\": \\"white white black yellow\\", \\"data-fills\\": \\"112111|111112|112111|112111|111111|211121\\"}} />\\n\\nAkari:\\n\\n<PuzzleGrid text=\\"AN1ERS|ASHLO1|DR2IFA|CL.ENS|IDTBRE|2NLA1G\\" optionsOverride={{\\"data-fill-classes\\": \\"white white black yellow\\", \\"data-fills\\": \\"112113|113112|112311|112131|311111|231123\\"}} />\\n\\nTo extract, for the Shakashaka, the squares not filled by triangles spell out ANS <Answer index={0} />, and for the Akari, the squares that the bulbs are on the letters <Answer index={1} />. The answers are therefore <Answer />."
    },
    "puz257": {
      "hash": "044a206ba20f925da2cc9db8ad00d8dfb2af7345a817e73e638c08a6b2b75ffa",
      "content": "Out of the postal codes of the 50 states of the United States and the District of Columbia (DC), AL, MO and ND are missing, which together make <Answer />.\\n\\n<AuthorsNotes>\\nPolitical campaign emails in the U.S. often end with a financial disclosure that looks like this:\\n\\nPaid for by ... [a list of funds and PACs and such] ... and the State Parties in these states: AK, AL, AR, AZ, CA, CO, CT, DC, DE, FL, GA, HI, IA, ID, IL, IN, KS, KY, LA, MA, MD, ME, MI, MN, MO, MS, MT, NC, ND, NE, NH, NJ, NM, NV, NY, OH, OK, OR, PA, RI, SC, SD, TN, TX, UT, VA, VT, WA, WI, WV, and WY.\\n\\nI sometimes check these lists to see if any states are missing. Typically none is missing.\\n</AuthorsNotes>"
    },
    "puz259": {
      "hash": "d7562cc83b672bc9ce5ad126b787afd051e11ff4dce50f3e000377fd76d67301",
      "content": "Take the [grammatical person](https://en.wikipedia.org/wiki/Grammatical_person) of each pronoun. Use the that to index into the word.\\n\\n<Table \\n  cells={[\\n  \\t[\\"Pronoun\\", \\"Grammatical person\\", \\"Drink\\", \\"Indexed letter\\"],\\n  \\t[\\"Me\\", \\"1\\", \\"Espresso\\", \\"E\\"],\\n  \\t[\\"Us\\", \\"1\\", \\"Macchiato\\", \\"M\\"],\\n  \\t[\\"Her\\", \\"3\\", \\"Cappuccino\\", \\"P\\"],\\n  \\t[\\"You\\", \\"2\\", \\"Ristretto\\", \\"I\\"],\\n  \\t[\\"Them\\", \\"3\\", \\"Cortado\\", \\"R\\"],\\n  \\t[\\"Him\\", \\"3\\", \\"Americano\\", \\"E\\"]\\n  ]}\\n/>\\n\\nThe extracted letters form the answer, <Answer />."
    },
    "puz26": {
      "hash": "42cdd0ab94867f28aeab5bf0ef735148ca93f9ecdec606cc2fa749a283215ab7",
      "content": "Each repeated clue has two numbers it can solve to.\\nEach of these represents a closed interval to consider.\\n\\nThe intervals, in order, are \\\\[0, 1.25\\\\], \\\\[1.5, 2\\\\], \\\\[2, 3\\\\], and \\\\[1, 2\\\\].\\nBy considering each of these intervals as a section of the x-axis, each corresponds to a part of the owo face to make a letter.\\nThe four letters formed this way are (lowercase) A, V, O, W, giving the answer <Answer />."
    },
    "puz260": {
      "hash": "bb78ff60a14f40ebbe19e337f3b22d81a17950dd52305ae827c04f9f8c65904b",
      "content": "All answers are marked incorrect until you submit something that you already submitted.\\n\\nThis is a reference to the quote \\"The definition of insanity is doing the same thing over and over and expecting different results.\\""
    },
    "puz264": {
      "hash": "1938cc98f8e6d53d0e1bba920e1072ab37c3f764fc0a1121f064786f161b7404",
      "content": "You solve the puzzle by getting your hope to almost zero. An easy way to do this is by using [The Hope Pool](/puzzle/the_hope_pool). This puzzle does not unlock until after The Hope Pool has been unlocked."
    },
    "puz265": {
      "hash": "4b46ee2754e1451a7599a1ce5bc31b0aa6cc9778a58d0a60f97630d2f910a03e",
      "content": "The lines are all formed by a [possessive pronoun] [Soviet administrative division]. Another way to complete this that forms an unrelated word, MY+OBLAST, is the answer."
    },
    "puz266": {
      "hash": "08f1eb0b245e9586f6f220349932b0cbcf206d27bcb74a02bbfac9c5e178d6d7",
      "content": "Using a canned hint gives the answer, <Answer />."
    },
    "puz267": {
      "hash": "18001239e7ac7e6a331a5c189f89c32c3055b54e45a7ffaaf75106ef905239e2",
      "content": "Like the first puzzle in the sequence, we take the [grammatical person](https://en.wikipedia.org/wiki/Grammatical_person) of each pronoun. But because this is the Double Shot Version, we double the number before indexing.\\n\\n<Table\\n  cells={[\\n  \\t[\\"Pronoun\\", \\"Grammatical person, doubled\\", \\"Drink\\", \\"Indexed letter\\"],\\n  \\t[\\"Me\\", \\"2\\", \\"Espresso\\", \\"S\\"],\\n  \\t[\\"You\\", \\"4\\", \\"Doppio\\", \\"P\\"],\\n  \\t[\\"Us\\", \\"2\\", \\"Ristretto\\", \\"I\\"],\\n  \\t[\\"Her\\", \\"6\\", \\"Cappuccino\\", \\"C\\"],\\n  \\t[\\"Him\\", \\"6\\", \\"Guillermo\\", \\"E\\"],\\n  \\t[\\"Them\\", \\"6\\", \\"Cortado\\", \\"D\\"],\\n  ]}\\n/>\\n\\nThe extracted letters form the answer, <Answer />."
    },
    "puz268": {
      "hash": "f44c6da0fd930bc3b9cf76c6388b84ef0a81520436d90cd1081fa15af980ec7f",
      "content": "The title and the black circles suggest that this is a Masyu puzzle. Solve the puzzle as a Masyu. Additionally, the extraction grid appears to be words or phrases with letters under the pearls (for instance, the first row can be completed to be SPACECRAFT). Reading the letters under the pearls starting from the top left and going clockwise gives the cluephrase SHANGHAI TV TOWER, for which a thematic answer is the <Answer />.\\n\\n<PuzzleGrid text=\\"SPACECRAFT|EPITHELIUM|INSIGHTFUL|EASTGERMAN|RELATIVITY|EQUIVALENT|GAMETHEORY|LITERATURE|METASTASIS|RIVERPRAWN\\" optionsOverride={{\\"data-fill-classes\\":\\"white white yellow\\",\\n\\"data-fills\\":\\n\\"2111111211|1111211111|1111121111|1211211112|1111112111|1112111111|1111211211|1112111111|1111121111|2111111121\\",\\n\\"data-paths\\":[\\n\\"┌────┐.┌─┐\\",\\n\\"│┌──┐│.│.│\\",\\n\\"││..│└─┘.│\\",\\n\\"│└─┐└────┘\\",\\n\\"│..│┌─┐...\\",\\n\\"│┌─┘│.│...\\",\\n\\"│└──┘┌┘┌─┐\\",\\n\\"│┌─┐.│.│┌┘\\",\\n\\"│└┐│.└─┘│.\\",\\n\\"└─┘└────┘.\\",\\n], \\"data-path-style\\": \\"red\\"}} />"
    },
    "puz269": {
      "hash": "2f534e3bf22de24667e633b7a3d0178c49eca702a4b05124953325e3214c8d4d",
      "content": "The last two digits of each number are all less than 26, encouraging the use of A=1, B=2, ... Z=26. Doing so spells INDEX INTO TITIN. This refers to titin, a protein whose full name is extremely long. We can look up the full 189,819-letter name for titin at [Wiktionary](https://en.wiktionary.org/wiki/Appendix:Protologisms/Long_words/Titin). Doing the indexing, which is easiest with a computer program, gives the cluephrase OTHER NAME PLUS G. Another name for titin is connectin; adding a g to the end gives <Answer />.\\n\\n<AuthorsNotes>\\n\\nWhile factchecking this puzzle, Brian discovered that one of the oft-cited systematic names for titin, which had been copy-pasted across dozens of websites, was incorrect. It wasn't even a valid systematic name for any peptide: although it mostly corresponded to a (strangely repetitive) sequence of amino acids, it also regularly included the substrings “acetyl” and “titin”. Most damningly, it had an X (right before the end of the name: “serxisoleucine”), which the systematic name of a peptide could not have.\\n\\nLater, we found out that even the name on Wiktionary was incorrect after writing our own program and checking against that. The only correct source we found was on [Sarah McCulloch's website](https://www.sarahmcculloch.com/luminary-uprise/2009/longest-word/), though it felt strange referencing that in the puzzle, so we stuck to the original source used to construct it.\\n\\nBoth the completely wrong name with an X and the Wiktionary name have exactly 189,819 letters, a widely reported fact about the name of titin even on websites that don’t reprint the whole thing. Sarah McCulloch's website repeats this claim, but the full name on that page (which we believe to be correct) actually has 241,578 letters, making it a whopping 27% longer. We’re not sure how the number 189,819 came to be. (You can get a name very similar to the Wiktionary name by using the shorter “Small cardiac N2-B” isoform of titin, but we still found a few dozen differences between the amino acid sequence implied by Wiktionary’s name and the sequence we found online. We think that that shorter isoform’s name has 189,766 letters.)\\n\\nWe considered writing a “Don’t Google It 3” puzzle that asked for the systematic name of titin, but didn't have enough time to fully implement and testsolve it. (It was also less funny given that there *is* a source out there that gets it right.)\\n\\n</AuthorsNotes>"
    },
    "puz27": {
      "hash": "89fe80340613db93084abfc82822ef0e85c5d4d9d44a4e80de0bb9d4b3f38629",
      "content": "These are the digits of pi. The numbers spanned by the red arrows (with an I in the middle) are 3 (I) 14 15 9 2. Convert A1Z26 and read right-to-left, as suggested by the arrows, to extract <Answer />."
    },
    "puz270": {
      "hash": "a9e794134a8eb0f17629b15541f6b2060d927084912d736b1f93b97e8dedcd85",
      "content": "The title and flavortext both indicate to \\"reciprocate\\". The answers can be transformed into other answers, by taking the reciprocal of the word or beginning of word. The answers are:\\n\\n* COT → TAN\\n* SIEMENS → OHM\\n* DEMISEXUAL → BISEXUAL\\n* MEGAPHONE → MICROPHONE\\n* HERTZ → SECOND\\n* VARIANCE → PRECISION\\n* HALFTIME → DOUBLE TIME\\n* FOUR MASTERS → QUARTERMASTERS\\n\\n\\nUsing the numbers as indices into the transformed answers yields THIRD COS which can be reciprocated one last time to get <Answer />."
    },
    "puz272": {
      "hash": "41ecb9cf2df8d822d0e8cb00a1fe81caa4f761c9c043525e5a5f03c4866132f6",
      "content": "In this puzzle, the O’s represent white pearls in Masyu. Solving the puzzle, we look at the positions of all the places where a black pearl could go. Starting from the top left corner and reading clockwise, we spell out the answer <Answer />.\\n\\n<PuzzleGrid text=\\"COMMODORE|OBJECTION|CONSCIOUS|SCHOOLBOY|OFFSEASON|AFORTIORI|BLOODWORT|OPENHOUSE|SHOEHORNS\\" optionsOverride={{\\"data-fill-classes\\": \\"white white yellow\\",\\n\\"data-fills\\":[\\n\\"211111121\\",\\n\\"111111111\\",\\n\\"111111121\\",\\n\\"111111111\\",\\n\\"111111111\\",\\n\\"111111112\\",\\n\\"111111111\\",\\n\\"111111111\\",\\n\\"211211112\\",\\n],\\n\\"data-paths\\":[\\n\\"┌─┐┌───┐.\\",\\n\\"│┌┘└┐..│.\\",\\n\\"││┌┐│┌─┘.\\",\\n\\"│└┘││└──┐\\",\\n\\"│┌┐└┘┌──┘\\",\\n\\"└┘│┌┐└──┐\\",\\n\\"┌┐││└──┐│\\",\\n\\"│└┘│┌──┘│\\",\\n\\"└──┘└───┘\\",\\n], \\"data-path-style\\": \\"red\\"}} />"
    },
    "puz273": {
      "hash": "3abf829e464fcd491aecddff0a29ea1d1939b79a0b890f99086263ea0189a34c",
      "content": "All the answers only consist of the letter A, so we only have the clue numbers and lengths to work with, but we can still solve the diagramless crossword uniquely. This is the solution grid with clue numbers:\\n\\n<PuzzleGrid\\n  modes={[\\"crossword\\"]}\\n  optionsOverride={{\\n    'data-fill-classes': 'white',\\n  }}\\n  text={\`\\n@@@@@.....\\n..@.......\\n..@..@@@@@\\n..@....@..\\n@......@..\\n@......@..\\n@..@@@....\\n@..@......\\n...@......\\n...@@@....\`.trim().split(\\"\\\\n\\").join(\\"|\\")}\\n/>\\n\\nThe black squares in the grid spell out TTIC from top to bottom. We can add the letter A to the beginning to make the answer, <Answer /> (which is also what an \\"A\\" looks like, if you squint).\\n\\n<AuthorsNotes>\\n\\nCJ: Anderson posted this puzzle on June 10, 2024, a month before [xkcd published A Crossword Puzzle](https://xkcd.com/2957/). I can claim even earlier precedence though. On our Discord server for Mystery Hunt 2021, we had a channel called \\"aaaaaaaaaaaaaaaa\\", with the description \\"aaaaaaaaa  aaaaaaaaaaaaaaaaaaaaa aaaaa aaaaaaaaa 2021 aaaaaaaaaaaaaaa\\". On December 27, 2020, I sent the following message:\\n\\n<blockquote>\\n\\nAcross\\n<ul className=\\"list-no-bullet\\">\\n<li>1. Battery</li>\\n<li>3. Tinier battery</li>\\n<li>5. This clue</li>\\n<li>7. Radix author inits.</li>\\n<li>10. Even tinier battery</li>\\n<li>11. Standard paper size</li>\\n<li>12. 11A folded in half</li>\\n<li>14. Notable Uncyclopedia article</li>\\n<li>18. Highest among China’s Tourist Attraction Rating Categories</li>\\n<li>19. IPv6 address record</li>\\n<li>20. Rhyme scheme / Rhyme scheme / Rhyme scheme / Rhyme scheme</li>\\n<li>23. Highest bond rating</li>\\n<li>24. Song by Kiefer</li>\\n<li>25. Anaa airport code</li>\\n<li>26. Basaltic lava</li>\\n</ul>\\n\\nDown\\n<ul className=\\"list-no-bullet\\">\\n<li>1. Driver mutual aid org.</li>\\n<li>2. Blockbuster video game company</li>\\n<li>3. 12-step prog. originator</li>\\n<li>4. US org. vs. misapplied initialisms?</li>\\n<li>5. This puzzle’s unchecked letters</li>\\n<li>6. A Reckless Disregard for Gravity abbr.</li>\\n<li>8. Baseball player stuck between the major and minor leagues</li>\\n<li>9. World’s largest airline by pax. carried</li>\\n<li>11. 2010 puzzle platform video game, turned upside-down</li>\\n<li>13. Default arcade high scorer</li>\\n<li>15. Ancient Egyptian architect</li>\\n<li>16. \\"Hunt is in less than a month!\\"</li>\\n<li>17. 9D combined with 19D</li>\\n<li>19. Capcom lawyer game, in short</li>\\n<li>21. Internet Auth. Service’s services</li>\\n<li>22. Leading insurance company accd. to phonebook</li>\\n<li>24. How you might describe a weapon afraid of flying</li>\\n</ul>\\n\\n</blockquote>\\n\\nOf course, the same idea has also been thought of independently before; see [this Buttersafe comic](https://www.buttersafe.com/2011/02/17/crosswords/) for example.\\n\\n</AuthorsNotes>"
    },
    "puz274": {
      "hash": "ccfd862479e30a738ced2a2499f277f2f351d079006174613d8e0df25ad35997",
      "content": "MD5 is a particular hash function that takes a string and returns a 128 bit digest (commonly represented as a series of 32 hex digits). The title of the puzzle is also 32 characters long. Hashing the entire title gives \\"25eca5df9c8ae2c0ddfae0d9fedfbdd9\\". Taking the hex digits that appear at the positions of the question marks gives the answer, <Answer />."
    },
    "puz275": {
      "hash": "82a239df5580a0096db1b1bca1db7368abaaafd07f526bcba2516cabde8fec3d",
      "content": "This is a rearranged version of one of the logos for the incremental game Synergism. As per the title, we consider the reset tiers. In order of the colors, they are Prestige, Ascension, Reincarnation, and Transcension. Note that yellow is the \\"coin\\" tier and doesn’t have a reset associated with it. The first letters spell out PART, the answer. (These also correspond to the icons at the top right of the screen, as well as the default keybinds to reset by keypress.) Also note that while it’s probably not feasible to reach the ascension tier within the duration of the hunt, the tier names can be researched either through the wiki, various guides on Discord, taking a later-game save from the Discord, some screencaps or video playthroughs of the game, or through reading the source code."
    },
    "puz276": {
      "hash": "298b57b95223debb16bcdd09b1e6d1eb7553bb5b738905cba5719c59accce068",
      "content": "Each clue answer can be represented as a symbol with dots. The title is synonymous to both the pointer finger, as well as the index finger, suggesting that we should index with the points.\\n\\n<Table\\n  headers={[\\"Clue\\", \\"Answer\\", \\"Symbol\\", \\"Index\\", \\"Letter\\"]}\\n  cells={[\\n    [\\"A packed train station?\\", \\"FULL STOP\\", \\".\\", \\"1\\", \\"F\\"],\\n    [\\"Atlantic seaport of the Panama Canal\\", \\"COLON\\", \\":\\", \\"2\\", \\"O\\"],\\n    [\\"Separation of adjacent vowels into syllables\\", \\"DIAERESIS\\", \\"¨\\", \\"2\\", \\"I\\"],\\n    [\\"Kind of ammunition\\", \\"BULLET\\", \\"•\\", \\"1\\", \\"B\\"],\\n    [\\"Avoidance video game released in 2016\\", \\"ELLIPSIS\\", \\"…\\", \\"3\\", \\"L\\"],\\n    [\\"Middle word in Descartes' first principle\\", \\"THEREFORE\\", \\"∴\\", \\"3\\", \\"E\\"],\\n  ]}\\n/>\\n\\nDoing so yields the answer <Answer />."
    },
    "puz278": {
      "hash": "dd1b9ef10980aff9fcf107805cb28ed8b0710a631c7b4a1f62273cbc4debfd79",
      "content": "These are cryptic crossword style clues based on the six wives of King Henry VIII of England. Each clue has a definition that solves to a six letter answer, and a cryptic wordplay that solves to another valid word that is seven letters, the definition answer with one letter appended to the front. We thematically \\"behead\\" the cryptic answer to get the definition:\\n\\n<Table\\n  headers={[\\"Clue\\", \\"Answer\\", \\"Wordplay\\", \\"Definition\\"]}\\n  tableStyle={{ width: \\"100%\\" }}\\n  cells={[\\n    [\\"Goes into ducts carrying Edward the king\\", \\"VENTERS\\", \\"Insert ER (for Edward Rex) in VENTS (ducts)\\", \\"goes into = ENTERS\\"],\\n    [\\"Heads roll after love letter identifies erotic sex friends\\", \\"RALLIES\\", \\"Initials of Roll After ...\\", \\"friends = ALLIES\\"],\\n    [\\"In the middle of sex, a German star points to the rear\\", \\"EASTERN\\", \\"E (middle of sEx) + A + STERN (German for star)\\", \\"points to the rear = ASTERN\\"],\\n    [\\"Is the last of wives and leader of the sixes in retrospect\\", \\"SEXISTS\\", \\"S (last of wives) + T (leader of the) + SIXES, reversed\\", \\"is = EXISTS\\"],\\n    [\\"Single Aragonese leader rotates, moving carefully\\", \\"LEASING\\", \\"SINGLE + A (Aragonese leader), cycled\\", \\"moving carefully = EASING\\"],\\n    [\\"Writing from far off in France, beheaded by king\\", \\"OINKING\\", \\"(−l)OIN (far off in French, beheaded) + KING\\", \\"writing = INKING\\"],\\n  ]}\\n/>\\n\\nEach clue also has some reference that can be linked to a wife of Henry VII (with varying degrees of biographical accuracy). Ordering the beheaded letters by wife order, we have:\\n\\n<Table\\n  headers={[\\"Clue\\", \\"Wife\\", \\"Answer\\", \\"Extra letter\\"]}\\n  tableStyle={{ width: \\"100%\\" }}\\n  cells={[\\n    [\\"Single Aragonese leader...\\", \\"Catherine of Aragon\\", \\"LEASING\\", \\"L\\"],\\n    [\\"Writing from far off in France...\\", \\"Anne Boleyn (who studied in France)\\", \\"OINKING\\", \\"O\\"],\\n    [\\"...carrying Edward the king\\", \\"Jane Seymour (mother of Edward VI)\\", \\"VENTERS\\", \\"V\\"],\\n    [\\"...a German star...\\", \\"Anne of Cleves\\", \\"EASTERN\\", \\"E\\"],\\n    [\\"...letter identifies erotic sex friends\\", \\"Catherine Howard (whose letter to Thomas Culpeper was found)\\", \\"RALLIES\\", \\"R\\"],\\n    [\\"Is the last of wives...\\", \\"Catherine Parr\\", \\"SEXISTS\\", \\"S\\"],\\n  ]}\\n/>\\n\\nThis spells the answer, <Answer />."
    },
    "puz279": {
      "hash": "88ff585c7a24aa02589eea00c983a208d29b8adfeba9ede64a7f1df805c308be",
      "content": "There are [four means that start with A, H, G, and Q](https://en.wikipedia.org/wiki/QM-AM-GM-HM_inequalities), as the unusual words describing \\"mean\\" do in the title. Computing each of them gives numbers very close to nice integers:\\n\\n<Table\\n  headers={[\\"Title word\\", \\"Matching mean type\\", \\"Matching mean value\\", \\"Letter\\"]}\\n  cells={[\\n  \\t[\\"actually\\", \\"arithmetic mean\\", \\"20\\", \\"T\\"],\\n  \\t[\\"honestly\\", \\"harmonic mean\\", \\"9\\", \\"I\\"],\\n  \\t[\\"genuinely\\", \\"geometric mean\\", \\"14\\", \\"N\\"],\\n  \\t[\\"quite\\", \\"quadratic mean\\", \\"25\\", \\"Y\\"]\\n  ]}\\n/>\\n\\nWe can then apply A=1, B=2, ... Z=26 to get <Answer />.\\n\\n<AuthorsNotes>\\n\\nGiven the HM, GM, AM, and QM, we can then construct a quartic polynomial that can be solved for its roots. Ensuring that the numbers are positive real numbers reduces the potential answer pool quite drastically! For an extra challenge, can you express these conditions succinctly?\\n\\n</AuthorsNotes>"
    },
    "puz28": {
      "hash": "dcf4e3be891833ba43135e7109572062252d60e093a797609e8f1c3eb08024b3",
      "content": "This is a Tower of Hanoi puzzle, similar to the previous puzzle in this sequence. We must move the whole tower to the right pole by moving the disks one at a time, careful never to stack a larger disk on top of a smaller one:\\n\\n- Move the V disk to the third pole.\\n- Move the CC disk to the second pole.\\n- Move the V disk to the second pole.\\n- Move the CVC disk to the third pole.\\n- Move the V disk to the first pole.\\n- Move the CC disk to the third pole.\\n- Move the V disk to the third pole.\\n\\nEach V represents a vowel, and each C represents a consonant. Calling the letters 1, 2, 3, 4, 5, 6 in reading order, where 1 and 5 are vowels and the rest consonants, we extract the sequence 12314561231. A Nutrimatic query like [this one](https://nutrimatic.org/2024/?q=aCCaCVCaCCa%7CeCCeCVCeCCe%7CiCCiCVCiCCi%7CoCCoCVCoCCo%7CuCCuCVCuCCu&go=Go) narrows down the possibilities enough to find the answer, <Answer />."
    },
    "puz280": {
      "hash": "4c57e35c986357fcafc8cdf4c67e1189d49d17ca8fa85297591fed25753c10e6",
      "content": "<Image name=\\"bush1\\"/>\\n<Image name=\\"bush2\\"/>"
    },
    "puz281": {
      "hash": "79509f180b357d9cff6867d856c7e7959338638c9980eb621fae5870bba8901d",
      "content": "The clue answers are:\\n\\n<Table\\n\\theaders={[\\"Clue\\", \\"Answer\\"]}\\n\\tcells={[\\n\\t\\t[\\"Amazon warehouse worker\\", \\"PACKER\\"],\\n\\t\\t[\\"Cher or Lil Nas X, e.g.\\", \\"SINGER\\"],\\n\\t\\t[\\"Crowded\\", \\"PACKED\\"],\\n\\t\\t[\\"Hook, line, and ___\\", \\"SINKER\\"],\\n\\t\\t[\\"More likely to stay inside\\", \\"SICKER\\"],\\n\\t\\t[\\"Pillager\\", \\"SACKER\\"],\\n\\t\\t[\\"Riddled with holes\\", \\"POCKED\\"],\\n\\t\\t[\\"Taunted\\", \\"MOCKED\\"],\\n\\t]}\\n/>\\n\\nThis can be arranged in a word ladder in a unique way, up to reversal:\\n\\n\`\`\`\\nMOCKED\\nPOCKED\\nPACKED\\nPACKER\\nSACKER\\nSICKER\\nSINKER\\nSINGER\\n\`\`\`\\n\\nTaking the changed letters spells the first answer, <Answer index={1} />. Taking the letters they were changed to spells the second answer, <Answer index={0} />."
    },
    "puz283": {
      "hash": "04c979e88133b159a27e120293dd27510887fdf1cefdb322d7fc5c61392d6182",
      "content": "<Image />\\n\\nThe maze has 26 3×3 \\"rooms\\", so we can assign a letter from A–Z in regular reading order. The rooms that the player must traverse in order to reach the exit spell out the answer, <Answer />."
    },
    "puz284": {
      "hash": "1c8f4e59206c1b9800802263224675cf4c8185126b2267a630909e8060cdadbd",
      "content": "Let’s go through the script and determine what each statement reveals about the media and each character. The [Fictional Crossover Wiki](https://fictionalcrossover.fandom.com) will come in handy throughout.\\n\\n### Albert’s Character\\n\\n*Albert: I don’t know whether Leatherface appears in this piece of media.*\\n\\nThis indicates Leatherface appears in at least one piece of media that Albert’s character (whom we’ll call A) appears in, but not all of them. Leatherface does not have that many crossover appearances, so this narrows it down a fair bit—see [the wiki page](https://fictionalcrossover.fandom.com/wiki/Texas_Chainsaw_Massacre).\\n\\n*Cheryl: Just to clarify, both your characters were in this piece of media when it was first released, and not added later.*  \\n*Albert: That narrows it down, but I still don’t know if that fictional character is in it.*  \\n\\nLooking at the list of crossovers from the link above, and making sure to consider only Type 1 crossovers, we can now eliminate everything except the Jason vs. Leatherface crossover comic, as all other appearances are in either video game DLC or TV spots. Technically, at this point, A could still be any character from Jason vs. Leatherface, such as The Hitchhiker, Pamela Voorhees, etc., but from context we can be fairly confident that A is **JASON VOORHEES**. This will be further confirmed below.\\n\\n### The Media\\n\\n*Bernard: Does that mean the media is not a single episode of a TV show, then?*  \\n*Cheryl: That’s correct.*  \\n*Bernard: I still don’t know what the media is, but thanks to this clarification I do know the Iron Giant appears as a character in it.*  \\n\\nFrom this, we know that Bernard’s character B has the property that all of B’s crossover appearances that are <strong style={{color: \\"inherit\\", textShadow: \\"none\\"}}>not</strong> television episodes, of which there are at least two, include the Iron Giant. (We only need to consider crossover media because while Bernard doesn’t know who A is, he does know that A appears in at least three different pieces of fictional media, meaning the media cannot be a standalone property, such as the 2015 comedy film *Trainwreck*.) The [Iron Giant](https://fictionalcrossover.fandom.com/wiki/The_Iron_Giant) appears in three pieces of crossover media: *Space Jam: A New Legacy*, *MultiVersus*, and a one-off *Teen Titans Go!* anniversary episode, the last of which is disqualified by the last clarification.\\n\\n*Albert: I now know what the piece of media is, and I can tell you that Austin Powers is not in it.*  \\n*Bernard: I also know what the piece of media is.*  \\n\\nFor some reason, Austin Powers appears in *Space Jam: A New Legacy*, so we can rule that out. If you identified Jason Voorhees earlier, you can also use the same logic as Albert did by noting that Jason does not appear in *Space Jam: A New Legacy*. This means the media must be **MULTIVERSUS**.\\n\\nAside: The Iron Giant and Jason Voorhees both appear as avatars in *Ready Player One* (2018). We aren’t counting these as appearances of the characters, as they function more like costumes within the universe of the film—it’d be like saying the character Yoda is in *E.T. the Extra-Terrestrial*.\\n\\n### Bernard’s Character\\n\\nAs stated above, we know that all of B’s non-TV crossover appearances, of which there are at least two, include the Iron Giant. This means that B must appear in *Space Jam: A New Legacy* and *MultiVersus* <strong style={{color: \\"inherit\\", textShadow: \\"none\\"}}>and no other crossover media</strong>.\\n\\nAmong the roster of *[MultiVersus](https://multiversus.com/en-ca/roster)*, which is thankfully not too large, most of the characters are from popular franchises with many crossover appearances, and a few are baffling picks that cross over only in *MultiVersus* (the Banana Guard from *Adventure Time*, Arya Stark from *Game of Thrones*, the exclusive character Reindog). The only remaining options are Stripe (from *Gremlins*) and LeBron James (from *Trainwreck*), who both appear in *Space Jam: A New Legacy*. (Stripe also has a brief cameo in *Ready Player One* that is not currently listed on the wiki.)\\n\\nBetween these two, we know from Bernard’s first clarification that the character must have at least one TV show appearance. This is true of [LeBron](https://en.wikipedia.org/wiki/LeBron_James#Filmography) but not Stripe, which means that character B must be **LEBRON JAMES**.\\n\\n<AuthorsNotes>\\nThis puzzle was inspired by the 2021 Mystery Hunt puzzle *[Ignorance](https://puzzles.mit.edu/2021/puzzle/ignorance/)*, as well as the extremely bizarre roster of *MultiVersus*. This puzzle is much less tightly constructed than those in *Ignorance*, due to the messy nature of the real-world data, so apologies if any solvers got sidetracked by ambiguities or red herrings.\\n\\nThe Fictional Crossover wiki is very fun! Did you know that Shrek is a playable character in the 2009 racing game tie-in *Madagascar Kartz*? Me neither!\\n\\nYou may be tempted to argue that as of the publication of this puzzle, some of the clues are no longer valid, as for example the Iron Giant now appears in this puzzle alongside Leatherface. While this is an amusing idea, I think it is fairly clear that the only <strong style={{color: \\"inherit\\", textShadow: \\"none\\"}}>characters</strong> that appear in *The Most Ambitious Crossover in the History of Cheryl’s Birthday Riddles* are Albert, Bernard, and Cheryl, and the other entities are only mentioned by name (and are therefore only Type 2 crossovers by the Wiki’s definition).\\n\\nI didn’t realize that Stripe fit the “only crosses over in SJ:ANL and MV” criterion until I started writing this solution, and was quite surprised to discover this in the process of fact-checking. Thankfully, this fact should not significantly impact the solving process (unless it did, in which case whoops). Bernard going to the bathroom was added to prevent him from deducing that the media had to be *MultiVersus* due to Jason Voorhees not being in *Space Jam*. I also had to add the word “fictional” to Albert’s sentence “That narrows it down, but I still don't know if that fictional character is in it” because it turns out that NFL player Tony Romo appears in both *Trainwreck* and the 2022 Paramount+ film / Madden NFL advertisement *Fantasy Football*.\\n</AuthorsNotes>"
    },
    "puz285": {
      "hash": "236a3a154149ec1690822617efd36c811fa6a3004e2333a16be81b1700fed245",
      "content": "Solvers are given seven crossword clues (and a conspicuously missing eighth one). After resolving a few, solvers may additionally notice (or guess) that all the answers are five letters long, and that the clues have been presented in alphabetical order. The solutions are as follows:\\n\\n<Table\\n  cells={[\\n    ['EIDER', \\"Source of down\\"],\\n    ['ELDER', \\"Senior\\"],\\n    ['FLUME', \\"Slide for logs\\"],\\n    ['FLUTE', \\"Tall, narrow glass\\"],\\n    ['?????', \\"\\"],\\n    ['LAPEL', \\"Folded jacket part\\"],\\n    ['MANSE', \\"Stately minister’s home\\"],\\n    ['TENSE', \\"Perfect, for example\\"],\\n  ]}\\n/>\\n\\nThese words fit in the grid:\\n\\n<PuzzleGrid\\n\\ttext={\`\\nFLUTE\\nLAPEL\\nU?@ND\\nMANSE\\nEIDER\\n\\t\`.trim().split(\\"\\\\n\\").join(\\"|\\")}\\n\\toptionsOverride={{ \\"data-fill-classes\\":\\"white black\\" }}\\n/>\\n\\nThe only resolution of the missing letter and word is the answer to the puzzle, <Answer />. (Note that it cannot be the word in column 3; though UPEND fits in the grid it doesn’t work with the alphabetically sorted clues.)"
    },
    "puz286": {
      "hash": "c7c4fcafed2ca1226f32e9a61bb924dde4fd826db35a18a559687c169d82267b",
      "content": "Solvers are given seven crossword clues (and a conspicuously missing eighth one). After resolving a few, solvers may additionally notice (or guess) that all the answers are five letters long, and that the clues have been presented in alphabetical order. The solutions are as follows:\\n\\n<Table\\n  cells={[\\n    [\\"AMONG\\", \\"Mixed in with\\"],\\n    [\\"ANIME\\", <><cite>Berserk</cite> or <cite>Bleach</cite>, e.g.</>],\\n    [\\"NYLON\\", \\"Synthetic stocking material\\"],\\n    [\\"PANTS\\", \\"Mimics a hot dog\\"],\\n    [\\"?????\\", \\"\\"],\\n    [\\"PUPAS\\", \\"Butterflies under construction\\"],\\n    [\\"SEDGE\\", \\"Grasslike marsh plant\\"],\\n    [\\"SENSE\\", \\"Meaning or feeling\\"],\\n  ]}\\n/>\\n\\nThese words fit in the grid:\\n\\n<PuzzleGrid\\n\\ttext={\`\\nPANTS\\nUNY@E\\nPIL?D\\nAMONG\\nSENSE\\n\\t\`.trim().split(\\"\\\\n\\").join(\\"|\\")}\\n\\toptionsOverride={{ \\"data-fill-classes\\":\\"white black\\" }}\\n/>\\n\\nThe only resolution of the missing letter and word is the answer to the puzzle, <Answer />. (Note that it cannot be the word in row 2, which has no good completions and wouldn’t fit alphabetically.)"
    },
    "puz287": {
      "hash": "9d78345bba12c4ed5eab801eb24ed88e480b2487743de868ff3ffcf50606376e",
      "content": "Solvers are given seven crossword clues (and a conspicuously missing eighth one). After resolving a few, solvers may additionally notice (or guess) that all the answers are five letters long, and that the clues have been presented in alphabetical order. The solutions are as follows:\\n\\n<Table\\n  cells={[\\n    [\\"ACRES\\", \\"Land area units\\"],\\n    [\\"ACRID\\", \\"Bitter\\"],\\n    [\\"LOSES\\", \\"Falls short competitively\\"],\\n    [\\"MODES\\", \\"Most frequent things\\"],\\n    [\\"SHAWL\\", \\"Loose shoulder covering\\"],\\n    [\\"SHIRE\\", \\"Tolkien locale\\"],\\n    [\\"SPASM\\", \\"Twitch\\"],\\n    [\\"?????\\", \\"\\"],\\n  ]}\\n/>\\n\\nThese words fit in the grid:\\n\\n<PuzzleGrid\\n\\ttext={\`\\nSHAWL\\nP@C?O\\nACRES\\nSHIRE\\nMODES\\n\\t\`.trim().split(\\"\\\\n\\").join(\\"|\\")}\\n\\toptionsOverride={{ \\"data-fill-classes\\":\\"white black\\" }}\\n/>\\n\\nThe only resolution of the missing letter and word is the answer to the puzzle, <Answer />. (Note that it cannot be the word in column 2, which does not fit in alphabetical order.)"
    },
    "puz288": {
      "hash": "0543478bdf28fc4864c5efc86ea83dcca8cb7b192ec2fe2d4ac06e677518f24c",
      "content": "Solvers are given seven crossword clues (and a conspicuously missing eighth one). After resolving a few, solvers may additionally notice (or guess) that all the answers are five letters long, and that the clues have been presented in alphabetical order. The solutions are as follows:\\n\\n<Table\\n  cells={[\\n    [\\"CRAVE\\", \\"Yearn for\\"],\\n    [\\"EAVES\\", \\"Places for listening in, maybe\\"],\\n    [\\"EVENT\\", \\"Notable happening\\"],\\n    [\\"NAVES\\", \\"Central cathedral spaces\\"],\\n    [\\"?????\\", \\"\\"],\\n    [\\"OCEAN\\", \\"Indian, for example\\"],\\n    [\\"OWNER\\", \\"Person with pets\\"],\\n    [\\"RESTS\\", \\"Pauses in music\\"],\\n  ]}\\n/>\\n\\nThese words fit in the grid:\\n\\n<PuzzleGrid\\n\\ttext={\`\\nOWNER\\nCRAVE\\nEAVES\\nA@ENT\\nN?STS\\n\\t\`.trim().split(\\"\\\\n\\").join(\\"|\\")}\\n\\toptionsOverride={{ \\"data-fill-classes\\":\\"white black\\" }}\\n/>\\n\\nThe only resolution of the missing letter and word is the answer to the puzzle, <Answer />. (Note that it cannot be the word in row 4, which would not fit alphabetically in clue order.)"
    },
    "puz289": {
      "hash": "8237afbca28f21b9b16de7df0dd09e076e5e277058e115906f4b074fb311d484",
      "content": "Solvers are given seven crossword clues (and a conspicuously missing eighth one). After resolving a few, solvers may additionally notice (or guess) that all the answers are five letters long, and that the clues have been presented in alphabetical order. The solutions are as follows:\\n\\n<Table\\n  cells={[\\n    [\\"AWARE\\", \\"Tuned in\\"],\\n    [\\"?????\\", \\"\\"],\\n    [\\"BROCK\\", \\"He used his frying pan as a drying pan\\"],\\n    [\\"DRILL\\", \\"Boring tool\\"],\\n    [\\"KNELL\\", \\"Mournful bell sound\\"],\\n    [\\"OAKEN\\", \\"Like bourbon barrels, as required by U.S. law\\"],\\n    [\\"OKAPI\\", \\"Short-necked giraffe\\"],\\n    [\\"RAWER\\", \\"More rare, as meat\\"],\\n  ]}\\n/>\\n\\nThese words fit in the grid:\\n\\n<PuzzleGrid\\n\\ttext={\`\\nBOA?D\\nRAWER\\nOKAPI\\nCER@L\\nKNELL\\n\\t\`.trim().split(\\"\\\\n\\").join(\\"|\\")}\\n\\toptionsOverride={{ \\"data-fill-classes\\":\\"white black\\" }}\\n/>\\n\\nThe only resolution of the missing letter and word is the answer to the puzzle, <Answer />. (Note that it cannot be the word in row 4, which has no good completions and wouldn’t fit alphabetically.)"
    },
    "puz29": {
      "hash": "5a8f8463163ed9ad9fd8e95b196beb02b358d373fd2676e3c7ead27a0e3e36fd",
      "content": "The title contains letters from different scripts. The letters, spelled out, are a regular English/Latin letter A, a Cyrillic VE, a Greek NU, and a Cyrillic ES. Putting them together gives the answer, <Answer />."
    },
    "puz290": {
      "hash": "b34d0f96728045cff69cf897c96f51fd039bec34acc50304854f8d3b3bfccabf",
      "content": "Solvers are given seven crossword clues (and a conspicuously missing eighth one). After resolving a few, solvers may additionally notice (or guess) that all the answers are five letters long, and that the clues have been presented in alphabetical order. The solutions are as follows:\\n\\n<Table\\n  cells={[\\n    [\\"FATED\\", \\"Forced by destiny\\"],\\n    [\\"NOVAE\\", \\"Super star events\\"],\\n    [\\"?????\\", \\"\\"],\\n    [\\"SCOWS\\", \\"Floating garbage receptacles\\"],\\n    [\\"SEEDS\\", \\"Inputs to randomizers\\"],\\n    [\\"SNAFU\\", \\"Utter fiasco, militarily\\"],\\n    [\\"USERS\\", \\"Daily active metric\\"],\\n    [\\"WADER\\", \\"Waterproof garment worn when fishing\\"],\\n  ]}\\n/>\\n\\nThese words fit in the grid:\\n\\n<PuzzleGrid\\n\\ttext={\`\\nSNAFU\\nCO@AS\\nOV?TE\\nWADER\\nSEEDS\\n\\t\`.trim().split(\\"\\\\n\\").join(\\"|\\")}\\n\\toptionsOverride={{ \\"data-fill-classes\\":\\"white black\\" }}\\n/>\\n\\nThe only resolution of the missing letter and word is the answer to the puzzle, <Answer />. (Note that it cannot be the word in row 2, which would not fit with the alphabetically ordered clues even if things like COMAS and CODAS would otherwise work.)"
    },
    "puz291": {
      "hash": "76152f9aeccca4ad74a96f57281e5043f23571af3f2c7e815399ad5dc9ccec92",
      "content": "Solvers are given seven crossword clues (and a conspicuously missing eighth one). After resolving a few, solvers may additionally notice (or guess) that all the answers are five letters long, and that the clues have been presented in alphabetical order. The solutions are as follows:\\n\\n<Table\\n  cells={[\\n    [\\"ARENA\\", \\"Large competition venue\\"],\\n    [\\"EERIE\\", \\"Like a haunted house\\"],\\n    [\\"?????\\", \\"\\"],\\n    [\\"HEEDS\\", \\"Takes, as advice\\"],\\n    [\\"SEARS\\", \\"Cooks a steak, maybe\\"],\\n    [\\"SERFS\\", \\"Feudal workers\\"],\\n    [\\"SWATH\\", \\"Scythe’s cut path\\"],\\n    [\\"TIGER\\", \\"Survivor’s eye animal\\"],\\n  ]}\\n/>\\n\\nThese words fit in the grid:\\n\\n<PuzzleGrid\\n\\ttext={\`\\nSWATH\\nEERIE\\nR@EGE\\nF?NED\\nSEARS\\n\\t\`.trim().split(\\"\\\\n\\").join(\\"|\\")}\\n\\toptionsOverride={{ \\"data-fill-classes\\":\\"white black\\" }}\\n/>\\n\\nThe only resolution of the missing letter and word is the answer to the puzzle, <Answer />. (Note that it cannot be the word in row 3, which has no good completions and wouldn’t fit alphabetically.)"
    },
    "puz292": {
      "hash": "7c2de51681b931b13fdae6cdecb303541c5b1b39eea2d2bda6bc968c1c263bc4",
      "content": "Solvers are given seven crossword clues (and a conspicuously missing eighth one). After resolving a few, solvers may additionally notice (or guess) that all the answers are five letters long, and that the clues have been presented in alphabetical order. The solutions are as follows:\\n\\n<Table\\n  cells={[\\n    [\\"?????\\", \\"\\"],\\n    [\\"ENTRY\\", \\"Item on a list\\"],\\n    [\\"HAVEN\\", \\"Place to rest\\"],\\n    [\\"INEPT\\", \\"Awkward or unqualified\\"],\\n    [\\"LEERY\\", \\"Suspicious (of)\\"],\\n    [\\"LEPER\\", \\"Modern-day thalidomide user, maybe\\"],\\n    [\\"SCALE\\", \\"Climb\\"],\\n    [\\"SHILL\\", \\"Paid audience plant\\"],\\n  ]}\\n/>\\n\\nThese words fit in the grid:\\n\\n<PuzzleGrid\\n\\ttext={\`\\nSHILL\\nCAN?E\\nAVE@E\\nLEPER\\nENTRY\\n\\t\`.trim().split(\\"\\\\n\\").join(\\"|\\")}\\n\\toptionsOverride={{ \\"data-fill-classes\\":\\"white black\\" }}\\n/>\\n\\nThe only resolution of the missing letter and word is the answer to the puzzle, <Answer />. (Though the word in row 3 might work with the alphabetical clue ordering, there aren’t any good ways to fill in that blank.)"
    },
    "puz293": {
      "hash": "2c4aa5ae648c3cd54c9923adf8df13e2eea646bb5380dce6300bfcfa16fa79c2",
      "content": "Solvers are given seven crossword clues (and a conspicuously missing eighth one). After resolving a few, solvers may additionally notice (or guess) that all the answers are five letters long, and that the clues have been presented in alphabetical order. The solutions are as follows:\\n\\n<Table\\n  cells={[\\n    [\\"AMBER\\", \\"Ancient preservative resin\\"],\\n    [\\"ASSET\\", \\"Piece of media content, perhaps\\"],\\n    [\\"EGRET\\", \\"Long-legged bird\\"],\\n    [\\"MAPLE\\", \\"Leaf or syrup\\"],\\n    [\\"REEDS\\", \\"Woodwind vibration sources\\"],\\n    [\\"?????\\", \\"\\"],\\n    [\\"SPARE\\", \\"Second roll achievement\\"],\\n    [\\"TESTS\\", \\"Product quality assurances\\"],\\n  ]}\\n/>\\n\\nThese words fit in the grid:\\n\\n<PuzzleGrid\\n\\ttext={\`\\nAMBER\\nSA?GE\\nSPARE\\nEL@ED\\nTESTS\\n\\t\`.trim().split(\\"\\\\n\\").join(\\"|\\")}\\n\\toptionsOverride={{ \\"data-fill-classes\\":\\"white black\\" }}\\n/>\\n\\nThe only resolution of the missing letter and word is the answer to the puzzle, <Answer />. (Note that it cannot be the word in row 4, since it doesn’t fit in with the clues alphabetically.)"
    },
    "puz294": {
      "hash": "3afaa4ac5d85b069cd7ec3fbcf6ed40878405c0f8ed55e3245119a13984cc656",
      "content": "Each feeder resolves to a five-by-five grid with one missing block. We can try to arrange the nine feeder grids into a three-by-three table based on the position of the missing block:\\n\\n\`\`\`\\n 1  XX  YY\\nXX   2  ZZ\\nYY  ZZ   3\\n\`\`\`\\n\\n- At \`1\`, we have the grid with answer WHERE.\\n- At \`2\`, we have the grid with answer LANAI.\\n- At \`3\`, we have the grid with answer BOARD.\\n- At the \`XX\`s, we have the grids with answers FINED and OVATE in some order.\\n- At the \`YY\`s, we have the grids with answers NESTS and PILED in some order.\\n- At the \`ZZ\`s, we have the grids with answers CANOE and SARGE in some order.\\n\\nThis ambiguity is because across and down are never specified in the feeder puzzles.\\n\\nEach blank can be filled with a bigram (i.e. two by two) so that it forms valid six-letter words across and down within its feeder grid (see diagram). The ambiguous positioning can now be resolved by trying to get a reasonable phrase with enumeration 2 6 5 4 1: \`ON BROKEN WINGS SIDE A\`.\\n\\n<Table\\n  cells={[[\\n    \\"S P A S M/H ON C H O/A C R I D/W H E R E/L O S E S\\",\\n    \\"S N A F U/C O BR A S/O V A T E/W A D E R/S E E D S\\",\\n    \\"P A N T S/U N Y OK E/P I L E D/A M O N G/S E N S E\\",\\n  ], [\\n    \\"S W A T H/E E R I E/R EN E G E/F I N E D/S E A R S\\",\\n    \\"F L U M E/L A N A I/U P WI N D/T E N S E/E L D E R\\",\\n    \\"S H I L L/C A N O E/A V E NG E/L E P E R/E N T R Y\\",\\n  ], [\\n    \\"O W N E R/C R A V E/E A V E S/A SS E N T/N E S T S\\",\\n    \\"A M B E R/S A R G E/S P A R E/E L ID E D/T E S T S\\",\\n    \\"B O A R D/R A W E R/O K A P I/C E R EA L/K N E L L\\",\\n  ]].map(outerRow => outerRow.map(outerCell =>\\n    <Table cells={\\n        outerCell.split(\\"/\\").map(\\n\\t\\t\\t\\t\\tinnerRow => innerRow.split(\\" \\").map((innerCell) =>\\n\\t\\t\\t\\t\\t\\tinnerCell.length > 1 ? <b style={{\\n\\t\\t\\t\\t\\t\\t\\tfontSize: \\"0.8em\\",\\n\\t\\t\\t\\t\\t\\t}}>{innerCell}</b> : innerCell\\n\\t\\t\\t\\t\\t)\\n\\t\\t\\t\\t)\\n      }\\n      tableClassName=\\"vertical-barred cells-text-align-center\\"\\n\\t\\t\\tcellStyle={{ width: \\"1em\\", padding: \\"0.4em\\" }}\\n\\t\\t\\ttableStyle={{ margin: 0 }}\\n    />\\n  ))}\\n  tableClassName=\\"vertical-barred\\"\\n\\tcellStyle={{ padding: \\"1em\\" }}\\n/>\\n\\n“On Broken Wings” is, among other things, the B-side single of a Europe record whose A-side is the more famous <Answer />."
    },
    "puz295": {
      "hash": "72f02ad71818a0a040585fcdfbd72686d05a0c20aa4052774beaddd6de96f3f8",
      "content": "Solve the jigsaw by assembling the pieces into a 20×20 square. The missing squares spell out the answer, <Answer />.\\n\\n<Image />"
    },
    "puz296": {
      "hash": "b1d0ae46e1650af8914a212594ce6ebe67ed58e262927109d4a7c1aa32a61049",
      "content": "We start by solving the crossword clues.\\n\\n<Table\\n\\theaders={[\\"Answer\\", \\"ANTI-\\", \\"DIS-\\", \\"-MENT\\", \\"-ARIAN\\", \\"-ISM\\", \\"Number\\", \\"Letter\\"]}\\n  cells={[\\n    [\\"CUBISM\\", \\"\\", \\"\\", \\"\\", \\"\\", \\"Y\\", \\"1\\", \\"A\\"],\\n    [\\"ANTINEUTRINO\\", \\"Y\\", \\"\\", \\"\\", \\"\\", \\"\\", \\"16\\", \\"P\\"],\\n    [\\"ANTIGEN\\", \\"Y\\", \\"\\", \\"\\", \\"\\", \\"\\", \\"16\\", \\"P\\"],\\n    [\\"DISPLACEMENT\\", \\"\\", \\"Y\\", \\"Y\\", \\"\\", \\"\\", \\"12\\", \\"L\\"],\\n    [\\"DISJUNCTIVISM\\", \\"\\", \\"Y\\", \\"\\", \\"\\", \\"Y\\", \\"9\\", \\"I\\"],\\n    [\\"TRINITARIANISM\\", \\"\\", \\"\\", \\"\\", \\"Y\\", \\"Y\\", \\"3\\", \\"C\\"],\\n    [\\"AUTISM\\", \\"\\", \\"\\", \\"\\", \\"\\", \\"Y\\", \\"1\\", \\"A\\"],\\n    [\\"VEGETARIAN\\", \\"\\", \\"\\", \\"\\", \\"Y\\", \\"\\", \\"2\\", \\"B\\"],\\n    [\\"DISMEMBERMENT\\", \\"\\", \\"Y\\", \\"Y\\", \\"\\", \\"\\", \\"12\\", \\"L\\"],\\n    [\\"ENVIRONMENTALISM\\", \\"\\", \\"\\", \\"Y\\", \\"\\", \\"Y\\", \\"5\\", \\"E\\"],\\n  ]}\\n/>\\n\\nThe answers share various prefixes and suffixes in common. Clued additionally by the title, we observe that these are the same prefixes and suffixes in the well-known long word ANTIDISESTABLISHMENTARIANISM. Whether each prefix or suffix appears in each answer, ordered by their appearance in ANTIDISESTABLISHMENTARIANISM, gives 5-bit binary values that may be converted into letters using A=1, B=2, ..., Z=26 to get the final answer, <Answer />."
    },
    "puz297": {
      "hash": "781edd64a89d68c999df68b0fcd8d0390df54b9ba28c9c05bae18c291232d811",
      "content": "The image depicts a Rubik’s Cube. Although we’re only shown three faces of the cube, the arrangement of the colors on the shown faces suggests that the cube is only a few moves from being solved. The shortest (and most natural) sequence of moves that brings the shown colors to their correct faces is, in [Rubik’s Cube notation](https://ruwix.com/the-rubiks-cube/notation/), <Answer />, which happens to also be a layered rock whose other name is one letter off from the puzzle’s title.\\n\\n<Image nameWithExt=\\"animation.gif\\" />"
    },
    "puz298": {
      "hash": "3883d5574c72d4287e76c18783b92e36d278c41da6255297c5939326d3a7a326",
      "content": "This is a diagramless crossword, but all the \\"words\\" are single letters (that are doubly clued by across and down clues).\\n\\n<Table\\n  headers={[\\"Across\\", \\"Down\\", \\"Answer\\"]}\\n  cells={[\\n    [\\"Mathematical constant\\", \\"Direction\\", \\"E\\"],\\n    [\\"Small unit prefix\\", \\"Barely passing\\", \\"D\\"],\\n    [\\"Radioactive element\\", \\"Sounds like a pronoun\\", \\"U\\"],\\n    [\\"Physical constant\\", \\"Sounds like some liquid\\", \\"C\\"],\\n    [\\"Physical unit\\", \\"Article\\", \\"A\\"],\\n    [\\"Large unit prefix\\", \\"Sounds like some liquid\\", \\"T\\"],\\n    [\\"Mathematical unit\\", \\"Pronoun\\", \\"I\\"],\\n    [\\"Gaseous element\\", \\"Blood type\\", \\"O\\"],\\n    [\\"Gaseous element\\", \\"Direction\\", \\"N\\"],\\n  ]}\\n/>\\n\\nFiguring out what each letter is gives the answer <Answer />."
    },
    "puz3": {
      "hash": "3cf857c03a360a1c99494a6f7aa2f9949c7ceb378dd6297830d59ed7cb87d799",
      "content": "The answer to the riddle, “what might you use to unlock a tomb?”, is a GRAVE KEY, which clues the answer, <Answer />.\\n\\n<AuthorsNotes>\\n  <Flavor>what might suck blood from your dorsum?</Flavor>\\n  \\n  <Blanks content={\`_ _ _ _  _ _ _ _  →  _\`} />\\n</AuthorsNotes>"
    },
    "puz30": {
      "hash": "f218b9c489a17eb7b735adf24eac3ea3c0cd9ab598c64cda32f76988116f4be2",
      "content": "<Image fullWidth={true} name=\\"windy\\" />\\n\\nIf you try to solve the maze, the letters you pass over spell out the message “TAKE A MORE STRAIGHTFORWARD PATH”.\\n\\n<Image fullWidth={true} name=\\"straight\\" />\\n\\nIf you instead draw the “shortest path” from the start to the end, i.e., a straight line, the letters you intersect will say <Answer />. Ohhhh yeah!\\n\\n<Image fullWidth={true} name=\\"answer\\" />"
    },
    "puz301": {
      "hash": "d879a10c77f7afd016abbbf754fd675bc1c6b7053201e7d17691b1ec73b8ac77",
      "content": "The answers to these clues all have a Super Smash Bros. franchise character in them:\\n\\n<Table\\n  headers={[\\"Clue\\", \\"Answer\\", \\"Character\\"]}\\n  cells={[\\n  \\t[\\"Small town inhabitant\\", \\"Villager\\", \\"Villager\\"],\\n  \\t[\\"Fuzzy fruit\\", \\"Peach\\", \\"Peach\\"],\\n  \\t[\\"Head coach for the G2 League of Legends team\\", \\"Dylan Falco\\", \\"Falco\\"],\\n  \\t[\\"Rocha F.C.’s home stadium\\", \\"Estadio Municipal Doctor Mario Sobrero\\", \\"Doctor Mario\\"],\\n  \\t[\\"Connection that’s not old?\\", \\"Young Link\\", \\"Young Link\\"],\\n  \\t[\\"Animal in the Chinese zodiac\\", \\"Snake\\", \\"Snake\\"]\\n  ]}\\n/>\\n\\nThere have been five games in this franchise (N64, Melee, Brawl, 3DS/Wii U, and Ultimate) to date. Notating in which games each of these characters has been present in:\\n\\n<Table\\n  headers={[\\"Character\\", \\"N64\\", \\"Melee\\", \\"Brawl\\", \\"3DS/Wii U\\", \\"Ultimate\\", \\"Letter\\"]}\\n  cells={[\\n  \\t[\\"Villager\\", \\"0\\", \\"0\\", \\"0\\", \\"1\\", \\"1\\", \\"C\\"],\\n  \\t[\\"Peach\\", \\"0\\", \\"1\\", \\"1\\", \\"1\\", \\"1\\", \\"O\\"],\\n  \\t[\\"Falco\\", \\"0\\", \\"1\\", \\"1\\", \\"1\\", \\"1\\", \\"O\\"],\\n  \\t[\\"Doctor Mario\\", \\"0\\", \\"1\\", \\"0\\", \\"1\\", \\"1\\", \\"K\\"],\\n  \\t[\\"Young Link\\", \\"0\\", \\"1\\", \\"0\\", \\"0\\", \\"1\\", \\"I\\"],\\n  \\t[\\"Snake\\", \\"0\\", \\"0\\", \\"1\\", \\"0\\", \\"1\\", \\"E\\"],\\n  ]}\\n/>\\n\\nConverting the data about which character was in which game into five-bit binary gives the letters in the answer, <Answer />."
    },
    "puz302": {
      "hash": "85eebda3f286f3f2e28ced34afec3010aaf4448aedf816baa27163a5fb5231ee",
      "content": "This is a 3×3 diagramless crossword, but the grid is rotated 45 degrees, as somewhat clued by the title (which gives the length of each row). The across clues resolve to:\\n\\n<Table\\n  headers={[\\"Across\\", \\"Answer\\"]}\\n  cells={[\\n    [\\"1. Defeat\\", \\"L\\"],\\n    [\\"2. Affirmative\\", \\"AY\\"],\\n    [\\"4. Divided by\\", \\"PER\\"],\\n    [\\"6. Adverb\\", \\"SO\\"],\\n    [\\"7. One of the poles\\", \\"N\\"],\\n  ]}\\n/>\\n\\nThe down clues resolve to:\\n\\n<Table\\n  headers={[\\"Down\\", \\"Answer\\"]}\\n  cells={[\\n    [\\"1. Extent or duration (abbr.)\\", \\"LEN\\"],\\n    [\\"2. Conjunction\\", \\"AS\\"],\\n    [\\"3. Half of a toy\\", \\"YO\\"],\\n    [\\"4. Complexity class\\", \\"P\\"],\\n    [\\"5. Programming language\\", \\"R\\"],\\n  ]}\\n/>\\n\\nHere’s the final grid:\\n\\n<PuzzleGrid\\n\\tmodes={[\\"crossword\\"]}\\n\\ttext={\`\\n@@L@@\\n@A.Y@\\nP.E.R\\n@S.O.\\n@@N.@\\n\\t\`.trim().split(\\"\\\\n\\").join(\\"|\\")}\\n\\toptionsOverride={{\\n\\t\\t\\"data-fill-classes\\":\\"white white black\\",\\n\\t\\t\\"data-fills\\": \\"22122|21212|12121|21212|22122\\",\\n\\t}}\\n/>\\n\\nThe answer is <Answer />."
    },
    "puz304": {
      "hash": "67aa4ef0c9e3a714f12da9d22cd775584f374cf035d2ad42620acb1d761f1bde",
      "content": "The song notated here is the [Super Mario Bros. theme](https://en.wikipedia.org/wiki/Super_Mario_Bros._theme). (As the rests are not redacted, it’s possible to get the rhythm as well as the first four notes.) The hidden notes are <Answer />, the answer. (The second G is an octave lower than the first.)"
    },
    "puz305": {
      "hash": "b4fc8a3a665f62f7787cbabdfee5b3a0a69de0b6afa5c54f550cd1cd3afa9c14",
      "content": "This is a visual representation of the song Do Re Mi, from The Sound of Music, with each circle representing a note (horizontal position being time, vertical position being pitch) and each colored path being one of the lines in rainbow order. For example, the red line is \\"Do, a deer...\\". Each number is either in a note that appears in two lines or the intersection of two such notes, where the notes' words in the lyrics have exactly one letter in common: BREAD/DO, RUN/THREAD, DROP/TO, NAME/DRINK, DEER/NOTE. The common letters spell <Answer />, the answer.\\n\\n<AuthorsNotes>\\nIn addition to being a lyric from later in the song, the title is a small nod to my mildly infamous puzzle <a href=\\"https://dp.puzzlehunt.net/puzzle/now-i-know.html\\">Now I Know...</a>.\\n</AuthorsNotes>"
    },
    "puz306": {
      "hash": "ce1e7526bc031015f32e0458b5ec2bbb1708d3fb6f219b4dc32934d4c240ca4c",
      "content": "Five homophones are sung in sequence, each on a particular note. The letter of the note appears in exactly one homophone of each pair.  Index its location into the other homophone in the pair (for example, G is 3rd in MIGHT, so take the 3rd letter of MITE):\\n\\n<Table\\n  headers={[\\"Pitch\\", \\"Homophone with pitch\\", \\"Homophone without pitch\\", \\"Position of pitch in first homophone\\", \\"Letter at that position in second homophone\\"]}\\n  cells={[\\n  \\t[\\"G\\", \\"MIGHT\\", \\"MITE\\", \\"3\\", \\"T\\"],\\n  \\t[\\"A\\", \\"HOARSE\\", \\"HORSE\\", \\"3\\", \\"R\\"],\\n  \\t[\\"E\\", \\"HERTZ\\", \\"HURTS\\", \\"2\\", \\"U\\"],\\n  \\t[\\"G\\", \\"GNEISS\\", \\"NICE\\", \\"1\\", \\"N\\"],\\n  \\t[\\"C\\", \\"ARC\\", \\"ARK\\", \\"3\\", \\"K\\"]\\n  ]}\\n/>\\n\\nThe resulting letters spell <Answer />."
    },
    "puz308": {
      "hash": "c19f3db0757d0355bf03015263bbfbff072e486fe6e0d0b7538bb02b50d3b297",
      "content": "This is a set of cryptic clues mashed together:\\n\\n- Vocal prince to broadcast: a \\"prince\\" is an heir, which sounds like (as indicated by \\"vocal\\") AIR, which means \\"to broadcast\\"\\n- opposition to tangled ancestries: \\"ancestries\\" anagrams (as indicated by \\"tangled\\") to RESISTANCE, which means \\"opposition\\"\\n- supported by every other town: taking \\"every other\\" letter in \\"town\\" gives ON, which means \\"supported by\\"\\n- loudly telling tales, floating: \\"loudly\\" could be interpreted as F for forte, and \\"telling tales\\" means LYING, giving FLYING, which means \\"floating\\"\\n- remedy that involves repairing tear of being: \\"repairing tear\\" means anagraming \\"tear\\" to get REAT, which is \\"involved\\" in CURE, which means remedy, to get CREATURE, which means \\"being\\"\\n\\nThe resulting cryptic clue is \\"Air resistance on flying creature\\". \\"Air resistance\\" is DRAG, and combining this with ON gives <Answer />, which is a kind of \\"flying creature\\" and the answer."
    },
    "puz309": {
      "hash": "c538475ae4b29093b377f9ab9b17269881f475221b1de0569e01ad3b3f2d0476",
      "content": "The image is a spoken triangle. \\"Triangle\\" spoken aloud sounds like \\"try angle\\", so <Answer /> is the answer."
    },
    "puz31": {
      "hash": "414d18dbba2de81bd02bddda11f894662cd5c18f65f6d1f70248b26aae9c0fa9",
      "content": "<PuzzleGrid\\n\\ttext={\`\\n...V......\\n...E....L.\\n...R...A..\\n...T..N...\\nHORIZONTAL\\n...CG.....\\n...A......\\n..IL......\\n.D........\\n\\t\`.trim().split(\\"\\\\n\\").join(\\"|\\")}\\n\\toptionsOverride={{\\n\\t\\t\\"data-fill-classes\\":\\"transparent white yellow\\",\\n\\t\\t\\"data-fills\\": \`\\n...1......\\n...2....2.\\n...1...2..\\n...2..1...\\n1112122111\\n...11.....\\n...1......\\n..11......\\n.1........\\n\\t\\t\`.trim().split(\\"\\\\n\\").join(\\"|\\"),\\n\\t}}\\n/>\\n\\nWe can fill out the grid with the three words HORIZONTAL, VERTICAL, and DIAGONAL in the horizontal, vertical, and diagonal entries, such that the words cross correctly. Doing so, the highlighted squares spell out the answer, <Answer />."
    },
    "puz310": {
      "hash": "c9c0658568d31c0563de3a595a3332714ebfd53b434643221d4c0f8e50ce0c88",
      "content": "This is a picture of a Taiga bean goose, whose scientific name is *Anser fabalis*. Spoken aloud, this sounds like \\"ANSWER FABULOUS\\", so <Answer /> is the answer."
    },
    "puz311": {
      "hash": "db830f7893b16205ff534af17a4e3fdc92fa189e48e1620724a2afd7d8e84c93",
      "content": "This is an image of Colin Mochrie, which when spoken sounds like you need to call in <Answer />, the answer."
    },
    "puz312": {
      "hash": "7329469dddc81e46adc74e43ec599cc981907cad24e3dbbd64b0c4f46d19ab95",
      "content": "Following the instructions in the title, take the enumerations (number of letters) of the words in the title: 3, 12, 9, 14, 3, 8. Convert them with A=1, B=2, ... Z=26 to get the answer, <Answer />."
    },
    "puz313": {
      "hash": "f080cc57b1250d5c70882c4154610f1afa71f16958a5f84d4a75b70dcefea856",
      "content": "The puzzle is as described. Claiming from the pool marks the puzzle as solved."
    },
    "puz315": {
      "hash": "7929901577b342d4851be95606b9ffb9f63cb8bdbe66516924efa0261038969e",
      "content": "Both the title and the flavor text reference the [ligma meme](https://knowyourmeme.com/memes/ligma). All the clues solve to things ending in \\"igma\\":\\n\\n<Table\\n  headers={[\\"Clue\\", \\"Answer\\", \\"Non igma letters\\"]}\\n  cells={[\\n  \\t[\\"UI design app\\", \\"Figma\\", \\"F\\"],\\n  \\t[\\"Mystery (2)\\", \\"Enigma\\", \\"EN\\"],\\n  \\t[\\"Like parent?\\", \\"Dig ma\\", \\"D\\"],\\n  \\t[\\"Greek letter\\", \\"Sigma\\", \\"S\\"]\\n  ]}\\n/>\\n\\n\\"Enigma\\" is notated with (2) because there are two letters before the \\"igma\\". The non-\\"igma\\" letters spell the answer <Answer />."
    },
    "puz316": {
      "hash": "61921eb7d8bbdf247f11a19b3be9aaa69b7feed5f7094f6037eee1613e7eb223",
      "content": "This puzzle is about geologic timescales, which divides up the entirety of Earth’s history into four eons: Hadean, Archean, Proterozoic, and Phanerozoic. Each time is represented by their first letter, and can be hierarchically divided into smaller and smaller timescales. For example, the Phanerozoic eon can be divided into the Paleozoic, Mesozoic, and Cenozoic eras. At the bottom level are the ages that comprise the Middle Jurassic and Late Jurassic epochs. In order, the question marks can be filled with Aalenian, Bajocian, Bathonian, Oxfordian, and Tithonian ages; the first letters spell out <Answer />, the answer."
    },
    "puz317": {
      "hash": "f1cc091228d1f305b7db750bce95f5cc6c37e2916cecb274405f808a928098ac",
      "content": "Take the first letters of the words in the title to get <Answer />.\\n\\n<AuthorsNotes>\\nThis puzzle was only written after around 95% of the other puzzles in this hunt.\\n</AuthorsNotes>"
    },
    "puz318": {
      "hash": "1c58981cc5be44c4654213e422fb65c28522992fb30d168f8a2670330d709359",
      "content": "Take the last letters of the words in the title to get the answer, <Answer />."
    },
    "puz319": {
      "hash": "f07209dd1b5a070ac913dc7f0e0a445d16389e44149b12de51adf392244c6764",
      "content": "The title is almost a pangram. It is missing the letters F,O,X,Y, and the answer is <Answer />."
    },
    "puz32": {
      "hash": "0cfad1efaa7f2f6d3840af1d044b0a5be6918a49cf0487a955099f0f57ea0446",
      "content": "Each colored pattern indicates, for some letter, the combined set of squares that all chess pieces whose name contains that letter could move to. The first pattern provides an example: the squares are those that a King, rooK, and Knight could move to from the center, and those are exactly the pieces whose names contain a K. In order, the patterns are: \\n\\n- G: kinG + kniGht; not K since rooK is excluded, not I since bIshop is excluded, not N since queeN is excluded\\n- I: kIng + knIght + bIshop\\n- R: Rook only; not O since bishOp is excluded, not K since King and Knight are excluded\\n- T: knighT; not K, I, N, or G since KING is excluded, not H since bisHop is excluded\\n- H: knigHt + bisHop; not I since kIng is excluded\\n\\nThus the answer is <Answer />."
    },
    "puz320": {
      "hash": "3e58026ac89a6ef8df47a14cb04b158bb40512bcc9689c40ad97a5e479b806ca",
      "content": "The words can be combined in groups of 3 that make 3 words of a common 4-word phrase or idiom, where the words in the 1st row are always the 1st word of the phrase, and so on. For example, the DOWN in row 1, THE in row 3, and WIRE in row 4 are part of the phrase DOWN TO THE WIRE.\\n\\nThe phrases (with missing words in parentheses) are\\n* (greatest) STORY EVER TOLD\\n* (for) ALL PRACTICAL PURPOSES\\n* (talk) THROUGH ONE’S HAT\\n* SEE (you) IN HELL\\n* HAVE (what) IT TAKES\\n* DOWN (to) THE WIRE\\n* AT THE (very) LEAST\\n* IT TAKES (all) SORTS\\n* LOOK BEFORE (you) LEAP\\n* I THOUGHT AS (much)\\n* ONCE UPON A (time)\\n* GET YOUR MONEY’S (worth)\\n\\nWe can do the same thing with the 12 missing words, making four new 4-word phrases each missing a word (while keeping the words in the same position, e.g. GREATEST is still the first word in the phrase).\\n\\n* (thank) YOU VERY MUCH\\n* GREATEST (of) ALL TIME\\n* FOR WHAT (it’s) WORTH\\n* TALK TO YOU (later)\\n\\nEach of these phrases is commonly abbreviated to its initials (TYVM, GOAT, FWIW, TTYL). Taking the missing initials gives the answer, <Answer />."
    },
    "puz321": {
      "hash": "4a9d09f59f8998ced39e2a82413c872348c6f6d4729851bb6dc95419ea115185",
      "content": "The sixteen words can be paired up such that each pair has two letters in common in the same position. Then, between each pair, a hybrid word can be made with the two shared letters along with one differing letter from one word and one differing letter from another:\\n\\n* BANE and BIND form BAND\\n* BLOT and BOOM form BOOT\\n* BULL and TALL form BALL\\n* FOAM and FOWL form FOAL\\n* GNAT and GOUT form GOAT\\n* JOLT and VOLE form VOLT\\n* KOAN and ROAR form ROAN\\n* REAM and REED form READ\\n\\nThere are other pairs of words that have two letters in common, such as FOAM and ROAR, but this is the only way to pair off all sixteen words such that each word is in exactly one pair. The full graph of all possible pairs of words helps to make this clear. After pairing each of FOWL, GNAT, REED, and VOLE with their only possible partner, all the remaining pairs are uniquely determined.\\n\\n<Image name=\\"1\\" fullWidth inverted />\\n\\nThis process can then be repeated:\\n\\n* BALL and BAND form BALD\\n* BOOT and VOLT form BOLT\\n* FOAL and GOAT form GOAL\\n* READ and ROAN form ROAD\\n\\nThis pairing can be found by observing that READ has only one possible partner, after which FOAL has only one possible partner, after which the remaining pairs are uniquely determined.\\n\\n<Image name=\\"2\\" fullWidth inverted />\\n\\nAnd again:\\n\\n* BALD and BOLT form BOLD\\n* GOAL and ROAD form GOAD\\n\\nAnd finally, BOLD and GOAD combine to make the answer, <Answer />."
    },
    "puz322": {
      "hash": "d539644a7ef71552df3d4d58aee9847156515b56c49873ee1e5e01e18c3ffa14",
      "content": "The puzzle links to a <a href={\`https://riddl.ing\`} target=\\"_blank\\">riddl.ing</a> game with the following clues:\\n\\n\\n\\n* I’m eaten.\\n* I’m a little sour.\\n* I grow from a shrub.\\n* I’m named after a colour.\\n* I’m a blue berry.\\n\\nThe answer to the riddle is BLUEBERRY. However, submitting BLUEBERRY to the puzzle gives the message “Correct, but not the answer. Check the canned hints for up to five more clues.”\\n\\nThere are five canned hints to this puzzle, which act as five additional clues to the riddle:\\n\\n* All the clues are still true, but the answer is a different berry.\\n* I’m named after a different color named after a different fruit!\\n* I’m also spicy, dry, and bitter.\\n* I heal 10HP when fed to your pet.\\n* I’m a Berry from Pokémon, and I’m not orange.\\n\\n\\nThe answer which fits all ten clues is <Answer />."
    },
    "puz324": {
      "hash": "d01270131b166e76470f50973e9a13033bee591041ae5f49117254b0ce538a2c",
      "content": "The answer <Answer /> is written in zero-size text in the puzzle text itself. This is revealed if you copy and paste the text into a different window."
    },
    "puz325": {
      "hash": "693927c095631577d1af51af2c90f7af1751d29bf27bdf47710951a3cee95135",
      "content": "The <a href=\\"/about\\">rules page</a> explicitly states that some puzzle must have the answer <Answer />. This is that puzzle."
    },
    "puz326": {
      "hash": "dd5a3067c7b07af8e030e13e97af89c4e46a40798de05a72fe870004a807c773",
      "content": "Submitting any attempt to this puzzle gives a puzzle message that tells you the answer, <Answer />."
    },
    "puz327": {
      "hash": "4d901095002abf7819001f20d10a733f0a7084793c06f3e662f28fdce441865d",
      "content": "This puzzle’s solution is always visible, even when the puzzle is not solved. By reading the solution you’re currently reading, you can get that the answer is <Answer />."
    },
    "puz328": {
      "hash": "aebd21795d385d780da6d28496dc68f0b0de58c3bb10cf5775945b20f881b746",
      "content": "The puzzle text hints that you should look at the answers to the Find the Answer series itself. All the puzzles have eight-letter answers, and there are eight of the puzzles, suggesting diagonalization:\\n\\n<pre>\\n<b>O</b>BSCURED\\nO<b>V</b>ERHEAD\\nPR<b>E</b>SENCE\\nFAI<b>R</b>PLAY\\nSNAT<b>C</b>HED\\nLASTW<b>O</b>RD\\nREALTI<b>M</b>E\\nOVERCOM<b>E</b>\\n</pre>"
    },
    "puz329": {
      "hash": "f371c60353df6a5e530bde2612ca09d55348a364f117179a4e6ef527895ba06c",
      "content": "This puzzle is based on the quote “Well, well, well, how the turntables,” mistakenly uttered by Michael Scott in The Office. The proper phrase should have been “Well, well, well, how the tables have turned.”\\n\\nWe are given 7 images each labeled with a clue beginning with wikiHow. The portions after wikiHow map to phrases like *the tables turn*, with two parts that can be swapped to form a compound word like *turntables*.\\n\\n<Table\\n  headers={[\\"Clue\\", \\"Phrase\\", \\"Compound word\\"]}\\n  cells={[\\n    [\\"the units of language die\\", \\"the words pass\\", \\"PASSWORDS\\"],\\n    [\\"the crisp wafers shoot bullets\\", \\"the crackers fire\\", \\"FIRECRACKERS\\"],\\n    [\\"the flattop furnitures revolve around\\", \\"the tables turn\\", \\"TURNTABLES\\"],\\n    [\\"the upper body garments perspire\\", \\"the shirts sweat\\", \\"SWEATSHIRTS\\"],\\n    [\\"the rears of the body lodge or station\\", \\"the backs quarter\\", \\"QUARTERBACKS\\"],\\n    [\\"the celebratory confections borrow securities\\", \\"the cakes short\\", \\"SHORTCAKES\\"],\\n    [\\"the adult males give up\\", \\"the men cave\\", \\"CAVEMEN\\"],\\n  ]}\\n/>\\n\\nEach image is from a wikiHow article related to the corresponding compound word, like How to Operate a Turntable. The instructions in these articles are delivered in numbered parts. The size and location of the question marks in the puzzle suggest that we need to use the part number corresponding to each image.\\n\\n<Table\\n  headers={[\\"Article\\", \\"Word\\", \\"Part number\\", \\"Letter\\"]}\\n  cells={[\\n    [(<a href=\\"https://www.wikihow.com/Create-a-Password-You-Can-Remember\\">Create a Password You Can Remember</a>), \\"PASSWORDS\\", 1, \\"P\\"],\\n    [(<a href=\\"https://www.wikihow.com/Make-a-Firecracker\\">Make a Firecracker</a>), \\"FIRECRACKERS\\", 2, \\"I\\"],\\n    [(<a href=\\"https://www.wikihow.com/Operate-a-Turntable\\">Operate a Turntable</a>), \\"TURNTABLES\\", 1, \\"T\\"],\\n    [(<a href=\\"https://www.wikihow.com/Dress-up-a-Sweatshirt\\">Dress up a Sweatshirt</a>), \\"SWEATSHIRTS\\", 1, \\"S\\"],\\n    [(<a href=\\"https://www.wikihow.com/Quarterback-for-a-Football-Team\\">Quarterback for a Football Team</a>), \\"QUARTERBACKS\\", 3, \\"A\\"],\\n    [(<a href=\\"https://www.wikihow.life/Make-Strawberry-Shortcake\\">Make Strawberry Shortcake</a>), \\"SHORTCAKES\\", 4, \\"R\\"],\\n    [(<a href=\\"https://www.wikihow-fun.com/Act-Like-a-Caveman\\">Act Like a Caveman</a>), \\"CAVEMEN\\", 5, \\"M\\"],\\n  ]}\\n/>\\n\\nIndexing the part numbers into the compound words yields PITS ARM. Or as Michael Scott might put it, “Well, well, well, how the <Answer/>.”"
    },
    "puz33": {
      "hash": "0473e20fb7ec8a89d9bc096f9eba8805c3a70182a9df8dc5263eb2cfa406ab4f",
      "content": "This puzzle requires drawing a path between Oregon and Florida, through 7 states, whose electoral votes for the 2024 U.S. presidential election total 136. There is only one unique way to do this, through California, Arizona, New Mexico, Texas, Arkansas, Tennessee, and Alabama. The first letters of these states spell <Answer />."
    },
    "puz330": {
      "hash": "344661371cee168f8b8d505a877b7e57283d655dd62a389f5851ff69eeff791b",
      "content": "This puzzle is never directly linked to; all links that would point to this puzzle are disabled. The only way to reach this puzzle is to visit the URL directly, revealing the answer of <Answer />.\\n\\n<AuthorsNotes>\\n<i>(You can’t click on it.)</i>\\n</AuthorsNotes>"
    },
    "puz34": {
      "hash": "c9bee5a9dc54f7e5ae0a77466db2d789c40946b34ddc0549d44ec188ba9ab679",
      "content": "The hexagon where the branches emanate from is the symbol for benzene. Aromatic hydrocarbons like benzene have names for [patterns of substitution](https://en.wikipedia.org/wiki/Arene_substitution_pattern) depending on their positions relative to a reference. These patterns are called ORTHO, META, and PARA. If we write each of these patterns in the hexagonal branches, from the benzene outward, and read the indicated letters, we get the answer <Answer />."
    },
    "puz36": {
      "hash": "b545acf78a6960b080f6f08f35e73db8271591fb0467818e07b6833e165a26c6",
      "content": "As clued by the dotted lines, each point is the sum of two unit vectors, each pointing in one of the eight cardinal directions. With the exception of P<sub>6</sub>, the vectors used to construct each point are uniquely recoverable.\\n\\n<Table\\n\\theaders={[\\"Point\\", \\"Summands\\", \\"Letter\\"]}\\n\\tcells={[\\n\\t\\t[<>P<sub>1</sub></>, \\"N/SE\\", \\"V\\"],\\n\\t\\t[<>P<sub>2</sub></>, \\"NE/S\\", \\"E\\"],\\n\\t\\t[<>P<sub>3</sub></>, \\"NW/S\\", \\"C\\"],\\n\\t\\t[<>P<sub>4</sub></>, \\"N/NW\\", \\"T\\"],\\n\\t\\t[<>P<sub>5</sub></>, \\"NW/W\\", \\"O\\"],\\n\\t\\t[<>P<sub>6</sub></>, \\"N/S, NE/SW, or W/E\\", \\"D, L, or R\\"],\\n\\t\\t[<>P<sub>7</sub></>, \\"W/SE\\", \\"S\\"],\\n\\t]}\\n/>\\n\\nInterpreting each pair of vectors as a letter in flag semaphore, and choosing the only possible letter for P<sub>6</sub> that makes a valid English word or phrase, we recover the answer, <Answer />."
    },
    "puz37": {
      "hash": "cbe48c103ec19d80cdce5306be6f422e694c780198b8162ad1e8b77b43f5b0b8",
      "content": "These are the letters of <Answer /> written in an unusual way. Each of the segments denotes a line or curve in the letter, and each of the dots denotes a place where two segments of the letter meet at a hard angle. For example, S is a single segment because it is a single curve with no hard angles, and N is reduced to three segments in a row."
    },
    "puz38": {
      "hash": "8e00cfa1fd192a36cc1c7a587477288c64d6b1192c9e379eeaf2d26c7f5aadca",
      "content": "The logos in the upper-left refer to the cover for the Beatles' album \\"Help!\\". On the original cover, the Beatles were at first supposed to spell out HELP in semaphore, but the photographer decided that looked ugly and so instead they spell out NUJV. We replace the occurrences of E and L in the puzzle image with the semaphore encodings for U and J, then decode the resulting semaphore code to get the answer, <Answer />."
    },
    "puz39": {
      "hash": "7ed98f83c7789eb3cde994f49f023dd576b35b0f7aa3635e4a4d6c5c54dc32ee",
      "content": "This is an ASCII art version of Van Gogh’s “Bedroom in Arles”. The question marks are where a <Answer /> hangs on the wall."
    },
    "puz4": {
      "hash": "d2dec9c64e6cdf2632563a35f27e7d3b92b7aff7ebf82d1ed6b709eca997017d",
      "content": "These are etymologies for language names.\\n\\n<Table\\n\\theaders={[\\"Clue\\", \\"Answer\\"]}\\n\\tcells={[\\n\\t\\t[\\"speech of the officials\\", \\"[M]ANDAR[I]N CHINESE\\"],\\n\\t\\t[\\"of the isle of the hyrax\\", \\"[S]PANI[S]H\\"],\\n\\t\\t[\\"of the land of the river\\", \\"H[I][N]DI\\"],\\n\\t\\t[\\"of the port of the Callaeci people\\", \\"PORTU[G]UESE\\"],\\n\\t]}\\n/>\\n\\nReading off the boxed blanks gives the answer, <Answer />."
    },
    "puz40": {
      "hash": "d051c3b1d0a7419c6aa585470bea36aeb98c930d10063961606dddcde9847ef1",
      "content": "There are 26 columns in the grid, corresponding to the letters A through Z. Each row represents a word, with letters indicated by the positions of the black squares.\\n\\n<PuzzleGrid\\n\\ttableClassName=\\"puzzle-grid-small\\"\\n\\ttext={\`\\n....@..@...........@......\\n@...@........@...@@...@...\\n........@.........@.......\\n......@@@..@.......@......\\n\\t\\t\`.trim().split(\\"\\\\n\\").join(\\"|\\")\\n  }\\n\\toptionsOverride={{\\n\\t\\t\\"data-fill-classes\\":\\"white black\\",\\n\\t\\t\\"data-top-clues\\": \\"A|B|C|D|E|F|G|H|I|J|K|L|M|N|O|P|Q|R|S|T|U|V|W|X|Y|Z|\\",\\n\\t}}\\n/>\\n\\nFrom the positions of the black squares, we extract the letters EHT, AENRSW, IS, and GHILT. These anagram to THE ANSWER IS <Answer />."
    },
    "puz41": {
      "hash": "aea1cf40cda02ab9070a899b71e6fc61055a4a0ac2cb5f423625067ff2c39aff",
      "content": "The line labeled “1” is exactly 100 pixels long. In units of 100 pixels, the lengths of the remaining lines are close to famous mathematical or physical constants. The last pixel in each line is greyed in proportion to the fractional part of the line’s length.\\n\\n<Table\\n\\theaders={[\\"Scaled length\\", \\"Constant\\", \\"Symbol\\"]}\\n  cells={[\\n    [\\"3.1415...\\", \\"π\\", \\"π\\"],\\n    [\\"0.7297... / 100\\", \\"Fine-structure constant\\", \\"α\\"],\\n    [\\"1 (vertical)\\", \\"i\\", \\"i\\"],\\n    [\\"0.5772...\\", \\"Euler-Mascheroni constant\\", \\"γ\\"],\\n    [\\"2.7182...\\", \\"e\\", \\"e\\"],\\n  ]}\\n/>\\n\\nAfter changing the Greek letters π, α and γ into their corresponding Latin letters P, A and G, the symbols in order spell the answer, <Answer />."
    },
    "puz42": {
      "hash": "4f3d4d7416c1ad9839f120675c93ea1106773f21d705b298754ed51417e0dcdd",
      "content": "First, we complete the crossword except for the central square of the 6-Down answer.\\n\\n<PuzzleGrid modes={[\\"crossword\\"]} text={\`\\nSPIRAL@MBPS\\nWASABI@GAEA\\nALUMINUMCAN\\n@@RODENT@@@\\nONENESS@BOO\\nCODA@.@PARA\\nTWO@ECUADOR\\n@@@SPURTS@@\\nPROHIBITION\\nEDGE@ENIGMA\\nWASD@SEENBY\\n\`.trim().split(\\"\\\\n\\").join(\\"|\\")} optionsOverride={{\\"data-fill-classes\\":\\"white\\"}} />\\n\\nThe 6-Down answer reads LINES?CUBES. Lines are 1-dimensional and cubes are 3-dimensional, so the ? should be replaced by the 2-dimensional answer, <Answer />."
    },
    "puz43": {
      "hash": "f0d23c74ab70b984f1edab3448e4c49973da4944094b6b135836bf6527d9fe03",
      "content": "The answer to this puzzle is <Answer />. It is one third of the word PUZZLE, and is something you might say in response to something that stinks."
    },
    "puz44": {
      "hash": "e7532f0169f38f43d157701e11ac4cbcbf6627f1a5b0f8f1d647bc4f2409b47f",
      "content": "The pictures clue 3 letter words, ASS, END, GOT, SUM. They can be placed in the rows to complete words: MISGOTTEN, LEGENDARY, PRESUMERS, REPASSAGE. Taking the middle letter (2 of 3) of each word gives the answer <Answer />."
    },
    "puz45": {
      "hash": "7eebbfde6ca6b6d2909dd63795910df00ad78b7ccb1414c593a4196469706b80",
      "content": "From our work in the previous puzzle in the series, 2/3 Puzzle, we have \\n\`\`\`\\n1) MIS GOT TEN\\n2) LEG END ARY\\n3) PRE SUM ERS\\n4) REP ASS AGE\\n\`\`\`\\n\\nThe A) through F) clues each use two of these 12 trigrams, one each from the rows with the listed number, and anagram those letters with one extra letter to make the clued word.\\n\\n<Table \\n  headers={[\\"Clue answer\\", \\"Trigram 1\\", \\"Trigram 2\\", \\"Extra letter\\"]}\\n  cells={[\\n  \\t[\\"GREASED\\", \\"ERS\\", \\"AGE\\", \\"D\\"],\\n  \\t[\\"LEGUMES\\", \\"LEG\\", \\"SUM\\", \\"E\\"],\\n  \\t[\\"REMINDS\\", \\"MIS\\", \\"END\\", \\"R\\"],\\n  \\t[\\"ASSYRIA\\", \\"ARY\\", \\"ASS\\", \\"I\\"],\\n  \\t[\\"PREVENT\\", \\"TEN\\", \\"REP\\", \\"V\\"],\\n  \\t[\\"PROTEGE\\", \\"GOT\\", \\"PRE\\", \\"E\\"]\\n  ]}\\n/>\\n\\nThe leftover letters that are not from any trigram make the answer <Answer />."
    },
    "puz46": {
      "hash": "32f6c9b31d71efbf30b6959ed9a42c0a1422b2c7fa76cfc12e4f310d434a875a",
      "content": "The answers to the feeders to this puzzle are PU, ONUS, and DERIVE.\\nThe answer can be obtained by taking the left half of each word, to get <Answer />."
    },
    "puz47": {
      "hash": "71b2628333a44540317392708ece25b67b177406e155287c262bd9ef34c44417",
      "content": "As clued by the title, this puzzle involves looking at a keyboard. When looking at the QWERTY layout, each word forms one connected component on the keyboard, with the exception of one letter. (Connectivity is left, right, up, up-right, down-left, and down.) The extra letters of each word spell out the answer.\\n\\n<Table\\nheaders={[\\"Word\\", \\"Letter\\"]}\\ncells={[\\n  [\\"PRESS\\", \\"P\\"],\\n  [\\"LETTERS\\", \\"L\\"],\\n  [\\"READ\\", \\"A\\"],\\n  [\\"UNTOUCHING\\", \\"C\\"],\\n  [\\"GET\\", \\"E\\"],\\n  [\\"TERM\\", \\"M\\"],\\n  [\\"EFFECT\\", \\"E\\"],\\n  [\\"ANSWER\\", \\"N\\"],\\n  [\\"DETECTED\\", \\"T\\"],\\n]}\\n/>\\n\\nThe answer to this puzzle is <Answer />."
    },
    "puz48": {
      "hash": "98927c24d13b25613455b96a00b11b492a76c1ba2d40f0cbe506c79b4ae4b6c1",
      "content": "The crosword clues are cryptics, where the definition solves to a word that's \\"IN\\" plus the wordplay.\\n\\n<Table\\n\\theaders={[\\"Clue\\", \\"Answer\\", \\"Explanation\\"]}\\n  cells={[\\n    [\\"Duet (not quartet!) is oddly a legal contract\\", \\"[IN]DENTURE\\", \\"DuEtNoTqUaRtEt\\"],\\n\\t\\t[\\"Flooded intl. org. taken out\\", \\"[IN]UNDATED\\", \\"UN+DATED\\"],\\n\\t\\t[\\"Boost case involving rare shell\\", \\"[IN]CREASE\\", \\"C(R(-ar)E)ASE\\"],\\n\\t\\t[\\"Bird takes you in with charged particle insight\\", \\"[IN]TUITION\\", \\"T(U)IT+ION\\"],\\n  ]}\\n/>\\n\\nThe first letters of the (wordplay) answers spell DUCT. Adding IN gives the answer, <Answer />."
    },
    "puz49": {
      "hash": "2dfef25d35887f30edec4f44bf591475f72962070493b1f0cc10f30950bca82b",
      "content": "The optimal solution to transform the first image into the second image, without having a larger item on top of a smaller item (following the rules of [Tower of Hanoi](https://en.wikipedia.org/wiki/Tower_of_Hanoi)) is to:\\n\\n* Move A to the left tower.\\n* Move M to the middle tower.\\n* Move A to the middle tower.\\n* Move LG to the right tower.\\n* Move A to the right tower.\\n* Move M to the left tower.\\n* Move A to the left tower.\\n* Move TE to the right tower.\\n\\nReading the steps down spells <Answer />."
    },
    "puz5": {
      "hash": "f6208c7153892266c18c49443fbe95714777b6053bca26059d6f356a014c9eda",
      "content": "Each clue is a famous phrase or name with distinctive punctuation, with all letters and numbers replaced with o’s, except for one that was replaced with x:\\n\\ndéjà [V]u  \\nm[A]ître d’  \\nPani[C]! at the Disco  \\n20,000 Leag[U]es Under the Sea  \\nDr. Strangel[O]ve or: How I Learned to Stop Worrying and Love the Bomb  \\nAre Yo[U] There God? It’s Me, Margaret.  \\nOop[S]!... I Did It Again\\n\\nThe letters that were replaced with x spell <Answer />."
    },
    "puz51": {
      "hash": "2fd30f425942a487ce2005f60fd7e3ef037d41de40d302c0a352c3e47eced70c",
      "content": "The punctuation of the text lines up vertically in five separate columns. If you turn your head 90 degrees to the left, you can read this as 5 lines of Morse code, where the \`!\` and \`:\` symbols contribute two parts to the group.\\n\\n\`\`\`\\nTurn. Look. Cool! An old pal.\\nRead! Find. You see it. Hear:\\nNice. Haha! Conclusion: Done.\\n\`\`\`\\n\\n<Table\\nheaders={[\\"Column\\", \\"Decoded Morse\\"]}\\ncells={[\\n  [\\"..-.\\", \\"F\\"],\\n  [\\".-..\\", \\"L\\"],\\n  [\\".-\\", \\"A\\"],\\n  [\\"...\\", \\"S\\"],\\n  [\\"....\\", \\"H\\"],\\n]}\\n/>\\n\\nThe answer to this puzzle is <Answer />."
    },
    "puz52": {
      "hash": "4a7f8600c05d7023815823827a60afd8e5d8ed686a3dfc74f00259de2bbb622a",
      "content": "These are references to [Mario quiz cards](https://www.mariowiki.com/Mario_Quiz_Cards). Once you find the corresponding cards' answers, reading first letters gives <Answer />.\\n\\nThe original questions and answers are:  \\n\\n* [In what section of the orchestra does the flute belong?](https://www.mariowiki.com/Mario_Quiz_Cards#/media/File:Flute_quiz_card.jpg) — Woodwind  \\n* [In what country did the Renaissance begin?](https://www.mariowiki.com/Mario_Quiz_Cards#/media/File:Renaissance_quiz_card.jpg) — Italy  \\n* [Where was the hottest air temperature recorded on Earth?](https://www.mariowiki.com/Mario_Quiz_Cards#/media/File:Hottest_air_temperature_quiz_card.jpg) — Libya (note: the Libyan temperature record was recently [debunked](https://www.researchgate.net/publication/236163901_World_Meteorological_Organization_Assessment_of_the_Purported_World_Record_58C_Temperature_Extreme_at_El_Azizia_Libya_13_September_1922#:~:text=On%2013%20September%201922%2C%20a,recorded%20temperature%20for%20the%20planet.), but Libya is the right answer according to the card) \\n* [In which state would you find the Grand Ole Opry and Graceland?](https://www.mariowiki.com/Mario_Quiz_Cards#/media/File:Grand_Ole_Opry_and_Graceland_quiz_card.jpg) — Tennessee  \\n* [Who told the tales of The Arabian Nights?](https://www.mariowiki.com/Mario_Quiz_Cards#/media/File:The_Arabian_Nights_quiz_card.jpg) — Scheherazade"
    },
    "puz53": {
      "hash": "7021a3ff2885242d133af6cf30633508dbb67e64acf9dbc60bb4d800250bd348",
      "content": "The words can be split into four groups, each of which has a natural way to associate the word with a single letter. These groups are the NATO alphabet, amino acids, part of phrase with a letter in front (e.g. BONE → T-BONE), and companies that have a logo with a single letter.\\n<Table\\n\\theaders={[\\"NATO alphabet\\", \\"amino acid\\", \\"phrase\\", \\"company\\"]}\\n\\tcells={[[\\"DELTA = D\\", \\"GLYCINE = G\\", \\"SECTION = C\\", \\"AMAZON = A\\"],\\n    [\\"GOLF = G\\", \\"GLUTAMATE = E\\", \\"BONE = T\\", \\"MCDONALD’S = M\\"],\\n    [\\"SIERRA = S\\", \\"HISTIDINE = H\\", \\"COMBINATOR = Y\\", \\"SKYPE = S\\"],\\n    [\\"ZULU = Z\\", \\"TYROSINE = Y\\", \\"MOVE = Z\\", \\"YAHOO = Y\\"]]}\\n />\\n To answer the first question, the seven letters of <Answer index={0} /> only appear once in this list, while there are 3 Ys, 2 Ss, 2 Zs, and 2 Gs. To answer the second question, each pair of groups has exactly one letter in common. Taking these 4choose2 = 6 letters gives (in sorted order) GSYYYZ, which can be arranged into <Answer index={1} />."
    },
    "puz54": {
      "hash": "3d4ca9e5e2a8046a0135bf09aecd4fdd13a0ec5ca453241eee0af43b6ef90c9a",
      "content": "These are Strong’s Concordance Greek numbers: Each refers to a word that appears in the New Testament. Further, all the words in this puzzle appear exactly once in the New Testament. Taking the chapter numbers and doing A=1 gives the answer <Answer />.\\n\\n<Table\\n\\theaders={[\\"Number\\", \\"Verse\\", \\"Letter\\"]}\\n\\tcells={[\\n    [\\"940\\", \\"Galatians 3:1\\", \\"C\\"],\\n    [\\"771\\", \\"Romans 15:1\\", \\"O\\"],\\n    [\\"2950\\", \\"1 Corinthians 13:1\\", \\"M\\"],\\n    [\\"1225\\", \\"Luke 16:1\\", \\"P\\"],\\n    [\\"2139\\", \\"Hebrews 12:1\\", \\"L\\"],\\n    [\\"2696\\", \\"Revelation 5:1\\", \\"E\\"],\\n    [\\"4489\\", \\"Acts 24:1\\", \\"X\\"],\\n\\t]}\\n/>"
    },
    "puz55": {
      "hash": "c151219a3092339d08005e200a74cf6800998d2247ae01fa39f00800a9efd569",
      "content": "The narrator in the reversed audio says \\"Eleven letter word for when musicians do this.\\" <Answer /> [is a term for that](https://en.wikipedia.org/wiki/Backmasking) that is eleven letters.\\n\\n<Audio />"
    },
    "puz56": {
      "hash": "7ec467396442a1ae87b9c39ee27a846fdc068ee0fce4be35305ca2f21afd4463",
      "content": "In reading order, these are the country outlines of Cuba, Greenland, Bangladesh, Burundi, and South Africa. Note that some of them are rotated (relative to how they’d usually appear, with North pointing up): Greenland and South Africa are both rotated 90° clockwise. The outlines being on a flag suggest we look at the flags of these countries, and the rotation for Greenland and South Africa suggest rotating those flags the same way. If we do so, we notice that each flag looks like a letter:\\n\\n* The blue stripes on Cuba’s flag look like the letter E.\\n* The red on Greenland’s flag, sideways, forms a letter P.\\n* The red on Bangladesh’s flag is the letter O.\\n* The white on Burundi’s flag looks like an X.\\n* The green on South Africa’s flag, sideways, looks like the letter Y.\\n\\nThe flags together, with their appropriate orientations, look something like this:\\n\\n<Image />\\n\\nTogether, these spell the answer <Answer />.\\n\\nThe puzzle image was generated using [FlagWaver](https://krikienoid.github.io/flagwaver/)"
    },
    "puz58": {
      "hash": "0f2a8d24b7daa05220d6c238bf43c502659fac9e511cf8280dc2fd02a65d63be",
      "content": "As we solve the clues, we see that the answers are all two-word phrases that can be \\"chained\\" together, where the second word of one phrase is the first word of the next:\\n\\n<Table\\n  cells={[\\n    [\\"Nickname for Australia\\", \\"DOWN UNDER\\"],\\n    [\\"Being attacked\\", \\"UNDER FIRE\\"],\\n    [\\"Ladders or stairs out a building\\", \\"FIRE ESCAPE\\"],\\n    [\\"It might be above tilde\\", \\"ESCAPE KEY\\"],\\n    [\\"Florida island city\\", \\"KEY WEST\\"],\\n    [\\"US military academy\\", \\"WEST POINT\\"],\\n    [\\"Fired at close range\\", \\"POINT BLANK\\"],\\n    [\\"Lacuna\\", \\"BLANK SPACE\\"],\\n    [\\"Astronaut\\", \\"SPACE MAN\\"],\\n    [\\"An adult who acts immature\\", \\"MAN CHILD\\"],\\n    [\\"Domain of Eileithyia\\", \\"CHILD BIRTH\\"],\\n    [\\"Woman who an adopted child might try to find\\", \\"BIRTH MOTHER\\"],\\n    [\\"Nickname for Gaia\\", \\"MOTHER EARTH\\"],\\n  ]}\\n/>\\n\\nThe chain starts at DOWN and ends at EARTH. The 3-word answer to this puzzle, which describes the chain, is <Answer />."
    },
    "puz59": {
      "hash": "354fc2bb3f60be6aad79de3bd578482ebe8a8e36b43e3bac6b9b924b93405514",
      "content": "Fill in the blanks, leaving the numbers as is. The answers are FOREVER 21, LEFT 4 DEAD, ALL3MEDIA, and MAROON 5. Taking the first letter of each gives the answer <Answer />."
    },
    "puz6": {
      "hash": "1f6c877dbb8e243974e40027b6831c411028788a0750efe52a64d41ef1f80da6",
      "content": "The red cross represents cardinal directions (West/North/East/South), the green cross represents directions on a keyboard (WASD), and the blue cross represents directions expressed relatively (Up/Down/Left/Right). The black lines between the crosses represent matching pairs of letters.\\n\\nOne possible solve path is to use the given W to infer the identity of the red cross, use W and S to infer the identity of the green cross, then use D to infer the identity of the blue cross. Taking the numbered letters in order, we get the answer, <Answer />."
    },
    "puz60": {
      "hash": "5c4731b252fd2b6005b25fce7e10680fde38f82839e9084aef8c8a1c8bd970e9",
      "content": "The clues in the grid solve to bigrams:\\n\\n<Table\\n  tableClassName={\\"vertical-barred table-fixed-width\\"}\\n\\ttableStyle={{ width: \\"10em\\" }}\\n\\tcellStyle={{ textAlign: \\"center\\", padding: \\"0.5em\\" }}\\n  cells={[\\n    [\\"\\", \\"GI\\", \\"AI\\"],\\n    [\\"BR\\", \\"\\", \\"AR\\"],\\n    [\\"BM\\", \\"GM\\", \\"\\"],\\n  ]}\\n/>\\n\\nThe cells in each column share their first letter, and the cells in each row share their second letter. Following the pattern, we may fill out the diagonal with the bigrams BI, GR, and AM, spelling out the answer <Answer />."
    },
    "puz61": {
      "hash": "c20d6a21eed3ee76339883fb298de662fe50b81ae04eea44275c16969756b619",
      "content": "After completing the cryptic clues, we can put letters into the grayed-out squares so that the second and fourth column and row spell out valid words. The four added letters are <Answer />.\\n\\n<PuzzleGrid text=\\"GRIST|LOOPY|ADDUP|SEINE|SOCKS\\" optionsOverride={{\\"data-fill-classes\\":\\"white white gray\\",\\"data-fills\\":\\"11111|12121|11111|12121|11111\\"}}/>\\n\\nParses:\\n\\n- \`GRITS*\` (Meal = \\"grits\\" anagrammed)\\n- \`A+DDUP(−gin)<\` (A + \\"PUDDing\\" minus the letters of \\"gin\\", then reversed = total)\\n- \`S(−t)OCKS\` (Cold feet? Consider these = \\"STOCKS\\" minus \\"T\\"=time)\\n- \`G+LASS\` (good=\\"G\\" + LASS = cup)\\n- \`IODIC\` (Kind of acid = \\"I do\\" anagrammed + I + C)\\n- \`_TY PES_\` (nasTY PESt partially = enters into a screen)"
    },
    "puz62": {
      "hash": "05b93173194ed83d40055822b58867fc186d90b0ca5b37b3ed1c91371f8820ce",
      "content": "The grid referenced is the street grid on the North and West sides of Chicago. Even though these streets are not numbered, they represent a consistent address numbering on their cross street; [this is the grid as described by a real estate company](https://domu-live.s3.amazonaws.com/Chicago-Grid-System.pdf). For the north-south street in the image, all the streets are east-west, and vice versa. Dividing these values by 400 (half a mile), and corresponding A=1, B=2, ... gives a north-south street name:\\n<Table \\nheaders={[\\"Street name\\", \\"Address number\\", \\"Divided by 400\\", \\"\\"]}\\ncells={\\n[\\n\\t[\\"Division\\", 1200, 3, \\"C\\"],\\n\\t[\\"Kinzie\\", 400, 1, \\"A\\"],\\n\\t[\\"Foster\\", 5200, 13, \\"M\\"],\\n\\t[\\"Devon\\", 6400, 16, \\"P\\"],\\n\\t[\\"Chicago\\", 800, 2, \\"B\\"],\\n\\t[\\"Armitage\\", 2000, 5, \\"E\\"],\\n\\t[\\"Lawrence\\", 4800, 12, \\"L\\"],\\n\\t[\\"Lawrence\\", 4800, 12, \\"L\\"],\\n]\\n} />\\n\\nDoing the same with the north-south streets gives an east-west street name:\\n<Table \\nheaders={[\\"Street name\\", \\"Address number\\", \\"Divided by 400\\", \\"\\"]}\\ncells={\\n[\\n\\t[\\"California\\", 2800, 7, \\"G\\"],\\n\\t[\\"Damen\\", 2000, 5, \\"E\\"],\\n\\t[\\"Austin\\", 6000, 15, \\"O\\"],\\n\\t[\\"Harlem\\", 7200, 18, \\"R\\"],\\n\\t[\\"California\\", 2800, 7, \\"G\\"],\\n\\t[\\"Damen\\", 2000, 5, \\"E\\"],\\n]\\n} />\\nCampbell and George is a real intersection in Avondale, and the diagonal road here is <Answer />."
    },
    "puz63": {
      "hash": "23fadeeb9a242b2e7157ffd166c6aa8991c84d8b74ea1fc0e03c4cbd62e38114",
      "content": "This puzzle is about inputs to the the video game Factorio, expressed as [Harmonized System](https://www.wcoomd.org/en/topics/nomenclature/overview/what-is-the-harmonized-system.aspx) codes used for standardizing international customs transactions. The first line is an example demonstrating how the codes match to Factorio items:\\n\\n<Table\\n  cells={[\\n    [\\"Harmonized System code\\", \\"U.S. Census Bureau Foreign Trade Schedule B description\\", \\"Corresponding Factorio item\\"],\\n    [\\"740919\\", \\"Copper plates, sheets and strip, of a thickness exceeding 0.15 mm (0.006 in.): Of refined copper: Other\\", \\"Copper plate\\"],\\n    [\\"390210\\", \\"Polymers of propylene or of other olefins, in primary forms: Polypropylene\\", \\"Plastic bar\\"],\\n    [\\"721890\\", \\"Stainless steel in ingots or other primary forms; semifinished products of stainless steel: Other\\", \\"Steel plate\\"]\\n  ]}\\n/>\\n\\nThe three ingredients above are the ingredients of a _Low density structure_ in Factorio. The matches are not perfect because the products in Factorio are obviously fictional. For those well-versed in the specifics of customs classification of metallurgical intermediates, please forgive the rough matches.\\n\\nThe next few lines are three recipes in Factorio, and we can similarly match the codes to Factorio items:\\n\\n<Table\\n  cells={[\\n    [\\"Harmonized System code\\", \\"World Customs Organization description\\", \\"Corresponding Factorio item\\", \\"Recipe\\"],\\n    [\\"740811\\", \\"Copper wire: Of refined copper: Of which the maximum cross-sectional dimension exceeds 6 mm (0.23 in.)\\", \\"Copper cable\\", \\"A\\"],\\n    [\\"720832\\", \\"Flat-rolled products of iron or nonalloy steel, of a width of 600 mm (23.6 in.) or more, hot-rolled, not clad, plated or coated: Other, in coils, not further worked than hot-rolled\\", \\"Iron plate\\", \\"A\\"],\\n    [\\"270111\\", \\"Coal; briquettes, ovoids and similar solid fuels manufactured from coal: Coal, whether or not pulverized, but not agglomerated: Anthracite\\", \\"Coal\\", \\"B\\"],\\n    [\\"250310\\", \\"Sulfur of all kinds, other than sublimed sulfur, precipitated sulfur and colloidal sulfur\\", \\"Sulfur\\", \\"B\\"],\\n    [\\"220110\\", \\"Waters, including natural or artificial mineral waters and aerated waters, not containing added sugar or other sweetening matter nor flavored; ice and snow: Mineral waters and aerated waters\\", \\"Water\\", \\"B\\"],\\n    [\\"260111\\", \\"Iron ores and concentrates, including roasted iron pyrites: Iron ores and concentrates, other than roasted iron pyrites: Concentrates and non-agglomerated ores\\", \\"Iron ore\\", \\"C\\"]\\n  ]}\\n/>\\n\\nThe ingredients of A above make an _Electronic Circuit_, the ingredients of B make an _Explosives_, and the ingredients of C above make an _Iron Plate_. Together these three ingredients then make a <Answer />, the answer."
    },
    "puz64": {
      "hash": "b4c80f0d4f5994fab73cacd3e76991c890c44696761479007e75b1aeefae1075",
      "content": "These are [Greek numerals](https://en.wikipedia.org/wiki/Greek_numerals#Table). We can convert each number to its corresponding ancient Greek letter. Note that the ancient version of zeta looks different from the modern version.\\n\\n<Table\\n  cells={[\\n    [\\"100\\", \\"rho\\"],\\n    [\\"8\\", \\"eta\\"],\\n    [\\"70\\", \\"omicron\\"],\\n    [\\"5\\", \\"epsilon\\"],\\n    [\\"50\\", \\"nu\\"],\\n    [\\"7\\", \\"zeta\\"],\\n    [\\"600\\", \\"chi\\"],\\n  ]}\\n/>\\n\\n<Image />\\n\\nWe can then read the letters as similar-looking English letters (not necessarily the phonetic equivalents) to give the answer <Answer />."
    },
    "puz65": {
      "hash": "272bbaf5986d6b5b5e07a4d5d18b8befc975c1cca6120008dc8fb84f5e5dfc32",
      "content": "With the word \\"constant\\" in the title, we may determine that Euler–Mascheroni fits the third row. Incidentally, it is represented by the Greek letter gamma. Likewise, the other rows can be filled in with constants that are written with the Greek letters alpha, beta, and delta - FOIAS, LEVY, and GOMPERTZ. The length can help disambiguate the options, and the Wikipedia page [List of mathematical constants](https://en.wikipedia.org/wiki/List_of_mathematical_constants) is helpful. Extracting the letters at the given positions gives <Answer />, the answer."
    },
    "puz66": {
      "hash": "db483c1ea5b26de10fe581960a315c3ce89306814c86a8ede73d9c2d23136e76",
      "content": "Each of these lines of text can be Caesar shifted 10 letters backward (as in \\"rot-ten\\"). Then, each line is a synonym of ROTTEN, with a letter removed.\\n\\n<Table\\n  headers={[\\"Original line\\", \\"Shifted\\", \\"Missing Letter\\"]}\\n  cells={[\\n    [\\"NSCQECDSX\\", \\"DISGUSTIN\\", \\"G\\"],\\n    [\\"KXMSN\\", \\"ANCID\\", \\"R\\"],\\n    [\\"MBBEZD\\", \\"CRRUPT\\", \\"O\\"],\\n    [\\"ZYSVON\\", \\"POILED\\", \\"S\\"],\\n    [\\"NSRYXYBKLVO\\", \\"DIHONORABLE\\", \\"S\\"],\\n  ]}\\n/>\\n\\nTaking the missing letters spells out the answer to this puzzle, <Answer />."
    },
    "puz67": {
      "hash": "88a1b4f82922716ea6fc6d8865b2f00d3ec869861d18f24207e7f497a927166a",
      "content": "Each of these clues has its own answer contained within it. We can use the given number as an index into the answers.\\n\\n<Table\\n  headers={[\\"Clue\\", \\"Answer\\", \\"Letter\\"]}\\n  cells={[\\n    [<>Flus<b>h and s</b>traight flush, e.g. (2)</>, \\"HANDS\\", \\"A\\"],\\n    [<>Nine <b>of ten</b> times, perhaps (5)</>, \\"OFTEN\\", \\"N\\"],\\n    [<>Main <b>protagonist</b> of a Neal Stephenson novel (10)</>, \\"PROTAGONIST\\", \\"S\\"],\\n    [<>Fu<b>se w</b>ool and silk, perhaps (3)</>, \\"SEW\\", \\"W\\"],\\n    [<>Teleph<b>one</b> key that doesn’t map to any letters (3)</>, \\"ONE\\", \\"E\\"],\\n    [<>Ren<b>t, or n</b>ot sure (3)</>, \\"TORN\\", \\"R\\"],\\n  ]}\\n/>\\n\\nThe answer to this puzzle is <Answer />."
    },
    "puz68": {
      "hash": "a25bd282293d7840bbe580e8b8ca93c6bcb36b8e0878fccc429010754085a7a9",
      "content": "As clued by the title, the solutions to all the clues share the substring \\"ESP\\", a word related to mediums. Use the shifts to extract letters from the answers, treating \\"ESP\\" as a single letter.\\n\\n<Table\\n\\theaders={[\\"Answer\\", \\"Shift\\", \\"Letter\\"]}\\n  cells={[\\n    [\\"DESPAIR\\", \\"←1\\", \\"D\\"],\\n\\t\\t[\\"DESPACITO\\", \\"→5\\", \\"O\\"],\\n\\t\\t[\\"ESPOUSE\\", \\"→2\\", \\"U\\"],\\n\\t\\t[\\"RESPONSIBLE\\", \\"→5\\", \\"B\\"],\\n\\t\\t[\\"LIFESPAN\\", \\"←3\\", \\"L\\"],\\n\\t\\t[\\"ESPERANTO\\", \\"0\\", \\"ESP\\"],\\n\\t\\t[\\"SHAKESPEARE\\", \\"→4\\", \\"E\\"],\\n\\t\\t[\\"THESPIAN\\", \\"→2\\", \\"A\\"],\\n\\t\\t[\\"BESPOKE\\", \\"→2\\", \\"K\\"],\\n  ]}\\n/>\\n\\nThe letters spell the answer, <Answer />."
    },
    "puz69": {
      "hash": "8affa286b612600d07f1d25713b12568efc4a609ca71e7b0fb36120f69547928",
      "content": "This puzzle is about Minecraft. Solvers may use resources like the [Minecraft Wiki](https://minecraft.wiki/) or Let’s Plays to learn about the relevant mechanics. Skyblock playthroughs are particularly relevant for this puzzle as the puzzle similarly involves making the most out of limited resources.\\n\\nThe image depicts a Minecraft villager trading interface with seven possible trades. As clued by the flavortext, the goal of the puzzle is to go to the Nether (the Minecraft version of hell) while making as few trades as possible. The image shows that we only have a golden pickaxe and a crafting table in our inventory. We also deduce from the image and the flavortext that there are no other spawns or resources in the world, besides the lone villager and ample space.\\n\\nLabel the trades A through G. For simplicity, assume that we always empty all lava and water into the world immediately, and only pick them back up with buckets when needed for trades.\\n\\n<Table\\n  cells={[\\n    [\\"A\\", \\"3 buckets\\", \\"Water bucket\\"],\\n    [\\"B\\", \\"127 cobblestone\\", \\"2 buckets\\"],\\n    [\\"C\\", \\"Golden pickaxe\\", \\"9 wool\\"],\\n    [\\"D\\", \\"Lava bucket\\", \\"1 stick\\"],\\n    [\\"E\\", \\"3 stone\\", \\"1 gold ore\\"],\\n    [\\"F\\", \\"Water bucket\\", \\"1 cobblestone\\"],\\n    [\\"G\\", \\"1 wool\\", \\"Lava bucket\\"],\\n  ]}\\n/>\\n\\n<Table\\n\\theaders={[\\"Action\\", \\"Inventory\\", \\"World\\"]}\\n  cells={[\\n    [\\"\\", \\"Golden pickaxe\\", \\"\\"],\\n    [<>Trade <b>1× C</b>, <b>9× G</b>, <b>2× A</b>. Make an infinite water source and cast a large amount of cobblestone into the world.</>, \\"5 buckets\\", \\"9 lava, ∞ water, ∞ cobblestone\\"],\\n    [<>Trade <b>2× D</b>, <b>3× F</b>. Craft a stone pickaxe. Mine 130 cobblestone.</>, \\"Stone pickaxe (1/131 uses left), 130 cobblestone\\", \\"7 lava, ∞ water, ∞ cobblestone\\"],\\n    [<>Trade <b>1× B</b>, <b>2× D</b>. Craft a stone pickaxe. Mine 130 cobblestone.</>, \\"2 stone pickaxes (each 1/131 uses left), 130 cobblestone\\", \\"5 lava, ∞ water, ∞ cobblestone\\"],\\n    [<>Combine the stone pickaxes. Mine 7 cobblestone.</>, \\"Stone pickaxe (1/131 uses left), 137 cobblestone\\", \\"5 lava, ∞ water, ∞ cobblestone\\"],\\n    [<>Trade <b>1× B</b>, <b>2× D</b>. Craft a stone pickaxe. Mine 130 cobblestone.</>, \\"2 stone pickaxes (each 1/131 uses left), 137 cobblestone\\", \\"3 lava, ∞ water, ∞ cobblestone\\"],\\n    [<>Combine the stone pickaxes. Mine 7 cobblestone.</>, \\"Stone pickaxe (1/131 uses left), 144 cobblestone\\", \\"3 lava, ∞ water, ∞ cobblestone\\"],\\n    [<>Trade <b>1× B</b></>, \\"Stone pickaxe (1/131 uses left), 17 cobblestone, 2 buckets\\", \\"3 lava, ∞ water, ∞ cobblestone\\"],\\n    [<>Craft a furnace. Use a lava bucket to smelt 9 stone.</>, \\"Stone pickaxe (1/131 uses left), 9 stone, 2 buckets\\", \\"2 lava, furnace (91/100 uses left), ∞ water, ∞ cobblestone\\"],\\n    [<>Trade <b>2× D</b>, <b>3× E</b>. Smelt 3 gold. Craft a golden pickaxe.</>, \\"Stone pickaxe (1/131 uses left), golden pickaxe\\", \\"Furnace (88/100 uses left), ∞ water, ∞ cobblestone\\"],\\n    [<>Trade <b>1× C</b>, <b>9× G</b>, <b>2× D</b>, <b>2× F</b>. Mine 1 cobblestone. Craft a stone pickaxe.</>, \\"Stone pickaxe, 5 buckets\\", \\"7 lava, furnace (88/100 uses left), ∞ water, ∞ cobblestone\\"],\\n    [<>Mine 9 cobblestone. Smelt 9 stone. Discard the stone pickaxe.</>, \\"Stone pickaxe (123/131 uses left), 5 buckets, 9 stone\\", \\"7 lava, furnace (79/100 uses left), ∞ water, ∞ cobblestone\\"],\\n    [<>Trade <b>3× E</b>, <b>2× D</b>. Smelt 3 gold. Craft a golden pickaxe.</>, \\"Golden pickaxe, 3 buckets\\", \\"5 lava, furnace (76/100 uses left), ∞ water, ∞ cobblestone\\"],\\n    [<>Trade <b>1× C</b>. Light a wool on fire.</>, \\"3 buckets, 8 wool\\", \\"5 lava, furnace (76/100 uses left), ∞ water, ∞ cobblestone, 1 wool on fire\\"],\\n    [<>Trade <b>5× G</b>. Build a nether portal.</>, \\"8 buckets, 3 wool\\", \\"Furnace (76/100 uses left), ∞ water, ∞ cobblestone, 1 wool on fire, nether portal\\"],\\n  ]}\\n/>\\n\\nTo go to the Nether, we need to build a nether portal out of a minimum of 10 obsidian blocks. These obsidian blocks may be casted in place by pouring water over lava, obviating the need for a diamond pickaxe. The only way for us to get lava is by trading wool for lava buckets, and the only way for us to get wool is by trading golden pickaxes for wool. However, trading in our golden pickaxe directly only nets us 9 lava.\\n\\nTo get more lava, we need to produce more golden pickaxes, which we can only get by crafting from gold smelted from ore received from the villager in exchange for stone blocks, which means that we need cobblestone to build a furnace to smelt more cobblestone in. In total, we would need 8 cobblestone to build a furnace and 9 more cobblestone to smelt and trade for 3 gold ore in order to craft a single golden pickaxe. It is not possible to acquire this much cobblestone from trades alone.\\n\\nInstead, we must rely mainly on pouring lava on water to cast cobblestone. We can’t actually acquire such cobblestone into our inventory, however, unless we mine it with a pickaxe. Besides golden pickaxes, the only other kinds of pickaxes we can obtain are stone pickaxes, which we can craft from sticks and cobblestone.\\n\\nSince all we can do to start is trade in our golden pickaxe, we must rely on trades to bootstrap our first cobblestone. Already, this presents a problem. In order to craft a stone pickaxe, we need 3 cobblestone. However, the 9 wool we start with can only be traded for 9 buckets of lava. If we empty all the buckets and use the 1st and 6th trades to acquire 3 cobblestone, we won’t have any buckets left to pick up lava with, and then we can’t get the sticks we need to craft the pickaxe.\\n\\nTo get around this, we instead only use the first trade twice to get 2 buckets of water, then empty them onto the ground on diagonally adjacent squares. This creates an infinite water source, which allows us to pick up as much water as we want. Note that lava does not also behave this way in Minecraft, meaning that our lava will always be limited by what we can get from trades. Using our five remaining buckets, we may now pick up 2 lava and 3 water to trade in for the materials needed to craft our first stone pickaxe.\\n\\nWith our stone pickaxe, we may now acquire plenty of cobblestone. However, we still cannot smelt cobblestone into stone, because we lack a fuel source. Lava buckets may be used as a fuel source, but we lack buckets to pick up lava with. The only way we can acquire more buckets is by trading in 127 cobblestone.\\n\\nUnfortunately, stone pickaxes have a limited durability, and can only mine up to 131 blocks before breaking. Note that this durability value is different between the Java and Bedrock editions. If we use up the entire durability of the stone pickaxe to mine cobblestone and trade in 127 cobblestone for 2 buckets, we would only have 4 cobblestone left over, which is not enough to build a furnace with.\\n\\nInstead, we fill the two new buckets with lava and trade them in for sticks to build a new stone pickaxe. This puts us back to having a stone pickaxe and lava, but no buckets to make a fuel source with. The only difference is that we now have a bit more cobblestone and a little less lava. The solution, then, is to repeat the entire cycle of mining cobblestone, trading for sticks and crafting stone pickaxes to effectively convert lava into cobblestone until we have enough to build the furnace and smelt stone.\\n\\nIf we just do as above, however, we would find that we don’t have enough lava to get the cobblestone we need. There is just one last game mechanic we must use, and that is tool repair. Combining two used stone pickaxes produces a new stone pickaxe with up to 6 additional points of durability, on top of the sum of the durability of the two original pickaxes. This lets us accumulate enough cobblestone to get our first new golden pickaxe after just two additional cycles of mining and crafting.\\n\\nUp to this point, our options have been very limited, and our actions were essentially forced. In fact, we now find ourselves with just a golden pickaxe, a stone pickaxe with a single point of durability, and no mined cobblestone or placed lava to spare. That means, once again, that we need to craft a second golden pickaxe to get our 10th lava.\\n\\nFortunately, crafting the second golden pickaxe is much easier than the first, as trading in our current golden pickaxe leaves us with a wealth of buckets. We just need to do so with as few trades as possible. As we no longer need to scrimp on pickaxe durability, we spend the last point of durability on our stone pickaxe on one cobblestone, reducing the number of trades needed to craft a new stone pickaxe. This lets us mine the 9 cobblestone needed to get the gold for the second golden pickaxe.\\n\\nFinally, we construct the nether portal. In order to light the nether portal, we use lava to light one of our remaining wool on fire. If this wool is next to the nether portal when it’s complete, the fire would light the portal. In one last act of parsimony, rather than trade for an extra lava, we instead use our last lava to light the wool just before casting the lava into obsidian for the portal. With that, the portal activates, and we may finally escape to hell.\\n\\n<Table\\n  cells={[\\n    [\\"Trade\\", \\"Number of uses\\", \\"Shift\\", \\"Letter\\"],\\n    [\\"A\\", \\"2\\", \\"+14\\", \\"P\\"],\\n    [\\"B\\", \\"3\\", \\"+15\\", \\"R\\"],\\n    [\\"C\\", \\"3\\", \\"+12\\", \\"O\\"],\\n    [\\"D\\", \\"12\\", \\"+16\\", \\"B\\"],\\n    [\\"E\\", \\"6\\", \\"+6\\", \\"L\\"],\\n    [\\"F\\", \\"5\\", \\"0\\", \\"E\\"],\\n    [\\"G\\", \\"23\\", \\"+16\\", \\"M\\"],\\n  ]}\\n/>\\n\\nApplying the provided shifts to the number of times each trade was used, and using A=1, B=2, ..., Z=26, gives the answer, <Answer />."
    },
    "puz7": {
      "hash": "459efdbb7c5a9b5f9ff35d360407f388fc001ab78af316330aae13b9bc352dd4",
      "content": "The letters that appear exactly once in the title are in order L, O, C, and K, which spells out the answer <Answer />."
    },
    "puz70": {
      "hash": "550a07928d9f684ef51770a783add6e5995d7d65f4cbd1d9dc9754bad9956bf2",
      "content": "One way to fill out the ?’s in the title is BLANKS ALTERNATIVE SPACE SHOWN GETTING REASONING, with the letters ANSWER. This is not the answer. Instead, the title suggests finding an alternative letter that can go in the blanks. They can be filled to form the alternative words BLINKS ALTERCATIVE APACE SHORN GUTTING SEASONING, giving the letters <Answer />, the answer."
    },
    "puz71": {
      "hash": "a02c7f6b8d0a509e29809d904350f6e623e6a236b0c039e2c846762228391094",
      "content": "This is a map of Dallas. The orange marker is at the <Answer /> [interchange](https://en.wikipedia.org/wiki/High_Five_Interchange) (where US 75 meets I-635)."
    },
    "puz72": {
      "hash": "e9e2c6cafc1fb44cb3480ab6a75f24795cc38fbeca3ac993a9f3e5405cf6879a",
      "content": "These numbers are drawn using different brush types in MS Paint. Using the numbers to index into the brush types we get <Answer />, the answer.\\n\\n<Table\\n  headers={[\\"Brush\\", \\"Number\\", \\"Letter\\"]}\\n  cells={[\\n    [\\"Calligraphy brush\\", \\"6\\", \\"G\\"],\\n    [\\"Calligraphy pen\\", \\"8\\", \\"A\\"],\\n    [\\"Natural pencil\\", \\"7\\", \\"L\\"],\\n    [\\"Oil brush\\", \\"3\\", \\"L\\"],\\n    [\\"Watercolor brush\\", \\"4\\", \\"E\\"],\\n    [\\"Crayon\\", \\"2\\", \\"R\\"],\\n    [\\"Airbrush\\", \\"2\\", \\"I\\"],\\n    [\\"Marker\\", \\"5\\", \\"E\\"],\\n    [\\"Brush\\", \\"4\\", \\"S\\"],\\n  ]}\\n/>"
    },
    "puz73": {
      "hash": "2438961f3de5627765c4ffad1feac063953adf2abffea8056835dd5e1e023f0f",
      "content": "Each clue is for a word or phrase containing DIAMOND, which has been removed from the blanks.\\n\\n<Table\\n  headers={[\\"Clue\\", \\"Answer\\", \\"Letter\\"]}\\n  cells={[\\n    [\\"Hawaiian volcanic formation\\", \\"DIAMOND HEAD\\", \\"A\\"],\\n    [\\"Creator of America?\\", \\"NEIL DIAMOND\\", \\"N\\"],\\n    [\\"David Bowie album\\", \\"DIAMOND DOGS\\", \\"S\\"],\\n    [\\"MLB team\\", \\"DIAMONDBACKS\\", \\"C\\"],\\n    [\\"One who’s more than they seem\\", \\"DIAMOND IN THE ROUGH\\", \\"O\\"],\\n    [\\"Its sale is said to fund unscrupulous causes\\", \\"BLOOD DIAMOND\\", \\"O\\"],\\n    [\\"A star is said to be like this\\", \\"DIAMOND IN THE SKY\\", \\"S\\"],\\n  ]}\\n/>\\n\\nThe letters spell out ANS COOS, and the answer is <Answer />."
    },
    "puz74": {
      "hash": "cad5654ce6c30504f62ed2f7cbfd88a9a8934c9e1f8a9215a1f04c07befbe7b1",
      "content": "The feeder answers to this puzzle were, in order, ANSWER, DOUBLESPEAK, COOS. The answer is obtained by speaking the word COOS twice to make the word COUSCOUS."
    },
    "puz75": {
      "hash": "9d5a6d5c333ba7e661ab94e7bd52a74174df6292563cb3640404e0000b483039",
      "content": "As the puzzle suggests, and as clued by the 16×9 dimensions of the grid, we put it in a 12×12 grid (a square) and see the following:\\n\\n<PuzzleGrid\\n\\ttext=\\"12x12\\"\\n\\toptionsOverride={{\\n\\t\\t\\"data-fill-classes\\":\\"white black\\",\\n\\t\\t\\"data-fills\\": \`\\n............\\n..1.........\\n.1...1..1...\\n..1.1..1.1..\\n.1...1..11..\\n............\\n.1..........\\n.1..1....1..\\n.1.1.1..11..\\n.1.11..1.1..\\n.1..11..11..\\n............\\n\\t\\t\`.trim().split(\\"\\\\n\\").join(\\"|\\"),\\n\\t}}\\n/>\\n\\nFrom here we read the answer, <Answer />."
    },
    "puz76": {
      "hash": "766338baadfcf99d87e29df84095bbffe9dc743e1dbb6820f0658a683ea7b384",
      "content": "Write the square numbers in each column: ONE, FOUR, NINE, SIXTEEN, TWENTYFIVE, THIRTYSIX.\\n\\n<PuzzleGrid\\n\\ttext={\`\\n@@@S@T\\n@F@ITH\\n@O@XWI\\n@UNTER\\nORIENT\\nN@NETY\\nE@ENYS\\n@@@@FI\\n@@@@IX\\n@@@@V@\\n@@@@E@\\n\\t\\t\`.trim().split(\\"\\\\n\\").join(\\"|\\")\\n  }\\n\\toptionsOverride={{\\n\\t\\t\\"data-fill-classes\\":\\"white black\\",\\n\\t}}\\n/>\\n\\nRead across the fully-blank row to get <Answer />."
    },
    "puz77": {
      "hash": "104dffb1f2f5ecbf73944b7ec2795c5ea877ca1c498ae7e4bc6628eab7c3ae38",
      "content": "These are all translations of Spanish palindromes. The title is \\"Sé verlas al revés\\", but its English name slightly suggests palindromes. The rest are:\\n\\n<Table\\n  headers={[\\"English translation\\", \\"Spanish palindrome\\", \\"Middle letter\\"]}\\n  cells={[\\n  \\t[\\"I am\\", \\"Yo soy\\", \\"S\\"],\\n  \\t[\\"Were there owls here?\\", \\"¿Acaso hubo búhos acá?\\", \\"O\\"],\\n  \\t[\\"Rice to the fox\\", \\"Arroz a la zorra\\", \\"L\\"],\\n  \\t[\\"Are they robberies or bribes?\\", \\"¿Son robos o sobornos?\\", \\"O\\"],\\n  \\t[\\"Laminate that animal\\", \\"Lamina ese animal\\", \\"S\\"]\\n  ]}\\n/>\\n\\nTaking the unique center letter of each palindrome gives us <Answer />, which is a palindrome in both English and Spanish."
    },
    "puz78": {
      "hash": "7b15a21627b648107d29a1c4b864204d3f2e9918413932adb7bef3d76b359d1c",
      "content": "The blanks can be filled, dropquote style, to be the NATO alphabet words in order, but missing 5 of them (Golf, Lima, Oscar, Romeo, and Yankee).\\n\\n<PuzzleGrid\\n\\ttableClassName=\\"puzzle-grid-small\\"\\n\\ttext={\`\\nALFA@BRAVO@CHARLIE@D\\nELTA@ECHO@FOXTROT@HO\\nTEL@INDIA@JULIETT@KI\\nLO@MIKE@NOVEMBER@PAP\\nA@QUEBEC@SIERRA@TANG\\nO@UNIFORM@VICTOR@WHI\\nSKEY@X-RAY@ZULU@@@@@\\n\\t\`.trim().split(\\"\\\\n\\").join(\\"|\\")}\\n\\toptionsOverride={{\\n\\t\\t\\"data-fill-classes\\":\\"white black\\",\\n\\t}}\\n/>\\n\\nIn order, these spell the answer <Answer />. While the L is ambiguous between Kilo, Lima, Mike, this can be inferred from the rest."
    },
    "puz79": {
      "hash": "2a680d56fa3038f169046bc5c1980467985d5e5bb486bb40b026bd5450e67db7",
      "content": "Identify the breads:\\n\\n<Table\\n  cells={[\\n    [\\"arepa\\", \\"pancake\\", \\"focaccia\\", \\"mantou\\"],\\n    [\\"dosa\\", \\"baguette\\", \\"tortilla\\", \\"pumpernickel\\"],\\n    [\\"naan\\", \\"crepe\\", \\"bagel\\", \\"challah (zopf also works)\\"],\\n    [\\"injera\\", \\"brioche\\", \\"sangak\\", \\"pretzel\\"],\\n  ]}\\n/>\\n\\nIf we highlight the breads which are \\\\<6 letters long, ends with E, flat, and European, we draw the letters <Answer />.\\n<PuzzleGrid\\n\\ttableClassName=\\"puzzle-grid\\"\\n\\ttext={\`\\n......................\\n......................\\n......................\\n......................\\n\\t\`.trim().split(\\"\\\\n\\").join(\\"|\\")}\\n\\toptionsOverride={{\\n\\t\\t\\"data-fill-classes\\":\\"transparent white orange\\",\\n    \\"data-fills\\": \`\\n2111..1211..2221..1121\\n2111..1211..2121..1212\\n2221..1211..2211..1222\\n1111..1211..2121..1212\\n    \`.trim().split(\\"\\\\n\\").join(\\"|\\"),\\n\\t}}\\n/>"
    },
    "puz8": {
      "hash": "5d4bf4d9f88050921494073cea7184d9cee4e340dfd80665ef7c695b5e89856e",
      "content": "The text can be decoded to the following:\\n\\n> In the American game show Wheel of Fortune, every episode ends with a bonus round where the contestant is given all copies of R, S, T, L, N, and E. What if we took those letters away instead?\\n> \\n> I’m thinking of a word. The first part of the word is part of an Office. The second part of the word is a yearly fast. The answer to this puzzle is: XXCXXXXXX.\\n\\n\\nThe answers to the first and second parts are EXCEL and LENT, and the final answer is <Answer />."
    },
    "puz80": {
      "hash": "6aee51d0b0273e5c48be1c145078b4acbfbafaf20289e64bd36dd2e0bf4cac32",
      "content": "Each of these numbers can be written as a small fraction. For instance, 1.875 is 15/8, and 8.33333 is 25/3. As clued by the title, these are all Greek holidays, written in the day/month notation which is standard in Greece. These are:\\n\\n- 15/8: Dormition of the Mother of God\\n- 28/10: Ohi Day\\n- 26/12: Glorifying Mother of God\\n- 17/11: Polytechnio\\n- 25/3: Independence Day\\n- 1/5: Labour Day\\n- 6/1: Epiphany\\n\\nThe first letters of the English holiday names spells the answer, <Answer />."
    },
    "puz81": {
      "hash": "9f07e64673e39b9e3e7faa7f1e85a5d42c0ff55ed36c6ead69d2cde3a9b80520",
      "content": "The picture suggests some sort of rearranging or anagramming. Indeed, the title anagrams to \\"the wordsmith\\". If we look up \\"wordsmith anagram\\" in a search engine, we are led to [this page](https://wordsmith.org/anagram/index.html), the Internet Anagram Server. On the top of this page, we see an animation of the name being anagrammed to I, Rearrangement Servant. This corresponds to the picture in the puzzle: \\n\\n<Image fullWidth={true} />\\n\\nNow we use the red arrows. The larger red arrow is inside a quadrilateral, whose sides correspond to the letters EAST, in that order; similarly the smaller red arrow corresponds to the letters ERN. This spells the answer, <Answer />."
    },
    "puz82": {
      "hash": "8b7b7a32e2f35cebb167cbfd7d20984307d509a01352825cd2740ca96d509476",
      "content": "We pronounce each Chinese character aloud, which we can do with tools like [Google Translate](https://translate.google.com/?sl=zh-TW&tl=en&text=%E8%A5%BF%E6%AC%A7%E7%AC%AC%E4%B8%80&op=translate), if we click the \\"Listen\\" button. Each character sounds like an English letter, spelling the answer, <Answer />."
    },
    "puz83": {
      "hash": "7ed693d46bc005327090c4d1fb3bd45987fa8b22d267b0b106f9b8313fccb83b",
      "content": "The title suggests NFL origami, which can be googled together to find scorigami, a site cataloguing all uniquely attained American football scorelines in NFL history. Specifically, this arrangement of achieved scores can be found towards the top right of the chart, and the indicated games are the 62–0 and 64–0 scorelines. A single game has been recorded for each scoreline, specifically Akron Pros - Oorang Indians, and Philadelphia Eagles - Cincinnati Reds. The first letters of the team names spell out <Answer />, the answer."
    },
    "puz84": {
      "hash": "8d7a1b86fa8b555f6563d39d30272c7489abe96e2af512d5b1de79b0f09704fe",
      "content": "These colors are all defaults in the Colors panel of MS Paint.\\n\\n<Image />\\n\\nTreating each row as a sequence of dots to connect up, we can draw out the answer, <Answer />."
    },
    "puz85": {
      "hash": "38859f09cba20f19308c367bcbbd465ea0882bb648fa34749299dc9c35de3ef0",
      "content": "If you turn the analog clock into a digital clock, it would say 5:01, which looks like SOI. If you turn the digital clock into an analog clock, the hands would make an L. The answer is thus <Answer />."
    },
    "puz86": {
      "hash": "d2663b22e0eb05a9170ba7120aa7acefd1fe1d2315967679a0d21ad38b568ae7",
      "content": "This is the logo of Python, depicting two pythons. If we imagine a 4x4 grid superimposed on the logo, each python takes up six squares, so we can imagine the word PYTHON written on each python starting at the head and snaking as indicated. Doing so leads the circled letters to spell out <Answer />, the answer.\\n\\n<PuzzleGrid\\n\\ttext={\`\\n.PY.\\nOHTN\\nNTHO\\n.YP.\\n\\t\`.trim().split(\\"\\\\n\\").join(\\"|\\")}\\n\\toptionsOverride={{\\n\\t\\t\\"data-fill-classes\\":\\"transparent blue yellow\\",\\n\\t\\t\\"data-fills\\": \\"0110|1112|1222|0220\\",\\n\\t}}\\n/>"
    },
    "puz87": {
      "hash": "78d38b0f9fe01e928303d750e1d7177724451dcd22548cd71338bb478ee8cea8",
      "content": "The letters read <Answer />, distorted. The letters start from the top left, spiral clockwise into the center, and spiral counterclockwise back out to the bottom right."
    },
    "puz89": {
      "hash": "cb45abae1aa8bf4e4ee426450e266fc462ee5548db8727fa8ac2fb5fa95350da",
      "content": "The title suggests adding letters by their A1Z26 values. Promisingly, D+G=K and then G+K=R. Going backwards, C+D=G, A+C=D, and B+A=C. The letters that are needed to complete the Fibonacci-like sequence spell out <Answer />, the answer."
    },
    "puz9": {
      "hash": "37135b8d8f7a629034c387e87dc6f23150d8b116541989495fc0d99801cb88d5",
      "content": "The numbers in the Lost television show are 4, 8, 15, 16, 23, and 42. The title has 42 letters, so you take the 4th, 8th, 15th, 16th, 23rd, and 42nd letters to get the answer, <Answer />."
    },
    "puz90": {
      "hash": "96cae0cbd8656752e0e46e398ef8eedeec1394e6cf0adff0a020b89bd1a57662",
      "content": "The squares can be filled with the chorus of Taylor Swift’s Blank Space, starting “so it’s gonna be forever...”.\\n\\n<PuzzleGrid\\n\\ttableClassName=\\"puzzle-grid-very-small\\"\\n\\toptionsOverride={{\\n\\t\\t\\"data-fill-classes\\":\\"white black\\",\\n\\t}}\\n\\ttext={\`\\nSO@ITS@GONNA@BE@FOREVER@@@@@@@@@@@\\nOR@ITS@GONNA@GO@DOWN@IN@FLAMES@@@@\\nYOU@CAN@TELL@ME@WHEN@ITS@OVER@@@@@\\nIF@THE@@@@@@WAS@WORTH@THE@PAIN@@@@\\nGOT@A@LONG@LIST@OF@EXLOVERS@@@@@@@\\nTHEYLL@TELL@YOU@IM@INSANE@@@@@@@@@\\nCAUSE@YOU@KNOW@I@LOVE@THE@PLAYERS@\\nAND@YOU@LOVE@THE@GAME@@@@@@@@@@@@@\\nCAUSE@WERE@YOUNG@AND@WERE@RECKLESS\\nWELL@TAKE@THIS@@@@@TOO@FAR@@@@@@@@\\nITLL@LEAVE@YOU@BREATHLESS@@@@@@@@@\\nOR@WITH@A@NASTY@SCAR@@@@@@@@@@@@@@\\nGOT@A@LONG@LIST@OF@EXLOVERS@@@@@@@\\nTHEYLL@TELL@YOU@IM@INSANE@@@@@@@@@\\nBUT@IVE@GOT@A@BLANK@SPACE@BABY@@@@\\nAND@ILL@WRITE@YOUR@NAME@@@@@@@@@@@\\n\\t\\t\`.trim().split(\\"\\\\n\\").join(\\"|\\")}\\n/>\\n\\nThe missing words are HIGH and WAY, giving us the answer <Answer />."
    },
    "puz91": {
      "hash": "08f061e4e383ebe0a8efa3562d748b1b95643f9c337942ccb8467a135b633473",
      "content": "The puzzle contains CSS declarations for five divs. The flavortext suggests checking if each declaration is compatible with Chrome 123 and Firefox 124 respectively. Solvers may use resources like [MDN Web Docs](https://developer.mozilla.org/en-US/) or [Can I Use](https://caniuse.com/) to recover this information.\\n\\n<Table\\nheaders={[\\"Declaration\\", \\"Compatible with Chrome 123?\\", \\"Compatible with Firefox 124?\\"]}\\ncells={[\\n  [<code>page-break-after: always;</code>, \\"Yes\\", \\"Yes\\"],\\n  [<code>text-indent: hanging 1em;</code>, \\"No\\", \\"Yes\\"],\\n  [<code>hanging-punctuation: first;</code>, \\"No\\", \\"No\\"],\\n  [<code>display: contents;</code>, \\"Yes\\", \\"Yes\\"],\\n  [<code>text-decoration-skip-ink: all;</code>, \\"No\\", \\"Yes\\"],\\n  [<code>position: relative;</code>, \\"Yes\\", \\"Yes\\"],\\n  [<code>text-wrap-style: balance;</code>, \\"No\\", \\"Yes\\"],\\n  [<code>background-color: rgb(from blue 100 100 100);</code>, \\"Yes\\", \\"No\\"],\\n  [<code>background-image: paint(x);</code>, \\"Yes\\", \\"No\\"],\\n  [<code>widows: 2;</code>, \\"Yes\\", \\"No\\"],\\n  [<code>font-size-adjust: 0.6;</code>, \\"No\\", \\"Yes\\"],\\n  [<code>view-transition-name: x;</code>, \\"Yes\\", \\"No\\"],\\n  [<code>background-clip: text;</code>, \\"Yes\\", \\"Yes\\"],\\n  [<code>text-justify: inter-character;</code>, \\"No\\", \\"Yes\\"],\\n  [<code>zoom: 0.5;</code>, \\"Yes\\", \\"No\\"],\\n]}\\n/>\\n\\nAs suggested by the mention of \\"accessibility\\" in the flavortext, we now treat the 3 by 2 support matrix for each div as braille to extract the answer <Answer />."
    },
    "puz92": {
      "hash": "b5a35ef988518ce5b8f1d9f0ccc42c73c7428fd58955141ea6e15d31ad2ca5d8",
      "content": "The image is reminiscent of the icon for brush size in the Windows 11 version of MS Paint. We can either replicate the drawing to find out the pixel sizes, or we can measure the pixel sizes manually. Doing so yields 3, 8, 5, 1, and 16 pixels, which can be converted A1Z26 to <Answer />, the answer."
    },
    "puz93": {
      "hash": "842ecf5d260f572c438585abe3f0b067a25cede6c5be97bf944e3e7744759987",
      "content": "The flavortext suggests that the word “someone” is important. Indeed, the word “someone” appears somewhere in each clue’s bolded section. The flavortext further draws our attention to the profession of each “someone”. Indeed, each “someone” may be associated with the profession formed by appending “man” to the answer to its clue.\\n\\n<Table\\nheaders={[\\"Answer to clue\\", \\"Profession of “someone”\\", \\"Index of “someone”\\", \\"Letter\\"]}\\ncells={[\\n  [\\"HIT\\", \\"HITMAN\\", \\"3\\", \\"T\\"],\\n  [\\"FIRE\\", \\"FIREMAN\\", \\"3\\", \\"R\\"],\\n  [\\"WEATHER\\", \\"WEATHERMAN\\", \\"3\\", \\"A\\"],\\n  [\\"CHAIR\\", \\"CHAIRMAN\\", \\"4\\", \\"I\\"],\\n  [\\"MAIL\\", \\"MAILMAN\\", \\"4\\", \\"L\\"],\\n]}\\n/>\\n\\nThe length of each clue’s answer matches the number of words in its bolded portion. Indexing into each answer by the position of “someone” in its clue’s bolded portion, we recover the answer <Answer />."
    },
    "puz94": {
      "hash": "ba8572cc139b3f379404b15fafac74704790aba80a56a4f6eb0172a5492aef0b",
      "content": "The file contains a cryptogram of HTML code. We may infer this either by recognizing the general shape of the data, or by passing it through a cryptogram solver like [quipqiup](https://quipqiup.com/). The output from quipqiup may look garbled, but is enough to make out HTML-related words like “width”, “height”, “align” and “alternate”.\\n\\nThe cryptogram substitutes letters and digits for letters, and other symbols for digits. The substitution table used is as follows, with the original characters on top and the substituted characters below:\\n\\n\`\`\`\\nabcdefghiklmnopqrstuvwz123<>/=&;\\ngjtpcxambfirkvohsuweqdlzny513462\\n\`\`\`\\n\\nThe only tricky characters to reverse are the digits:\\n\\n- One of the cells in the largest table has a rowspan attribute, whose value was enciphered as \`n\`. Since there are only two rows in the table, its rowspan is likely “2”.\\n- The table in the fourth cell of the largest table has three rows, two of which have a single cell with a colspan attribute, whose value was enciphered as \`y\`. Since the second row of that has three cells, the colspan attributes are likely “3”.\\n- Only “1” makes sense for the final digit, which was enciphered as \`z\`, because anything larger would cause the largest table’s cells (with length/width \`zzz\`) to be disproportionately large compared to the nested tables' cells (with length/width \`nn\` = 22).\\n\\nWe recover filename “puzzle.html” and the following HTML code (formatted for readability):\\n\\n\`\`\`\\n<marquee behavior=alternate width=1111>\\n  <table>\\n    <tr height=111>\\n      <td bgcolor=black width=111 align=center valign=bottom>\\n        <select size=3>\\n          <option>&nbsp;</option>\\n        </select>&nbsp;&nbsp;&nbsp;&nbsp;<select size=3>\\n          <option>&nbsp;</option>\\n        </select>\\n      </td>\\n      <td bgcolor=black width=111 align=center>\\n        <select size=2>\\n          <option>&emsp;</option>\\n        </select>\\n      </td>\\n      <td rowspan=2 width=111 align=center>\\n        <font size=22>\\n          v\\n          <table>\\n            <tr height=22><td></td></tr>\\n            <tr height=22><td></td></tr>\\n          </table>\\n          n\\n        </font>\\n      </td>\\n      <td bgcolor=black width=111 align=right>\\n        <table>\\n          <tr bgcolor=white height=11>\\n            <td colspan=3></td>\\n          </tr>\\n          <tr height=22>\\n            <td width=22></td>\\n            <td width=22></td>\\n            <td width=22></td>\\n          </tr>\\n          <tr bgcolor=white height=11>\\n            <td colspan=3></td>\\n          </tr>\\n        </table>\\n      </td>\\n    </tr>\\n    <tr height=111>\\n      <td bgcolor=black width=111 align=center valign=bottom>\\n        <select size=3>\\n          <option>&nbsp;</option>\\n        </select>&nbsp;&nbsp;&nbsp;&nbsp;<select size=3>\\n          <option>&nbsp;</option>\\n        </select>\\n      </td>\\n      <td bgcolor=black width=111 align=right>\\n        <table>\\n          <tr bgcolor=white height=11>\\n            <td colspan=3></td>\\n          </tr>\\n          <tr height=22>\\n            <td width=22></td>\\n            <td width=22></td>\\n            <td width=22></td>\\n          </tr>\\n          <tr bgcolor=white height=11>\\n            <td colspan=3></td>\\n          </tr>\\n        </table>\\n      </td>\\n      <td width=111 align=center>\\n        <table>\\n          <tr bgcolor=black height=22>\\n            <td colspan=3></td>\\n          </tr>\\n          <tr height=22>\\n            <td width=22></td>\\n            <td width=22 rowspan=2 bgcolor=22></td>\\n            <td width=22></td>\\n          </tr>\\n          <tr height=22>\\n          </tr>\\n        </table>\\n      </td>\\n    </tr>\\n  </table>\\n</marquee>\\n\`\`\`\\n\\nThe HTML code renders slightly differently between browsers, but should all show the same word bouncing from side to side. Click <a href={\`\${props.staticPuzDir}/default/puzzle.html\`} target=\\"_blank\\">here</a> to view the rendered HTML code in your browser. The word, as confirmed by its motion, is the answer, <Answer />."
    },
    "puz95": {
      "hash": "240b540fc789874d04c7b25f8532149d98cdbeef16a62d1bfcbd3929d20c7162",
      "content": "These are parts of shapes from the Shapes menu of MS Paint. Specifically, they are Cloud Callout, Heart, and Lightning. Treat the image as a Venn diagram. H is the only letter found in LIGHTNING and HEART but not in CLOUD CALLOUT, so we extract H for the red region. We can similarly extract A, L, and T for the orange, yellow and green regions. Reading the letters in rainbow order gives us the answer <Answer />."
    },
    "puz96": {
      "hash": "421b43da769ad2cd8861fe43523a5c390ce741adb3496b386d67663c7513301e",
      "content": "We first notice that the \\"levels\\" are all PuzzleScript games. Level 3, in particular, may be identified as a Snake-themed game with very distinctive graphics. By searching for Snake-themed PuzzleScript games, or by reverse image searching a screenshot of the level, we find the the level is based on [*Snakeoban*](https://www.puzzlescript.net/play.html?p=a0b8021cf42acc89306c) by Jack Lance.\\n\\nThe levels in the puzzle are titled *All Play and No Work*, a play on the proverb \\"All work and no play makes Jack a dull boy\\". In conjunction with the identity of Level 3, this clues that all the other levels are also based on [games by Jack Lance](https://jacklance.github.io/games.html).\\n\\n<Table\\n\\theaders={[\\"Level\\", \\"Original game\\", \\"Index\\", \\"Letter\\"]}\\n  cells={[\\n    [\\"1\\", <a href=\\"https://www.puzzlescript.net/play.html?p=ac31e554519d0394efa18f2184cfe526\\"><i>Savior</i></a>, 2, \\"A\\"],\\n    [\\"2\\", <a href=\\"https://www.puzzlescript.net/play.html?p=9ebe1e5ad44ac22259343de170a3b337\\"><i>Coin Counter</i></a>, 11, \\"R\\"],\\n    [\\"3\\", <a href=\\"https://www.puzzlescript.net/play.html?p=a0b8021cf42acc89306c\\"><i>Snakeoban</i></a>, 5, \\"E\\"],\\n    [\\"4\\", <a href=\\"https://jacklance.github.io/PuzzleScript/play.html?p=cfdcc6e23f1fb3e9de2fd42fafaf4d4c\\"><i>Enigmash</i></a>, 6, \\"A\\"],\\n  ]}\\n/>\\n\\nWe now solve each level, using the mechanics from the source games:\\n\\n- Savior: Push the single blue block up to form an L-shape with the line of three blue boxes above. Push the line of three blue boxes below all the way to the right. Hit \\"X\\" at the save point to save. Push the L-shape 4 cells to the right, just enough to unblock the upper corridor. Move onto the exposed blue floor tile and hit \\"X\\" to restore. Move through the upper corridor and into the goal.\\n- Coin Counter: Take a right at the fork. Collect all the coins by first collecting the four in the right column, then the middle one, then the remaining top-right one (worth 5). Go back down to take the left passage to the exit at the top right, collecting the last coin along the way.\\n- Snakeoban: Move down once, right thrice, up once, left once, up once, left four times, down twice, right four times, down twice, then left four times to consume all the apples.\\n- Enigmash: Staying within the green area, move around to the left edge and enter the pink area. Move right to enter the blue area, with gravity pointing to the right. Move all the way down to push the bottom-left L-shape into the corner and exit into the green area. Re-enter the blue area through the gap on the right to push the bottom-right L-shape all the way to the left. Move up, then left to exit through the pink area into the green area. Staying within the green area, move around all the way to the top edge. Enter the blue area, pushing the top-left L-shape down. The left half of that L-shape turns into boulders as they enter the pink area, but the L-shapes on the bottom-left prevent them from falling further. Move left to the exit.\\n\\nUpon solving each level, the blocks in Savior, the dark blue floor tiles in Coin Counter, the snake in Snakeoban, and the blocks and boulders in Enigmash respectively form numbers. Indexing the numbers into the titles of the source games gives the answer, <Answer />."
    },
    "puz97": {
      "hash": "22fa0b96f4a606d753e64b94dae1b94b31e40a7d8d9f364ca5cd882afbf1cf93",
      "content": "This is the Morse code table, but with some extra added spacing. If we take the first symbol of each line and group by the spacing, the Morse decodes to AMINUETMETER(2). This clues <Answer /> time (variants of this answer are also accepted)."
    },
    "puz98": {
      "hash": "73e14bc040a5fc147fd0c4ad1c50e3bb7dbc0078a170cf45b6cb04d648b76806",
      "content": "This puzzle uses the Skew tool in MS Paint. The top left is a 100×100 square, and the other quadrants are that square skewed in various angles.\\n\\n<Table\\n\\theaders={[\\"Position\\", \\"Horizontal skew angle\\", \\"Vertical skew angle\\", \\"Letters\\"]}\\n\\tcells={[\\n\\t\\t[\\"Top right\\", \\"13\\", \\"1\\", \\"MA\\"],\\n\\t\\t[\\"Bottom left\\", \\"20\\", \\"18\\", \\"TR\\"],\\n\\t\\t[\\"Bottom right\\", \\"9\\", \\"24\\", \\"IX\\"],\\n\\t]}\\n/>\\n\\nConverting these skew angles to letters by A1Z26 gives <Answer />, the answer."
    },
    "puz99": {
      "hash": "63414be6a60e893b7ec230f4fe397b521937f691e59f72750c9500baf6d78692",
      "content": "These are all icons from the Tools menu in MS Paint, which have keyboard shortcuts on Windows 11.\\n\\n<Image fullWidth />\\n\\nFor the arrows, take the key adjacent to the shortcut key in the indicated direction - for instance, the magnifier (Z) maps to the key up-left of Z, which is A. Doing so gives <Answer />, the answer.\\n\\n<Table\\n\\theaders={[\\"Tool\\", \\"Shortcut\\", \\"Direction\\", \\"Letter\\"]}\\n\\tcells={[\\n\\t\\t[\\"Eraser\\", \\"E\\", \\"Down-left\\", \\"S\\"],\\n\\t\\t[\\"Color picker\\", \\"I\\", \\"None\\", \\"I\\"],\\n\\t\\t[\\"Text\\", \\"T\\", \\"Down-right\\", \\"G\\"],\\n\\t\\t[\\"Fill\\", \\"B\\", \\"Right\\", \\"N\\"],\\n\\t\\t[\\"Magnifier\\", \\"Z\\", \\"Up-left\\", \\"A\\"],\\n\\t\\t[\\"Pencil\\", \\"P\\", \\"Down-left\\", \\"L\\"],\\n\\t]}\\n/>"
    },
    "rock_lobster": {
      "hash": "5c2631f76e5ac13a8808b9d41c79e51f785f3db9c3221bc7a49766ac8513f3c4",
      "content": "This puzzle is about several Masyu variants. Each puzzle can be solved using normal Masyu rules to a certain extent. From there, it’s possible to make educated guesses as to the rules, using the descriptions of the minerals. Video walkthroughs are available below. In particular:\\n\\n1. We can see that some circles have the path go into all 4 adjacent cells, and other circles do not have the path touch any of the 4 adjacent cells. This corresponds to hematite, which can either attract or repel the path: The path either goes through *all* the orthogonally adjacent cells, or *none* of them. Because hematite is described as hard, the path never goes through any dashed circles.\\n2. We can see that the path travels through some circles, and that the segments after those circles are shorter than the segments going into the circles. This corresponds to uraninite, which has a half-life: If the path goes through a dashed circle, then the length of the segment of the path going *into* that circle is twice the length of the segment of the path going *out of* that circle.\\n3. We can see that all circles that are on the path are part of long straight segments. This corresponds to black ice, which is slippery: If the path goes through a dashed circle, then it travels straight through (i.e. doesn't turn) that circle and the cells immediately before and after it.\\n4. We can see that the path crosses itself on one of the circles. This corresponds to gypsum, which is twinned: If the path goes through a dashed circle, it goes through that circle a second time.\\n\\nAfter solving each puzzle, drawing a line through the dashed circles used by the path draws a digit: 6, 2, 6, and 4, respectively. (In most cases, a dashed circle is \\"used\\" if the path goes through it; for hematite a dashed circle is \\"used\\" if the path touches it. Note that we do have to use most of the dashed circles to solve the puzzles.) Indexing the digit into the name of the mineral gives the answer <Answer />.\\n\\n## Video solutions\\n\\nPuzzle 1\\n\\n<iframe width=\\"560\\" height=\\"315\\" src=\\"https://www.youtube.com/embed/mqiNZ-q68c0\\" title=\\"YouTube video player\\" frameBorder=\\"0\\" allow=\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\\" allowFullScreen></iframe>\\n\\nPuzzle 2\\n\\n<iframe width=\\"560\\" height=\\"315\\" src=\\"https://www.youtube.com/embed/jGt57lMaIUQ\\" title=\\"YouTube video player\\" frameBorder=\\"0\\" allow=\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\\" allowFullScreen></iframe>\\n\\nPuzzle 3\\n\\n<iframe width=\\"560\\" height=\\"315\\" src=\\"https://www.youtube.com/embed/_fNH9COlq94\\" title=\\"YouTube video player\\" frameBorder=\\"0\\" allow=\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\\" allowFullScreen></iframe>\\n\\nPuzzle 4\\n\\n<iframe width=\\"560\\" height=\\"315\\" src=\\"https://www.youtube.com/embed/MHGKPTtxvoM\\" title=\\"YouTube video player\\" frameBorder=\\"0\\" allow=\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\\" allowFullScreen></iframe>\\n\\n<AuthorsNotes>\\nRock Lobster is solely played for morale reasons.\\n</AuthorsNotes>"
    },
    "ten_lions": {
      "hash": "bf0382528d96546f6c78a839f63184163b0d7f7fd1fb4bd9d188f309c542bde9",
      "content": "<div lang=\\"zh\\">\\nThe title and flavortext of this puzzle reference the Chinese poem [Lion-Eating Poet in the Stone Den](https://en.wikipedia.org/wiki/Lion-Eating_Poet_in_the_Stone_Den) by Yuan Ren Chao, which contains 92 characters all pronounced with the syllable Shi but differing in tone, as there are 4 tones in Mandarin Chinese. The punctuation characters used in the puzzle are also Chinese punctuation. We are given sentences followed by question marks and enumerations, and the enumerations sum to 92, suggesting that we should translate the sentences into a poem of 92 Chinese characters with some relation to Lion-Eating Poet.\\n\\nThe first sentence can be translated as follows:\\n\\nThe Tatars greatly build, greatly build, greatly greatly build, and Big Darmstadtium replies with the sound of clattering hooves.  \\n鞑大搭，大搭，大大搭，大𫟼答哒。  \\nDá dà dā dà dā dà dà dā dà dá dá dā\\n\\nAnd the first sentence in Lion-Eating Poet is as follows:\\n\\nIn a stone den was a poet called Shi Shi, who was a lion addict and had resolved to eat ten lions.  \\n石室诗士施氏，嗜狮，誓食十狮。  \\nShí shì shī shì shī shì shì shī shì shí shí shī\\n\\nThe sentence lengths in Lion-Eating Poet and the new poem match up perfectly. The tones also match up almost perfectly, except for places where 十 (ten) appears in Lion-Eating Poet, where the tones sometimes differ. This suggests that 十 is special in some way, which we will utilize later. The number of question marks is the number of distinct syllables in the sentence, for example the first sentence only uses Da, and the second sentence uses a mix of Da and An. Characters sharing the same syllable appear contiguously, which helps us narrow where syllable changes occur.\\n\\nFortunately, translation is doable without knowledge of Chinese, aided by online tools as well as identical word order before and after translation. One strategy for identifying the syllables is to paste the sentences into Google Translate, hit the reverse button, and hit the speaker button. Google Translate won’t give an ideal translation with only Da, but it will give a translation with suspiciously many Da’s. Other useful resources include [MDBG](https://www.mdbg.net/chinese/dictionary) and [Wiktionary](https://www.wiktionary.org/), both of which accept queries like “da2” to mean “dá”, or “da” with the 2nd tone. On the flip side, even for native speakers, some of the characters may prove obscure like 啽, though none of the obscure characters are essential to the puzzle.\\n\\nBelow is the full poem with annotated translation.\\n\\nThe Tatars greatly build, greatly build, greatly greatly build, and Big Darmstadtium replies with the sound of clattering hooves.  \\n鞑大搭，大搭，大大搭,大𫟼答哒。  \\n鞑 (Tatars) 大 (big, greatly) 搭 (to build)，大 (big, greatly) 搭 (to build)，大 大 搭, 大 𫟼 (Darmstadtium) 答 (to reply) 哒 (clattering hooves onomatopoeia)  \\nDá dà dā, dà dā, dà dà dā, dà dá dá dā\\n\\nBig Darmstadtium reaches legal case, according to coastal safety.  \\n大𫟼达案，按岸安。  \\n大 (big, greatly) 𫟼 (Darmstadtium) 达 (to reach) 案 (case (as in legal))，按 (according to) 岸 (coast) 安 (safety)  \\nDà dá dá àn, àn àn ān\\n\\nThe legal case says (Cantonese): a dark latent thousand was owed by euryale ferox.  \\n案啽：暗潜千欠芡。  \\n案 (case (as in legal)) 啽 (to speak (Cantonese, obscure))：暗 (dark) 潜 (latent) 千 (thousand) 欠 (to owe) 芡 (Gorgon plant, euryale ferox)  \\nÀn án: àn qián qiān qiàn qiàn\\n\\nEuryale ferox before, owed a thousand handkerchiefs, and sleeping taxes.  \\n芡前，欠千帨,睡税。  \\n芡 (Gorgon plant, euryale ferox) 前 (before)，欠 (to owe) 千 (thousand) 帨 (handkerchief), 睡 (to sleep) 税 (tax)  \\nQiàn qián, qiàn qiān shuì, shuì shuì\\n\\nSleeping taxes and sleeping water are connected to mustard sister, and mustard sister borrows a street to expose the mustard commandments.  \\n睡税睡水接芥姐,芥姐借街揭芥诫。  \\n睡 (to sleep) 税 (tax) 睡 (to sleep) 水 (water) 接 (to catch, to connect) 芥 (mustard) 姐 (sister), 芥 (mustard) 姐 (sister) 借 (to borrow) 街 (street) 揭 (to expose) 芥 诫 (commandment)  \\nShuì shuì shuì shuǐ jiē jiè jiě, jiè jiě jiè jiē jiē jiè jiè\\n\\nScabies knot paragraph briefly carries, the extremity judges the head thoroughly.  \\n疥结段短端，端断头透。  \\n疥 (scabies) 结 (knot) 段 (paragraph, section) 短 (brief, short) 端 (end, extremity, to carry)，端 (end, extremity, to carry) 断 (to break, to judge) 头 (head) 透 (thoroughly, to penetrate)  \\nJiè jié duàn duǎn duān, duān duàn tóu tòu\\n\\nThe plank penetrating thief penetrates the wine flagon, thoroughly penetrating unit of livestock after unit of livestock.  \\n牏透偷透钭，透透头头。  \\n牏 (plank (obscure)) 透 (see-through, thoroughly, to penetrate) 偷 (to steal, thief) 透 (see-through, thoroughly, to penetrate) 钭 (wine flagon (obscure))，透 透 头 (head, measure word for livestock) 头 (head, measure word for livestock)  \\nTóu tòu tōu tòu tǒu, tòu tòu tóu tóu\\n\\nThe dice are transparent, thoroughly transparent, and the yellow transparent head thoroughly throws out the thief.  \\n骰透，透透，黈透头透投偷。  \\n骰 (dice) 透 (see-through, thoroughly, to penetrate)，透 (see-through, thoroughly, to penetrate) 透，黈 (yellow) 透 头 (head) 透 投 (to throw) 偷 (to steal, thief)  \\nTóu tòu, tòu tòu, tǒu tòu tóu tòu tóu tōu\\n\\nDice throwing yellow head is self funded, consults herewith Vanadium, fights against vexation to turn over the banner.  \\n骰投黈头自资，咨兹钒，反烦翻幡。  \\n骰 (dice) 投 (to throw) 黈 (yellow) 头 (head) 自 (self) 资 (funding, capital)，咨 (to consult) 兹 (herewith) 钒 (Vanadium)，反 (anti, to oppose, opposite) 烦 (to vex, vexation) 翻 (to turn over, to translate) 幡 (banner)  \\nTóu tóu tǒu tóu zì zī, zī zī fán, fǎn fán fān fān\\n\\nMeal infringes upon the farm range.  \\n饭犯畈范。  \\n饭 (meal) 犯 (to infringe, to violate) 畈 (farm) 范 (limits, range)  \\nFàn fàn fàn fàn\\n\\nAs hinted by the flavortext and the numbers at the bottom, 十 (ten) which resembles X is used to mark the spot. Hence we line up both poems, highlight the locations where 十 appears in the Lion-Eating Poet, and highlight the corresponding locations in the new poem.\\n\\nLion-Eating Poet\\n\\n石室诗士施氏嗜狮誓食**十**狮。  \\n氏时时适市视狮。  \\n**十**时适**十**狮适市。  \\n是时适施氏适市。  \\n氏视是**十**狮恃矢势使是**十**狮逝世。  \\n氏拾是**十**狮尸适石室。  \\n石室湿氏使侍拭石室。  \\n石室拭氏始试食是**十**狮。  \\n食时始识是**十**狮尸实**十**石狮尸。  \\n试释是事。\\n\\nNew Poem\\n\\n鞑大搭大搭大大搭大𫟼**答**哒。  \\n大𫟼达案按岸安。  \\n**案**啽暗**潜**千欠芡。  \\n芡前欠千帨睡税。  \\n睡税睡**水**接芥姐芥姐借**街**揭芥诫。  \\n疥结段**短**端端断头透。  \\n牏透偷透钭透透头头。  \\n骰透透透黈透头透**投**偷。  \\n骰投黈头自**资**咨兹钒**反**烦翻幡。  \\n饭犯畈范。\\n\\nThe 9 highlighted characters can be substituted into the 10’s at the bottom.\\n\\n答案：  \\n潜水街，短  \\n投资（反）\\n\\n答案 (answer)：  \\n潜水 (to dive, diving) 街 (street)，短 (short)  \\n投资 (to invest) （反 (anti, opposite)）\\n\\nDá àn:  \\nQián shuǐ jiē, duǎn  \\nTóu zī (fǎn)\\n</div>\\n\\nThis mini-poem is a cryptic which clues the answer via wordplay (DIVE + ST) and definition (INVEST opposite), hence <Answer />.\\n\\n<AuthorsNotes>\\n\\nYuan Ren Chao was a prolific linguist and poet who, among other feats, is responsible for translating Alice in Wonderland into Chinese while preserving Lewis Carroll’s element of wordplay. Some sources claim there are multiple versions of Yuan Ren Chao’s poem which can contain up to 94 characters, but I only found a single version online which contains 92 characters.\\n\\n</AuthorsNotes>"
    }
  }
}`,ro=`{
  "puz3": {
    "GRAVE KEY": null
  },
  "puz128": {
    "BLAZING | SADDLES": null
  },
  "puz175": {
    "EXPRESS": null,
    "DELIVERY": null
  },
  "puz322": {
    "ORAN": "Almost! Submit the full name.",
    "BLUEBERRY": "Correct, but not the answer. Check the canned hints for up to five more clues."
  },
  "puz221": {
    "LEHNWORT": null
  },
  "puz117": {
    "FARYL SMITH": null
  },
  "puz21": {
    "HYPHEN": null,
    "MINUS": null,
    "DASH": null
  },
  "puz229": {
    "ENDONYM": null,
    "A CAT GOT": null
  },
  "puz48": {
    "DUCT": null
  },
  "puz201": {
    "INIGNORE": null
  },
  "puz100": {
    "RASTER": null,
    "MASTER": null
  },
  "puz70": {
    "ANSWER": null
  },
  "puz239": {
    "ɸ": "Maybe you recognize this one.",
    "⩇": "Maybe it’d be recognizable if you take public transit in Seattle?",
    "ⵝ": "I don’t think lookalikes should count. But good try!"
  },
  "puz125": {
    "NACK": "Not quite, we’re looking for an earlier Doctor for Tennant."
  },
  "puz268": {
    "SHANGHAI TV TOWER": null
  }
}`,lo=`{
  "puz1": [
    "The theming of the puzzle should help you choose which of multiple possible answers to use for each clue.",
    "The number of possible answers to each clue is important."
  ],
  "puz2": [
    "You’ll get numbers to index into the names of the colors. The shapes of the lines represent something specific."
  ],
  "puz3": [
    "The answer is on a KEYboard."
  ],
  "puz4": [
    "The answer to each clue is a language."
  ],
  "puz5": [
    "Each clue is a famous phrase or name with distinctive punctuation. In no particular order, there are three films (two of which were adapted from novels), two French phrases, one band, and one song.",
    "The French phrases refer to a restaurant role and a psychological phenomenon. Some last names associated with the other answers: Blume, Kubrick, Spears, Urie, Verne."
  ],
  "puz6": [
    "The W is a label to both arrows. What letters could the other directions be?"
  ],
  "puz7": [
    "The title describes itself. (ONE means “exactly one”.) The answer has four letters."
  ],
  "puz8": [
    "Replace X’s with R, S, T, L, N, or E to get the clues and the answer. But be careful, some X’s might just be X!"
  ],
  "puz9": [
    "In particular, the television show contains a frequently recurring theme of six specific numbers."
  ],
  "puz10": [
    "Find the proper A, B, C, D, E, F that fit in the lines. Each one should be five letters long, and greater than the previous."
  ],
  "puz12": [
    "The point minimizing the sum of the distances to the three vertices is known as the Fermat point. You’ll want to get the individual distances AX, BX, and CX."
  ],
  "puz13": [
    "This puzzle references a very (in)famous music video, with song lyrics indicating things that the singer would never do."
  ],
  "puz14": [
    "The numbers in this list can be deduced uniquely. It may help to consider the possible values of the sum of all numbers and make bounds on individual numbers."
  ],
  "puz15": [
    "Turn every clue’s answer into something that you can use as an index."
  ],
  "puz17": [
    "Each answer can become another word if you add some letters to it. Some have already been provided for you!"
  ],
  "puz19": [
    "After laying the bricks, form thematic words by going from brick to brick. One of the words starts from the “G” on the top right.",
    "Form four distinct, non-overlapping words that together use all the bricks, including the newly placed bricks. The fact that you are building a wall is thematically relevant to figuring out what words to form."
  ],
  "puz20": [
    "Where can you find letters surrounded by other letters? The left and right provide examples (and have enumerations 4 and 3 respectively).",
    "This puzzle uses a computer keyboard."
  ],
  "puz21": [
    "Look up what “JFK SHAGS” is. Apply the same solution, but on something other than a QWERTY keyboard."
  ],
  "puz22": [
    "Each “jockey” clues a band. Find a song performed by each band telling you what they are riding on."
  ],
  "puz23": [
    "Each of these bullets is the color of one or more NYC Subway services. Put a letter in each bullet to spell something."
  ],
  "puz24": [
    "The image depicts a taxicab and four cubes."
  ],
  "puz25": [
    "This is a three-disc Towers of Hanoi puzzle. Keep track of every move, noting both the disc and the pole that the disk is placed on."
  ],
  "puz26": [
    "Each clue pair indicates a range of the “owo” to read."
  ],
  "puz27": [
    "You will need a common mathematical constant."
  ],
  "puz28": [
    "This puzzle works similarly to Towers I, but each V and C should be replaced with a vowel or consonant respectively so that the moves spell out a word."
  ],
  "puz29": [
    "Somewhat sneakily, the title is not actually in English!"
  ],
  "puz30": [
    "How would you normally draw the shortest path between two points?"
  ],
  "puz31": [
    "Fill in the grid with three self-descriptive words."
  ],
  "puz32": [
    "This puzzle is about chess. Consider all of the pieces in a standard game (excluding pawns) and all of the possible moves.",
    "Each pattern clues a set of pieces. Each set of pieces share something in common that the pieces not in the set do not have."
  ],
  "puz33": [
    "Use the 2024 apportionment of electoral votes. You’ll need some pretty big states in your path to reach that EV total."
  ],
  "puz34": [
    "What’s in the middle? This puzzle is about the nomenclature related to this thing."
  ],
  "puz36": [
    "This puzzle is about a common code with an unusual representation. P6 is ambiguous (one of three possibilities) but the answer is a common word."
  ],
  "puz37": [
    "A single line between two points can represent the letter C, I, J, S, or U."
  ],
  "puz38": [
    "On this album cover, four band members incorrectly try to encode their four-letter album name with their arms."
  ],
  "puz39": [
    "This art was made by Van Gogh."
  ],
  "puz40": [
    "You don’t need to put anything into the blank squares.",
    "Extract one word from each row. The number of columns in the grid is important."
  ],
  "puz41": [
    "Measure the lengths of the line segments in pixels. The first one is 314 pixels plus a little bit more.",
    "The lengths of the segments are close to mathematical constants."
  ],
  "puz42": [
    "The clues for 13A and 27A both allude to alcohol. 18A and 16D allude to Halloween. The “text” in 35A might have been sent to a group chat. Put a single word into the central square.",
    "In 11A, “uni” is “うに”. 16A might be contrasted with multiplicity. 24A is South American. The word in the central square should make 6-Down into a three word sequence."
  ],
  "puz43": [
    "The answer is 1/3 of PUZZLE."
  ],
  "puz44": [
    "This puzzle is about the middle third of things."
  ],
  "puz45": [
    "Distribute the 12 pieces. Did you save your work from 2/3 Puzzle?"
  ],
  "puz46": [
    "You’ll need 1/2 of each answer, in order."
  ],
  "puz47": [
    "For each word, look at where its letters lie on a certain object, and find the special letter."
  ],
  "puz48": [
    "In each cryptic clue, the definition solves to a word that’s two letters longer than the wordplay."
  ],
  "puz49": [
    "This references the Tower of Hanoi."
  ],
  "puz51": [
    "You should turn your head 90 degrees to the left. The particular words in the text are not important.",
    "You’re looking for five letters encoded with a common encoding."
  ],
  "puz52": [
    "Try searching for quiz cards that could have Mario characters."
  ],
  "puz53": [
    "The cells can be split into four groups of four. Each group has a different way to associate their words with a letter each.",
    "The “pair” in the second question refers to “pair of categories”. The first answer has 7 letters and the second answer has 6 letters."
  ],
  "puz54": [
    "This is a puzzle about Strong’s Concordance."
  ],
  "puz55": [
    "Words appearing in this puzzle include the words LETTER, WORD, DO, and THIS."
  ],
  "puz56": [
    "Each of these are outlines of territories with national flags. The second one isn’t a country, but an autonomous territory."
  ],
  "puz57": [
    "The four colors of the Mauritius flag are relevant.",
    "In order, the four things to find are: a toy, a movie, a diagram, and a logo."
  ],
  "puz58": [
    "Every answer is a two-word phrase. Relate those phrases to each other, then find a three-word phrase that could describe the combination."
  ],
  "puz59": [
    "Fill in the blanks, and don’t fill in the things that aren’t blank. The answer is an uncommon word."
  ],
  "puz60": [
    "The answers in each row and column have something in common, allowing you to determine the contents of the blank cells."
  ],
  "puz61": [
    "When you’re done with the white squares, fill each grey square with a single letter to complete the grid. One of the extra words is a river."
  ],
  "puz62": [
    "This puzzle is about streets on the North and West sides of Chicago. Many Chicago streets, even if not numbered, follow a regular numbering scheme.",
    "To extract, think of the image as representing a map, with three roads intersecting at a common point."
  ],
  "puz63": [
    "This puzzle is about a video game and an international product classification scheme."
  ],
  "puz64": [
    "Each of these corresponds to a letter of the Greek alphabet in a certain numbering system."
  ],
  "puz65": [
    "Mathematical constants are relevant here. The third row is probably the easiest to start with."
  ],
  "puz66": [
    "The title hints towards a cipher that you should apply to the text."
  ],
  "puz67": [
    "Each clue already contains its own answer."
  ],
  "puz68": [
    "The answers to these clues all share a certain substring, clued by the title. Treat that substring as a single letter to extract."
  ],
  "puz69": [
    "You’ll need to interact with the Minecraft game mechanics (on top of trading with the villager) to build a portal to hell. Make sure to use the Java edition durability value for stone pickaxes (i.e. 131 uses), and don’t forget that you can repair pickaxes to recover extra durability. Keep track of how many times you use each trade and add the shifts modulo 26 to get the answer (e.g. if you used 5 of the first trade, extract 5 + 14 = 19 = S). If you’re feeling tight on resources, look into techniques used in other resource-limited scenarios like Skyblock for more inspiration.",
    "To get started, you’ll need to create an infinite water source from two water buckets. You’ll also need to make a cobblestone generator, but note that you’ll need a pickaxe to actually get cobblestone from it. To smelt gold, a lava bucket makes a great fuel source – you’ll even get the bucket back! And no, you don’t need a diamond pickaxe to build a nether portal.",
    "You will need to craft 4 stone pickaxes, 2 golden pickaxes and a furnace. For the optimal route, you will need to break a pickaxe exactly once – to mine a cobblestone block that you need to craft the last stone pickaxe."
  ],
  "puz70": [
    "Fill in the blanks, and then fill them in again!"
  ],
  "puz71": [
    "This is a map of a part of Texas."
  ],
  "puz72": [
    "This puzzle is about a particular image editing program."
  ],
  "puz73": [
    "The blanks left for answers are all excluding the same extremely hard thing."
  ],
  "puz74": [
    "Interpret the answers, in order, as an instruction."
  ],
  "puz75": [
    "The top grid can be resized to fit into the bottom grid."
  ],
  "puz76": [
    "Fill in with words reading downwards. One word of the title in particular could be helpful."
  ],
  "puz77": [
    "These are all supposed to be palindromes, but in a different language."
  ],
  "puz78": [
    "This is a dropquote that can be filled with a specific sequence of words that are often seen in puzzle hunts. The letter to the left of the dash is an X.",
    "This alphabetical sequence of words is 26 words long, but 5 of them are missing in this dropquote. (One of them is a bit ambiguous, but the answer is a common word)."
  ],
  "puz79": [
    "Highlight which of the breads are of each type."
  ],
  "puz80": [
    "Convert the numbers to another form. Written out, they can be reinterpreted as something else. Remember to think like a Greek, and be festive!",
    "Each number should be written out as two numbers separated by a slash. There is another kind of thing that is two numbers separated by a slash, though which number comes first depends on who you ask. Don’t forget that there is some ambiguity in how you originally represented these numbers."
  ],
  "puz81": [
    "An anagramming wordsmith could help you here. In particular, there’s a 21 letter anagram related to it."
  ],
  "puz82": [
    "Listen to how each Chinese character is pronounced. (If you know Chinese, pretend you don’t.) Their tones are irrelevant."
  ],
  "puz83": [
    "The title hints at a particular chart. Find the portion of the chart that matches the pattern displayed here, and take the indicated team names (without the city)."
  ],
  "puz84": [
    "Consider each row separately; it’s time to connect the dots."
  ],
  "puz85": [
    "You’ll want to read three letters from the left clock and one letter from the right clock."
  ],
  "puz86": [
    "You can imagine superimposing a grid over these two snakes. Now, what are these snakes, and how long are they?"
  ],
  "puz87": [
    "The first two letters are CU."
  ],
  "puz89": [
    "What’s a natural way to make the title hold true? Then, it’s time to extrapolate both forwards and back."
  ],
  "puz90": [
    "You’ll want to fill in the Blank Spaces with some fitting words in the standard reading order.",
    "Look up the title (minus one letter)."
  ],
  "puz91": [
    "Many of these features are only supported on a subset of major browsers. You can find handy tables at the bottom of individual CSS property pages in the MDN web docs, or by looking up features on Can I Use (https://caniuse.com/). Make sure to check support for the exact versions requested.",
    "Two of the CSS properties call functions not supported in Firefox 124, even though their keys were otherwise supported. At least one of the other properties is supported in the latest Firefox version but was not supported in Firefox 124. To extract, use a common puzzle hunt cipher often associated with accessibility."
  ],
  "puz92": [
    "A different feature of MS Paint is relevant to this puzzle. You can either try to replicate the image, or measure it directly."
  ],
  "puz93": [
    "Each of these clues involve someone of a specific profession. The names of these professions share something in common.",
    "To extract, look at the bolded portions. They share something, or rather someone, in common."
  ],
  "puz94": [
    "This is a direct substitution cryptogram. Try dumping parts of the text into a cryptogram solver like https://quipqiup.com/ – the output might look like garbage at first, but if you look closely, some parts of the output might collectively remind you of a certain file format. To start you off, “wgjic” decodes to “table”.",
    "Three of the letters decode to 1, 2 and 3 in some order. It would help to check examples of the file format to confirm that you have the right substitutions."
  ],
  "puz95": [
    "These shapes have canonical names in a certain software.",
    "You’re seeing a somewhat cropped Venn diagram - what letters could be indicated by the colors?",
    "Extract exactly one letter per color, and order them in rainbow order. Don’t forget that each region of a Venn diagram gives you information about its elements in relation to all three of the sets."
  ],
  "puz96": [
    "These are all based on PuzzleScript games made by the same person. Their titles clue his first name. For Level 4, the first step should be to push the bottom-left block down.",
    "Extract a single number from each level and index into the source game titles."
  ],
  "puz97": [
    "Take the first symbol from each line."
  ],
  "puz98": [
    "This feature is tucked away in a dialog box. The first square gets transformed into the other parallelograms.",
    "The answer has 6 letters, 2 from each transformed parallelogram. It’s hard to get the measurements exactly right, so it might help to assume that each measurement may be a few degrees off."
  ],
  "puz99": [
    "Find the keys to victory, and the arrows will point you in the right direction."
  ],
  "puz100": [
    "This is a metapuzzle. Each earlier puzzle used a different feature – where were they?"
  ],
  "puz101": [
    "The genre described is a kind of music."
  ],
  "puz103": [
    "The general shapes of each landmark should clue what it is “within you” that the map actually depicts. The number of letters in each landmark’s name matches the number of letters in each landmark’s true identity.",
    "Look at overlapping letters and extract in the direction of the arrow."
  ],
  "puz104": [
    "Each sentence contains a pair of words that don’t quite fit. These “word pairs” each clue the left and right halves of a single simplified Chinese character. Some of these halves are not actual characters but common components of Chinese characters with canonical meanings. To extract, look at the pinyin of each character.",
    "The left half of the “meat dry” character is often confused with the Chinese character for “moon”. Read the first letters of the pinyin to extract the answer."
  ],
  "puz105": [
    "For each supporting document, there is a single correct title that you need to find in order to solve the puzzle. To figure out the titles and extract an ordering, link the content of each supporting document to the answer of another using the idea of FREE. The form and diagram, but not their contents, will be relevant to your final ordering."
  ],
  "puz106": [
    "All of these nonsense words come from a research paper.",
    "The research paper contains a sequence of 27 words. Apply the puzzle’s title to obtain a sequence of 26 words."
  ],
  "puz107": [
    "A good place to start is with the letters B, F, G, H, and Y, which occur only twice each in the word list."
  ],
  "puz108": [
    "This is a normal 3 by 3 diagramless crossword. The answer is a 9-letter word."
  ],
  "puz109": [
    "The title visually describes how to transform the black blocks to get the answer."
  ],
  "puz110": [
    "Identify the TV show first (try searching names or phrases), then search for this sound effect made by a unique instrument."
  ],
  "puz111": [
    "Angkor ___?"
  ],
  "puz112": [
    "Group the words into the five-word phrase “THE ANSWER TO THIS PUZZLE” and a bunch of three-word clues."
  ],
  "puz113": [
    "Extract four semaphore letters."
  ],
  "puz114": [
    "The answer is a five-letter word starting with the letter C.",
    "Some of these may not feel like exact matches, depending on how your pronounce them. Just find the closest matching letters."
  ],
  "puz116": [
    "This puzzle is about the street grid in Salt Lake County, Utah."
  ],
  "puz117": [
    "Featured topics on Wikipedia are associated with multiple articles. For each of the featured topics given in this puzzle, choose the article that is the odd one out."
  ],
  "puz120": [
    "You’ll want to use the widths of the spoiler boxes to determine the letters inside. The answer is spelled out in all caps.",
    "This is a screenshot from Discord. Experimenting with spoiler tags on Discord may give you some intuition for what letters might fit each box. The second-last word is “answer”."
  ],
  "puz121": [
    "These are words that belong in food pairs, or homophones of such words."
  ],
  "puz122": [
    "The answer to each clue is five letters long. Interpreted differently, each answer provides part of the final answer."
  ],
  "puz123": [
    "The title references a Wikipedia page with a list of things, each with links to Wikipedia articles."
  ],
  "puz124": [
    "This is the border of a combination of several countries, which have something in common."
  ],
  "puz125": [
    "The last five letters anagram to SMITH.",
    "SMITH played the Eleventh Doctor. Use A = 1."
  ],
  "puz126": [
    "This puzzle is about simple arithmetic."
  ],
  "puz127": [
    "There have been several MIT Mystery Hunt puzzles sharing a common title."
  ],
  "puz128": [
    "Start with a funny number that immature people such as the author would reference. There are two such numbers, whose results should be combined for the final answer."
  ],
  "puz129": [
    "You can hear the full announcement at https://youtu.be/vPPB9eKkt-Q?si=GVvYcIKGNMTr5r65"
  ],
  "puz131": [
    "The answer to each clue is a consecutive sequence of key(s) on a keyboard (in either direction). What keys are each answer between?"
  ],
  "puz132": [
    "Make a 3x5 using three pentominoes, of which two have been given to you."
  ],
  "puz135": [
    "Look at the missing digits row by row."
  ],
  "puz136": [
    "Oranges are sour and slightly acidic. Give your best guess, the answer checker is forgiving."
  ],
  "puz140": [
    "WoW, canonical colors for quality.",
    "You’ll want to look specifically at item rarities in World of Warcraft."
  ],
  "puz141": [
    "There’s a lot of ways we could fill these shapes with dominoes.",
    "You’ll want to count up the number of ways to do so."
  ],
  "puz142": [
    "The arrows specifically define a particular relation between the brands."
  ],
  "puz143": [
    "The boxes can be filled in with Gen Z slang phrases in a punny way."
  ],
  "puz145": [
    "Cherish it! When you’re ready, submit the answer HOPE to solve the puzzle."
  ],
  "puz146": [
    "You’ll want to insert something that’s a bit more than 3 between the des pair."
  ],
  "puz149": [
    "This puzzle is about a particular quote that begins with “Curiosity leads to...”"
  ],
  "puz150": [
    "The answer lines up with a single word in the Spanish lyrics."
  ],
  "puz151": [
    "The answers to the top clues and the answers to the bottom clues are anagrams, in a sense. Reapplying the mechanic to the cluephrase should produce a nine-letter word."
  ],
  "puz152": [
    "This puzzle uses two very similar ciphers (as clued by the title); it’s a matter of which number to start counting up from. ",
    "The two answers have 6 and 3 letters respectively, although the 3-letter one is an acronym that comes from a cluephrase with enumeration (3 3)."
  ],
  "puz153": [
    "If you’re stuck getting started, you have 100% reason to remember to google one of the lines of text in particular."
  ],
  "puz155": [
    "These are all states of the United States. The circular arc is part of a state’s boundary.",
    "These boundaries were the subject of a border dispute on the east coast of the United States."
  ],
  "puz156": [
    "Each clue specifies a transformation that can be applied to the title. Apply all five (it doesn’t matter what order you apply them in)."
  ],
  "puz157": [
    "Adjacent answers share some letters. Look at the unshared letters.",
    "Adjacent answers share two letters. The first and last clues’ answers are two letters long; the middle five clues’ answers are five letters long and have exactly one unshared letter each."
  ],
  "puz158": [
    "Replace the numbers with letters to form a square with magical properties."
  ],
  "puz159": [
    "The answers are connected by a parody song, which you can find by Googling most of them together. (Be exact.)",
    "Take the first letter of the thing parodied by each answer in order."
  ],
  "puz162": [
    "Use the buttons to rearrange the letters into a cluephrase. It has enumeration 3 5 4 4 9 7, in which 4 9 is a name."
  ],
  "puz164": [
    "If you’re thinking about chemistry, you’re overthinking it. The title formatting slightly hints at which part of the puzzle to focus on."
  ],
  "puz165": [
    "The colors’ exact hex values are important (but not as a code or cipher).",
    "Each color has a six-letter name."
  ],
  "puz166": [
    "This puzzle is about a famous nursery rhyme and/or tongue twister."
  ],
  "puz168": [
    "The location is on a university campus in the Pacific Northwest."
  ],
  "puz169": [
    "The clues always have the same answer, but you can solve the crossword four times."
  ],
  "puz170": [
    "The name of the shopping center is visible and uniquely identifies where we are right now (a train station in Japan)."
  ],
  "puz171": [
    "Some of the “keys” are two letters long.",
    "The title could be written as “BrO SeAs TeAs As SO SO”."
  ],
  "puz172": [
    "One of the answers doesn’t require outside information; the other one does."
  ],
  "puz173": [
    "You won’t need any data from the referenced puzzle, but it’s worth noting that that puzzle was about constellations and their neighbors."
  ],
  "puz175": [
    "The answers have something in common with each other. Look at the clues again, keeping this common thing in mind.",
    "Each answer’s length is the same as the number of words in its clue. Use the special letter from each answer to extract a word from its clue. Then repeat."
  ],
  "puz176": [
    "Match each answer with another clue."
  ],
  "puz177": [
    "Elephant milk isn’t any more likely to make you drunk than other types of milk. Give your best guess, the answer checker is forgiving."
  ],
  "puz179": [
    "These clues have a lot of repeated answers."
  ],
  "puz180": [
    "The works here include two albums, two books, two films, a song, and a video game."
  ],
  "puz182": [
    "This is about the electromagnetic spectrum."
  ],
  "puz183": [
    "The structure of each data visualization is related to the name of the visualization type."
  ],
  "puz185": [
    "As noted in the title, these clues don’t have answers. But they have a lot in common with each other.",
    "The clues are almost anagrams of each other, but something is different in each clue."
  ],
  "puz186": [
    "One of the two messages in this puzzle starts with the word “CONGRATULATIONS”; the other message ends with the word “THOUGH”."
  ],
  "puz187": [
    "Take the complement of each circle to form one letter per circle. The second letter is A.",
    "The answer is a five-letter word."
  ],
  "puz189": [
    "It’s the same mechanic as the previous puzzle, but with something else in the middle."
  ],
  "puz190": [
    "Try reverse song search to find the title of the background music, then look for a Mario game with a faithful homage to the original setting of these sounds."
  ],
  "puz192": [
    "Start at the arrow on the left, and draw a line, following the stems of botanical berries to the X on the right. Double-check where the stem is on each berry — some of them can be very unintuitive!"
  ],
  "puz194": [
    "This puzzle is about a code, but not the commonly-used Grade 1 version. (The Grade 2 version allows for some bigrams and trigrams to be encoded together.)",
    "This puzzle is about Grade 2 Braille. Each group of characters should convert to (up to) 2 braille characters. The answer is a 5-letter word."
  ],
  "puz196": [
    "While many of these clues are ambiguous, they may be narrowed down if you shorten the title a little."
  ],
  "puz197": [
    "Indeed, you need to separate out the letters. The answer to this puzzle is seven letters long."
  ],
  "puz199": [
    "The writing system that these symbols come from is a syllabary.",
    "This puzzle references the theme song of a 1966 TV show."
  ],
  "puz200": [
    "The amounts of red, green, and blue in this color are important."
  ],
  "puz201": [
    "Macrohard is a stupid way of saying the opposite of Microsoft. Extract a cluephrase made up of a two-letter and a six-letter word."
  ],
  "puz203": [
    "These come from the lyrics of a song about regulations."
  ],
  "puz204": [
    "Find songs that contain a famous section of “na”’s in these particular rhythmic patterns. A certain xkcd comic may be useful.",
    "The numbers and hyphens each takes the place of a word."
  ],
  "puz205": [
    "It’s best not to overthink this one. What is being “randomly” generated? Try saying it aloud."
  ],
  "puz206": [
    "These answers are all one letter off from... something."
  ],
  "puz207": [
    "If you’re on desktop, you’ll need to save two half-presses, one at the start and one at the end. If you’re on mobile, you can start one press before you end another."
  ],
  "puz208": [
    "The answer is a military rank."
  ],
  "puz209": [
    "You’ll need to convert these letters in two ways and apply one to the other. Start at the top arrow."
  ],
  "puz210": [
    "The unusual positions of the letters suggest a particular meme."
  ],
  "puz211": [
    "Read carefully. What is behind the two doors left over?"
  ],
  "puz212": [
    "Take a look at the URL bar.",
    "Given the name of this puzzle and the way that URLs work for other puzzles, what would you expect the URL for this puzzle to be?"
  ],
  "puz213": [
    "The images depict a whitehorse and a yellowknife."
  ],
  "puz214": [
    "The clue “favorite place” is referencing a term for a website’s design that begins with “fav”."
  ],
  "puz215": [
    "Each clue has two different answers, but where are they the same?"
  ],
  "puz216": [
    "Some pairs of gendered words in Portuguese have to do with gender, like “brother” and “sister”, but these don’t."
  ],
  "puz219": [
    "Try searching YouTube for “vtuber karaoke stream”, and look for Japanese thumbnails / titles."
  ],
  "puz220": [
    "It is a window above a doorway."
  ],
  "puz221": [
    "Match up the words on both sides to get eight letters. The flavortext hints at how to find an ordering for the eight letters."
  ],
  "puz222": [
    "Do as the Romans do!",
    "The slash will be read as OR."
  ],
  "puz223": [
    "Consider what is 50/50 in a particular set of 50 items that is relevant to this puzzle."
  ],
  "puz224": [
    "The answer to this puzzle certainly describes itself accurately."
  ],
  "puz225": [
    "This puzzle is about interpreting 50 or 1 in different ways to get letters. One of the ways is more than one letter."
  ],
  "puz226": [
    "The answers can be matched with the bolded parts of the clues. There is a hint as to which three letters to extract from each clue.",
    "The title provides a hint for how the answers to the clues, as well as the answer to the puzzle, all share something in common."
  ],
  "puz227": [
    "The resulting solid is the dual of a Johnson solid."
  ],
  "puz228": [
    "You'll need to take subsequences to extract the final answer."
  ],
  "puz229": [
    "Identify the nations and index into their names to get a clue, and then do it again.",
    "Index into the native names of the countries to get the start of an idiom with word lengths (1 3 3 4 6). The answer is the last two words (4 6)."
  ],
  "puz230": [
    "The people in this meme image are all findable on the Internet."
  ],
  "puz231": [
    "The answer is a single fruit. Look at the company’s website for a list of options."
  ],
  "puz232": [
    "IKEA frequently names their items after places.",
    "The extraction order is from west to east (or, equivalently, south to north)."
  ],
  "puz233": [
    "The title of the puzzle describes a quality of the puzzle synonymous with how it’s being described in the flavortext."
  ],
  "puz235": [
    "This puzzle involves a certain scale model found throughout Sweden."
  ],
  "puz236": [
    "There’s another meaning to “boxes” in the flavortext that is relevant here."
  ],
  "puz237": [
    "Find the video on YouTube by its title. Around the timestamp shown, watch the outdoors footage, which were all filmed in the same area. Try searching for landmarks.",
    "This is the side of a large statue near Gwanghwamun in Seoul.",
    "The answer has 28 letters, some obsolete in modern Korean."
  ],
  "puz238": [
    "There are six types of encodings used in this puzzle, as clued by the flavortext.",
    "In order, the encodings used are Morse code, Braille, hexadecimal ASCII, resistor color codes, semaphore, and (5-bit) binary.",
    "5-bit binary is used in a different way than the others."
  ],
  "puz239": [
    "The answer might be much simpler than you’re expecting."
  ],
  "puz240": [
    "A ordem dos 26 estados é alfabética."
  ],
  "puz241": [
    "This puzzle is about text being decoded in the wrong character encoding."
  ],
  "puz244": [
    "This is a reference to two Super Mario games with ✨ on their cover art."
  ],
  "puz245": [
    "All of the answers appear in a “V”-related monologue.",
    "To extract, get the “V”th letter of each answer."
  ],
  "puz246": [
    "Each row is its own generation. The numbers are also about generations, but in a different sense.",
    "Each number represents something you might give as a gift, in a context completely unrelated to Pokémon. The symbols at the bottom denote an analogy."
  ],
  "puz247": [
    "You’ll need to understand a certain reference to have a super effective solve.",
    "Each row (or column!) of the type effectiveness chart encodes a letter with 5-bit binary."
  ],
  "puz248": [
    "You’ll want one letter from each previous answer, each drawn from the same place."
  ],
  "puz249": [
    "These lower-case letters look like something..."
  ],
  "puz250": [
    "This looks like a URL, and the long part looks like readable text with underscores replacing spaces. You’ll want the English version of the site (sorry, everyone else).",
    "This URL is distinguished from others specifically by its length.",
    "This is a Wikipedia article that holds a record for its very long title."
  ],
  "puz251": [
    "All 6 of these board games are in the BoardGameGeek top 50 *by popularity*. (Note that one of them is always written with a numeral.)"
  ],
  "puz252": [
    "After decoding, the only thing you need to do is read the text and follow the instructions. Make sure you don’t make any mistakes, or get baited by any of the tricks therein!"
  ],
  "puz253": [
    "The text of this puzzle uniquely describes an MLB game. We recommend using baseball-reference.com for research."
  ],
  "puz254": [
    "You want to fill each blank with a number, spelled out, such that all the sentences are true."
  ],
  "puz255": [
    "This grid solves as two different logic puzzle genres.",
    "For extraction, look at what you place in one of the genres, and look at what you don’t place in the other genre."
  ],
  "puz257": [
    "The USPS has a list of abbreviations of states, along with Puerto Rico, at this list: https://about.usps.com/who/profile/history/state-abbreviations.htm"
  ],
  "puz259": [
    "This puzzle looks a bit like a verb conjugation table - in such a table, usually the pronouns have a number associated with them."
  ],
  "puz260": [
    "This is a nonstandard puzzle--you should do something that would normally not work."
  ],
  "puz264": [
    "You’ll need to get your hope to almost zero in order to solve this puzzle."
  ],
  "puz265": [
    "What’s missing? Concatenating the two words gives a biological term, which is your answer."
  ],
  "puz266": [
    "Indeed, using a hint is important in this puzzle. The answer to this puzzle is GUIDANCE."
  ],
  "puz267": [
    "This is just like the first track in the EP, except everything is doubled."
  ],
  "puz268": [
    "This is a logic puzzle that is sometimes also called “Pearls”. It usually also comes with white circle clues, but this one only has black circle clues (though it is still solvable without any additional constraints).",
    "This is a Masyu puzzle. For extraction, each row of the grid seems incomplete. Perhaps we can finish them and see what letters are hiding."
  ],
  "puz269": [
    "To start, look at the last two digits in each number.",
    "The cluephrase refers to something very long, in a way other than biological."
  ],
  "puz270": [
    "You should perform a certain mathematically-inspired operation to each answer to get a new answer. The flavortext hints towards this operation, and the title does as well, though more obliquely.",
    "This puzzle could also be called The Puzzle That Reciprocates."
  ],
  "puz272": [
    "Treat the O’s as white pearls. For the extraction, consider the flavortext."
  ],
  "puz273": [
    "1-Across starts in the 6th cell of the first row."
  ],
  "puz274": [
    "The first three characters in the title can get you started. The fact that the title is 32 characters long is not a coincidence."
  ],
  "puz275": [
    "This puzzle references a certain incremental game. There are screenshots of gameplay which contain all the information that you need for this puzzle."
  ],
  "puz276": [
    "The title has two alternate names that suggest what to do.",
    "Each clue answer has some number of points that you’ll want to index into."
  ],
  "puz278": [
    "Each clue has a definition part that solves to a six letter answer, and a cryptic wordplay part that solves to a seven letter answer.",
    "Here are the definitions for the three clues we think are the hardest: EASING, ENTERS, INKING.",
    "Each clue makes a biographical reference to one of the wives of Henry VIII. This provides an ordering."
  ],
  "puz279": [
    "The title points to four different kinds of means to compute."
  ],
  "puz280": [
    "In this country, George Bush’s name would be written ჯორჯ ბუში."
  ],
  "puz281": [
    "Many pairs of answers for the clues are the same, except with one letter changed."
  ],
  "puz283": [
    "Pay attention to the number of rectangular cells in the maze, and which ones you pass through when solving the maze."
  ],
  "puz284": [
    "The Fictional Crossovers Wiki may come in handy: https://fictionalcrossover.fandom.com/wiki/The_Iron_Giant ",
    "Only Type 1 crossovers (as defined in the Wiki) are relevant for this puzzle. Leatherface (from the Texas Chainsaw Massacre franchise) only has a few of these.",
    "When Bernard says “I don’t know what the media is, but I do know the Iron Giant appears in it,” that means that all crossover appearances of Bernard’s character must include the Iron Giant, AND there must be at least two of them.",
    "Austin Powers has a cameo in Space Jam: A New Legacy, but not a certain video game. The statement from the previous hint implies that Bernard’s character is not a popular character from a (fictional) franchise, but that they do appear in at least two pieces of crossover media.",
    "The only eligible crossover for Leatherface is a comic miniseries crossover with another horror movie villain, as all the others are DLC or TV spots. Bernard’s character appears in the 2015 comedy Trainwreck."
  ],
  "puz285": [
    "Five by five; four across and four down. This puzzle uses unusual meanings of “down” and “perfect”.",
    "The cell in the middle should be left blank. FLUME and FLUTE intersect at the top left corner."
  ],
  "puz286": [
    "Five by five; four across and four down. The structure isn’t exactly the same as the first time. PUPAS become butterflies."
  ],
  "puz287": [
    "Five by five; four across and four down. The structure isn’t exactly the same as the first time. The SHIRE is a Tolkien locale."
  ],
  "puz288": [
    "Five by five; four across and four down. The structure isn’t exactly the same as the first time. You might listen in from EAVES."
  ],
  "puz289": [
    "Five by five; four across and four down. The structure isn’t exactly the same as the first time. A DRILL might be used for boring."
  ],
  "puz290": [
    "Five by five; four across and four down. The clues are alphabetized by answer, which may help you resolve both them and the puzzle answer. SCOWS might carry garbage."
  ],
  "puz291": [
    "Five by five; four across and four down. The clues are alphabetized by answer, which may help you resolve both them and the puzzle answer. A scythe might cut a SWATH."
  ],
  "puz292": [
    "Five by five; four across and four down. The clues are alphabetized by answer, which may help you resolve both them and the puzzle answer. A LEPER might use thalidomide."
  ],
  "puz293": [
    "Five by five; four across and four down. The clues are alphabetized by answer, which may help you resolve both them and the puzzle answer. An EGRET has long legs."
  ],
  "puz294": [
    "The only information you need for this puzzle from the earlier puzzles is the filled-in grids (with 24 letters each). You can ignore which entry was used as the answer to the puzzle.",
    "Fill in three-by-three blanks, two at a time.",
    "Each blank in an earlier puzzle takes two letters that allow the crossings to resolve as six-letter words. None of those puzzles actually specified which way is across or down. The cluephrase refers to a song, not a band."
  ],
  "puz295": [
    "When the jigsaw is assembled, it should form a 20×20 square."
  ],
  "puz296": [
    "To extract, you will need to use a very long word to get letters in 5-bit binary."
  ],
  "puz297": [
    "How would you notate to someone else a way to solve this cube with as few moves as possible?"
  ],
  "puz298": [
    "This is a fully barred 3 by 3 diagramless crossword. The answer is a 9-letter word."
  ],
  "puz301": [
    "Each clue solves to something in a particular set (as of last count, about 100 items) related to a series of five games. For each game, do they fight, or do they flight?"
  ],
  "puz302": [
    "This is a tilted 3 by 3 diagramless crossword. The answer is a 9-letter word."
  ],
  "puz304": [
    "Complete the start of this video game ditty to get your answer."
  ],
  "puz305": [
    "In rainbow order, the eight paths correspond to eight lines of a song.",
    "The title continues, “... the notes to sing...”. Each number is the intersection of two words."
  ],
  "puz306": [
    "For each of the five notes, you’ll need to consider both words the singer could be singing as well as the pitch.",
    "Use the pitch and one word to extract a letter from the other word."
  ],
  "puz308": [
    "Solve the five cryptic clues to solve one more cryptic clue.",
    "The lengths of the answers to the cryptic clues are 3, 10, 2, 6, 8."
  ],
  "puz309": [
    "The speech bubble could mean “homophone”.",
    "“Try X” means to try submitting X as the answer."
  ],
  "puz310": [
    "You might need to be a bit more specific for this one.",
    "“Answer X” means to submit X as the answer (a homophone of the species that’s an English word)."
  ],
  "puz311": [
    "What does his full name sound like?",
    "“Call in X” means to submit X as the answer (a homophone of his surname that’s an English word)."
  ],
  "puz312": [
    "“Enumeration” means the number of letters in a word. “Alphabetically” means the code where A = 1, B = 2, and so on."
  ],
  "puz315": [
    "This puzzle is about a meme about a fictional hoax disease."
  ],
  "puz316": [
    "You can subdivide time into smaller and smaller pieces.",
    "The top left H represents about 540 million years."
  ],
  "puz317": [
    "Take the first letter of each of the four words in the title."
  ],
  "puz318": [
    "This puzzle works similarly to the previous one."
  ],
  "puz319": [
    "This text is missing some things to make a complete set."
  ],
  "puz320": [
    "This puzzle is about common four-word phrases, each missing a word.",
    "Once you’ve found the phrases, do it again with the missing words! The final answer has four letters."
  ],
  "puz321": [
    "Start by grouping the words into eight pairs, that each have something in common with their letters.",
    "Combine each pair of words to form a new four-letter word, taking one letter from each original word where they differ. Then, keep going."
  ],
  "puz322": [
    "All the clues are still true, but the answer is a different berry.",
    "I’m named after a different color named after a different fruit!",
    "I’m also spicy, dry, and bitter.",
    "I heal 10HP when fed to your pet.",
    "I’m a Berry from Pokémon, and I’m not orange."
  ],
  "puz324": [
    "The clue “in these very words” should be taken very literally.",
    "It might help to look at the text somewhere other than on the puzzle page."
  ],
  "puz325": [
    "Try reading the hunt rules again at https://2024.galacticpuzzlehunt.com/about."
  ],
  "puz326": [
    "The answer to this puzzle is ANSWER."
  ],
  "puz327": [
    "Check the tabs at the top of this puzzle."
  ],
  "puz328": [
    "This is a meta. You don’t need anything besides your earlier answers to solve this puzzle."
  ],
  "puz329": [
    "Each image is associated with a compound word, and a wikiHow article related to that compound word. The location of each image in its wikiHow article is important. You'll get a nonsensical-sounding cluephrase with enumeration (4 3)."
  ],
  "puz330": [
    "We've blocked all the links that go to the puzzle page, but the puzzle is still there. What's the right URL for it?"
  ]
}`,uo=`{
  "4": [
    "Each of the answers to the clues belong to a certain set; the enumerations below are for the names of the sets. The question in the flavortext lets you derive an index into the names of the sets to extract the final answer."
  ],
  "8": [],
  "12": [
    "These are all elements of the periodic table. The elements share a commonality, clued by the flavortext."
  ],
  "16": [],
  "17": [
    "The flavortext suggests the CFOP method of cubing. There are mnemonics for last layer algorithms (PLL), for which different configurations are labeled by letters."
  ],
  "18": [
    "Interpret the statement both as a statement about the answer's length as well the answer's location."
  ],
  "23": [
    "These are excerpts from songs by the same \\"fast\\" artist, and so is the cluephrase."
  ],
  "24": [
    "Doubled letters are important. Extract the singles staying inside."
  ],
  "25": [
    "FI = O, and so on."
  ],
  "26": [],
  "28": [],
  "31": [],
  "35": [
    "\\"Two By Two\\" is a song from a particular musical; a portion of the lyrics is depicted in this grid."
  ],
  "36": [
    "https://www.youtube.com/watch?v=v6YJd0Swv3w&start=123"
  ],
  "37": [
    "The initial message is subtly different from the original puzzle. Make sure to follow the naming rules on Wiktionary."
  ],
  "38": [],
  "43": [
    "The letters are written kinda weirdly, but the answer is staring right at you."
  ],
  "44": [],
  "45": [
    "You'll need to re-peat the bus before taking leading letters."
  ],
  "47": [
    "Each answer for a clue on the left column needs to be matched with an answer for a clue on the right column by removing a thematic two-letter word."
  ],
  "69": [
    "The title references something specific from a book series. The answers to the clues are the same kind of thing."
  ],
  "73": [
    "Add a letter to each of these to get a location of a restaurant chain."
  ],
  "74": [
    "These are all quotes from a video game. Each of them is spoken during a thematic action."
  ],
  "82": [
    "Take the first letters. As for what to use for the unmarked finger, remember that one is Extra."
  ],
  "87": [
    "Omitting either of the parenthesized letters in the title clues a different answer to this puzzle. Note that one of the possible titles has a word that is not in English."
  ],
  "96": [],
  "97": [
    "This puzzle is about things that are not dust. You might not have everything you need to solve this puzzle, but other teams might. (Note that you're still not supposed to communicate with other teams.) To extract, reuse the theme of the puzzle."
  ],
  "114": [
    "Each line describes a group of fans of one of the talents of Hololive English."
  ],
  "121": [
    "This is a reference to a different puzzle hunt, called the REDDOT Hunt."
  ],
  "126": [],
  "133": [
    "This is a real constellation. The letters you get from the stars won't make a compelling word. You'll need to prepend something to it to get your final answer."
  ],
  "141": [
    "Each image clues a word with the given enumeration. All these words share something in common, in terms of letters."
  ],
  "144": [
    "All the clues clue the same answer. Submit it twice."
  ],
  "151": [
    "The answer is five letters and shaped like a 80wl."
  ],
  "160": [
    "The clue is for the \\"50-50 club\\"."
  ],
  "172": [
    "This should look very similar to a link on the same page, but with all the letters replaced with Xs."
  ],
  "181": [
    "Each 2 is written in a color that matches the colors on the shirt."
  ],
  "183": [],
  "186": [
    "The image depicts three operations in Microsoft Word."
  ],
  "187": [
    "This refers to a phrase by Julius Caesar. Interpret the words as the kind of numbers Caesar would have used."
  ],
  "197": [
    "This puzzle continues a series of other puzzles in this hunt. You'll need to speak the answer into the submission box."
  ],
  "203": [
    "This puzzle also involves silly wordplay. Remove a two-letter substring from the title to get your final answer."
  ],
  "204": [
    "Add something in between each pair to bridge the gap between the two-letter codes."
  ],
  "210": [
    "The first clue solves to AMEBA and should be placed in the grid starting from the top-left. The last letter will have to go out of the box."
  ],
  "217": [
    "Rotations are important for this one."
  ],
  "218": [
    "While it is possible to write a program to bruteforce the hash after taking the constraints into consideration, it's probably easier to try an educated guess from the title."
  ],
  "251": [
    "The numbers after the clues on the left are not enumerations, but rather things to be appended to the answers."
  ],
  "255": [
    "This puzzle is about a podcast where the three hosts solve puzzles. The hosts' names can be found in the capitalized letters of the flavortext."
  ],
  "257": [
    "The protagonists of a popular game series, clued by the title, is relevant here."
  ],
  "260": [
    "These aren't real constellations, but you should have seen all the stars before. You'll need to drag-pan to see all of them."
  ],
  "262": [],
  "265": [
    "Each of these clues has an answer that starts with an ordinal number. The specific wording of the clues matters."
  ],
  "267": [
    "The grid is symmetric and looks like a worm."
  ],
  "269": [
    "This references lines from a song clued by the title and the first letters of the clues."
  ],
  "275": [
    "Don't overthink it. The title is not relevant."
  ],
  "278": [
    "Sound out the letters; they should sound like words."
  ],
  "284": [
    "The grid to fill in is indeed 9 by 9. All the down clues sound like plurals of certain things."
  ],
  "287": [
    "The answer a substring of the puzzle title."
  ],
  "288": [
    "These are members of the Holostars English branch of Hololive. Each member has another member's oshi marks, forming a cycle."
  ],
  "291": [
    "The drawing looks like a key on the keyboard of a Mac."
  ],
  "294": [
    "These stars are from our hunt. You may find the camp or your team page helpful here."
  ],
  "296": [
    "Compared to the answers on the left, the answers on the right are unNAMEd."
  ],
  "305": [
    "The arrow points to some important things that the team that submitted this puzzle received in this hunt. You'll want to use the ordering there, instead of the ordering on their team page."
  ],
  "308": [
    "Fill in the team members in all caps, except that one of them fell sideways."
  ],
  "343": [
    "The title and flavortext clue a specific song. There is a specific image associated with that song, containing its lyrics, that you can use to extract a cluephrase with enumeration (6 4). Use the cluephrase, in combination with the puzzle's title, to find the final 3-letter answer."
  ],
  "354": [
    "There's no trick here; just follow the instructions. You should get two words at the end, a 3-letter and a 7-letter word."
  ],
  "357": [
    "The word BEFORE is central to the puzzle. To extract, think about what might be thematic for a puzzle about BEFORE."
  ],
  "359": [
    "This is two logic puzzles. The first one you must solve is a Star Battle, and the second is one is a Masyu."
  ],
  "361": [
    "You'll want to transform the country flags according to the story. For extraction, anagramming \\"Lucia Tan\\" is helpful."
  ],
  "362": [
    "This puzzle is actually about typography, disguised with some musical-sounding notation."
  ],
  "365": [],
  "367": [
    "Use classes from another H-R diagram commonly associated with stars."
  ],
  "368": [
    "This is a crossword clue with an enumeration, except that the enumeration (i.e. length of the answer) is the answer to this puzzle."
  ],
  "370": [
    "The characters from each section draw an X-shape on the keyboard."
  ],
  "380": [
    "Use the position of each word in the original source."
  ],
  "394": [
    "Extract one letter from each word in the title."
  ],
  "403": [
    "This puzzle is about an astronomical mnemonic that begins with Our Bright Astronomers, which can be used to convert the stars into letters."
  ],
  "406": [
    "The pictures illustrate the names of the games in the collection (the art of the games themselves is not relevant). You will need to reorder."
  ],
  "408": [
    "Each item appears in a line from a song by Gilbert and Sullivan. Index into the line that each item appears in."
  ],
  "409": [
    "You'll find some catty characters from a poem that shares a similar title when speaking out paths of images."
  ],
  "410": [
    "Two languages are relevant here that can be matched up glyph by glyph. You don't need to use anything from Balatro besides the blinds."
  ],
  "415": [
    "Stonewheat cipher? No, that's not right..."
  ],
  "420": [
    "The letter on the top left of the 7x7 grid is C. To extract, select one star from each column based on the colors of the stars, then read top to bottom. Note that there are two ways to orient the grid; the last part of the flavortext, interpreted cryptically, tells you which orientation to use."
  ],
  "423": [
    "You will need to order the letters based on the Braille, but you'll need a different order other than alphabetical. To find all the videos, you can start from the last one, and repeatedly click on the link in the description to go to the previous one in the duet chain."
  ],
  "436": [
    "Each light display and price above describes an equation. You may ignore all letters besides R, G and B."
  ],
  "440": [
    "Draw out a path of adjacent nodes using the provided list."
  ],
  "442": [],
  "445": [
    "These clue finishing teams in the hunt leaderboard. One of the clues is a translation of a (romanized) Japanese team name into English. Another clue interprets a long team name cryptically."
  ],
  "447": [],
  "448": [
    "The flavortext is a reference to a quote from Megamind, referring to the difference between villains and supervillains. You'll want to apply a similar transformation to what is clued by each image."
  ],
  "456": [
    "The answers to the clues all share something in common. Extract the letters indicated by the green circles."
  ],
  "457": [
    "Pokémon have a chance to hold an item when caught in the wild. The stated probability is true from Generations III onward."
  ],
  "458": [],
  "464": [],
  "465": [
    "The black letters clue why \\"Z\\" is the midpoint of \\"A\\" and \\"s\\". Find the other midpoints."
  ],
  "470": [
    "Find a list of all Pokemon and search for substrings there. You may need to reuse Pokemon to complete the grid."
  ],
  "477": [
    "These are \\"Top Ten\\" Line Rider tracks."
  ],
  "482": [
    "Consider the long form names of these things."
  ],
  "487": [
    "This puzzle is about the galaxies in Super Mario Galaxy. You'll need to apply the same operation to those galaxies and the puzzle entries as one that would get you P from SUPER and HAPPY, I from MARIO and LOGIC, and G from GALAXY and GENIUS."
  ],
  "489": [
    "You'll need to use the same part of the same song again."
  ],
  "490": [
    "The poem has been adapted to refer to a notable day. Finally, take a look at the scores of that these teams achieved."
  ],
  "531": [
    "This puzzle references a different page in this hunt's website."
  ],
  "555": [
    "The six cryptic clues each use a different type of wordplay. For extraction, treat the answers as another clue, with the last word being the enumeration."
  ],
  "571": [],
  "574": [
    "The title is a reference to a sci-fi franchise that is relevant to the rest of the puzzle."
  ],
  "576": [
    "The flavortext formatting is only used to clue that the title should be URL-decoded to \\"50p\\", a British coin."
  ],
  "594": [],
  "595": [
    "The answer is the name of a mathematician who famously quickly performed a calculation that evaluated to 5050."
  ],
  "596": [],
  "598": [
    "The answers to these clues all rhyme with a certain person clued by the flavortext (and kangaroo emoji)."
  ],
  "599": [
    "Start by solving the lower part as a sudoku to get the green letters, then play Wordle to get the other letters in the middle. There are multiple people associated with the piece of media referenced by the final cluephrase; the flavor suggests to focus on the On-Broadway production."
  ],
  "610": [
    "Name the country indicated by the question mark. The countries are placed in a particular way."
  ],
  "615": [
    "The arrow in the title indicates where to look. Everything you need is between 🏕️ and 🔊."
  ],
  "617": [
    "The grid is not symmetric."
  ],
  "621": [
    "You can access special phone functionality by dialing a * in front of some numbers."
  ],
  "630": [
    "Answer the question in the title. The image provides the list of accepted responses."
  ],
  "631": [
    "This puzzle is about a simple game. Make all the unique optimal moves."
  ],
  "633": [
    "This puzzle depicts a Final Fantasy XIV raid party. You'll need to reorder the jobs to extract."
  ],
  "637": [
    "You'll want to append two thematic letters to the end of every clue on the left to match the clues on the right."
  ],
  "639": [
    "Most of these clues don't fit in the grid. Use the clues that do fit to extract."
  ],
  "642": [
    "This puzzle is about minigames in a series of games from the Mario franchise."
  ],
  "643": [
    "Abbreviations for a common set of seven things go in the top 7 lines. The bottom line is how you might refer to all seven things collectively. The red line is only used for extraction."
  ],
  "646": [
    "While you could feasibly wait an hour, it's probably faster to find a tool that splits the GIF into frames with timing information."
  ],
  "647": [
    "The answers contain a common substring, which is an abbreviation related to the theme of this puzzle."
  ],
  "649": [],
  "654": [
    "Once you've found the four-letter word, the music reference is no longer relevant. Look for a diet instead."
  ],
  "657": [
    "Each clue clues a big tech company. Despite the fact that the list is currently alphabetically sorted, you do not need to resort the list."
  ],
  "663": [
    "This puzzle has appeared somewhere else before. You don't need to solve it again."
  ],
  "669": [],
  "681": [
    "First, solve a Star Battle with 1 star per region. Then, you should be able to feel the answer."
  ],
  "702": [],
  "704": [],
  "705": [],
  "706": [
    "Each bigram should give you five bits, one for each image, that you can use to extract a letter in 5-bit binary."
  ],
  "712": [
    "His last name is Ancer, which sounds suspiciously familiar."
  ],
  "713": [
    "Come up with better names for the puzzles (you don't need to worry about the existing names). Then use the answers to extract. Think of \\"SEAN\\" as four separate letters."
  ],
  "714": [
    "Searching some of the text in the image should lead you to a different hunt that ran earlier this year. In fact, all of the images are from that particular hunt."
  ],
  "715": [
    "Combine pairs of symbols from a common cipher to form four letters."
  ],
  "716": [],
  "719": [
    "Put each answer on the right into a state abbreviation to get an answer on the left. Once you're done, the first sentence of the flavortext hints at how to extract."
  ],
  "735": [
    "All you need from the presentation notes are the referenced puzzles and their rankings. Note that there are two sets of rankings."
  ],
  "737": [
    "Some bills in the U.S. Congress have interesting names."
  ],
  "748": [
    "This is about the covers of a children's book series that show humans turning into animals."
  ],
  "749": [
    "Make up each word by putting one word on the left and one word on the right!"
  ],
  "755": [
    "The answers to the clues can be paired up. Write letters on each segment, going from the smaller word to the larger one."
  ],
  "766": [],
  "771": [
    "You'll need to use the team names of two of this hunt's finishing teams."
  ],
  "777": [
    "The clues solve to answers each starting with a different letter. Each answer contains a thematic set of four letters in some order."
  ],
  "782": [
    "The two video games referenced by this puzzle contain elements that share the same name."
  ],
  "791": [
    "Each line below is a well-known meme or reference. You do not need to use the image on top at all to solve the puzzle; it's just the Math Lady meme."
  ],
  "792": [
    "The Namystic solves to a word that describes the star. The white dots in some order make the answer, which sounds like something that might appropriately describe the assertions made in the flavortext."
  ],
  "794": [
    "These are all species names in a particular thematic film franchise."
  ],
  "869": [
    "Refer to the submitting team's name for the answer."
  ],
  "894": [
    "The penguins are from Polar Bear Cafe."
  ],
  "954": [
    "These are about homonyms in Dutch. Index the numbers from the bottom clues into the answers to the top clues."
  ],
  "976": [
    "Each line holds the name of a country. The country names are not anagrammed, but some wrapping may be involved."
  ],
  "1032": [],
  "1046": [],
  "1054": [
    "These are ASCII characters, and the numbers are written in decimal."
  ],
  "1104": [],
  "1128": [
    "Here, stars refer to actors and actresses. Where do they \\"meet\\"? Repeat this process twice more."
  ]
}`,co=`{
  "keyframes": {
    "keyframe_intro_0": {
      "puzName": "intro",
      "imageName": "intro.svg",
      "dialogue": "<span style={{display: \\"block\\", textAlign: \\"center\\"}}><Twemoji tag=\\"span\\">⚠️</Twemoji> Warning <Twemoji tag=\\"span\\">⚠️</Twemoji></span>\\nCutscenes are **not** synced across your team.  \\nEnjoy them at your own pace!",
      "nextId": [
        "keyframe_intro_1"
      ]
    },
    "keyframe_intro_1": {
      "puzName": "intro",
      "imageName": "intro.svg",
      "dialogue": "By the way, we’ve also updated our rules to clarify what is and isn’t allowed. In short, we ask that you **do not view source code** (**note that this is different from some previous hunts**), dump network packets, hack, or otherwise interact with the website in any unintended way. You can read the full rules on the [About page](/about).",
      "nextId": [
        "keyframe_intro_2"
      ]
    },
    "keyframe_intro_2": {
      "puzName": "intro",
      "imageName": "intro-ok.svg",
      "dialogue": "That’s all from us. Have a great night under the stars!",
      "dialogOptions": [
        "Let’s stargaze (in compliance with all relevant Belgian terms and regulations)!"
      ],
      "nextId": [
        "keyframe_intro_3"
      ]
    },
    "keyframe_intro_3": {
      "puzName": "intro",
      "imageName": "blank",
      "dialogue": "...",
      "nextId": [
        "keyframe_intro_4"
      ]
    },
    "keyframe_intro_4": {
      "puzName": "intro",
      "imageName": "starry-sky",
      "dialogue": "Ah, a peaceful, starry night.",
      "nextId": [
        "intro-darken"
      ]
    },
    "intro-darken": {
      "puzName": "intro",
      "imageName": "starry-sky",
      "dialogue": "Time to lay back, relax, and-",
      "nextId": [
        "keyframe_intro_5"
      ]
    },
    "keyframe_intro_5": {
      "puzName": "intro",
      "imageName": "blank-sky",
      "dialogue": "...!",
      "nextId": [
        "keyframe_intro_6"
      ]
    },
    "keyframe_intro_6": {
      "puzName": "intro",
      "imageName": "blank-sky",
      "dialogue": "Huh? Where are the stars?",
      "nextId": [
        "keyframe_intro_7"
      ]
    },
    "keyframe_intro_7": {
      "puzName": "intro",
      "imageName": "blank-sky",
      "dialogue": "Uh... this doesn’t look good.",
      "nextId": [
        "keyframe_intro_8"
      ]
    },
    "keyframe_intro_8": {
      "puzName": "intro",
      "imageName": "blank-sky",
      "dialogue": "Maybe my eyes are just adjusting, and they’ll come back in a few moments...",
      "nextId": [
        "keyframe_intro_9"
      ]
    },
    "keyframe_intro_9": {
      "puzName": "intro",
      "imageName": "blank-sky",
      "dialogue": "...",
      "nextId": [
        "keyframe_intro_10"
      ]
    },
    "keyframe_intro_10": {
      "puzName": "intro",
      "imageName": "blank-sky",
      "dialogue": ".......",
      "nextId": [
        "keyframe_intro_11"
      ]
    },
    "keyframe_intro_11": {
      "puzName": "intro",
      "imageName": "blank-sky",
      "dialogue": "Okay, it’s not my eyes.",
      "nextId": [
        "keyframe_intro_12"
      ]
    },
    "keyframe_intro_12": {
      "puzName": "intro",
      "imageName": "blank-sky",
      "dialogue": "I can’t believe it, but did the stars actually just... disappear???",
      "nextId": [
        "keyframe_intro_13"
      ]
    },
    "keyframe_intro_13": {
      "puzName": "intro",
      "imageName": "blank-sky",
      "dialogue": "Is there anything I can do?",
      "nextId": [
        "keyframe_intro_14"
      ]
    },
    "keyframe_intro_14": {
      "puzName": "intro",
      "imageName": "blank-sky",
      "dialogue": "What about wishing? People wish on stars, right?",
      "nextId": [
        "keyframe_intro_15"
      ]
    },
    "keyframe_intro_15": {
      "puzName": "intro",
      "imageName": "blank-sky",
      "dialogue": "...Does that work if there aren’t any stars?",
      "nextId": [
        "keyframe_intro_16"
      ]
    },
    "keyframe_intro_16": {
      "puzName": "intro",
      "imageName": "blank-sky",
      "dialogue": "I wish...",
      "nextId": [
        "intro-wish"
      ]
    },
    "intro-wish": {
      "puzName": "intro",
      "imageName": "blank-sky",
      "dialogue": "I wish the stars would come back.",
      "nextId": [
        "keyframe_intro_17"
      ]
    },
    "keyframe_intro_17": {
      "puzName": "intro",
      "imageName": "falling-star",
      "dialogue": "???",
      "nextId": [
        "keyframe_intro_18"
      ]
    },
    "keyframe_intro_18": {
      "puzName": "intro",
      "imageName": "falling-stelle",
      "dialogue": "Woah!",
      "nextId": [
        "keyframe_intro_19"
      ]
    },
    "keyframe_intro_19": {
      "puzName": "intro",
      "imageName": "stelle-collapsed",
      "dialogue": "ergh...",
      "dialogOptions": [
        "Are you okay?",
        "Are you... a star?"
      ],
      "nextId": [
        "intro-ok",
        "intro-star"
      ]
    },
    "intro-ok": {
      "puzName": "intro",
      "imageName": "stelle-collapsed",
      "dialogue": "idk... does it matter...",
      "dialogOptions": [
        "Are you... a star?"
      ],
      "nextId": [
        "intro-star"
      ]
    },
    "intro-star": {
      "puzName": "intro",
      "imageName": "stelle-collapsed",
      "dialogue": "a star? idk...",
      "nextId": [
        "keyframe_intro_20"
      ]
    },
    "keyframe_intro_20": {
      "puzName": "intro",
      "imageName": "stelle",
      "dialogue": "stars are found in the sky, right? but i’m not in the sky",
      "dialogOptions": [
        "You fell from the sky... I think...",
        "Um, actually there’s sky all around us right now, otherwise we wouldn’t be able to breathe."
      ],
      "nextId": [
        "keyframe_intro_21"
      ]
    },
    "keyframe_intro_21": {
      "puzName": "intro",
      "imageName": "stelle",
      "dialogue": "yeah...",
      "dialogOptions": [
        "What happened?"
      ],
      "nextId": [
        "intro-falling"
      ]
    },
    "intro-falling": {
      "puzName": "intro",
      "imageName": "stelle",
      "dialogue": "idk... i felt my energy disappear... and suddenly, i was falling, falling...",
      "nextId": [
        "keyframe_intro_22"
      ]
    },
    "keyframe_intro_22": {
      "puzName": "intro",
      "imageName": "stelle",
      "dialogue": "and then i was here",
      "nextId": [
        "keyframe_intro_23"
      ]
    },
    "keyframe_intro_23": {
      "puzName": "intro",
      "imageName": "stelle",
      "dialogue": "it was rather painful",
      "nextId": [
        "keyframe_intro_24"
      ]
    },
    "keyframe_intro_24": {
      "puzName": "intro",
      "imageName": "stelle",
      "dialogue": "ow",
      "dialogOptions": [
        "I... I think I wished you here... Sorry..."
      ],
      "nextId": [
        "keyframe_intro_25"
      ]
    },
    "keyframe_intro_25": {
      "puzName": "intro",
      "imageName": "stelle-thinking",
      "dialogue": "i was already falling here from the start... i can’t imagine your wishing could’ve changed anything",
      "dialogOptions": [
        "Maybe it did though...",
        "Maybe my wish retroactively propagated through time."
      ],
      "nextId": [
        "keyframe_intro_26"
      ]
    },
    "keyframe_intro_26": {
      "puzName": "intro",
      "imageName": "stelle",
      "dialogue": "and now the sky is broken, the Celestials are missing, and all my friends are gone... probably dead...",
      "dialogOptions": [
        "Celestials? What are those? And who are you?"
      ],
      "nextId": [
        "keyframe_intro_27"
      ]
    },
    "keyframe_intro_27": {
      "puzName": "intro",
      "imageName": "stelle",
      "dialogue": "...",
      "nextId": [
        "keyframe_intro_28"
      ]
    },
    "keyframe_intro_28": {
      "puzName": "intro",
      "imageName": "stelle",
      "dialogue": "call me stelle",
      "nextId": [
        "keyframe_intro_29"
      ]
    },
    "keyframe_intro_29": {
      "puzName": "intro",
      "imageName": "stelle",
      "dialogue": "...",
      "dialogOptions": [
        "...Is there anything we can do?"
      ],
      "nextId": [
        "keyframe_intro_30"
      ]
    },
    "keyframe_intro_30": {
      "puzName": "intro",
      "endCutscene": true,
      "imageName": "stelle",
      "dialogue": "all you can do is wish...",
      "nextId": [],
      "redirectPath": "/camp"
    },
    "keyframe_first-wish_0": {
      "puzName": "first-wish",
      "imageName": "stelle-thinking",
      "dialogue": "oh... wow. that’s another star",
      "nextId": [
        "keyframe_first-wish_1"
      ]
    },
    "keyframe_first-wish_1": {
      "puzName": "first-wish",
      "imageName": "stelle",
      "dialogue": "why is this happening? did you do something?",
      "dialogOptions": [
        "I have no idea!",
        "I just made another wish."
      ],
      "nextId": [
        "keyframe_first-wish_2"
      ]
    },
    "keyframe_first-wish_2": {
      "puzName": "first-wish",
      "imageName": "stelle-thinking",
      "dialogue": "it looks like somehow your wish guided another falling star all the way here :o",
      "dialogOptions": [
        "(...I didn’t accidentally set the world on fire, right...)",
        "Is that... good?"
      ],
      "nextId": [
        "keyframe_first-wish_3"
      ]
    },
    "keyframe_first-wish_3": {
      "puzName": "first-wish",
      "imageName": "stelle-happy",
      "dialogue": "yes, yes! i think something good’s happening",
      "nextId": [
        "keyframe_first-wish_4"
      ]
    },
    "keyframe_first-wish_4": {
      "puzName": "first-wish",
      "imageName": "stelle",
      "dialogue": "now that you have the star here, you should be able to guide it back to its place in the sky",
      "dialogOptions": [
        "But... how?"
      ],
      "nextId": [
        "keyframe_first-wish_5"
      ]
    },
    "keyframe_first-wish_5": {
      "puzName": "first-wish",
      "imageName": "stelle",
      "dialogue": "well, each star wants to hear a certain message, or wants you to do something with it. usually it’s a message, but each star is different!",
      "nextId": [
        "keyframe_first-wish_6"
      ]
    },
    "keyframe_first-wish_6": {
      "puzName": "first-wish",
      "imageName": "stelle-thinking",
      "dialogue": "either way, you’ll need to solve some sort of puzzle i think",
      "dialogOptions": [
        "Oh, puzzles! Like a jigsaw, right?",
        "Puzzles? About that... I was kinda hoping not to have to do those? Do you maybe have something else I could do, like maybe a card game?",
        "PUZZLES!?!? YES!!!!"
      ],
      "nextId": [
        "keyframe_first-wish_7"
      ]
    },
    "keyframe_first-wish_7": {
      "puzName": "first-wish",
      "imageName": "stelle",
      "dialogue": "yup, puzzles.",
      "dialogOptions": [
        "How does that make any sense? I’ve never heard of anything like this before."
      ],
      "nextId": [
        "keyframe_first-wish_8"
      ]
    },
    "keyframe_first-wish_8": {
      "puzName": "first-wish",
      "imageName": "stelle-thinking",
      "dialogue": "well have you ever heard of stars falling from the sky before? it’s just how things work",
      "dialogOptions": [
        "(Or don’t work...)",
        "Chat, is this real?"
      ],
      "nextId": [
        "keyframe_first-wish_9"
      ]
    },
    "keyframe_first-wish_9": {
      "puzName": "first-wish",
      "endCutscene": true,
      "imageName": "stelle",
      "dialogue": "anyway, time to get solving. i’m not sure why any of this is happening but maybe we’ll get a better idea after a bit",
      "dialogOptions": [
        "I’m excited for puzzles!",
        "[Lie] I’m excited for puzzles!"
      ],
      "nextId": []
    },
    "keyframe_first-solve_0": {
      "puzName": "first-solve",
      "imageName": "stelle",
      "dialogue": "you did it! you restored a star!",
      "dialogOptions": [
        "Yay!"
      ],
      "nextId": [
        "keyframe_first-solve_1"
      ]
    },
    "keyframe_first-solve_1": {
      "puzName": "first-solve",
      "imageName": "stelle-happy",
      "dialogue": "looks like you got some hope too! that should let you make more wishes and restore more stars. if you keep going, you might just wind up restoring every star in the sky!",
      "dialogOptions": [
        "Wow, that’s a lot to take in..."
      ],
      "nextId": [
        "hope-faq-options"
      ]
    },
    "hope-faq-options": {
      "puzName": "first-solve",
      "imageName": "stelle-thinking",
      "dialogue": "hmm... if you have any questions, maybe i could help?",
      "dialogOptions": [
        "Is it possible to run out of hope?",
        "What’s the best way to wish?",
        "No questions, just keep wishing, got it."
      ],
      "nextId": [
        "hope-faq-run-out",
        "hope-faq-best-way",
        "hope-faq-done"
      ]
    },
    "hope-faq-run-out": {
      "puzName": "first-solve",
      "imageName": "stelle-thinking",
      "dialogue": "ehh",
      "nextId": [
        "keyframe_first-solve_2"
      ]
    },
    "keyframe_first-solve_2": {
      "puzName": "first-solve",
      "imageName": "stelle-thinking",
      "dialogue": "that’s unlikely.",
      "dialogOptions": [
        "You really think so?"
      ],
      "nextId": [
        "keyframe_first-solve_3"
      ]
    },
    "keyframe_first-solve_3": {
      "puzName": "first-solve",
      "imageName": "stelle",
      "dialogue": "yeah... if you keep believing in yourself, you’ll gain hope over time. i can feel it! (and also see it going up in your hope bar above)",
      "dialogOptions": [
        "I bet something crazy will happen if we max out on hope!"
      ],
      "nextId": [
        "keyframe_first-solve_4"
      ]
    },
    "keyframe_first-solve_4": {
      "puzName": "first-solve",
      "imageName": "stelle-thinking",
      "dialogue": "...no, you don’t get anything for saving up hope.",
      "nextId": [
        "keyframe_first-solve_5"
      ]
    },
    "keyframe_first-solve_5": {
      "puzName": "first-solve",
      "imageName": "stelle-thinking",
      "dialogue": "at most, you’ll just stop getting more",
      "dialogOptions": [
        "Darn, so we should just keep wishing then?"
      ],
      "nextId": [
        "keyframe_first-solve_6"
      ]
    },
    "keyframe_first-solve_6": {
      "puzName": "first-solve",
      "imageName": "stelle",
      "dialogue": "yeah, just keep wishing...",
      "nextId": [
        "hope-faq-options"
      ]
    },
    "hope-faq-best-way": {
      "puzName": "first-solve",
      "imageName": "stelle",
      "dialogue": "i think it’s cool when everyone wishes together... don’t you?",
      "dialogOptions": [
        "Yeah!",
        "No... wishing is a very private matter, isn’t it?"
      ],
      "nextId": [
        "keyframe_first-solve_7"
      ]
    },
    "keyframe_first-solve_7": {
      "puzName": "first-solve",
      "imageName": "stelle",
      "dialogue": "well... just saying, if everyone gathers at the camp for a wish, you’ll all get to see what you get at the same time",
      "nextId": [
        "keyframe_first-solve_8"
      ]
    },
    "keyframe_first-solve_8": {
      "puzName": "first-solve",
      "imageName": "stelle",
      "dialogue": "which i think is pretty cool",
      "nextId": [
        "keyframe_first-solve_9"
      ]
    },
    "keyframe_first-solve_9": {
      "puzName": "first-solve",
      "imageName": "stelle",
      "dialogue": "but, like",
      "nextId": [
        "keyframe_first-solve_10"
      ]
    },
    "keyframe_first-solve_10": {
      "puzName": "first-solve",
      "imageName": "stelle",
      "dialogue": "you don’t have to if you don’t wanna",
      "nextId": [
        "keyframe_first-solve_11"
      ]
    },
    "keyframe_first-solve_11": {
      "puzName": "first-solve",
      "imageName": "stelle",
      "dialogue": "just keep wishing, i guess? any way you like",
      "dialogOptions": [
        "Okay..."
      ],
      "nextId": [
        "hope-faq-options"
      ]
    },
    "hope-faq-done": {
      "puzName": "first-solve",
      "endCutscene": true,
      "imageName": "stelle-happy",
      "dialogue": "just keep wishing!",
      "nextId": []
    },
    "keyframe_brighter-skies_0": {
      "puzName": "brighter-skies",
      "imageName": "stelle",
      "dialogue": "...",
      "dialogOptions": [
        "I think the sky is getting brighter!"
      ],
      "nextId": [
        "keyframe_brighter-skies_1"
      ]
    },
    "keyframe_brighter-skies_1": {
      "puzName": "brighter-skies",
      "imageName": "stelle-happy",
      "dialogue": "oh... yeah, i can see it! you must’ve restored a bunch more stars!",
      "nextId": [
        "keyframe_brighter-skies_2"
      ]
    },
    "keyframe_brighter-skies_2": {
      "puzName": "brighter-skies",
      "imageName": "stelle-thinking",
      "dialogue": "this must be good, but i don’t think we’ll be able to really fix things without the Celestials, and who knows where they went...",
      "dialogOptions": [
        "The Celestials?"
      ],
      "nextId": [
        "keyframe_brighter-skies_3"
      ]
    },
    "keyframe_brighter-skies_3": {
      "puzName": "brighter-skies",
      "imageName": "stelle",
      "dialogue": "they’re the seven divine beings in charge of running the night sky. they keep everything up and running with their power. well, not anymore i guess",
      "dialogOptions": [
        "Is it possible to learn this power?",
        "They sound important! How do we find them?"
      ],
      "nextId": [
        "brighter-power",
        "brighter-find"
      ]
    },
    "brighter-power": {
      "puzName": "brighter-skies",
      "imageName": "stelle-thinking",
      "dialogue": "um. i think it’s a Celestial thing only",
      "nextId": [
        "brighter-find"
      ]
    },
    "brighter-find": {
      "puzName": "brighter-skies",
      "imageName": "stelle-thinking",
      "dialogue": "i’m not sure how we can find them, but i guess we could hope they turn up if you keep doing what you’re doing?",
      "nextId": [
        "brighter-ask"
      ]
    },
    "brighter-ask": {
      "puzName": "brighter-skies",
      "imageName": "stelle",
      "dialogue": "of course, if i could help somehow...",
      "dialogOptions": [
        "Could you tell me more about wishing?",
        "What else do you know about the stars?",
        "Any help with the puzzles?",
        "I’ve got this!"
      ],
      "nextId": [
        "brighter-ask-wish",
        "brighter-ask-stars",
        "brighter-ask-hints",
        "brighter-ask-done"
      ]
    },
    "brighter-ask-wish": {
      "puzName": "brighter-skies",
      "imageName": "stelle-thinking",
      "dialogue": "i still don’t understand how it’s possible... your wishing shouldn’t affect how stars fall like that... it looks like you get a random star?",
      "nextId": [
        "keyframe_brighter-skies_4"
      ]
    },
    "keyframe_brighter-skies_4": {
      "puzName": "brighter-skies",
      "imageName": "stelle",
      "dialogue": "and besides, there’s a lot of junk in the sky. i would’ve thought you’d be getting way more than just stars",
      "nextId": [
        "keyframe_brighter-skies_5"
      ]
    },
    "keyframe_brighter-skies_5": {
      "puzName": "brighter-skies",
      "imageName": "stelle-thinking",
      "dialogue": "but it sure seems like hope is involved somehow. hope came from the stars, after all",
      "dialogOptions": [
        "It did?"
      ],
      "nextId": [
        "keyframe_brighter-skies_6"
      ]
    },
    "keyframe_brighter-skies_6": {
      "puzName": "brighter-skies",
      "imageName": "stelle",
      "dialogue": "sigh, where are those who share the memory? it was the stars that lifted the world from despair",
      "dialogOptions": [
        "I’m not sure I’m old enough for that."
      ],
      "nextId": [
        "keyframe_brighter-skies_7"
      ]
    },
    "keyframe_brighter-skies_7": {
      "puzName": "brighter-skies",
      "imageName": "stelle-happy",
      "dialogue": "a glimpse of order in the face of chaos... a steady glow in the depths of darkness... stars, and hope, they are one and the same",
      "dialogOptions": [
        "Oh, but then..."
      ],
      "nextId": [
        "keyframe_brighter-skies_8"
      ]
    },
    "keyframe_brighter-skies_8": {
      "puzName": "brighter-skies",
      "imageName": "stelle",
      "dialogue": "yeah, that’s why we really need to fix the sky right now...",
      "nextId": [
        "brighter-ask"
      ]
    },
    "brighter-ask-stars": {
      "puzName": "brighter-skies",
      "imageName": "stelle-happy",
      "dialogue": "the stars... they’re pretty, aren’t they?",
      "dialogOptions": [
        "Those stars sure have that rizz!",
        "Honestly I think they’re kinda dull."
      ],
      "nextId": [
        "keyframe_brighter-skies_9"
      ]
    },
    "keyframe_brighter-skies_9": {
      "puzName": "brighter-skies",
      "imageName": "stelle",
      "dialogue": "they’re not all the same. some are large, some are small, some don’t even have a name... and then, there are the rare ones, those might pose a real challenge...",
      "nextId": [
        "keyframe_brighter-skies_10"
      ]
    },
    "keyframe_brighter-skies_10": {
      "puzName": "brighter-skies",
      "imageName": "stelle-happy",
      "dialogue": "...you’ll know them when you see them. they might be hard to restore, but i think they’re really cool!",
      "dialogOptions": [
        "We’ll restore them! Every single one!",
        "We could try..."
      ],
      "nextId": [
        "keyframe_brighter-skies_11"
      ]
    },
    "keyframe_brighter-skies_11": {
      "puzName": "brighter-skies",
      "imageName": "stelle",
      "dialogue": "but there’s something even cooler...",
      "dialogOptions": [
        "What is it?"
      ],
      "nextId": [
        "keyframe_brighter-skies_12"
      ]
    },
    "keyframe_brighter-skies_12": {
      "puzName": "brighter-skies",
      "imageName": "stelle-happy",
      "dialogue": "constellations! stars like to group together to form pretty patterns sometimes",
      "nextId": [
        "keyframe_brighter-skies_13"
      ]
    },
    "keyframe_brighter-skies_13": {
      "puzName": "brighter-skies",
      "imageName": "stelle",
      "dialogue": "there might be special stars in constellations that depend on other stars in their constellations to restore...",
      "dialogOptions": [
        "Like some kind of... meta stars?"
      ],
      "nextId": [
        "keyframe_brighter-skies_14"
      ]
    },
    "keyframe_brighter-skies_14": {
      "puzName": "brighter-skies",
      "imageName": "stelle",
      "dialogue": "and then there are constellations where the stars just, share the same vibe",
      "dialogOptions": [
        "Wow!"
      ],
      "nextId": [
        "keyframe_brighter-skies_15"
      ]
    },
    "keyframe_brighter-skies_15": {
      "puzName": "brighter-skies",
      "imageName": "stelle",
      "dialogue": "i miss the stars already, i hope we can get them all back up again...",
      "nextId": [
        "brighter-ask"
      ]
    },
    "brighter-ask-hints": {
      "puzName": "brighter-skies",
      "imageName": "stelle",
      "dialogue": "oh... i’ve tried... but i’m useless at them",
      "dialogOptions": [
        "Can the Celestials help?"
      ],
      "nextId": [
        "keyframe_brighter-skies_16"
      ]
    },
    "keyframe_brighter-skies_16": {
      "puzName": "brighter-skies",
      "imageName": "stelle",
      "dialogue": "i’m not sure the Celestials are any good at them either... they can keep things running, but i don’t think they’ve ever had to actually restore a fallen star before",
      "dialogOptions": [
        "That’s an amazing track record!"
      ],
      "nextId": [
        "keyframe_brighter-skies_17"
      ]
    },
    "keyframe_brighter-skies_17": {
      "puzName": "brighter-skies",
      "imageName": "stelle-thinking",
      "dialogue": "though... i might’ve heard them talk about something before. something about an ancient cosmic force that put the stars in the sky in the first place",
      "dialogOptions": [
        "I’d like to meet them..."
      ],
      "nextId": [
        "keyframe_brighter-skies_18"
      ]
    },
    "keyframe_brighter-skies_18": {
      "puzName": "brighter-skies",
      "imageName": "stelle",
      "dialogue": "maybe if you wish hard enough, you’ll get to ask them a question...",
      "nextId": [
        "keyframe_brighter-skies_19"
      ]
    },
    "keyframe_brighter-skies_19": {
      "puzName": "brighter-skies",
      "imageName": "stelle",
      "dialogue": "but otherwise, i guess you could try looking for cans",
      "dialogOptions": [
        "Cans?"
      ],
      "nextId": [
        "keyframe_brighter-skies_20"
      ]
    },
    "keyframe_brighter-skies_20": {
      "puzName": "brighter-skies",
      "imageName": "stelle",
      "dialogue": "cans... the stars, they like writing down their thoughts and putting them in cans sometimes.",
      "dialogOptions": [
        "Just like me, for real.",
        "Gee willikers, that's a swell idea!"
      ],
      "nextId": [
        "keyframe_brighter-skies_21"
      ]
    },
    "keyframe_brighter-skies_21": {
      "puzName": "brighter-skies",
      "imageName": "stelle",
      "dialogue": "if you find them, maybe you can open them and find hints for specific stars.",
      "dialogOptions": [
        "How do I find them?"
      ],
      "nextId": [
        "keyframe_brighter-skies_22"
      ]
    },
    "keyframe_brighter-skies_22": {
      "puzName": "brighter-skies",
      "imageName": "stelle-thinking",
      "dialogue": "with the stars gone, they must be just floating about in space now... maybe if you keep wishing...",
      "nextId": [
        "brighter-ask"
      ]
    },
    "brighter-ask-done": {
      "puzName": "brighter-skies",
      "endCutscene": true,
      "imageName": "stelle-happy",
      "dialogue": "best wishes!",
      "dialogOptions": [
        "Thanks!"
      ],
      "nextId": []
    },
    "keyframe_find_big_branch_0": {
      "puzName": "find_big_branch",
      "imageName": "stelle-happy",
      "dialogue": "hey look! you found Big Branch!",
      "nextId": [
        "keyframe_find_big_branch_1"
      ]
    },
    "keyframe_find_big_branch_1": {
      "puzName": "find_big_branch",
      "imageName": "big_branch",
      "dialogue": "An old friend finds another; an alien? Curious.",
      "nextId": [
        "keyframe_find_big_branch_2"
      ]
    },
    "keyframe_find_big_branch_2": {
      "puzName": "find_big_branch",
      "imageName": "stelle-happy",
      "dialogue": "they know everything. they’re as old as the universe itself!",
      "nextId": [
        "keyframe_find_big_branch_3"
      ]
    },
    "keyframe_find_big_branch_3": {
      "puzName": "find_big_branch",
      "imageName": "big_branch",
      "dialogue": "Knowledge carves into branches; memories, less so. Yet now, branches too a tangle.",
      "nextId": [
        "keyframe_find_big_branch_4"
      ]
    },
    "keyframe_find_big_branch_4": {
      "puzName": "find_big_branch",
      "endCutscene": true,
      "imageName": "stelle",
      "dialogue": "it can be hard to understand them sometimes, but i think i got this one. it sounds like they need help!",
      "nextId": [],
      "redirectPath": "/puzzle/big_branch"
    },
    "keyframe_find_pom_pom_0": {
      "puzName": "find_pom_pom",
      "imageName": "goddog",
      "dialogue": "TREMBLE BEFORE ME!! For I am the great celestial DOG GOD! )!DOG GOD( (Shhhh!)",
      "dialogOptions": [
        "AAAAAAAA",
        "... you’re pretty clearly two dogs in a costume."
      ],
      "nextId": [
        "find_pom_pom_tremble_1",
        "find_pom_pom_skeptical"
      ]
    },
    "find_pom_pom_tremble_1": {
      "puzName": "find_pom_pom",
      "imageName": "goddog",
      "dialogue": "AHAHAHA THAT’S RIGHT! CEDE ALL YOUR TREATS UNTO ME, LOWLY MORTAL! )!!STAERT( (SHHHHH!)",
      "dialogOptions": [
        "AAAAAAAA",
        "I’m pretty sure you’re two dogs in a costume."
      ],
      "nextId": [
        "find_pom_pom_tremble_2",
        "find_pom_pom_skeptical"
      ]
    },
    "find_pom_pom_tremble_2": {
      "puzName": "find_pom_pom",
      "imageName": "goddog",
      "dialogue": "Alright, you can stop trembling now...",
      "dialogOptions": [
        "AAAAAAAA"
      ],
      "nextId": [
        "keyframe_find_pom_pom_1"
      ]
    },
    "keyframe_find_pom_pom_1": {
      "puzName": "find_pom_pom",
      "imageName": "goddog",
      "dialogue": "...this is getting kind of old...",
      "dialogOptions": [
        "AAAAAAAAAAAAAAAAAAAAA"
      ],
      "nextId": [
        "keyframe_find_pom_pom_2"
      ]
    },
    "keyframe_find_pom_pom_2": {
      "puzName": "find_pom_pom",
      "imageName": "pompom_mopmop",
      "dialogue": "ENOUGH! Look! We were just two dogs in a costume, alright??",
      "dialogOptions": [
        "Oh, I never would have guessed."
      ],
      "nextId": [
        "pompom_main"
      ]
    },
    "find_pom_pom_skeptical": {
      "puzName": "find_pom_pom",
      "imageName": "goddog",
      "dialogue": "NUH UH! I AM A GREAT AND POWERFUL CELESTIAL!",
      "dialogOptions": [
        "Oh, ok. Sorry for my rudeness.",
        "YUH HUH!"
      ],
      "nextId": [
        "pompom_wins",
        "find_pom_pom_yuh_huh_1"
      ]
    },
    "find_pom_pom_yuh_huh_1": {
      "puzName": "find_pom_pom",
      "imageName": "goddog",
      "dialogue": "NUH UH!",
      "dialogOptions": [
        "Oh, you’re right. A fake dog god would never have said nuh uh twice.",
        "YUH HUH!"
      ],
      "nextId": [
        "pompom_wins",
        "find_pom_pom_yuh_huh_2"
      ]
    },
    "find_pom_pom_yuh_huh_2": {
      "puzName": "find_pom_pom",
      "imageName": "goddog",
      "dialogue": "NUH UH!",
      "dialogOptions": [
        "Oh, I see now. Sorry, I mistook you for some other dogs in a trench coat.",
        "YUH HUH!"
      ],
      "nextId": [
        "pompom_wins",
        "find_pom_pom_yuh_huh_3"
      ]
    },
    "find_pom_pom_yuh_huh_3": {
      "puzName": "find_pom_pom",
      "imageName": "goddog",
      "dialogue": "NUH UH TIMES INFINITY HAHAHA I WIN!!! AHAHAHA Whu-wh--whoooahh!!!",
      "nextId": [
        "fallen_god_dog"
      ]
    },
    "fallen_god_dog": {
      "puzName": "find_pom_pom",
      "imageName": "fallengoddog",
      "dialogue": "...",
      "dialogOptions": [
        "..."
      ],
      "nextId": [
        "keyframe_find_pom_pom_3"
      ]
    },
    "keyframe_find_pom_pom_3": {
      "puzName": "find_pom_pom",
      "imageName": "fallengoddog",
      "dialogue": "... ...",
      "dialogOptions": [
        "..."
      ],
      "nextId": [
        "keyframe_find_pom_pom_4"
      ]
    },
    "keyframe_find_pom_pom_4": {
      "puzName": "find_pom_pom",
      "imageName": "fallengoddog",
      "dialogue": "... ... ...",
      "dialogOptions": [
        "..."
      ],
      "nextId": [
        "keyframe_find_pom_pom_5"
      ]
    },
    "keyframe_find_pom_pom_5": {
      "puzName": "find_pom_pom",
      "imageName": "pompom_mopmop",
      "dialogue": "Ok fine, we were two dogs in a costume. )!fooW(",
      "dialogOptions": [
        "Nice to meet you."
      ],
      "nextId": [
        "pompom_main"
      ]
    },
    "pompom_wins": {
      "puzName": "find_pom_pom",
      "imageName": "goddog",
      "dialogue": "AHAHA THAT’S RIGHT! AHAHA AHAHAHAWhu-wh--whoooahh!!!",
      "nextId": [
        "fallen_god_dog"
      ]
    },
    "pompom_main": {
      "puzName": "find_pom_pom",
      "imageName": "pom_pom",
      "dialogue": "I’m Pom Pom!",
      "nextId": [
        "keyframe_find_pom_pom_6"
      ]
    },
    "keyframe_find_pom_pom_6": {
      "puzName": "find_pom_pom",
      "imageName": "mop_mop",
      "dialogue": "!poM poM m‘I",
      "nextId": [
        "keyframe_find_pom_pom_7"
      ]
    },
    "keyframe_find_pom_pom_7": {
      "puzName": "find_pom_pom",
      "imageName": "stelle-thinking",
      "dialogue": "hi there! we could use your help...",
      "nextId": [
        "keyframe_find_pom_pom_8"
      ]
    },
    "keyframe_find_pom_pom_8": {
      "puzName": "find_pom_pom",
      "imageName": "pom_pom",
      "dialogue": "Of course we will grant your wish, little one...",
      "nextId": [
        "keyframe_find_pom_pom_9"
      ]
    },
    "keyframe_find_pom_pom_9": {
      "puzName": "find_pom_pom",
      "imageName": "pom_pom",
      "dialogue": "ONCE YOU OFFER US TREATS!",
      "nextId": [
        "keyframe_find_pom_pom_10"
      ]
    },
    "keyframe_find_pom_pom_10": {
      "puzName": "find_pom_pom",
      "imageName": "mop_mop",
      "dialogue": "!!!STAERT",
      "nextId": [
        "keyframe_find_pom_pom_11"
      ]
    },
    "keyframe_find_pom_pom_11": {
      "puzName": "find_pom_pom",
      "imageName": "pom_pom",
      "dialogue": "AND SCRATCHES!!!!",
      "nextId": [
        "keyframe_find_pom_pom_12"
      ]
    },
    "keyframe_find_pom_pom_12": {
      "puzName": "find_pom_pom",
      "imageName": "mop_mop",
      "dialogue": "YAY YAY GMO ??OOT SEHCTARCS",
      "nextId": [
        "keyframe_find_pom_pom_13"
      ]
    },
    "keyframe_find_pom_pom_13": {
      "puzName": "find_pom_pom",
      "imageName": "pompom_mopmop",
      "dialogue": "YAY YAY",
      "nextId": [
        "keyframe_find_pom_pom_14"
      ]
    },
    "keyframe_find_pom_pom_14": {
      "puzName": "find_pom_pom",
      "endCutscene": true,
      "imageName": "stelle-thinking",
      "dialogue": "ahhhhhhh x.x ok looks like we have to figure out what treat they want...",
      "nextId": [],
      "redirectPath": "/puzzle/pom_pom_and_mop_mop"
    },
    "keyframe_find_kid_0": {
      "puzName": "find_kid",
      "imageName": "stelle-happy",
      "dialogue": "oh! there’s the Kid!",
      "nextId": [
        "keyframe_find_kid_1"
      ]
    },
    "keyframe_find_kid_1": {
      "puzName": "find_kid",
      "imageName": "kid",
      "dialogue": "Hi there Stelle and [points towards you] whatever you are!! Can you please help me? Something super important is missing!!!",
      "nextId": [
        "keyframe_find_kid_2"
      ]
    },
    "keyframe_find_kid_2": {
      "puzName": "find_kid",
      "imageName": "stelle-thinking",
      "dialogue": "do you mean the stars? we are trying the best we can!",
      "nextId": [
        "keyframe_find_kid_3"
      ]
    },
    "keyframe_find_kid_3": {
      "puzName": "find_kid",
      "endCutscene": true,
      "imageName": "kid",
      "dialogue": "No I meant my blocks! My blocks are all missing! Please HELP!!",
      "nextId": [],
      "redirectPath": "/puzzle/kid"
    },
    "keyframe_find_olive_0": {
      "puzName": "find_olive",
      "imageName": "stelle-happy",
      "dialogue": "oh, it’s Olive!",
      "nextId": [
        "keyframe_find_olive_1"
      ]
    },
    "keyframe_find_olive_1": {
      "puzName": "find_olive",
      "imageName": "olive",
      "dialogue": "my penlights... i neeeeeeed them...",
      "dialogOptions": [
        "What do you need them for?",
        "Oh, will those help light the night sky?"
      ],
      "nextId": [
        "olive-idols",
        "olive-idols"
      ]
    },
    "olive-idols": {
      "puzName": "find_olive",
      "imageName": "olive",
      "dialogue": "my idols... i need them to cheer for my idols 彡(TTTT_TTTT)ミ!",
      "nextId": [
        "keyframe_find_olive_2"
      ]
    },
    "keyframe_find_olive_2": {
      "puzName": "find_olive",
      "imageName": "stelle-thinking",
      "dialogue": "oh. that sounds.... important?",
      "nextId": [
        "keyframe_find_olive_3"
      ]
    },
    "keyframe_find_olive_3": {
      "puzName": "find_olive",
      "endCutscene": true,
      "imageName": "olive",
      "dialogue": "baka, of course it’s important!!! if i’m not their number one ultimate fan, desu, what even am i???",
      "nextId": [],
      "redirectPath": "/puzzle/olive"
    },
    "keyframe_find_lions_0": {
      "puzName": "find_lions",
      "imageName": "stelle",
      "dialogue": "yikes, it’s the Ten Lions!",
      "dialogOptions": [
        "Are you scared of them?"
      ],
      "nextId": [
        "keyframe_find_lions_1"
      ]
    },
    "keyframe_find_lions_1": {
      "puzName": "find_lions",
      "imageName": "stelle-thinking",
      "dialogue": "i mean, yeah! who’d you think would win in a fight, me or Ten Lions?",
      "dialogOptions": [
        "Uh.. Ten Lions?",
        "You, of course!"
      ],
      "nextId": [
        "lions-fight-lions",
        "lions-fight-stelle"
      ]
    },
    "lions-fight-lions": {
      "puzName": "find_lions",
      "imageName": "stelle",
      "dialogue": "duh! and look, here they come!",
      "nextId": [
        "lions-come"
      ]
    },
    "lions-fight-stelle": {
      "puzName": "find_lions",
      "imageName": "stelle",
      "dialogue": "??? what did you think i would do? twinkle them into submission??",
      "nextId": [
        "lions-come"
      ]
    },
    "lions-come": {
      "puzName": "find_lions",
      "imageName": "lions",
      "dialogue": "RAWR!!! ×10",
      "nextId": [
        "keyframe_find_lions_2"
      ]
    },
    "keyframe_find_lions_2": {
      "puzName": "find_lions",
      "imageName": "stelle",
      "dialogue": "eep!",
      "dialogOptions": [
        "Wait, they don’t look quite right..."
      ],
      "nextId": [
        "keyframe_find_lions_3"
      ]
    },
    "keyframe_find_lions_3": {
      "puzName": "find_lions",
      "imageName": "lions",
      "dialogue": "HOW RUDE! HAVE YOU EVER SEEN 10 LIONS??? ×10",
      "dialogOptions": [
        "I suppose not...",
        "Yes."
      ],
      "nextId": [
        "lions-no",
        "lions-yes"
      ]
    },
    "lions-no": {
      "puzName": "find_lions",
      "imageName": "lions",
      "dialogue": "THAT’S WHAT WE THOUGHT!!! WE CHALLENGE YOU TO A BATTLE!!! ×10",
      "nextId": [
        "lions-conclusion"
      ]
    },
    "lions-yes": {
      "puzName": "find_lions",
      "imageName": "lions",
      "dialogue": "...",
      "nextId": [
        "keyframe_find_lions_4"
      ]
    },
    "keyframe_find_lions_4": {
      "puzName": "find_lions",
      "imageName": "lions",
      "dialogue": "2nd row from the top, on the right: Well actually, maybe they have a point. Our appearances are mostly based off of book---\\nLIARS!!! WE CHALLENGE YOU TO A BATTLE!!! ×9",
      "nextId": [
        "lions-conclusion"
      ]
    },
    "lions-conclusion": {
      "puzName": "find_lions",
      "imageName": "stelle",
      "dialogue": "oh no!",
      "nextId": [
        "keyframe_find_lions_5"
      ]
    },
    "keyframe_find_lions_5": {
      "puzName": "find_lions",
      "imageName": "lions",
      "dialogue": "...a POETRY BATTLE!!! ×10",
      "nextId": [
        "keyframe_find_lions_6"
      ]
    },
    "keyframe_find_lions_6": {
      "puzName": "find_lions",
      "endCutscene": true,
      "imageName": "stelle",
      "dialogue": "that’s even worse...",
      "nextId": [],
      "redirectPath": "/puzzle/ten_lions"
    },
    "keyframe_find_rock_lobster_0": {
      "puzName": "find_rock_lobster",
      "imageName": "stelle-happy",
      "dialogue": "oh hey! it’s Rock Lobster!",
      "nextId": [
        "keyframe_find_rock_lobster_1"
      ]
    },
    "keyframe_find_rock_lobster_1": {
      "puzName": "find_rock_lobster",
      "imageName": "rock_lobster",
      "dialogue": "Hey! What is up, my shining star? Oh right, it’s me.",
      "nextId": [
        "keyframe_find_rock_lobster_2"
      ]
    },
    "keyframe_find_rock_lobster_2": {
      "puzName": "find_rock_lobster",
      "imageName": "stelle",
      "dialogue": "don’t mind them... they’re kind of new around here.",
      "nextId": [
        "keyframe_find_rock_lobster_3"
      ]
    },
    "keyframe_find_rock_lobster_3": {
      "puzName": "find_rock_lobster",
      "imageName": "rock_lobster",
      "dialogue": "I was at the height of my stardom down on Earth, right before my dramatic upfall...",
      "nextId": [
        "keyframe_find_rock_lobster_4"
      ]
    },
    "keyframe_find_rock_lobster_4": {
      "puzName": "find_rock_lobster",
      "imageName": "stelle-thinking",
      "dialogue": "here they go again...",
      "nextId": [
        "keyframe_find_rock_lobster_5"
      ]
    },
    "keyframe_find_rock_lobster_5": {
      "puzName": "find_rock_lobster",
      "imageName": "rock_lobster",
      "dialogue": "...when some overly ambitious fans yeeted me straight into space!",
      "nextId": [
        "keyframe_find_rock_lobster_6"
      ]
    },
    "keyframe_find_rock_lobster_6": {
      "puzName": "find_rock_lobster",
      "imageName": "rock_lobster",
      "dialogue": "Turned out to be the best move of my life! Now I’m among the literal stars!",
      "nextId": [
        "keyframe_find_rock_lobster_7"
      ]
    },
    "keyframe_find_rock_lobster_7": {
      "puzName": "find_rock_lobster",
      "endCutscene": true,
      "imageName": "rock_lobster",
      "dialogue": "Had to change up my career though, to keep my name on-brand. After all, there’s no sound in space. <Twemoji tag=\\"span\\">✨💎✨</Twemoji>",
      "dialogOptions": [
        "Thanks Rock Lobster! What ever would we do without you?"
      ],
      "nextId": [],
      "redirectPath": "/puzzle/rock_lobster"
    },
    "keyframe_find_farmer_0": {
      "puzName": "find_farmer",
      "imageName": "stelle-happy",
      "dialogue": "hey, that’s the Funny Farmer!",
      "nextId": [
        "keyframe_find_farmer_1"
      ]
    },
    "keyframe_find_farmer_1": {
      "puzName": "find_farmer",
      "imageName": "stelle-thinking",
      "dialogue": "(they’re not really that funny, but we try to be supportive)",
      "dialogOptions": [
        "Oh?",
        "Why are they called the Funny Farmer?"
      ],
      "nextId": [
        "keyframe_find_farmer_2"
      ]
    },
    "keyframe_find_farmer_2": {
      "puzName": "find_farmer",
      "imageName": "farmer",
      "dialogue": "Howdy, y’all! _Wheat_’s up?",
      "dialogOptions": [
        "(groan)",
        "What’s with the spacesuit?"
      ],
      "nextId": [
        "farmer-groan",
        "farmer-spacesuit"
      ]
    },
    "farmer-spacesuit": {
      "puzName": "find_farmer",
      "imageName": "farmer",
      "dialogue": "It’s one fine suit, innit? Had it since I blasted off this ’em rock, I did!",
      "dialogOptions": [
        "But you’re a Celestial?"
      ],
      "nextId": [
        "keyframe_find_farmer_3"
      ]
    },
    "keyframe_find_farmer_3": {
      "puzName": "find_farmer",
      "imageName": "farmer",
      "dialogue": "Darn if I know! I be mindin’ my own business tendin’ to these ’ere space potaters when all of a sudden everyone started callin’ me a “Celestial” or so have ya, and I be playin’ the part e’er since!",
      "dialogOptions": [
        "Whoa! I wanna be a Celestial too!"
      ],
      "nextId": [
        "keyframe_find_farmer_4"
      ]
    },
    "keyframe_find_farmer_4": {
      "puzName": "find_farmer",
      "imageName": "farmer",
      "dialogue": "Sure thing, young’un! If ya read yer books and work yer _donkey_ off like I did, I bet ya you can _grow_ to be an astronaut like me! Then I s’pose ya gotta go get yerself stuck on some moon and make ’em spud for some eighty-odd _ears_...",
      "dialogOptions": [
        "(Why are these jokes so corny...)",
        "Maybe another time..."
      ],
      "nextId": [
        "farmer-groan"
      ]
    },
    "farmer-groan": {
      "puzName": "find_farmer",
      "imageName": "farmer",
      "dialogue": "Hey, I _herd_ things got a lil’ _hay_-wire ’round here! My farms took a real _bleating_!",
      "dialogOptions": [
        "Yeah, we need your help!"
      ],
      "nextId": [
        "keyframe_find_farmer_5"
      ]
    },
    "keyframe_find_farmer_5": {
      "puzName": "find_farmer",
      "imageName": "farmer",
      "dialogue": "I’d have to fix ’em farms first. I ain’t nothin’ without my farms!",
      "dialogOptions": [
        "That won’t take too long, I hope?"
      ],
      "nextId": [
        "keyframe_find_farmer_6"
      ]
    },
    "keyframe_find_farmer_6": {
      "puzName": "find_farmer",
      "endCutscene": true,
      "imageName": "farmer",
      "dialogue": "Last time I did that, the cows came home!",
      "dialogOptions": [
        "...Maybe we can help?"
      ],
      "nextId": [],
      "redirectPath": "/puzzle/funny_farmer"
    },
    "keyframe_gather_celestials_0": {
      "puzName": "gather_celestials",
      "imageName": "stelle-happy",
      "dialogue": "wow, you did it! you saved the sky! the Celestials are back, and so are the stars!",
      "nextId": [
        "keyframe_gather_celestials_1"
      ]
    },
    "keyframe_gather_celestials_1": {
      "puzName": "gather_celestials",
      "imageName": "stelle-thinking",
      "dialogue": "well, most of them. and they still look kinda unstable. i wonder what the Celestials are up to, i kinda thought they would’ve fixed things already",
      "nextId": [
        "keyframe_gather_celestials_2"
      ]
    },
    "keyframe_gather_celestials_2": {
      "puzName": "gather_celestials",
      "imageName": "stelle",
      "dialogue": "hey, Big Branch! all the Celestials are back! why are the stars still acting weird?",
      "nextId": [
        "keyframe_gather_celestials_3"
      ]
    },
    "keyframe_gather_celestials_3": {
      "puzName": "gather_celestials",
      "imageName": "big_branch",
      "dialogue": "The sky, not mine to fix.",
      "nextId": [
        "keyframe_gather_celestials_4"
      ]
    },
    "keyframe_gather_celestials_4": {
      "puzName": "gather_celestials",
      "imageName": "big_branch",
      "dialogue": "Alone— ineffectual. Celestial matrix is work of Seven.",
      "dialogOptions": [
        "I’m not sure I understand.",
        "Let’s get the others, then!"
      ],
      "nextId": [
        "gather_celestials_explain",
        "gather_celestials_gather"
      ]
    },
    "gather_celestials_explain": {
      "puzName": "gather_celestials",
      "imageName": "big_branch",
      "dialogue": "Cosmic energy: not siphoned, rather, induced. Field, pervasive; interaction, nonlinear; oscillation begets oscillation. Careful perturbing is Celestials’ call.",
      "dialogOptions": [
        "Mmhmm.",
        "That’s great and all, but we should go get the others!"
      ],
      "nextId": [
        "gather_celestials_explain_2",
        "gather_celestials_gather"
      ]
    },
    "gather_celestials_explain_2": {
      "puzName": "gather_celestials",
      "imageName": "big_branch",
      "dialogue": "Rare particles carry interaction. Primary source: plasma ejection. Erratically, stars emit key resource.",
      "dialogOptions": [
        "(Keep listening.)",
        "Interesting. Shall we go get the others?"
      ],
      "nextId": [
        "gather_celestials_explain_3",
        "gather_celestials_gather"
      ]
    },
    "gather_celestials_explain_3": {
      "puzName": "gather_celestials",
      "imageName": "big_branch",
      "dialogue": "Branches: conduits. Timing delicate; alignment paramount. Misplaced channels draw cosmic dust, congesting pores.",
      "dialogOptions": [
        "(Nod.)",
        "Right, so we’re gonna need the others. Let’s get them!"
      ],
      "nextId": [
        "gather_celestials_explain_4",
        "gather_celestials_gather"
      ]
    },
    "gather_celestials_explain_4": {
      "puzName": "gather_celestials",
      "imageName": "big_branch",
      "dialogue": "Stellar plasma a chaotic system. Accurate prediction necessitates precise instrumentation.",
      "dialogOptions": [
        "Yep.",
        "Shall we get the others then?"
      ],
      "nextId": [
        "gather_celestials_explain_5",
        "gather_celestials_gather"
      ]
    },
    "gather_celestials_explain_5": {
      "puzName": "gather_celestials",
      "imageName": "big_branch",
      "dialogue": "Fluctuations modulate other fields; may constrain internal state. Models incomplete. Computational forecasting remains out of reach.",
      "dialogOptions": [
        "Aww.",
        "I think I’ve heard enough, thanks. Shall we get the others?"
      ],
      "nextId": [
        "gather_celestials_explain_6",
        "gather_celestials_gather"
      ]
    },
    "gather_celestials_explain_6": {
      "puzName": "gather_celestials",
      "imageName": "big_branch",
      "dialogue": "Yet, star-obsessed Olive lends successful predictions. Heuristics unknown. Blocks amplify latent signals; taters make a tasty snack.",
      "dialogOptions": [
        "Olive! So you need Olive. Should we get them then?"
      ],
      "nextId": [
        "gather_celestials_gather"
      ]
    },
    "gather_celestials_gather": {
      "puzName": "gather_celestials",
      "imageName": "big_branch",
      "dialogue": "Possible, but— not without issue.",
      "dialogOptions": [
        "What issue?"
      ],
      "nextId": [
        "keyframe_gather_celestials_5"
      ]
    },
    "keyframe_gather_celestials_5": {
      "puzName": "gather_celestials",
      "imageName": "big_branch",
      "dialogue": "Events of night present preliminary proof. Stellar maintenance no longer other Celestials’ intention.",
      "dialogOptions": [
        "What happ-"
      ],
      "nextId": [
        "keyframe_gather_celestials_6"
      ]
    },
    "keyframe_gather_celestials_6": {
      "puzName": "gather_celestials",
      "imageName": "lions",
      "dialogue": "RAWR!!! ×10 We’ll tell you what happened!!! ×10",
      "dialogOptions": [
        "Woah! Where’d you pop up from?"
      ],
      "nextId": [
        "keyframe_gather_celestials_7"
      ]
    },
    "keyframe_gather_celestials_7": {
      "puzName": "gather_celestials",
      "imageName": "lions",
      "dialogue": "What happened was that all the others went MAD!!! ×10 Hurling stuff around, jumping all over the place!!! ×10",
      "nextId": [
        "keyframe_gather_celestials_8"
      ]
    },
    "keyframe_gather_celestials_8": {
      "puzName": "gather_celestials",
      "imageName": "lions",
      "dialogue": "Don’t act all INNOCENT, you daft block of wood! ×10 We ALL know you were doing it too! ×10",
      "nextId": [
        "keyframe_gather_celestials_9"
      ]
    },
    "keyframe_gather_celestials_9": {
      "puzName": "gather_celestials",
      "imageName": "big_branch",
      "dialogue": "Accusations misplaced. Commotion precedes action driven by concern for Kid. Agents of chaos: Lions more likely.",
      "nextId": [
        "keyframe_gather_celestials_10"
      ]
    },
    "keyframe_gather_celestials_10": {
      "puzName": "gather_celestials",
      "imageName": "olive",
      "dialogue": "hmph, don’t try to wormwood your way out of this. we all saw you messing the sky up. you too, lions \\\\>\\\\>\\\\>\\\\>‸\\\\<\\\\<\\\\<\\\\<",
      "dialogOptions": [
        "Olive? You’re here too?"
      ],
      "nextId": [
        "keyframe_gather_celestials_11"
      ]
    },
    "keyframe_gather_celestials_11": {
      "puzName": "gather_celestials",
      "imageName": "rock_lobster",
      "dialogue": "Why wouldn’t Olive join the party? They’re all part of the same band. <Twemoji tag=\\"span\\">🎸🎵</Twemoji>",
      "nextId": [
        "keyframe_gather_celestials_12"
      ]
    },
    "keyframe_gather_celestials_12": {
      "puzName": "gather_celestials",
      "imageName": "olive",
      "dialogue": "yare yare, you’re one to talk. so much chaos, all from a dumb rock.",
      "nextId": [
        "keyframe_gather_celestials_13"
      ]
    },
    "keyframe_gather_celestials_13": {
      "puzName": "gather_celestials",
      "imageName": "stelle",
      "dialogue": "Hey, don’t start-",
      "nextId": [
        "keyframe_gather_celestials_14"
      ]
    },
    "keyframe_gather_celestials_14": {
      "puzName": "gather_celestials",
      "imageName": "farmer",
      "dialogue": "Now now, what’s goin’ on here? Tryin’ to cause another ruckus? Ya act small, but I know what you are! A _bull_! If the universe were a china shop then you’re a _bull_!",
      "nextId": [
        "keyframe_gather_celestials_15"
      ]
    },
    "keyframe_gather_celestials_15": {
      "puzName": "gather_celestials",
      "imageName": "big_branch",
      "dialogue": "Observe: The matador speaks of bulls.",
      "nextId": [
        "keyframe_gather_celestials_16"
      ]
    },
    "keyframe_gather_celestials_16": {
      "puzName": "gather_celestials",
      "imageName": "olive",
      "dialogue": "!!! you were my onii-chan idol, but i can’t stan you anymore~~",
      "nextId": [
        "keyframe_gather_celestials_17"
      ]
    },
    "keyframe_gather_celestials_17": {
      "puzName": "gather_celestials",
      "imageName": "pom_pom",
      "dialogue": "There you are! Big Bad Branch! Rascal Rock, Lying Lions, Unfunny Farmer-",
      "nextId": [
        "keyframe_gather_celestials_18"
      ]
    },
    "keyframe_gather_celestials_18": {
      "puzName": "gather_celestials",
      "imageName": "farmer",
      "dialogue": "Hey! Don’t ya call me that, _pig_-",
      "nextId": [
        "keyframe_gather_celestials_19"
      ]
    },
    "keyframe_gather_celestials_19": {
      "puzName": "gather_celestials",
      "imageName": "mop_mop",
      "dialogue": "!mud-mud ,sgod er‘eW",
      "nextId": [
        "keyframe_gather_celestials_20"
      ]
    },
    "keyframe_gather_celestials_20": {
      "puzName": "gather_celestials",
      "imageName": "lions",
      "dialogue": "RAWR!! ×10 And we’re LIONS!! ×10",
      "nextId": [
        "keyframe_gather_celestials_21"
      ]
    },
    "keyframe_gather_celestials_21": {
      "puzName": "gather_celestials",
      "imageName": "olive",
      "dialogue": "of course <Twemoji tag=\\"span\\">😤</Twemoji>. we should have known from the start that the sky is no place for a lion, let alone ten wet lions or whatever.",
      "nextId": [
        "keyframe_gather_celestials_22"
      ]
    },
    "keyframe_gather_celestials_22": {
      "puzName": "gather_celestials",
      "imageName": "rock_lobster",
      "dialogue": "I kinda dig Rascal Rock, actually. <Twemoji tag=\\"span\\">😈</Twemoji>",
      "nextId": [
        "keyframe_gather_celestials_23"
      ]
    },
    "keyframe_gather_celestials_23": {
      "puzName": "gather_celestials",
      "imageName": "farmer",
      "dialogue": "Yeah, shoulda gone with Lousy Lobster. And let’s not forget Awful Olive.",
      "nextId": [
        "keyframe_gather_celestials_24"
      ]
    },
    "keyframe_gather_celestials_24": {
      "puzName": "gather_celestials",
      "imageName": "olive",
      "dialogue": "usooooooo?!!??!?! calling us names now, kisama? did you forget, you’re not even a real tennin (that’s japanese for “celestial”)!",
      "nextId": [
        "keyframe_gather_celestials_25"
      ]
    },
    "keyframe_gather_celestials_25": {
      "puzName": "gather_celestials",
      "imageName": "rock_lobster",
      "dialogue": "*gasp*",
      "nextId": [
        "keyframe_gather_celestials_26"
      ]
    },
    "keyframe_gather_celestials_26": {
      "puzName": "gather_celestials",
      "imageName": "big_branch",
      "dialogue": "*gasp*",
      "nextId": [
        "keyframe_gather_celestials_27"
      ]
    },
    "keyframe_gather_celestials_27": {
      "puzName": "gather_celestials",
      "imageName": "stelle",
      "dialogue": "*gasp*",
      "nextId": [
        "keyframe_gather_celestials_28"
      ]
    },
    "keyframe_gather_celestials_28": {
      "puzName": "gather_celestials",
      "imageName": "lions",
      "dialogue": "*GASP* ×10",
      "nextId": [
        "keyframe_gather_celestials_29"
      ]
    },
    "keyframe_gather_celestials_29": {
      "puzName": "gather_celestials",
      "imageName": "farmer",
      "dialogue": "...",
      "nextId": [
        "keyframe_gather_celestials_30"
      ]
    },
    "keyframe_gather_celestials_30": {
      "puzName": "gather_celestials",
      "imageName": "kid",
      "dialogue": "Hey... Please don’t fight. I don’t think any of us really wanted to mess things up. Maybe something weird happened and we don’t know?",
      "nextId": [
        "keyframe_gather_celestials_31"
      ]
    },
    "keyframe_gather_celestials_31": {
      "puzName": "gather_celestials",
      "imageName": "rock_lobster",
      "dialogue": "The Kid’s right. Let’s all take a chill pill and talk this out, like Celestials, eh?",
      "nextId": [
        "keyframe_gather_celestials_32"
      ]
    },
    "keyframe_gather_celestials_32": {
      "puzName": "gather_celestials",
      "imageName": "kid",
      "dialogue": "Maybe Stelle can help? I like Stelle, they found my blocks for me.",
      "nextId": [
        "keyframe_gather_celestials_33"
      ]
    },
    "keyframe_gather_celestials_33": {
      "puzName": "gather_celestials",
      "imageName": "stelle-thinking",
      "dialogue": "actually, it wasn’t me, it was this- <TeamDisplayNameDisplay noLink hideAdminLinks />? was that what you’re called?",
      "dialogOptions": [
        "Yeah!"
      ],
      "nextId": [
        "keyframe_gather_celestials_34"
      ]
    },
    "keyframe_gather_celestials_34": {
      "puzName": "gather_celestials",
      "imageName": "stelle",
      "dialogue": "they’ve been getting lots of stars back in the sky too, and they’re not even a Celestial!",
      "nextId": [
        "keyframe_gather_celestials_35"
      ]
    },
    "keyframe_gather_celestials_35": {
      "puzName": "gather_celestials",
      "endCutscene": true,
      "imageName": "kid",
      "dialogue": "Woah, that’s so cool! <TeamDisplayNameDisplay noLink hideAdminLinks />, can you help us?",
      "dialogOptions": [
        "Sure we can!"
      ],
      "nextId": [],
      "redirectPath": "/puzzle/night_of_the_celestials"
    },
    "keyframe_the_end_0": {
      "puzName": "the_end",
      "imageName": "kid",
      "dialogue": "Oh, a STAR POWER VACUUM?",
      "dialogOptions": [
        "That’s right!",
        "Haha, I get it."
      ],
      "nextId": [
        "keyframe_the_end_1"
      ]
    },
    "keyframe_the_end_1": {
      "puzName": "the_end",
      "imageName": "big_branch",
      "dialogue": "Vacuum fluctuations, a rare occurrence. Yet, conceivable; a strong sucker throws one for a spin.",
      "nextId": [
        "keyframe_the_end_2"
      ]
    },
    "keyframe_the_end_2": {
      "puzName": "the_end",
      "imageName": "olive",
      "dialogue": "so, it wasn’t any of us after all. i’m sorry i doubted you all!",
      "nextId": [
        "keyframe_the_end_3"
      ]
    },
    "keyframe_the_end_3": {
      "puzName": "the_end",
      "imageName": "pompom_mopmop",
      "dialogue": "Yay! Does that mean we’re friends again?",
      "nextId": [
        "keyframe_the_end_4"
      ]
    },
    "keyframe_the_end_4": {
      "puzName": "the_end",
      "imageName": "farmer",
      "dialogue": "I s’pose so! Shall we hit the _hay_?",
      "nextId": [
        "keyframe_the_end_5"
      ]
    },
    "keyframe_the_end_5": {
      "puzName": "the_end",
      "imageName": "lions",
      "dialogue": "RAWR!! ×10 Not so fast! ×10 We gotta fix the SKY first!!! ×10",
      "nextId": [
        "keyframe_the_end_6"
      ]
    },
    "keyframe_the_end_6": {
      "puzName": "the_end",
      "imageName": "rock_lobster",
      "dialogue": "Then let’s rock this! ~☆",
      "nextId": [
        "keyframe_the_end_7"
      ]
    },
    "keyframe_the_end_7": {
      "puzName": "the_end",
      "imageName": "stelle",
      "dialogue": "...",
      "nextId": [
        "keyframe_the_end_8"
      ]
    },
    "keyframe_the_end_8": {
      "puzName": "the_end",
      "imageName": "stelle",
      "dialogue": "there they go...",
      "nextId": [
        "keyframe_the_end_9"
      ]
    },
    "keyframe_the_end_9": {
      "puzName": "the_end",
      "imageName": "stelle",
      "dialogue": "it’s so nice seeing the Celestials working together again. and the sky... it’s brightening up once more. i guess wishes do have power after all.",
      "dialogOptions": [
        "They sure do!",
        "’Twas more the power of friendship, I’d say.",
        "It was mostly luck, really.",
        "Actually, it was spreadsheets."
      ],
      "nextId": [
        "keyframe_the_end_10"
      ]
    },
    "keyframe_the_end_10": {
      "puzName": "the_end",
      "imageName": "stelle-happy",
      "dialogue": "once again, thanks for saving the sky! but now, it looks like it’s time for me to go, too.",
      "dialogOptions": [
        "Aww, can’t you stay?"
      ],
      "nextId": [
        "keyframe_the_end_11"
      ]
    },
    "keyframe_the_end_11": {
      "puzName": "the_end",
      "imageName": "stelle",
      "dialogue": "no... it was great being with you, but i don’t belong here.",
      "dialogOptions": [
        "Will I get to see you again?"
      ],
      "nextId": [
        "keyframe_the_end_12"
      ]
    },
    "keyframe_the_end_12": {
      "puzName": "the_end",
      "imageName": "stelle-thinking",
      "dialogue": "who knows? we can only wish.",
      "dialogOptions": [
        "I sure will!"
      ],
      "nextId": [
        "keyframe_the_end_13"
      ]
    },
    "keyframe_the_end_13": {
      "puzName": "the_end",
      "imageName": "starry-sky",
      "dialogue": "And with that, the night comes to a close. As you look up upon the twinkling stars, you find comfort in the thought that you’ll never have to do another puzzle again.",
      "nextId": [
        "the-end-redirect"
      ]
    },
    "the-end-redirect": {
      "puzName": "the_end",
      "imageName": "starry-sky",
      "dialogue": "...",
      "nextId": [
        "keyframe_submitting_your_application_0"
      ]
    },
    "keyframe_submitting_your_application_0": {
      "puzName": "submitting_your_application",
      "imageName": "moonick",
      "dialogue": "An Application? Let me take a look.",
      "nextId": [
        "moonick-comment"
      ]
    },
    "moonick-comment": {
      "puzName": "submitting_your_application",
      "imageName": "moonick",
      "dialogue": "<MoonickDialogue />",
      "nextId": [
        "keyframe_submitting_your_application_1"
      ]
    },
    "keyframe_submitting_your_application_1": {
      "puzName": "submitting_your_application",
      "imageName": "moonick",
      "dialogue": "Please wait while I prepare the paperwork.",
      "nextId": [
        "moonick-wait-start"
      ]
    },
    "moonick-wait-start": {
      "puzName": "submitting_your_application",
      "imageName": "moonick",
      "dialogue": "...",
      "nextId": [
        "keyframe_submitting_your_application_2"
      ]
    },
    "keyframe_submitting_your_application_2": {
      "puzName": "submitting_your_application",
      "imageName": "moonick",
      "dialogue": "..........",
      "nextId": [
        "keyframe_submitting_your_application_3"
      ]
    },
    "keyframe_submitting_your_application_3": {
      "puzName": "submitting_your_application",
      "imageName": "moonick",
      "dialogue": "................",
      "dialogOptions": [
        "(Wait.)",
        "...Is it looking alright?",
        "...Have I seen you before?"
      ],
      "nextId": [
        "moonick-wait-start",
        "moonick-looking-alright",
        "moonick-seen-before"
      ]
    },
    "moonick-looking-alright": {
      "puzName": "submitting_your_application",
      "imageName": "moonick",
      "dialogue": "Oh, sorry, my mind wandered...",
      "dialogOptions": [
        "What’s troubling you?"
      ],
      "nextId": [
        "keyframe_submitting_your_application_4"
      ]
    },
    "keyframe_submitting_your_application_4": {
      "puzName": "submitting_your_application",
      "imageName": "moonick",
      "dialogue": "Oh, I don’t want to bother you... it’s just been a rough time...",
      "dialogOptions": [
        "Aww, it’s alright, I’m happy to listen..."
      ],
      "nextId": [
        "moonick-debt"
      ]
    },
    "moonick-seen-before": {
      "puzName": "submitting_your_application",
      "imageName": "moonick",
      "dialogue": "Hm? I’m not sure I recognize you, sorry...",
      "dialogOptions": [
        "...Do “Dryads” ring a bell?",
        "...Do you know anything about Bees?",
        "...Are Dinosaurs a thing?",
        "...Boars?"
      ],
      "nextId": [
        "keyframe_submitting_your_application_5"
      ]
    },
    "keyframe_submitting_your_application_5": {
      "puzName": "submitting_your_application",
      "imageName": "moonick",
      "dialogue": "Oh, them? They’re all downstairs, with the others... having another big dessert party... while I’m here...",
      "dialogOptions": [
        "Oh no! Are you not allowed to join them?"
      ],
      "nextId": [
        "moonick-debt"
      ]
    },
    "moonick-debt": {
      "puzName": "submitting_your_application",
      "imageName": "moonick",
      "dialogue": "It’s just, I’m kinda... in a huge debt. I made an error in my tax return, and now I owe the Bovine Tax Authority a whole puzzle! But, I don’t know how to write a puzzle... so I’m stuck here... forever...",
      "dialogOptions": [
        "A puzzle? Hey, I just wrote you one!"
      ],
      "nextId": [
        "keyframe_submitting_your_application_6"
      ]
    },
    "keyframe_submitting_your_application_6": {
      "puzName": "submitting_your_application",
      "imageName": "moonick",
      "dialogue": "Oh... this one? Oh no, this Application is for your Free Puzzle, not for me!",
      "dialogOptions": [
        "Oh... but, what if I gave it to you instead?"
      ],
      "nextId": [
        "keyframe_submitting_your_application_7"
      ]
    },
    "keyframe_submitting_your_application_7": {
      "puzName": "submitting_your_application",
      "imageName": "moonick",
      "dialogue": "But then, you won’t get your Free Puzzle! Would you really give up an entire puzzle, just for me?",
      "nextId": [
        "moonick-decide"
      ]
    },
    "moonick-decide": {
      "puzName": "submitting_your_application",
      "imageName": "moonick",
      "dialogue": "**What would you do?**<br/>\\nYour choice is irreversible.",
      "dialogOptions": [
        "Free Puzzle!",
        "Free Moonick!"
      ],
      "nextId": [
        "moonick-free-puzzle",
        "moonick-free-moonick"
      ],
      "dialogOptionsReqs": [
        "not-moonick-free-moonick",
        "not-moonick-free-puzzle"
      ]
    },
    "moonick-free-puzzle": {
      "puzName": "submitting_your_application",
      "imageName": "moonick",
      "dialogue": "...",
      "nextId": [
        "keyframe_submitting_your_application_8"
      ],
      "keyframeReq": "moonick-free-puzzle"
    },
    "keyframe_submitting_your_application_8": {
      "puzName": "submitting_your_application",
      "imageName": "moonick",
      "dialogue": "That’s fair, it’s your puzzle, after all.",
      "nextId": [
        "keyframe_submitting_your_application_9"
      ],
      "keyframeReq": "moonick-free-puzzle"
    },
    "keyframe_submitting_your_application_9": {
      "puzName": "submitting_your_application",
      "endCutscene": true,
      "imageName": "moonick",
      "dialogue": "I’ll send this right away for processing. Is there anything more I could help with?",
      "dialogOptions": [
        "That’s it for me, thank you!"
      ],
      "nextId": [],
      "keyframeReq": "moonick-free-puzzle"
    },
    "moonick-free-moonick": {
      "puzName": "submitting_your_application",
      "imageName": "moonick",
      "dialogue": "...Really? You’d do this just for me?",
      "dialogOptions": [
        "Yeah, really!"
      ],
      "nextId": [
        "keyframe_submitting_your_application_10"
      ],
      "keyframeReq": "moonick-free-moonick"
    },
    "keyframe_submitting_your_application_10": {
      "puzName": "submitting_your_application",
      "imageName": "moonick",
      "dialogue": "Thank you so much! I don’t know what to say...",
      "nextId": [
        "keyframe_submitting_your_application_11"
      ],
      "keyframeReq": "moonick-free-moonick"
    },
    "keyframe_submitting_your_application_11": {
      "puzName": "submitting_your_application",
      "endCutscene": true,
      "imageName": "moonick",
      "dialogue": "I’ll send this right over! I wish you all the best with your adventures!",
      "dialogOptions": [
        "You too!"
      ],
      "nextId": [],
      "keyframeReq": "moonick-free-moonick"
    }
  },
  "firstKeyframeIds": {
    "intro": "keyframe_intro_0",
    "first-wish": "keyframe_first-wish_0",
    "first-solve": "keyframe_first-solve_0",
    "brighter-skies": "keyframe_brighter-skies_0",
    "find_big_branch": "keyframe_find_big_branch_0",
    "find_pom_pom": "keyframe_find_pom_pom_0",
    "find_kid": "keyframe_find_kid_0",
    "find_olive": "keyframe_find_olive_0",
    "find_lions": "keyframe_find_lions_0",
    "find_rock_lobster": "keyframe_find_rock_lobster_0",
    "find_farmer": "keyframe_find_farmer_0",
    "gather_celestials": "keyframe_gather_celestials_0",
    "the_end": "keyframe_the_end_0",
    "submitting_your_application": "keyframe_submitting_your_application_0"
  }
}`,ho=`{
  "dust": {
    "name": "dust",
    "nounPrefix": "",
    "icon": "💨",
    "isHiddenFromTeamName": true
  },
  "gold": {
    "name": "gold",
    "nounPrefix": "",
    "icon": "🪙",
    "isHiddenFromTeamName": true
  },
  "fruit": {
    "name": "fruit",
    "maxNumPerTeam": 1,
    "nounPrefix": "a",
    "icon": "🥭"
  },
  "ship": {
    "name": "ship",
    "maxNumPerTeam": 1,
    "nounPrefix": "a",
    "icon": "🚢"
  },
  "sign": {
    "name": "sign",
    "maxNumPerTeam": 1,
    "nounPrefix": "a",
    "icon": "🪧"
  },
  "movie": {
    "name": "movie",
    "maxNumPerTeam": 1,
    "nounPrefix": "a",
    "icon": "🎥"
  },
  "neutron": {
    "name": "neutron",
    "maxNumPerTeam": 1,
    "nounPrefix": "a",
    "icon": "🔵"
  },
  "feather": {
    "name": "feather",
    "maxNumPerTeam": 1,
    "nounPrefix": "a",
    "icon": "🪶"
  },
  "jet": {
    "name": "jet",
    "maxNumPerTeam": 1,
    "nounPrefix": "a",
    "icon": "✈️"
  },
  "rock": {
    "name": "rock",
    "maxNumPerTeam": 1,
    "nounPrefix": "a",
    "icon": "🪨"
  },
  "apple": {
    "name": "apple",
    "maxNumPerTeam": 1,
    "nounPrefix": "an",
    "icon": "🍎"
  },
  "chart": {
    "name": "chart",
    "maxNumPerTeam": 1,
    "nounPrefix": "a",
    "icon": "📈"
  },
  "map": {
    "name": "map",
    "maxNumPerTeam": 1,
    "nounPrefix": "a",
    "icon": "🗺️"
  },
  "pole": {
    "name": "pole",
    "maxNumPerTeam": 1,
    "nounPrefix": "a",
    "icon": "🎣"
  },
  "battle": {
    "name": "battle",
    "maxNumPerTeam": 1,
    "nounPrefix": "a",
    "icon": "⚔"
  },
  "gate": {
    "name": "gate",
    "maxNumPerTeam": 1,
    "nounPrefix": "a",
    "icon": "⛩️"
  },
  "board": {
    "name": "board",
    "maxNumPerTeam": 1,
    "nounPrefix": "a",
    "icon": "🏻"
  },
  "fish": {
    "name": "fish",
    "maxNumPerTeam": 1,
    "nounPrefix": "a",
    "icon": "🐟"
  },
  "fox": {
    "name": "fox",
    "maxNumPerTeam": 1,
    "nounPrefix": "a",
    "icon": "🦊"
  },
  "flower": {
    "name": "flower",
    "maxNumPerTeam": 1,
    "nounPrefix": "a",
    "icon": "🌼"
  },
  "fire": {
    "name": "fire",
    "maxNumPerTeam": 1,
    "nounPrefix": "",
    "icon": "🔥"
  },
  "cigar": {
    "name": "cigar",
    "maxNumPerTeam": 1,
    "nounPrefix": "a",
    "icon": "🚬"
  },
  "comet": {
    "name": "comet",
    "maxNumPerTeam": 1,
    "nounPrefix": "a",
    "icon": "☄️"
  },
  "condor": {
    "name": "condor",
    "maxNumPerTeam": 1,
    "nounPrefix": "a",
    "icon": "🦅"
  },
  "fireworks": {
    "name": "fireworks",
    "maxNumPerTeam": 1,
    "nounPrefix": "",
    "icon": "🎆"
  },
  "butterfly": {
    "name": "butterfly",
    "maxNumPerTeam": 1,
    "nounPrefix": "a",
    "icon": "🦋"
  },
  "needle": {
    "name": "needle",
    "maxNumPerTeam": 1,
    "nounPrefix": "a",
    "icon": "🪡"
  },
  "paramecium": {
    "name": "paramecium",
    "maxNumPerTeam": 1,
    "nounPrefix": "a",
    "icon": "🦠"
  },
  "sculptor": {
    "name": "sculptor",
    "maxNumPerTeam": 1,
    "nounPrefix": "a",
    "icon": "👨‍🎨"
  },
  "sombrero": {
    "name": "sombrero",
    "maxNumPerTeam": 1,
    "nounPrefix": "a",
    "icon": "🤠"
  },
  "spider": {
    "name": "spider",
    "maxNumPerTeam": 1,
    "nounPrefix": "a",
    "icon": "🕷️"
  },
  "sunflower": {
    "name": "sunflower",
    "maxNumPerTeam": 1,
    "nounPrefix": "a",
    "icon": "🌻"
  },
  "surfboard": {
    "name": "surfboard",
    "maxNumPerTeam": 1,
    "nounPrefix": "a",
    "icon": "🏄"
  },
  "whale": {
    "name": "whale",
    "maxNumPerTeam": 1,
    "nounPrefix": "a",
    "icon": "🐋"
  },
  "apologems": {
    "name": "apologems",
    "maxNumPerTeam": 0,
    "nounPrefix": "",
    "icon": "💎",
    "isHiddenFromTeamName": true
  }
}`;class Kn{constructor({allPuzzles:e,allPuzzleContent:n,puzzleMessages:t,cannedHints:a,keyframesData:o,collectiblesData:r}){u(this,"puzzles");u(this,"sequences");u(this,"content");u(this,"puzzleMessages");u(this,"cannedHints");u(this,"keyframesData");u(this,"collectiblesData");u(this,"numNonCustomMicropuzzles");u(this,"numSolveCountPuzzles");u(this,"numSequencePuzzles");const{puzzles:i}=e;this.puzzles=new Map(i.map(h=>[h.puzName,h])),this.sequences=(()=>{const h=new Map;for(const{puzName:g,sequenceId:y}of i)y!==void 0&&(h.has(y)?h.get(y).push(g):h.set(y,[g]));return h})(),this.content=n,this.puzzleMessages=t,this.cannedHints=a,this.keyframesData=o,this.collectiblesData=r,this.numNonCustomMicropuzzles=[...this.puzzles.keys()].filter(h=>this.isMicropuzzle(h)).length,this.numSolveCountPuzzles=[...this.puzzles.values()].filter(h=>Wn(h)).length,this.numSequencePuzzles=[...this.puzzles.keys()].filter(h=>this.isSequencePuzzle(h)).length}*getPuzNames(e){yield*this.puzzles.keys(),yield*Object.keys(e)}*getPuzzles(e){yield*this.puzzles.values(),yield*Object.values(e)}getCannedHintsForPuzzle(e,n){return this.cannedHints[e]??n[e]??[]}*getCannedHints(e){yield*Object.entries(this.cannedHints),yield*Object.entries(e)}tryGetPuzzle(e,n){return this.puzzles.get(e)??n[e]??null}getPuzzle(e,n){const t=this.tryGetPuzzle(e,n);if(t===null)throw new Error(`could not resolve puzzle ${e}`);return t}getAnswerableCanonicalAnswer(e,n){const{answer:t}=this.getPuzzle(e,n);if(t===null)throw new Error(`${e} does not have an answer`);return t}isMicropuzzle(e){const n=this.tryGetPuzzle(e,{});return n===null?!0:ys(n)}isSequencePuzzle(e){const n=this.tryGetPuzzle(e,{});if(n===null)return!1;const{isStory:t=!1,isCelestial:a=!1,sequenceId:o}=n;return!t&&!a&&o!==void 0}}const mo=()=>new Kn({allPuzzles:{puzzles:[]},allPuzzleContent:{puzzles:{},solutions:{}},puzzleMessages:{},cannedHints:{},keyframesData:{keyframes:{},firstKeyframeIds:{}},collectiblesData:{}}),It=new Kn({allPuzzles:JSON.parse(oo),allPuzzleContent:JSON.parse(io),puzzleMessages:JSON.parse(ro),cannedHints:{...JSON.parse(lo),...JSON.parse(uo)},keyframesData:JSON.parse(co),collectiblesData:JSON.parse(ho)});function Zt(s){if(s.length===0)return null;const e=[];s.reduce((t,a)=>{const o=t+a.weight;return e.push(o),o},0);const n=Math.random()*e[e.length-1];for(let t=0;t<s.length;t++)if(n<e[t])return{choice:s[t].choice,index:t};return{choice:s[s.length-1].choice,index:s.length-1}}function xn(s){var e;return((e=Zt(s))==null?void 0:e.choice)??null}function Dn(s){for(;;){const e=Zt(s);if(e===null)return null;const n=e.choice();if(n!==null)return n;s.splice(e.index,1)}}var N=(s=>(s.ADMIN_ONLY="admin_only",s.READ="read",s.FULL="full",s))(N||{});const pn=s=>"getSlowSyncState"in s,Xt=[["(8)","(8)","(8)","(8)","(8)","(8)"],["*(8)","(6)","(6)","(6)","(6)","(6)","(6)","(6)"],["1(14)","2(14)","2(14)","3(14)","3(14)","3(14)"],["[8]","(10)","<12>","<12>","(10)"],["(16)","Q","Q","Q","Q"],["[6]","<11>","*R","/e","/e","/w","1N","2N"],["/ne","/ne","/nw","/nw","/se","/se","/sw","/sw","7Q","7Q"],["*[2]","*[2]","*[2]","*[2]","!N"],["!(19)","3/w","3/w","4/w","4/w"]],kt=`
2/ne 2/nw 2/se 2/sw *R (6) (6) (6) (6)
*Q */ne [7] [7] (7) (7) (7) (7) (7)
1(19) 1(19) 1(19) ![2] *[8] /s
`.trim(),He={maxNumBoards:Xt.length,initialNumBoards:1,numBoardsPerWish:2};class po{constructor(e,n,t){u(this,"ctx");u(this,"teamController");u(this,"state");this.ctx=e,this.teamController=n,this.state=t??{solvedBoards:{}}}getPermissions(e){return e.teamId===this.ctx.scope.teamId?N.FULL:N.ADMIN_ONLY}handleTeamProgressUpdate(){this.ctx.assign(this.ctx.scope,this.getState())}getNumBoardsSolved(){return Object.values(this.state.solvedBoards).filter(e=>e).length}getState(){const e=this.teamController.progressTracker.view.getNumBlocksWishes(),n=He.initialNumBoards+e*He.numBoardsPerWish;return{...this.state,numWishes:e,maxNumBoards:He.maxNumBoards,boardSpecs:Xt.slice(0,n),inscription:this.getNumBoardsSolved()>=rn.inscriptionNumBoards?kt:void 0}}getSlowSyncState(){const{solvedBoards:e}=this.state;return{solvedBoards:e}}async handleStepAsync(e,n){const{setBoardSolved:t}=n,a=rn.puzName,o=this.getState().boardSpecs.length;if(!e.conn.isAdmin&&!this.teamController.isPuzzleUnlocked(a))return e.sendStepResp(this.ctx.scope,"");if(t!==void 0){const{boardIndex:r,isSolved:i}=t;if(!Number.isInteger(r)||r<0||r>=o)return e.setBadRequest();i?this.state.solvedBoards[r]=!0:delete this.state.solvedBoards[r],this.ctx.update(this.ctx.scope,{solvedBoards:this.state.solvedBoards,inscription:this.getNumBoardsSolved()>=rn.inscriptionNumBoards?kt:null})}e.sendStepResp(this.ctx.scope,"")}}const fo={createEngine:({execCtx:s,engineCtx:e,initState:n})=>{const{controller:t,scope:a}=e,o=t.getTeamControllerIfExists(a.teamId);return o===null?s.setErrCodeAndReturn(D.INVALID_TEAM,null):new po(e,o,n)},engineIdentityFunc:s=>s},go={puz207:ln.UPPERCASE_LETTERS_ONLY,puz233:ln.UPPERCASE_LETTERS_ONLY,puz237:ln.UPPERCASE_LETTERS_OR_SYMBOLS_ONLY},bo={puz136:{min:1,max:6},puz177:{min:0,max:20}},yo={"puz212.1":"puz212"},zo={puz284:{JASON:"JASONVOORHEES"}},te={finalMetaPuzName:"night_of_the_celestials",unlockPrizePuzNames:["puz146","puz189"],hintPrizePuzNames:["puz231"],hintsDisabledUntilAllCannedHintsFoundPuzNames:["puz266","puz322"],repeatAnswerPuzName:"puz260",scrambleSequelPuzName:"puz173",cutscenePuzNames:{intro:"intro",firstUnlock:"first-wish",firstSolve:"first-solve",introCelestials:"brighter-skies",final:"the_end"},contentOnlyPuzzles:yo,answerNormalizations:go,rangeAnswers:bo,puzzleAnswerMaps:zo};var he=(s=>(s.MISC="misc",s.HINT_ANSWERED="hint_answered",s.GACHA="gacha",s.HOPE_POOL="hope_pool",s))(he||{}),P=(s=>(s.SOLVE_ATTEMPT="solve_attempt",s.UNLOCK_PUZZLE="unlock_puzzle",s.SPIN_GACHA="spin_gacha",s.GET_HOPE="get_hope",s.GET_EXTRA_GUESSES="get_extra_guesses",s.GET_CANNED_HINT="get_canned_hint",s.OPEN_CANNED_HINT="open_canned_hint",s.GET_HINT_TOKEN="get_hint_token",s.GET_COLLECTIBLE="get_collectible",s.CUTSCENE_CHOICE="cutscene_choice",s.GET_OLIVE_WISH="get_olive_wish",s.GET_BLOCKS_WISH="get_blocks_wish",s))(P||{});const wo=(s,e,n)=>({type:s,timestamp:e,info:n}),Qt=(s,e)=>{const n=s.events[e];if(n!==void 0)return n;const{events:t}=s,a={};return t[e]=a,a};var W=(s=>(s.ADD="add",s.REMOVE="remove",s))(W||{});const vo=s=>{const{events:e}=s;if(e!==void 0)return e;const n={};return s.events=n,n},pe=(s,e)=>{const n=vo(s),t=n[e];if(t!==void 0)return t;const a={};return n[e]=a,a},$t=(s,e)=>{if((s.isComplete??!1)!==(e.isComplete??!1))throw new Error("should not mix complete/incomplete updates when merging");for(const[n,t]of Qe(e.events??{})){if(t===void 0)continue;const a=pe(s,n);Object.assign(a,t)}e.hopeSnapshot!==void 0&&(s.hopeSnapshot=e.hopeSnapshot)},ea=(s,e)=>{for(const[n,t]of Qe(e.events??{})){if(t===void 0)continue;const a=Qt(s,n);for(const o in t){const r=Number(o),{type:i,eventRecord:h}=t[r];switch(i){case"add":a[r]=h;break;case"remove":delete a[r];break;default:throw new Error(`unexpected update type ${i}`)}}}e.hopeSnapshot!==void 0&&(s.hopeSnapshot={...e.hopeSnapshot})},To="Keep going!",Eo="Close, but the answer is actually LAST WORD.",De=Se("ㄱㅋㆁㄷㅌㄴㅂㅍㅁㅈㅊㅅㆆㅎㅇㄹㅿㆍㅡㅣㅗㅏㅜㅓㅛㅑㅠㅕ",ln.UPPERCASE_LETTERS_OR_SYMBOLS_ONLY),_o=s=>s.includes("LION")&&s.includes("EATING")&&(s.includes("POET")||s.includes("SHI")),Io=s=>{if(s.length>De.length)return"Your answer has too many characters.";if(s.length===De.length-1){const e=[];for(let n=0,t=0;t<De.length;t++)n<s.length&&s[n]===De[t]?n++:e.push(t);if(e.length===1)return`The ${yt(e[0]+1)} character is missing.`}if(s.length<De.length)return"Your answer has too few characters.";for(let e=0;e<s.length;e+=1)if(s[e]!==De[e])return`The ${yt(e+1)} character is incorrect.`;throw new Error("should not happen")},ko=s=>{const{answer:e}=s;return e!==null?e.split("/").map(n=>n.split("|")[0].trim()):null},na=(s,e,n)=>n.find(t=>Se(t,e)===s)??null,Ln=(s,e,n)=>na(s,e,n.split("|").map(t=>t.trim())),Ao=(s,e,n,t,a)=>{const{puzName:o,answerNormalization:r}=n,i=(()=>{var w;const z=Se(s,r);return((w=te.puzzleAnswerMaps[o])==null?void 0:w[z])??z})();if(i.length<=0)return{type:ae.NO_ANSWER};const h=na(i,r,a);if(o===te.repeatAnswerPuzName){const z=h!==null;return{type:ae.SUCCESS,info:{answer:h??i,isCorrect:z,isWrong:!z}}}if(h!==null)return{type:ae.TRIED_BEFORE,submittedAnswer:h};for(const[z,w]of Object.entries(t)){const E=Ln(i,r,z);if(E!==null)return{type:ae.SUCCESS,info:{answer:E,message:w??To}}}const g=te.rangeAnswers[o];if(g!==void 0){const z=parseFloat(i);if(Number.isNaN(z))return{type:ae.NOT_NUMERICAL,submittedAnswer:i};const w=new Intl.NumberFormat("en-US",{maximumFractionDigits:2,useGrouping:!1}).format(z),E=Number(w),O=E>=g.min&&E<=g.max;return{type:ae.SUCCESS,info:{answer:w,isCorrect:O,isWrong:!O,message:n.sequenceId==="google"&&O?"Correct! You may Google it now.":void 0}}}const y=e.split("/").map(z=>z.trim()),f=y.map(z=>Ln(i,r,z)).find(z=>z!==null)??null;if(f===null)return n.puzName==="puz326"?{type:ae.SUCCESS,info:{answer:i,message:Eo}}:n.puzName==="puz237"?{type:ae.SUCCESS,info:{answer:i,message:Io(i),isWrong:!0}}:n.puzName==="ten_lions"&&_o(i)?{type:ae.SUCCESS,info:{answer:i,message:`石室诗士施氏，嗜狮，誓食十狮。
氏时时适市视狮。
十时，适十狮适市。
是时，适施氏适市。
氏视是十狮，恃矢势，使是十狮逝世。
氏拾是十狮尸，适石室。
石室湿，氏使侍拭石室。
石室拭，氏始试食是十狮。
食时，始识是十狮尸，实十石狮尸。
试释是事。`}}:{type:ae.SUCCESS,info:{answer:i,isWrong:!0}};if(y.length>1){const z=a.map(E=>Se(E,r));if(!(y.filter(E=>![i,...z].some(O=>Ln(O,r,E)!==null)).length<=0))return{type:ae.SUCCESS,info:{answer:f,message:`${f} is one of the answers to this puzzle!`}}}return{type:ae.SUCCESS,info:{answer:f,isCorrect:!0}}},ta=(s,e)=>{const{cycleId:n}=e;return s===void 0||s.cycleId!==n?e:{cycleId:n,amt:s.amt+e.amt}};class So{constructor(e,n){u(this,"ctx");u(this,"teamController");this.ctx=e,this.teamController=n}getPermissions(e){return e.teamId===this.ctx.scope.teamId?N.FULL:N.ADMIN_ONLY}getState(){var t;const e=(()=>{const{hopePoolLatestCycleContribution:a}=this.teamController.progressTracker.view;if(a===void 0)return 0;const{cycleId:o,amt:r}=a;return this.ctx.server.getOrCreateEngineOrThrow({type:v.HOPE_POOL}).cycleId!==o?0:r})(),n=(t=this.teamController.progressTracker.view.puzzleSolves.get(Ie.puzName))==null?void 0:t.info.hopeGained;return{cycleContribution:e,hopeFromSolve:n}}broadcastAssign(){this.ctx.assign(this.ctx.scope,this.getState())}async handleStepAsync(e,n){const{contribute:t,claim:a}=n,o=Ie.puzName;if(!e.conn.isAdmin&&!this.teamController.isPuzzleUnlocked(o))return e.sendStepResp(this.ctx.scope,"");const r=this.ctx.server.getOrCreateEngineOrThrow({type:v.HOPE_POOL});if(t!==void 0){const i=t;return Number.isInteger(i)&&i===Ie.contributionAmt?await this.teamController.modifyTeamProgressAsync(g=>{if(gn(g.getTotalHope(),this.ctx.server.clock.genTimestamp())<Ie.contributionAmt)return e.sendStepResp(this.ctx.scope,""),!1;const{cycleId:f}=r;return g.addEvent(P.GET_HOPE,{hopeAmt:-i,reason:{type:he.HOPE_POOL,cycleId:f}}),!0})?(r.addHope(i),this.broadcastAssign(),e.sendStepResp(this.ctx.scope,"")):void 0:e.setBadRequest()}if(a??!1){const{poolAmt:i}=r.state;return this.getState().cycleContribution!==0||i<Ie.minToClaim||this.teamController.isPuzzleSolvedOrPendingSolved(o)?e.sendStepResp(this.ctx.scope,""):(r.advanceCycle(),await this.teamController.modifyTeamProgressAsync(h=>{h.addSolveAttempt(o,{isCorrect:!0},i*Ie.claimRewardMultiplier)}),this.broadcastAssign(),e.sendStepResp(this.ctx.scope,""))}return e.sendStepResp(this.ctx.scope,"")}}const No={createEngine:({execCtx:s,engineCtx:e})=>{const{controller:n,scope:t}=e,a=n.getTeamControllerIfExists(t.teamId);return a===null?s.setErrCodeAndReturn(D.INVALID_TEAM,null):new So(e,a)},engineIdentityFunc:s=>s};class Oo{constructor(){u(this,"hopeSnapshot");u(this,"puzzleSolveAttempts");u(this,"puzzleSolves");u(this,"puzzleSolveTimes");u(this,"puzzleUnlocks");u(this,"puzzleUnlockTimes");u(this,"unlockGroupsUnlockProgress");u(this,"unlockGroupsSolveProgress");u(this,"numSolvedMicropuzzles");u(this,"displayedSolveCount");u(this,"collectibleState");u(this,"puzzleNumExtraGuesses");u(this,"puzzleNumTotalCannedHints");u(this,"puzzleNumOpenedCannedHints");u(this,"numWishesSinceLastHintToken");u(this,"lastHintTokenTime");u(this,"cutsceneChoices");u(this,"firstCelestialPuzName");u(this,"nextUntitledPuzzleIndex");u(this,"hopePoolLatestCycleContribution");u(this,"teamGlobalCounters");this.puzzleSolveAttempts=new qn,this.puzzleSolves=new Map,this.puzzleSolveTimes={},this.puzzleUnlocks=new Map,this.puzzleUnlockTimes={},this.unlockGroupsUnlockProgress=new Map,this.unlockGroupsSolveProgress=new Map,this.numSolvedMicropuzzles=0,this.displayedSolveCount=0,this.collectibleState=new Map,this.puzzleNumExtraGuesses=new Map,this.puzzleNumTotalCannedHints=new Map,this.puzzleNumOpenedCannedHints=new Map,this.teamGlobalCounters={},this.cutsceneChoices=new Map,this.nextUntitledPuzzleIndex=0}handleDiff(e){(e.needInvalidateHopeSnapshot??!1)&&delete this.hopeSnapshot;for(const[n,t]of Object.entries(e.solveAttempts))for(const[a,o]of zs(t))o===null?this.puzzleSolveAttempts.delete(n,a):this.puzzleSolveAttempts.setIfAbsent(n,a,o);for(const[n,t]of Object.entries(e.solveRecords))t===null?(this.puzzleSolves.delete(n),delete this.puzzleSolveTimes[n]):(this.puzzleSolves.set(n,t),this.puzzleSolveTimes[n]=t.timestamp);for(const[n,t]of Object.entries(e.unlockRecords))t===null?(this.puzzleUnlocks.delete(n),delete this.puzzleUnlockTimes[n]):(this.puzzleUnlocks.set(n,t),this.puzzleUnlockTimes[n]=t.timestamp);for(const[n,t]of Object.entries(e.diffUnlockGroupsUnlockProgress))this.unlockGroupsUnlockProgress.set(n,(this.unlockGroupsUnlockProgress.get(n)??0)+t);for(const[n,t]of Object.entries(e.diffUnlockGroupsSolveProgress))this.unlockGroupsSolveProgress.set(n,(this.unlockGroupsSolveProgress.get(n)??0)+t);this.numSolvedMicropuzzles+=e.diffNumSolvedMicropuzzles??0,this.displayedSolveCount+=e.diffDisplayedSolveCount??0;for(const[n,t]of Object.entries(e.diffCollectibleState??{})){const a=this.collectibleState.get(n);a===void 0?this.collectibleState.set(n,t):(a.num+=t.num,a.timestamp=Math.min(a.timestamp,t.timestamp))}for(const[n,t]of Object.entries(e.diffPuzzleNumExtraGuesses??{}))this.puzzleNumExtraGuesses.set(n,(this.puzzleNumExtraGuesses.get(n)??0)+t);for(const[n,{diffTotal:t,diffOpened:a}]of Object.entries(e.puzzleCannedHints??{}))this.puzzleNumTotalCannedHints.set(n,(this.puzzleNumTotalCannedHints.get(n)??0)+t),this.puzzleNumOpenedCannedHints.set(n,(this.puzzleNumOpenedCannedHints.get(n)??0)+a);for(const[n,t]of Qe(e.diffTeamGlobalCounters??{}))t!==void 0&&(this.teamGlobalCounters[n]=(this.teamGlobalCounters[n]??0)+t);e.numWishesSinceLastHintToken!==void 0&&(this.numWishesSinceLastHintToken=e.numWishesSinceLastHintToken),e.lastHintTokenTime!==void 0&&(this.lastHintTokenTime=e.lastHintTokenTime);for(const[n,t]of Object.entries(e.cutsceneChoices??{}))this.cutsceneChoices.set(n,t);this.firstCelestialPuzName??(this.firstCelestialPuzName=e.firstCelestialPuzName),e.maxUntitledPuzzleIndex!==void 0&&(this.nextUntitledPuzzleIndex=Math.max(this.nextUntitledPuzzleIndex,e.maxUntitledPuzzleIndex+1)),e.hopePoolLatestCycleContribution!==void 0&&(this.hopePoolLatestCycleContribution=ta(this.hopePoolLatestCycleContribution,e.hopePoolLatestCycleContribution))}getNumTotalHintTokens(){return this.teamGlobalCounters[P.GET_HINT_TOKEN]??0}getNumOliveWishes(){return this.teamGlobalCounters[P.GET_OLIVE_WISH]??0}getNumBlocksWishes(){return this.teamGlobalCounters[P.GET_BLOCKS_WISH]??0}}const aa=()=>({solveAttempts:{},solveRecords:{},unlockRecords:{},solves:{},unlocks:{},diffUnlockGroupsUnlockProgress:{},diffUnlockGroupsSolveProgress:{}}),At=s=>{const e={};for(const n in s){const t=s[n];switch(t){case 0:break;case 1:e[n]=!0;break;case-1:e[n]=!1;break;default:throw new Error(`invalid diff for num correct solve attempts ${t}`)}}return e},Po=(s,e,n)=>{const t=aa(),a=Object.values(n.events??{}).flatMap(h=>Object.values(h)).sort((h,g)=>h.eventRecord.timestamp-g.eventRecord.timestamp),o={},r={},i={diff:t,puzzlesDB:s,progressTracker:e,diffNumUnlockRecords:o,diffNumSolveRecords:r};for(const h of a){const{type:g,eventRecord:y}=h;g===W.REMOVE&&(t.needInvalidateHopeSnapshot=!0),Ro(i,y,g)}return t.solves=At(r),t.unlocks=At(o),t},St=(s,e)=>Un(Un(s,"puzzleCannedHints",{}),e,{diffTotal:0,diffOpened:0}),le=s=>{switch(s){case W.ADD:return 1;case W.REMOVE:return-1}},Hn=(s,e,n)=>{s.diffTeamGlobalCounters??(s.diffTeamGlobalCounters={});const{diffTeamGlobalCounters:t}=s;t[n.type]=(t[n.type]??0)+le(e)*n.info.num},Co={[P.SOLVE_ATTEMPT]:(s,e,n)=>{var r;const{timestamp:t,info:{puzName:a,isCorrect:o}}=e;if(o&&(s.diff.needInvalidateHopeSnapshot=!0),(r=s.diff.solveAttempts)[a]??(r[a]={}),s.diff.solveAttempts[a][t]=(()=>{switch(n){case W.ADD:return e;case W.REMOVE:return null}})(),o??!1){switch(s.diffNumSolveRecords[a]=(s.diffNumSolveRecords[a]??0)+le(n),n){case W.ADD:s.diff.solveRecords[a]=e;break;case W.REMOVE:s.diff.solveRecords[a]=null;break}const i=s.puzzlesDB.tryGetPuzzle(a,{});if(i!==null){const{unlockOutEdges:h}=i;for(const{unlockGroupId:g,val:y=1}of h)s.diff.diffUnlockGroupsSolveProgress[g]=(s.diff.diffUnlockGroupsSolveProgress[g]??0)+le(n)*y}s.puzzlesDB.isMicropuzzle(a)&&(s.diff.diffNumSolvedMicropuzzles=(s.diff.diffNumSolvedMicropuzzles??0)+le(n)),(i===null||Wn(i))&&t<s.progressTracker.huntEndTime&&(s.diff.diffDisplayedSolveCount=(s.diff.diffDisplayedSolveCount??0)+le(n))}},[P.UNLOCK_PUZZLE]:(s,e,n)=>{var r;const{info:{puzName:t,untitledPuzzleIndex:a}}=e;switch(s.diffNumUnlockRecords[t]=(s.diffNumUnlockRecords[t]??0)+le(n),n){case W.ADD:s.diff.unlockRecords[t]=e;break;case W.REMOVE:s.diff.unlockRecords[t]=null;break}const o=s.puzzlesDB.tryGetPuzzle(t,{});if(o!==null){const{unlockOutEdges:i,isCelestial:h}=o;for(const{unlockGroupId:g,val:y=1}of i)s.diff.diffUnlockGroupsUnlockProgress[g]=(s.diff.diffUnlockGroupsUnlockProgress[g]??0)+le(n)*y;h&&((r=s.diff).firstCelestialPuzName??(r.firstCelestialPuzName=t))}a!==void 0&&(s.diff.maxUntitledPuzzleIndex=Math.max(s.diff.maxUntitledPuzzleIndex??0,a))},[P.SPIN_GACHA]:(s,e,n)=>{s.diff.needInvalidateHopeSnapshot=!0;const{info:{prize:t}}=e;n===W.ADD&&(t.type===Z.HINT_TOKEN?s.diff.numWishesSinceLastHintToken=0:s.diff.numWishesSinceLastHintToken=(s.progressTracker.view.numWishesSinceLastHintToken??0)+1)},[P.GET_HOPE]:(s,e,n)=>{s.diff.needInvalidateHopeSnapshot=!0;const{info:{hopeAmt:t,reason:a}}=e;if(n===W.ADD&&a.type===he.HOPE_POOL){const{cycleId:o}=a;s.diff.hopePoolLatestCycleContribution=ta(s.diff.hopePoolLatestCycleContribution,{cycleId:o,amt:-t})}},[P.GET_EXTRA_GUESSES]:(s,e,n)=>{const{info:{puzName:t,num:a}}=e,o=Un(s.diff,"diffPuzzleNumExtraGuesses",{});o[t]=(o[t]??0)+le(n)*a},[P.GET_CANNED_HINT]:(s,e,n)=>{const{info:{puzName:t,num:a}}=e;St(s.diff,t).diffTotal+=le(n)*a},[P.OPEN_CANNED_HINT]:(s,e,n)=>{const{info:{puzName:t}}=e;St(s.diff,t).diffOpened+=le(n)},[P.GET_HINT_TOKEN]:(s,e,n)=>{const{timestamp:t}=e;Hn(s.diff,n,e),s.diff.lastHintTokenTime=t},[P.GET_COLLECTIBLE]:(s,e,n)=>{var i;const{timestamp:t,info:{collectibleId:a,num:o}}=e;(i=s.diff).diffCollectibleState??(i.diffCollectibleState={});const r=s.diff.diffCollectibleState[a];r===void 0?s.diff.diffCollectibleState[a]={num:le(n)*o,timestamp:t}:(r.num+=le(n)*o,r.timestamp=Math.min(r.timestamp,t))},[P.CUTSCENE_CHOICE]:(s,e,n)=>{var o;const{info:{keyframeId:t,index:a}}=e;(o=s.diff).cutsceneChoices??(o.cutsceneChoices={}),s.diff.cutsceneChoices[t]=a},[P.GET_OLIVE_WISH]:(s,e,n)=>{Hn(s.diff,n,e)},[P.GET_BLOCKS_WISH]:(s,e,n)=>{Hn(s.diff,n,e)}},Ro=(s,e,n)=>{const t=e.type;Co[t](s,e,n)},cn={numInitialMicropuzzles:5,hopeForSolve:{min:110,max:150}};function sa(s,e){const{events:n,hopeSnapshot:t}=s;return{events:Object.fromEntries(Qe(n).map(([a,o])=>{const r={};for(const i in o){const h=Number(i);r[h]={type:e,eventRecord:o[h]}}return[a,r]})),hopeSnapshot:t}}class bn{constructor(e,n,t,a,o,r){u(this,"getPuzzlesDB");u(this,"getCustomPuzzlesFunc");u(this,"getCustomPuzzlesCannedHintsFunc");u(this,"clock");u(this,"huntEndTime");u(this,"state");u(this,"draftUpd");u(this,"isPossiblyInconsistent");u(this,"view");this.getPuzzlesDB=e,this.getCustomPuzzlesFunc=n,this.getCustomPuzzlesCannedHintsFunc=t,this.clock=a,this.huntEndTime=o,this.state={events:{}},this.view=new Oo,r!==void 0&&this.applyUpdate(sa(r,W.ADD)),delete this.draftUpd,this.isPossiblyInconsistent=!0}genTimestamp(){return this.clock.genTimestamp()}getEventsForType(e){return Qt(this.state,e)}getPuzzleSolveAttempts(){return this.view.puzzleSolveAttempts}getSolveAttemptRecordsForPuzzle(e){return this.getPuzzleSolveAttempts().l1Get(e).values()}getPuzzleSolves(){return this.view.puzzleSolves}getSolves(){return this.getPuzzleSolves().keys()}getUnlockTimes(){return this.view.puzzleUnlockTimes}getSolveTimes(){return this.view.puzzleSolveTimes}clone(){return new bn(this.getPuzzlesDB,this.getCustomPuzzlesFunc,this.getCustomPuzzlesCannedHintsFunc,this.clock,this.huntEndTime,Yn(this.state))}getHopeChangeEvents(){return[...Array.from(this.getPuzzleSolves().values(),({timestamp:e,info:{puzName:n,hopeGained:t}})=>({timestamp:e,delta:t??0})),...Object.values(this.getEventsForType(P.SPIN_GACHA)).map(({timestamp:e})=>({timestamp:e,delta:-Bt})),...Object.values(this.getEventsForType(P.GET_HOPE)).map(({timestamp:e,info:{hopeAmt:n}})=>({timestamp:e,delta:n}))]}getTotalHope(){if(this.view.hopeSnapshot!==void 0)return this.view.hopeSnapshot;const e=this.getHopeChangeEvents(),n=jt(this.state.hopeSnapshot??null,e);return n!==null&&(this.view.hopeSnapshot=n),n}getEventRecord(e,n){return this.getEventsForType(e)[n]}hasSolvePuzzle(e){return this.getPuzzleSolves().get(e)!==void 0}hasUnlockPuzzle(e){return this.view.puzzleUnlocks.get(e)!==void 0}getUnlockGroupsUnlockProgress(e){const n="unlock__";return e.startsWith(n)?this.hasUnlockPuzzle(e.slice(n.length))?1:0:this.view.unlockGroupsUnlockProgress.get(e)??0}getUnlockGroupsSolveProgress(e){const n="solve__";return e.startsWith(n)?this.hasSolvePuzzle(e.slice(n.length))?1:0:this.view.unlockGroupsSolveProgress.get(e)??0}areInEdgesSatisfied(e){return!e.some(({unlockGroupId:n,val:t=1,isUnlockOnly:a=!1})=>((a?this.getUnlockGroupsUnlockProgress(n):this.getUnlockGroupsSolveProgress(n))??0)<t)}isPuzzleUnlockReqsSatisfied(e){const n=this.getPuzzlesDB().getPuzzle(e,this.getCustomPuzzlesFunc()),{introReq:t=0,unlockInEdges:a}=n;return this.view.numSolvedMicropuzzles>=t&&this.areInEdgesSatisfied(a)}isPuzzleSolutionReqsSatisfied(e){const n=this.getPuzzlesDB().getPuzzle(e,this.getCustomPuzzlesFunc()),{solutionInEdges:t=[]}=n;return this.areInEdgesSatisfied(t)}filterOutRedundantUpdates(e){const{events:n,...t}=e;return n===void 0?t:{events:Object.fromEntries(Qe(n).map(([a,o])=>{var i;const r={};for(const h in o){const g=Number(h),y=o[g];(y.type!==W.REMOVE||((i=this.state.events[a])==null?void 0:i[g])!==void 0)&&(r[g]=y)}return[a,r]})),...t}}applyUpdate(e){const n=this.filterOutRedundantUpdates(e),t=Po(this.getPuzzlesDB(),this,n);this.draftUpd===void 0?this.draftUpd=n:$t(this.draftUpd,n),ea(this.state,n);for(const a of Object.values(n.events??{}))for(const o of Object.values(a))o.type!==W.REMOVE&&this.clock.bumpLatestTime(o.eventRecord.timestamp);return this.view.handleDiff(t),t}applyCompleteUpdateAndFlush(e){if(!(e.isComplete??!1))throw new Error("update not complete");const n=this.applyUpdate(e);return this.triggerUpdatesAndFlush(),n}addEventRecord(e){const{type:n,timestamp:t}=e;this.applyUpdate({events:{[n]:{[t]:{type:W.ADD,eventRecord:e}}}})}addEvent(e,n){const t=this.genTimestamp(),a=wo(e,t,n);return this.addEventRecord(a),a}addSolveAttempt(e,n,t){var y;const{isCorrect:a,isWrong:o,answer:r}=n;if((a??!1)&&this.hasSolvePuzzle(e))return null;const i=this.getPuzzlesDB().getPuzzle(e,this.getCustomPuzzlesFunc()),{hopeForSolve:h}=i,g=((y=ko(i))==null?void 0:y.join(" / "))??null;return this.addEvent(P.SOLVE_ATTEMPT,{puzName:e,...n,isCorrect:a?!0:void 0,isWrong:o?!0:void 0,answer:r??g??void 0,hopeGained:t??(a?h??Math.floor(Xe(cn.hopeForSolve.min,cn.hopeForSolve.max)):void 0)})}addSolvePuzzle(e){return this.addSolveAttempt(e,{isCorrect:!0})}addUnlockPuzzle(e){if(this.hasUnlockPuzzle(e))return null;const{displayName:n}=this.getPuzzlesDB().getPuzzle(e,this.getCustomPuzzlesFunc()),t=n===""?this.view.nextUntitledPuzzleIndex:void 0;return this.addEvent(P.UNLOCK_PUZZLE,{puzName:e,untitledPuzzleIndex:t})}addSpinGacha(e,n){return this.addEvent(P.SPIN_GACHA,{pullId:e,prize:n})}overridePuzzleNumCannedHintsFound(e,n,t){const a=this.getPuzzlesDB().getCannedHintsForPuzzle(e,this.getCustomPuzzlesCannedHintsFunc()).length,o=this.view.puzzleNumTotalCannedHints.get(e)??0,r=Math.min(n,a)-o;r!==0&&this.addEvent(P.GET_CANNED_HINT,{puzName:e,num:r,reason:t})}removeEvent(e,n){const t=this.getEventRecord(e,n);t!==void 0&&this.applyUpdate({events:{[e]:{[n]:{type:W.REMOVE,eventRecord:t}}}})}removeEventRecord(e){this.removeEvent(e.type,e.timestamp)}removeSolvePuzzle(e){for(const n of this.getPuzzleSolveAttempts().l1Get(e).values())this.removeEventRecord(n)}removeUnlockPuzzle(e){this.removeSolvePuzzle(e);const n=this.view.puzzleUnlocks.get(e);n!==void 0&&this.removeEventRecord(n)}triggerUpdatesFromSources(e){const n=this.getPuzzlesDB();for(const t of e.solveAttempts){const{info:{puzName:a,isCorrect:o}}=t;this.addUnlockPuzzle(a),o&&n.isMicropuzzle(a)&&this.addUnlockPuzzle(te.cutscenePuzNames.firstSolve)}this.view.numSolvedMicropuzzles>=cn.numInitialMicropuzzles&&this.addUnlockPuzzle(te.cutscenePuzNames.introCelestials);for(const t of e.unlocks){const{info:{puzName:a}}=t;n.isMicropuzzle(a)&&this.addUnlockPuzzle(te.cutscenePuzNames.firstUnlock)}for(const{puzName:t,isAutoUnlocked:a=!1,customPuzzleData:o}of n.getPuzzles(this.getCustomPuzzlesFunc()))o===void 0&&a&&this.isPuzzleUnlockReqsSatisfied(t)&&this.addUnlockPuzzle(t)}triggerUpdatesAndFlush(){const e=(()=>{if(this.isPossiblyInconsistent??!1)return{unlocks:Object.values(this.getEventsForType(P.UNLOCK_PUZZLE)),solveAttempts:Object.values(this.getEventsForType(P.SOLVE_ATTEMPT))};const{draftUpd:t}=this;return t===void 0||(t.isComplete??!1)?null:{unlocks:Object.values(pe(t,P.UNLOCK_PUZZLE)).filter(a=>a.type===W.ADD).map(({eventRecord:a})=>a),solveAttempts:Object.values(pe(t,P.SOLVE_ATTEMPT)).filter(a=>a.type===W.ADD).map(({eventRecord:a})=>a)}})();e!==null&&this.triggerUpdatesFromSources(e);const n=this.draftUpd===void 0||Object.keys(this.draftUpd).length===0?null:this.draftUpd;return delete this.draftUpd,n!==null&&(n.isComplete=!0),delete this.isPossiblyInconsistent,n}makeBootstrapProgress({unlockAllPuzzles:e,solveAllPuzzles:n}){if((e??!1)||(n??!1))for(const{puzName:t}of this.getPuzzlesDB().getPuzzles(this.getCustomPuzzlesFunc()))this.addUnlockPuzzle(t),(n??!1)&&this.addSolvePuzzle(t)}}const xo={dust:{min:1e3,max:1e4},gold:{min:10,max:100}},Ye={mainForkWeights:{puzzle:.9,jackpot:.03,cannedHint:.02,hintToken:.02,fun:.03},puzzleWeightsByRarity:{[se.COMMON]:1,[se.UNCOMMON]:.7,[se.RARE]:.5,[se.EPIC]:.4,[se.LEGENDARY]:.3},celestialWeight:0,customPuzzleUnlockReq:100,numInitialMicropuzzles:cn.numInitialMicropuzzles,huntWidthRigging:{min:5,max:8,solvesBuff:{min:7/180,max:12/180},customPuzzleContribution:.7,ignoreProbability:.2,dustContribution:1/3e4},cannedHintBufferTimeHoursByRarity:{[se.COMMON]:.4,[se.UNCOMMON]:.6,[se.RARE]:.8,[se.EPIC]:1.1,[se.LEGENDARY]:1.5},jackpotAmount:{min:200,max:400},celestialRigging:{thresholds:[.025,.1,.2,.325,.45,.575,.7],weight:.75},riggedOliveWeight:.2,riggedBlocksWeight:.2,hintRigging:{numOpenPuzzlesNeeded:3,releaseTimeHours:[3,9,15,21,27,33,39,45,57,24*3,24*3+12,24*4,24*4+12,24*5,24*5+12,24*6,24*6+12,24*7,24*7+12,24*8,24*8+12,24*9,24*9+12],throttle:{numWishes:3,timeHours:1}},sequencesBias:2,sequenceRigging:{puz317:"puz318"},hopePoolRigging:{puzName:"puz313",weightPerSolve:1/5},cannedHintPerPuzzleMultipliers:{},collectiblesRanges:xo},Do=(s,e,n,t)=>{var r;const a=e.clock.genTimestamp(),o={numUnlockedFindCelestial:0,numUnlockedMicropuzzles:0,numSolvedMicropuzzles:0,firstSolvePuzzleRecord:null,openPuzzlesWidth:0,openPuzzles:new Set,eligibleNonSequencePuzzles:new Set,eligibleSequencePuzzles:new Set,eligibleFindCelestials:new Set,cannedHintEligiblePuzzles:new Map,eligibleCollectibles:new Set};for(const[i,h]of t.view.puzzleUnlocks.entries()){const{isStory:g=!1,isFindCelestial:y=!1,rarity:f=se.COMMON,customPuzzleData:z}=e.getPuzzle(i),w=e.getCannedHintsForPuzzle(i).length,E=t.view.puzzleSolves.has(i),O=a-h.timestamp,x=t.view.puzzleNumTotalCannedHints.get(i)??0;y&&o.numUnlockedFindCelestial++,e.puzzlesDB.isMicropuzzle(i)&&(o.numUnlockedMicropuzzles++,E&&o.numSolvedMicropuzzles++),E||(o.openPuzzles.add(i),o.openPuzzlesWidth+=g?0:z!==void 0?s.huntWidthRigging.customPuzzleContribution:1);const F=Bn(s.cannedHintBufferTimeHoursByRarity[f]),L=O-F*(1+x/w);!E&&x<w&&L>0&&o.cannedHintEligiblePuzzles.set(i,{effectiveTimeSinceEligibleMs:L})}for(const[i,h]of t.view.puzzleSolves.entries())(o.firstSolvePuzzleRecord===null||h.timestamp<o.firstSolvePuzzleRecord.timestamp)&&(o.firstSolvePuzzleRecord=h);for(const i of e.getPuzzles()){const{puzName:h,isFindCelestial:g=!1,isAutoUnlocked:y=!1,customPuzzleData:f,isCustomPuzzleAvailableInGacha:z=!1}=i,w=t.view.puzzleUnlocks.has(h);!y&&!w&&t.isPuzzleUnlockReqsSatisfied(h)&&(f===void 0||(f.srcTeamId===n||z)&&o.numUnlockedMicropuzzles>=s.customPuzzleUnlockReq)&&(e.puzzlesDB.isSequencePuzzle(h)?o.eligibleSequencePuzzles.add(h):o.eligibleNonSequencePuzzles.add(h),g&&o.eligibleFindCelestials.add(h))}for(const[i,{maxNumPerTeam:h}]of Object.entries(e.puzzlesDB.collectiblesData))h!==void 0&&(((r=t.view.collectibleState.get(i))==null?void 0:r.num)??0)>=h||o.eligibleCollectibles.add(i);return o};class Lo{constructor(e,n){u(this,"ctx");u(this,"teamController");u(this,"config");u(this,"nextPullId");u(this,"lastPullTime");this.ctx=e,this.teamController=n,this.config=Ye,this.nextPullId=0}getPermissions(e){return e.teamId===this.ctx.scope.teamId?N.FULL:N.ADMIN_ONLY}getState(){const e=this.teamController.progressTracker.getEventsForType(P.SPIN_GACHA);return{pulls:Object.fromEntries(Object.values(e).map(({timestamp:t,info:{pullId:a,prize:o}})=>[a,{...o,timestamp:t}]))}}genPullId(){const{server:{sockServerId:e},scope:{teamId:n}}=this.ctx;return`${e}_${n}_${this.nextPullId++}`}handleUpdate(e){this.ctx.update(this.ctx.scope,e)}makeCollectiblePrize(e){const n=this.config.collectiblesRanges[e];return{type:Z.COLLECTIBLE,collectibleId:e,num:n===void 0?1:Math.floor(Xe(n.min,n.max))}}makeDefaultCollectiblePrize(){return this.makeCollectiblePrize("dust")}getCollectiblePrize(e,n){const{server:{puzzlesDB:t}}=this.ctx,a=Dn(Object.entries(t.collectiblesData).map(([o])=>({choice:()=>n.eligibleCollectibles.has(o)?this.makeCollectiblePrize(o):this.makeDefaultCollectiblePrize(),weight:1})));if(a===null)throw new Error("no eligible collectibles but we should always be able to get dust");return a}getPuzzlePrize(e,n){const{server:t}=this.ctx,{puzzlesDB:a}=t,o=g=>xn(Array.from(g,y=>{const{rarity:f=se.COMMON,isMeta:z=!1,isFindCelestial:w=!1}=t.getPuzzle(y),E=y===this.config.hopePoolRigging.puzName?this.config.hopePoolRigging.weightPerSolve*n.numSolvedMicropuzzles:w?this.config.celestialWeight:this.config.puzzleWeightsByRarity[z?se.COMMON:f];return{choice:{type:Z.UNLOCK,puzName:y},weight:E}})),r=a.numSequencePuzzles/a.numNonCustomMicropuzzles,i=r*this.config.sequencesBias,h=1-r;return Dn([{choice:()=>o(n.eligibleSequencePuzzles),weight:i},{choice:()=>o(n.eligibleNonSequencePuzzles),weight:h}])}getCannedHintPrize(e,n){const t=this.config.cannedHintPerPuzzleMultipliers;return xn(Array.from(n.cannedHintEligiblePuzzles.entries(),([a,{effectiveTimeSinceEligibleMs:o}])=>({choice:{type:Z.CANNED_HINT,puzName:a},weight:(t[a]??1)*o})))}getNormalPrize(e,n){var r;const t=this.config.huntWidthRigging.min+n.numSolvedMicropuzzles*this.config.huntWidthRigging.solvesBuff.min,a=this.config.huntWidthRigging.max+n.numSolvedMicropuzzles*this.config.huntWidthRigging.solvesBuff.max+(((r=e.view.collectibleState.get("dust"))==null?void 0:r.num)??0)*this.config.huntWidthRigging.dustContribution,o=ws(0,this.config.mainForkWeights.puzzle,(n.openPuzzlesWidth-t)/(a-t));return Dn([{choice:()=>this.getPuzzlePrize(e,n)??this.getCannedHintPrize(e,n)??this.makeDefaultCollectiblePrize(),weight:this.config.mainForkWeights.puzzle-o},{choice:()=>this.getCannedHintPrize(e,n)??(Math.random()<this.config.huntWidthRigging.ignoreProbability?this.getPuzzlePrize(e,n):this.makeDefaultCollectiblePrize()),weight:this.config.mainForkWeights.cannedHint+o},{choice:()=>({type:Z.HINT_TOKEN}),weight:this.config.mainForkWeights.hintToken},{choice:()=>({type:Z.JACKPOT,amount:Math.floor(Xe(this.config.jackpotAmount.min,this.config.jackpotAmount.max)),msgIndex:Math.floor(Math.random()*vs.length)}),weight:this.config.mainForkWeights.jackpot},{choice:()=>this.getCollectiblePrize(e,n),weight:this.config.mainForkWeights.fun}])}computeAnalysis(e){const{server:n,scope:{teamId:t}}=this.ctx;return Do(this.config,n,t,e)}getStandardPullResult(e){var F;const{server:n,scope:{teamId:t}}=this.ctx,a=n.clock.genTimestamp(),o=this.computeAnalysis(e),r=o.firstSolvePuzzleRecord===null?0:a-o.firstSolvePuzzleRecord.timestamp,i=this.config.hintRigging.releaseTimeHours[e.view.getNumTotalHintTokens()],h=((F=n.scopeEnginesController.getEngineIfExists({type:v.TEAM_HINTS,teamId:t}))==null?void 0:F.getNumUnusedHintTokens())??0,{numWishesSinceLastHintToken:g,lastHintTokenTime:y}=e.view,f=i!==void 0&&r>=Bn(i)&&o.openPuzzlesWidth-h>=this.config.hintRigging.numOpenPuzzlesNeeded&&(g===void 0||g>=this.config.hintRigging.throttle.numWishes||y===void 0||a-y>=Bn(this.config.hintRigging.throttle.timeHours));if(o.numUnlockedMicropuzzles<this.config.numInitialMicropuzzles){const L=this.getPuzzlePrize(e,o);if(L===null)throw new Error("expect team to have micropuzzles to unlock at early hunt");return L}for(const[L,j]of Object.entries(this.config.sequenceRigging))if(e.hasSolvePuzzle(L)&&!e.hasUnlockPuzzle(j))return{type:Z.UNLOCK,puzName:j};if(f)return{type:Z.HINT_TOKEN};const z=this.config.celestialRigging.thresholds[o.numUnlockedFindCelestial],w=z!==void 0&&o.numSolvedMicropuzzles/n.puzzlesDB.numNonCustomMicropuzzles>=z,E=o.openPuzzles.has(ye.puzName)&&e.view.getNumOliveWishes()+1<ye.maxWishes,O=o.openPuzzles.has(rn.puzName)&&He.initialNumBoards+e.view.getNumBlocksWishes()*He.numBoardsPerWish<He.maxNumBoards;if(E&&Math.random()<this.config.riggedOliveWeight)return{type:Z.OLIVE};if(O&&Math.random()<this.config.riggedBlocksWeight)return{type:Z.BLOCKS};if(w&&Math.random()<this.config.celestialRigging.weight){const L=xn(Array.from(o.eligibleFindCelestials,j=>({choice:{type:Z.UNLOCK,puzName:j},weight:1})));if(L!==null)return L}if(o.openPuzzlesWidth<this.config.huntWidthRigging.min){const L=this.getPuzzlePrize(e,o);if(L!==null)return L}const x=this.getNormalPrize(e,o);if(x===null)throw new Error("we should never allow this");return x}getPrize(e){return this.getStandardPullResult(e)}genPullResult(e,n,t){const a=this.ctx.server.clock.genTimestamp(),o=gn(e.getTotalHope(),a);if(Bt>o&&!t)return{type:je.NOT_ENOUGH_HOPE};const r=this.getPrize(e);return(()=>{switch(r.type){case Z.UNLOCK:return e.addUnlockPuzzle(r.puzName),!0;case Z.COLLECTIBLE:return e.addEvent(P.GET_COLLECTIBLE,{collectibleId:r.collectibleId,num:r.num,reason:{type:he.GACHA}}),!0;case Z.JACKPOT:return e.addEvent(P.GET_HOPE,{hopeAmt:r.amount,reason:{type:he.GACHA}}),!0;case Z.CANNED_HINT:return e.addEvent(P.GET_CANNED_HINT,{num:1,puzName:r.puzName,reason:{type:he.GACHA}}),!0;case Z.HINT_TOKEN:case Z.OLIVE:case Z.BLOCKS:{const i={[Z.HINT_TOKEN]:P.GET_HINT_TOKEN,[Z.OLIVE]:P.GET_OLIVE_WISH,[Z.BLOCKS]:P.GET_BLOCKS_WISH};return e.addEvent(i[r.type],{num:1,reason:{type:he.GACHA}}),!0}}})(),e.addSpinGacha(n,r),{type:je.SUCCESS,pullId:n,pull:{...r,timestamp:a}}}async handlePullAsync(e,n){const{scope:{teamId:t},server:a}=this.ctx,o=e.conn.isAdmin&&(n.ignoreHopeLimit??!1),r=this.genPullId();a.broadcastNotifToTeam(t,{type:Ce.BEGIN_PULL,pullId:r});const i=await this.teamController.modifyTeamProgressAsync(h=>(h.addSolvePuzzle(te.cutscenePuzNames.intro),this.genPullResult(h,r,o)));return a.broadcastNotifToTeam(t,{type:Ce.END_PULL,pullId:r,pull:i.type===je.SUCCESS?i.pull:void 0}),i.type===je.SUCCESS&&(this.lastPullTime=this.ctx.server.clock.genTimestamp()),i}async handleStepAsync(e,n){if(this.lastPullTime!==void 0&&this.ctx.server.clock.genTimestamp()-this.lastPullTime<Ts-300)return e.sendStepResp(this.ctx.scope,{type:je.TOO_SOON});const t=e.conn.isAdmin?n.numPulls??1:1;e.sendStepResp(this.ctx.scope,(await Promise.all(Array.from(Array(t),()=>this.handlePullAsync(e,n))))[0])}}const Ho={createEngine:({execCtx:s,engineCtx:e})=>{const{controller:n,scope:t}=e,a=n.getTeamControllerIfExists(t.teamId);return a===null?null:new Lo(e,a)},engineIdentityFunc:s=>s};class Fo{constructor(e){u(this,"ctx");this.ctx=e}getPermissions(e){return N.FULL}async handleStepAsync(e,n){return e.sendStepResp(this.ctx.scope,"")}}const Go={createEngine:({engineCtx:s})=>new Fo(s),engineIdentityFunc:s=>s};class Mo{constructor(e){u(this,"ctx");this.ctx=e}getPermissions(){return N.ADMIN_ONLY}getState(){const{server:e}=this.ctx;return{teamAdminData:Object.fromEntries(Array.from(e.teamControllers.values(),n=>[n.teamId,n.getClientAdminData()])),puzzles:Object.fromEntries(Array.from(e.getPuzzles(),n=>[n.puzName,n])),numCannedHints:Object.fromEntries(Array.from(e.getCannedHints(),([n,t])=>[n,t.length])),errata:Object.fromEntries(Object.values(e.scopeEnginesController.getEnginesForType(v.ERRATUM_CONTENT)).map(n=>[n.ctx.scope.erratumId,n.getSummary()]))}}broadcastUpdate(e){this.ctx.update(this.ctx.scope,e)}addTeam(e){const{server:n}=this.ctx,t=n.getTeamController(e);this.ctx.update(this.ctx.scope,{addTeams:{[e]:t.getClientAdminData()}})}refresh(){this.ctx.assign(this.ctx.scope,this.getState())}async modifyTeamAsync(e,n,t){const{server:a}=this.ctx,o=a.getTeamController(e),r=t??{type:he.MISC},{isInactive:i,isHidden:h,isTempBlocked:g,displayName:y,overrideSolved:f,overrideUnlocked:z,overridePuzzleNumExtraGuesses:w,overridePuzzleNumTotalCannedHints:E,overrideNumTotalHintTokens:O,overrideHope:x,overrideNumOliveWishes:F,overrideNumBlocksWishes:L}=n;i!==void 0&&o.setTeamInactive(i),h!==void 0&&o.setTeamHidden(h),g!==void 0&&o.setTeamTempBlocked(g),y!==void 0&&!["",".",".."].includes(y)&&o.setDisplayName(y),await o.modifyTeamProgressAsync(j=>{for(const[U,_]of Object.entries(f??{}))_?j.addSolvePuzzle(U):j.removeSolvePuzzle(U);for(const[U,_]of Object.entries(z??{}).sort(([H],[C])=>{const G=a.getPuzzle(H),q=a.getPuzzle(C);return Es(G,q)}))_?j.addUnlockPuzzle(U):j.removeUnlockPuzzle(U);for(const[U,_]of Object.entries(w??{})){const H=j.view.puzzleNumExtraGuesses.get(U)??0,C=_-H;C!==0&&j.addEvent(P.GET_EXTRA_GUESSES,{puzName:U,num:C,reason:r})}for(const[U,_]of Object.entries(E??{}))j.overridePuzzleNumCannedHintsFound(U,_,r);if(O!==void 0){const U=j.view.getNumTotalHintTokens(),_=O-U;if(_===0)return;j.addEvent(P.GET_HINT_TOKEN,{num:_,reason:r})}if(x!==void 0){const U=gn(j.getTotalHope(),a.clock.genTimestamp()),_=x-U;if(_===0)return;j.addEvent(P.GET_HOPE,{hopeAmt:_,reason:r})}if(F!==void 0){const U=j.view.getNumOliveWishes(),_=F-U;if(_===0)return;j.addEvent(P.GET_OLIVE_WISH,{num:_,reason:r})}if(L!==void 0){const U=j.view.getNumBlocksWishes(),_=L-U;if(_===0)return;j.addEvent(P.GET_BLOCKS_WISH,{num:_,reason:r})}})}async handleStepAsync(e,n){const{server:t}=this.ctx;n.config!==void 0&&Object.assign(t.config,n.config);for(const[a,o]of Object.entries(n.teams??{}))await this.modifyTeamAsync(a,o);(n.reloadPuzzles??!1)&&await t.loadPuzzlesAsync(),n.setPuzzlesDB!==void 0&&t.setPuzzlesDB(new Kn(n.setPuzzlesDB)),n.setForcedTimeOffset!==void 0&&t.clock.setForcedTime(t.huntStartTime+n.setForcedTimeOffset),e.sendStepResp(this.ctx.scope,"")}}const Uo={createEngine:({engineCtx:s})=>new Mo(s),engineIdentityFunc:s=>s};class Bo{constructor(e){u(this,"ctx");u(this,"report");this.ctx=e}getPermissions(){return N.ADMIN_ONLY}getMiscLockContentions(){const{server:e,controller:n}=this.ctx,t=[];for(const a of Object.values(n.engines))for(const[o,{stepLock:r}]of Object.entries(a))r!==void 0&&t.push({id:o,numActive:r.getNumWaitingOrActive()});for(const[a,o]of e.teamInitLocks)t.push({id:`team_init_${a}`,numActive:o.getNumWaitingOrActive()});return t.filter(({numActive:a})=>a>0).sort((a,o)=>o.numActive-a.numActive).slice(0,ze.maxNumMiscLockContentions)}updateReport(){const{server:e}=this.ctx;return this.report={slowSyncMetrics:e.slowSyncMetrics.getSummary(),fastSyncMetrics:e.fastSyncMetrics.getSummary(),checkAnswerMetrics:e.checkAnswerMetrics.getSummary(),numAuthsMetrics:e.numAuthsMetrics.getSummary(),numRequestsMetrics:e.numRequestsMetrics.getSummary(),teamNumAuthsMetrics:e.teamMetricsTracker.numAuthsSummaries,teamNumRequestsMetrics:e.teamMetricsTracker.numRequestsSummaries,fastSyncQueueLength:e.syncThrottle.getNumWaitingOrActive(),numActivePeriodicTasksHandlers:e.numActivePeriodicTasksHandlers,numActiveConns:e.numActiveConns,downloadLockContention:e.slowSyncTracking.downloadLock.getNumWaitingOrActive(),syncLockContention:e.syncThrottle.getNumWaitingOrActive(),farmerLocksContention:0,userTimeUsage:e.metricsDumpTracking.userTimeUsage,systemTimeUsage:e.metricsDumpTracking.systemTimeUsage,miscLocks:this.getMiscLockContentions()},this.report}runPeriodicTasks(){const{server:{dirtyStateTracker:e}}=this.ctx;this.ctx.update(this.ctx.scope,{report:this.updateReport(),dirtyStateUpd:e.pendingDirtyStateUpd}),e.commitUpds()}getState(){const{server:e}=this.ctx;return{report:this.report??this.updateReport(),dirtyState:e.dirtyStateTracker.dirtyState}}}const jo={createEngine:({engineCtx:s})=>new Bo(s),engineIdentityFunc:s=>s};class Wo{constructor(e){u(this,"ctx");this.ctx=e}getPermissions(){return N.ADMIN_ONLY}getState(){const{server:e}=this.ctx;return{teams:Object.fromEntries(Array.from(e.teamControllers.values(),n=>[n.teamId,n.getClientBigBoardState()]))}}}const qo={createEngine:({engineCtx:s})=>new Wo(s),engineIdentityFunc:s=>s};class Yo{constructor(e){u(this,"ctx");u(this,"state");u(this,"pendingUpds");this.ctx=e,this.state={},this.pendingUpds={}}getPermissions(){return N.FULL}addTeam(e,n){this.state[e]=n,this.ctx.update(this.ctx.scope,{addTeams:{[e]:n}})}removeTeam(e){delete this.state[e],delete this.pendingUpds[e],this.ctx.update(this.ctx.scope,{removeTeams:{[e]:!0}})}updateTeam(e,n){if(this.state[e]===void 0)return;const t=this.pendingUpds[e];if(t===void 0){this.pendingUpds[e]=n;return}_s(t,n),this.removeRedundantTeamUpdates(e)}removeRedundantTeamUpdates(e){const n=this.pendingUpds[e],t=this.state[e];if(n===void 0)return;if(t===void 0)throw new Error("expect to only receive updates for existing teams");const{displayName:a,numSolves:o,completionTime:r,lastSolveTime:i}=n;a===t.displayName&&delete n.displayName,o===t.numSolves&&delete n.numSolves,r===t.completionTime&&delete n.completionTime,i===t.lastSolveTime&&delete n.lastSolveTime,Object.keys(n).length===0&&delete this.pendingUpds[e]}commitUpds(){this.ctx.update(this.ctx.scope,{updTeams:this.pendingUpds});for(const[e,n]of Object.entries(this.pendingUpds)){if(this.state[e]===void 0)throw new Error("expect to only receive updates for existing teams");Is(this.state[e],n)}this.pendingUpds={}}getState(){return this.state}}const Vo={cacheStatePacket:!0,createEngine:({engineCtx:s})=>new Yo(s),engineIdentityFunc:s=>s};class Ko{constructor(e,n){u(this,"ctx");u(this,"teamController");this.ctx=e,this.teamController=n}getPermissions(e){return e.teamId===this.ctx.scope.teamId?N.FULL:N.READ}getState(){return{members:this.teamController.members}}}const Jo={createEngine:({execCtx:s,engineCtx:e})=>{const{controller:n,scope:t}=e,a=n.getTeamControllerIfExists(t.teamId);return a===null?s.setErrCodeAndReturn(D.INVALID_TEAM,null):new Ko(e,a)},engineIdentityFunc:s=>s};class Zo{constructor(e,n){u(this,"ctx");u(this,"teamController");this.ctx=e,this.teamController=n}getPermissions(e){const{server:n,scope:t}=this.ctx;return e.teamId===t.teamId?N.FULL:n.getIsHuntOver()?N.READ:N.ADMIN_ONLY}getState(){const{server:e}=this.ctx,{displayName:n,progressTracker:t}=this.teamController,a=Object.fromEntries(Array.from(t.view.puzzleUnlocks.keys(),i=>[i,this.teamController.getClientPuzzleState(i)])),o=Object.fromEntries(Wt.flatMap(i=>{const h=t.view.cutsceneChoices.get(i);return h!==void 0?[[i,h]]:[]})),r=Object.fromEntries(t.view.puzzleNumExtraGuesses.entries());return{displayName:n,puzzles:a,huntStartTime:e.huntStartTime,huntEndTime:e.huntEndTime,hopeSnapshot:t.getTotalHope(),finishedData:this.teamController.getFinishedData(),cutsceneChoices:o,lockedSolutions:this.teamController.getLockedSolutions(),extraGuesses:Object.keys(r).length>0?r:void 0}}}const Xo={createEngine:({execCtx:s,engineCtx:e})=>{const{controller:n,scope:t}=e,a=n.getTeamControllerIfExists(t.teamId);return a===null?s.setErrCodeAndReturn(D.INVALID_TEAM,null):new Zo(e,a)},engineIdentityFunc:s=>s};class Qo{constructor(e,n){u(this,"ctx");u(this,"answerableController");this.ctx=e,this.answerableController=n}getPermissions(e){return e.teamId===this.ctx.scope.teamId?N.FULL:N.ADMIN_ONLY}handleUpdateNumGuessesRemaining(){this.ctx.update(this.ctx.scope,{numGuessesRemaining:this.answerableController.getNumGuessesRemaining()})}getState(){return{numGuessesRemaining:this.answerableController.getNumGuessesRemaining(),submissions:Object.fromEntries(Array.from(this.answerableController.getTeamController().progressTracker.getSolveAttemptRecordsForPuzzle(this.ctx.scope.puzName),({timestamp:e,info:n})=>{const{puzName:t,...a}=n;return[e,{timestamp:e,...a}]}))}}async handleSubmitAnswerAsync(e,n){if(n.length>ks)return e.setBadRequest();const t=await this.answerableController.checkAnswerAsync(e,n);t!==null&&e.sendStepResp(this.ctx.scope,t)}async handleStepAsync(e,n){const{submitAnswer:t}=n;t!==void 0&&await this.handleSubmitAnswerAsync(e,t)}}const $o={createEngine:({execCtx:s,engineCtx:e})=>{const{controller:n,scope:t}=e,a=n.getAnswerableControllerIfUnlocked(s,t.teamId,t.puzName);return a===null?null:new Qo(e,a)},engineIdentityFunc:s=>s};class ei{constructor(e,n){u(this,"ctx");u(this,"rawContent");this.ctx=e,this.rawContent=n}getPermissions(e){const{server:n,scope:{puzName:t}}=this.ctx;if(n.getIsHuntOver())return N.READ;const a=te.contentOnlyPuzzles[t];return n.getTeamController(e.teamId).isPuzzleUnlocked(a??t)?N.READ:N.ADMIN_ONLY}getState(){const{server:e,scope:{puzName:n}}=this.ctx,t=e.tryGetPuzzle(n),a=(t==null?void 0:t.customPuzzleContent)??void 0,o=e.puzzlesDB.keyframesData.firstKeyframeIds[n];return a!==void 0&&this.rawContent===void 0?{hash:"",content:a}:{...this.rawContent??{hash:"",content:o!==void 0?"<Cutscene />":""},firstKeyframeId:o}}updateContent(){const{server:e,scope:{puzName:n}}=this.ctx,t=e.puzzlesDB.content.puzzles[n];qt(t,this.rawContent)||(this.rawContent=t,this.ctx.assign(this.ctx.scope,this.getState()))}}const ni={createEngine:({execCtx:s,engineCtx:e})=>{const{server:n,scope:t}=e,{puzName:a}=t;return new ei(e,n.puzzlesDB.content.puzzles[a])},engineIdentityFunc:s=>s};class oa{constructor(e,n,t){u(this,"clock");u(this,"intervalMs");u(this,"capacity");u(this,"currInterval");u(this,"currIntervalLoad");this.clock=e,this.intervalMs=n,this.capacity=t,this.currInterval=0,this.currIntervalLoad=0}updateCurrInterval(){const e=Math.floor(this.clock.genTimestamp()/this.intervalMs);e!==this.currInterval&&(this.currInterval=e,this.currIntervalLoad=0)}isRateLimited(){return this.updateCurrInterval(),this.currIntervalLoad>=this.capacity}checkRequest(e){return this.isRateLimited()?!1:(this.currIntervalLoad+=e??1,!0)}}const Nt=["puz19","puz104","puz22","puz69","puz96","puz114","puz94","puz93","puz91","puz103"],Ot={puz19:"Mason",puz104:"Radical",puz22:"Rider",puz69:"Trade",puz96:"Lance",puz114:"Speech",puz94:"DOM",puz93:"Man",puz91:"Style",puz103:"Body"},ti="free",ai=30*60*1e3,Pt=10*1e3,ia=(s,e,n,t,a,o)=>({puzName:`${de.customPuzzlePuzNamePrefix}${s}`,slug:`${de.customPuzzleSlugPrefix}${s}`,displayName:e.trim(),order:0,emoji:"",round:"custom",answer:n,unlockInEdges:t.unlockInEdges??(s==="203"&&e.trim()==="Undespaired"?[{unlockGroupId:"despair",val:1}]:s==="359"&&e.trim()==="A Necklace of Stars"?[{unlockGroupId:"necklace",val:1}]:s==="595"&&e.trim()==="5050"?[{unlockGroupId:"fifty",val:1}]:s==="712"&&e.trim()==="What's the answer? LIV"?[{unlockGroupId:"whats",val:3}]:[]),unlockOutEdges:[],customPuzzleData:{srcTeamId:s},rarity:t.rarity,isCustomPuzzleAvailableInGacha:t.isAvailableInGacha??!1?!0:void 0,customPuzzleContent:a,customPuzzleSolutionContent:o});class si{constructor(e,n,t){u(this,"ctx");u(this,"teamController");u(this,"state");u(this,"checkTitleRateLimiter");u(this,"adminQueueTaskId");this.ctx=e,this.teamController=n,this.checkTitleRateLimiter=new oa(this.ctx.server.clock,de.checkTitleRateLimitIntervalMinutes*60*1e3,de.checkTitleRateLimitNum);const a=[...Nt].sort();this.state=t??{confirmedTitles:{},order:a,enums:{},formFields:{title:"",answer:"",hexColor:"000000",difficulty:null,flavortext:"",solution:"",instructions:"",notes:"",sharePermission:null}}}init(){this.setAdminQueueTask(),this.updateCustomPuzzle()}getAdminQueueTask(){const{formFields:{sharePermission:e},status:n}=this.state,{teamId:t}=this.ctx.scope;if(n!==void 0)switch(n.type){case Q.WRONG_ORDER:return;case Q.PENDING:case Q.ACCEPTED:case Q.REJECTED:return{type:ce.PUZZLE_SUBMISSION,submissionType:Le.PUZZLE_105,teamId:t,requestTime:n.submitTime,respondTime:As(this.state)??void 0,isPublicCustomPuzzle:n.type===Q.ACCEPTED&&n.isAvailableInGacha?!0:void 0,isPrivate:e===Yt.NONE?!0:void 0}}}setAdminQueueTask(){const e=this.ctx.server.getAdminQueueEngine(),n=this.getAdminQueueTask();n!==void 0&&(this.adminQueueTaskId===void 0?this.adminQueueTaskId=e.addSubmissionTask(n):e.updateTask(this.adminQueueTaskId,n))}getPermissions(e){return e.teamId===this.ctx.scope.teamId?N.FULL:N.ADMIN_ONLY}getPublicState(){return Ss(this.state)}getState(){return this.state}getSlowSyncState(){return this.state}isCorrect(){return this.state.order.every((e,n)=>e===Nt[n])}getHasPublicCustomPuzzle(){const{status:e}=this.state;return!(e===void 0||e.type!==Q.ACCEPTED||!(e.isAvailableInGacha??!1))}applyAndBroadcastUpdate(e){oe(v.TEAM_PUZZLE_105,this.state,e),this.ctx.update(this.ctx.scope,e)}async handleImageSubmissionAsync(e){oe(v.TEAM_PUZZLE_105,this.state,{diagramUrl:e}),await this.ctx.fastSyncAsync(this.ctx.scope),this.ctx.update(this.ctx.scope,{diagramUrl:this.state.diagramUrl})}async setStatusAsync(e){const n=e.type===Q.REJECTED&&this.state.status!==void 0&&this.state.status.type!==Q.REJECTED,{puzName:t}=de,{server:a,scope:{teamId:o}}=this.ctx;e.type===Q.ACCEPTED&&await this.teamController.modifyTeamProgressAsync(r=>{r.addSolvePuzzle(t)}),this.applyAndBroadcastUpdate({setStatus:e}),n&&a.broadcastNotifToTeam(o,{type:Ce.SUBMISSION_REJECTED,puzName:t}),this.setAdminQueueTask(),this.updateCustomPuzzle()}updateCustomPuzzle(){const{server:e,scope:{teamId:n}}=this.ctx,{status:t,formFields:{title:a,answer:o,flavortext:r,solution:i,instructions:h},diagramUrl:g}=this.state;if(!(t!==void 0&&t.type===Q.ACCEPTED))return;const y=`
      <Puzzle105Content data={${JSON.stringify({teamId:n,flavortext:r,diagramUrl:g,instructions:h})}} />
    `,f=`
      <p>${i.split(`
`).map(z=>`{${JSON.stringify(z)}}`).join("<br/>")}</p>
    `;e.setCustomPuzzle(ia(n,a,o,t,y,f),t.cannedHint),e.handleTeamSummaryUpdate(n,{numSolves:this.teamController.getLeaderboardNumSolves()})}async handleStepAsync(e,n){const{server:t}=this.ctx,a=de.puzName,{checkTitle:o,downloadDiagramUrl:r,submit:i,ignoreSubmitErrors:h,setStatus:g,...y}=n,{movePuz:f,formFields:z}=y;if(g!==void 0)return e.conn.isAdmin?this.state.status!==void 0&&this.state.status.type===Q.ACCEPTED&&g.type!==Q.ACCEPTED?e.setBadRequest():(await this.setStatusAsync((()=>{switch(g.type){case Q.ACCEPTED:case Q.REJECTED:return{...g,reviewTime:t.clock.genTimestamp()};default:return g}})()),e.sendStepResp(this.ctx.scope,{})):e.setPermissionDenied();if(!e.conn.isAdmin&&(!this.teamController.isPuzzleUnlocked(a)||this.teamController.isPuzzleSolvedOrPendingSolved(a)||!Ns(this.state)))return e.sendStepResp(this.ctx.scope,{});if(o!==void 0){const{puzName:w,title:E}=o;if(this.state.confirmedTitles[w]!==void 0)return e.sendStepResp(this.ctx.scope,{checkTitleResp:tn.ALREADY_SOLVED});const O=Ot[w],x=Se(E)===Se(O);return this.state.checkTitleThrottledTime!==void 0&&t.clock.genTimestamp()<this.state.checkTitleThrottledTime||!this.checkTitleRateLimiter.checkRequest(x?0:1)?e.sendStepResp(this.ctx.scope,{checkTitleResp:tn.RATE_LIMITED}):(t.getOrCreateEngineOrThrow({type:v.TEAM_TITLES,teamId:this.ctx.scope.teamId}).applyAndBroadcastUpdate({titles:{[w]:x?O:E}}),x&&this.applyAndBroadcastUpdate({setConfirmedTitles:{[w]:O}}),this.checkTitleRateLimiter.isRateLimited()&&this.applyAndBroadcastUpdate({setCheckTitleThrottledTime:t.clock.genTimestamp()+de.checkTitleRateLimitIntervalMinutes*60*1e3+Pt}),e.sendStepResp(this.ctx.scope,{checkTitleResp:x?tn.CORRECT:tn.WRONG}))}if(r??!1)return await t.triggerSlowSyncDownloadAsync(!0),e.sendStepResp(this.ctx.scope,{});if(i!==void 0){const w=e.conn.isAdmin&&(h??!1);if(Os(this.state).length>0&&!w)return e.sendStepResp(this.ctx.scope,{});const E=t.clock.genTimestamp(),O=Ps(this.state);return O!==null&&E<O-Pt&&!w?e.setPermissionDenied():this.isCorrect()||w?(await this.setStatusAsync({type:Q.PENDING,submitTime:E}),e.sendStepResp(this.ctx.scope,{})):(await this.teamController.modifyTeamProgressAsync(L=>{L.addSolveAttempt(a,{})}),await this.setStatusAsync({type:Q.WRONG_ORDER,reopenTime:E+ai,submitTime:E}),e.sendStepResp(this.ctx.scope,{}))}if(f!==void 0){const{puzName:w,diff:E}=f;if(Ot[w]===void 0||![-1,1].includes(E))return e.setPermissionDenied()}if(z!==void 0&&Cs(z).length>0)return e.setPermissionDenied();this.applyAndBroadcastUpdate(y)}}const oi={createEngine:({execCtx:s,engineCtx:e,initState:n})=>{const{controller:t,scope:a}=e,o=t.getTeamControllerIfExists(a.teamId);return o===null?s.setErrCodeAndReturn(D.INVALID_TEAM,null):new si(e,o,n)},engineIdentityFunc:s=>s};class ii{constructor(e,n){u(this,"ctx");u(this,"state");this.ctx=e,this.state=n}getPermissions(e){return this.isVisibleToTeam(e.teamId)?N.READ:N.ADMIN_ONLY}getState(){return this.state}isVisibleToTeam(e){return(this.state.puzName===null||this.ctx.server.getTeamController(e).isPuzzleUnlocked(this.state.puzName))&&this.state.isPublished}getSummary(){const{puzName:e,timestamp:n}=this.state;return{puzName:e,timestamp:n}}overrideContent(e){this.state=e,this.ctx.assign(this.ctx.scope,this.state)}}const ri={createEngine:({execCtx:s,engineCtx:e,initState:n})=>n===void 0?s.setErrCodeAndReturn(D.PERMISSION_DENIED,null):new ii(e,n),engineIdentityFunc:s=>s};class li{constructor(e){u(this,"ctx");this.ctx=e}getPermissions(e){return e.teamId===this.ctx.scope.teamId?N.FULL:N.ADMIN_ONLY}getState(){const{server:e,scope:{teamId:n}}=this.ctx;return Object.fromEntries(Object.values(e.scopeEnginesController.getEnginesForType(v.ERRATUM_CONTENT)).filter(t=>t.isVisibleToTeam(n)).map(({ctx:{scope:{erratumId:t}},state:{puzName:a,timestamp:o}})=>[t,{puzName:a,timestamp:o}]))}}const ui={createEngine:({engineCtx:s})=>new li(s),engineIdentityFunc:s=>s};class ci{constructor(e,n){u(this,"ctx");u(this,"rawContent");this.ctx=e,this.rawContent=n}getPermissions(e){const{server:n,scope:{puzName:t}}=this.ctx;if(n.getIsHuntOver())return N.READ;const a=n.getTeamController(e.teamId),{solutionInEdges:o=[]}=n.getPuzzle(t);return!Rs(t,a.isPuzzleUnlocked(t),a.isPuzzleSolved(t))||o.length>0&&!a.progressTracker.isPuzzleSolutionReqsSatisfied(t)?N.ADMIN_ONLY:N.READ}getState(){const{server:e,scope:{puzName:n}}=this.ctx,t=e.tryGetPuzzle(n),{customPuzzleSolutionContent:a,answer:o=null,authors:r,otherCredits:i}=t??{};return{...a!==void 0&&this.rawContent===void 0?{hash:"",content:a}:this.rawContent??{hash:"",content:""},answer:o,authors:r,otherCredits:i}}updateContent(){const{server:e,scope:{puzName:n}}=this.ctx,t=e.puzzlesDB.content.solutions[n];qt(t,this.rawContent)||(this.rawContent=t,this.ctx.assign(this.ctx.scope,this.getState()))}}const hi={createEngine:({execCtx:s,engineCtx:e})=>{const{server:n,scope:t}=e,{puzName:a}=t;return new ci(e,n.puzzlesDB.content.solutions[a])},engineIdentityFunc:s=>s};class di{constructor(e,n){u(this,"ctx");u(this,"hintContent");u(this,"isInvalid");this.ctx=e,this.hintContent=n,this.isInvalid=!1}getPermissions(e){return this.isInvalid?N.ADMIN_ONLY:N.FULL}getState(){return{content:this.hintContent}}updateContent(){const{server:e,scope:{puzName:n,index:t}}=this.ctx,a=e.getCannedHintsForPuzzle(n)[t];if(a===void 0){this.isInvalid=!0;return}this.hintContent!==a&&(this.hintContent=a,this.ctx.assign(this.ctx.scope,{content:this.hintContent}))}}const mi={createEngine:({execCtx:s,engineCtx:e})=>{const{server:n,scope:t}=e,{puzName:a,index:o}=t,r=n.getCannedHintsForPuzzle(a)[o];return r===void 0?s.setErrCodeAndReturn(D.INVALID_HINT,null):new di(e,r)},engineIdentityFunc:s=>s};class pi{constructor(e,n,t){u(this,"ctx");u(this,"teamController");u(this,"state");u(this,"adminQueueTaskId");this.ctx=e,this.teamController=n,this.state=t}init(){this.setAdminQueueTask()}getAdminQueueTask(){const{teamId:e,puzName:n,request:t,response:a}=this.state;return{type:ce.HINT,teamId:e,puzName:n,requestTime:t.timestamp,respondTime:(a==null?void 0:a.timestamp)??void 0}}setAdminQueueTask(){const e=this.ctx.server.getAdminQueueEngine(),n=this.getAdminQueueTask();n!==void 0&&(this.adminQueueTaskId===void 0?this.adminQueueTaskId=e.addTask({type:ce.HINT,hintId:this.ctx.scope.hintId},n):e.updateTask(this.adminQueueTaskId,n))}getPermissions(e){return e.teamId===this.state.teamId?N.READ:N.ADMIN_ONLY}getState(){return this.state}handleResponseNoBackendSync(e){const{server:n}=this.ctx,{puzName:t,teamId:a}=this.state,o=dn(this.state.request,this.state.response),i=(dn(this.state.request,e)?1:0)-(o?1:0),h=this.teamController.getHintsEngine();h.updatePuzzle(t,(h.state.puzzleNumUsedTokens[t]??0)+i,!1),this.state.response=e,this.ctx.update(this.ctx.scope,{response:e}),[Ge.OBSOLETE].includes(e.type)||n.broadcastNotifToTeam(a,{type:Ce.HINT_ANSWERED,puzName:t}),this.setAdminQueueTask()}handleResponse(e){const{server:n,scope:{hintId:t}}=this.ctx;this.handleResponseNoBackendSync({...e,timestamp:n.clock.genTimestamp()}),this.teamController.mergeSlowSyncPacket({hints:{[t]:this.state}})}async setResponseAsync(e){[Ge.ANSWERED].includes(e.type)&&await this.teamController.modifyTeamProgressAsync(n=>n.overridePuzzleNumCannedHintsFound(this.state.puzName,this.ctx.server.getCannedHintsForPuzzle(this.state.puzName).length,{type:he.HINT_ANSWERED})),this.handleResponse(e)}async handleStepAsync(e,n){const{setResponse:t}=n;if(t!==void 0)return await this.setResponseAsync(t),e.sendStepResp(this.ctx.scope,"")}}const fi={createEngine:({execCtx:s,engineCtx:e,initState:n})=>{if(n===void 0)return s.setErrCodeAndReturn(D.PERMISSION_DENIED,null);const{controller:t}=e,a=t.getTeamControllerIfExists(n.teamId);return a===null?s.setErrCodeAndReturn(D.INVALID_TEAM,null):new pi(e,a,n)},engineIdentityFunc:s=>s};class gi{constructor(e,n){u(this,"ctx");u(this,"teamController");this.ctx=e,this.teamController=n}getPermissions(e){return e.teamId===this.ctx.scope.teamId?N.FULL:N.ADMIN_ONLY}getPuzzleCannedHintsState(e){const{server:n}=this.ctx,{progressTracker:t}=this.teamController;return{numTotal:t.view.puzzleNumTotalCannedHints.get(e)??0,numOpened:t.view.puzzleNumOpenedCannedHints.get(e)??0,numMax:n.getCannedHintsForPuzzle(e).length}}getState(){const{progressTracker:e}=this.teamController;return{cannedHints:Object.fromEntries(Array.from(e.view.puzzleNumTotalCannedHints.keys(),n=>[n,this.getPuzzleCannedHintsState(n)]))}}handlePuzzlesUpdate(e){e.length>0&&this.ctx.update(this.ctx.scope,{cannedHints:Object.fromEntries(e.map(n=>[n,this.getPuzzleCannedHintsState(n)]))})}handleTeamProgressUpdate(e){const{puzzleCannedHints:n}=e;n!==void 0&&this.handlePuzzlesUpdate(Object.keys(n))}async handleStepAsync(e,n){const{openCannedHint:t}=n;if(t!==void 0){const{puzName:a,index:o}=t;await this.teamController.modifyTeamProgressAsync(async r=>{const i=r.view.puzzleNumTotalCannedHints.get(a)??0,h=r.view.puzzleNumOpenedCannedHints.get(a)??0;if(!Number.isInteger(o)||o!==h||h>=i)return e.sendStepResp(this.ctx.scope,{type:zt.INVALID_INDEX});r.addEvent(P.OPEN_CANNED_HINT,{puzName:a}),e.sendStepResp(this.ctx.scope,{type:zt.SUCCESS})})}}}const bi={createEngine:({execCtx:s,engineCtx:e})=>{const{controller:n,scope:t}=e,a=n.getTeamControllerIfExists(t.teamId);return a===null?s.setErrCodeAndReturn(D.INVALID_TEAM,null):new gi(e,a)},engineIdentityFunc:s=>s};class Oe{constructor(e){u(this,"conn");u(this,"err");u(this,"isFatal");u(this,"logErrDebugInfoAsync");u(this,"activeMsgRaw");this.logErrDebugInfoAsync=e}setErr(e,n){if(this.logErrDebugInfoAsync!==void 0&&this.logErrDebugInfoAsync(`encountered error ${JSON.stringify(e)}${this.activeMsgRaw!==void 0?` while processing request ${this.activeMsgRaw}`:""}!
${new Error().stack}
`).catch(console.error),this.conn===void 0)throw new Error(`encountered error ${JSON.stringify(e)} in server-triggered exec context`);if(this.err!==void 0)throw new Error(`new error generated when previous error ${JSON.stringify(this.err)} not yet flushed`);this.err=e,this.isFatal=n}setErrCode(e,n){this.setErr({errCode:e},n)}setErrAndReturn(e,n){return this.setErr(e),n}setErrCodeAndReturn(e,n){return this.setErrCode(e),n}setBadRequest(){this.setErrCode(D.BAD_REQUEST)}setBadRequestAndReturn(e){this.setErrCodeAndReturn(D.BAD_REQUEST,e)}setPermissionDenied(){this.setErrCode(D.PERMISSION_DENIED)}setHuntIsOver(){this.setErrCode(D.HUNT_IS_OVER)}flushErr(e){const{conn:n,err:t}=this;if(t!==void 0){if(delete this.err,n===void 0)throw new Error("flushing error in server-triggered exec context");return(e??!0)&&(n.sendErr(t),delete this.activeMsgRaw,(this.isFatal??!1)&&n.close()),t}}}class yi extends Oe{constructor(n,t){super(t);u(this,"conn");this.conn=n}sendStepResp(n,t){this.conn.sendStepResp(n,t)}}class zi{constructor(e,n,t){u(this,"ctx");u(this,"teamController");u(this,"state");this.ctx=e,this.teamController=n,this.state=t??{hints:{},numTotalTokens:0,puzzleNumUsedTokens:{},openHints:{}}}getPermissions(e){return e.teamId===this.ctx.scope.teamId?N.FULL:N.ADMIN_ONLY}getState(){return this.state}applyUpdate(e){const{server:n,scope:{teamId:t}}=this.ctx;oe(v.TEAM_HINTS,this.state,e),this.ctx.update(this.ctx.scope,e),n.bigBoardStateTracker.updateTeam(t,{numHintsTotal:e.setNumTotalTokens,unlocks:Object.fromEntries(Object.entries(e.updPuzzleNumUsedTokens??{}).map(([a,o])=>[a,{numHintsUsed:o}]))})}getNumUnusedHintTokens(){return this.state.numTotalTokens-xs(this.state)}addHint(e,n){const{server:t}=this.ctx,{puzName:a}=n;if(t.scopeEnginesController.createEngine(new Oe,{type:v.HINT,hintId:e},n)===null)throw new Error("failed to create hint engine");const r=dn(n.request,n.response);return this.applyUpdate({addHint:{puzName:a,hintId:e},updPuzzleNumUsedTokens:r?{[a]:(this.state.puzzleNumUsedTokens[a]??0)+1}:void 0,updOpenHints:n.response===null?{[a]:!0}:void 0}),t.statsController.addHint(n),e}updatePuzzle(e,n,t){this.applyUpdate({updPuzzleNumUsedTokens:{[e]:n},updOpenHints:{[e]:t}})}handleTeamProgressUpdate(e){var n;((n=e.diffTeamGlobalCounters)==null?void 0:n[P.GET_HINT_TOKEN])!==void 0&&this.applyUpdate({setNumTotalTokens:this.teamController.progressTracker.view.getNumTotalHintTokens()});for(const t of Object.values(this.state.hints))for(const a of Object.keys(t)){const o=this.ctx.server.scopeEnginesController.getEngineIfExists({type:v.HINT,hintId:a});if(o===void 0)throw new Error(`could not find engine for hint ${a}`);const r=o.state;r.response!==null||!(e.solves[r.puzName]??!1)||o.handleResponse({type:Ge.OBSOLETE,content:""})}}async handleStepAsync(e,n){const{server:t,scope:{teamId:a}}=this.ctx,{puzName:o,req:r}=n,i=t.tryGetPuzzle(o);if(i===null||!Ds(i))return e.setErrCode(D.INVALID_PUZZLE);if(r.content.length>Ls)return e.setBadRequest();const h=this.getNumUnusedHintTokens(),{openHints:g}=this.state,y=Object.keys(g)[0]??null,f=Hs(t.isHuntClosed(),t.opts.isPosthunt??!1,h,y,r.isFollowup??!1);if(f.type===Fs.SUCCESS){const z={teamId:a,puzName:o,request:{...r,timestamp:t.clock.genTimestamp()},response:null},w=this.teamController.genHintId();this.addHint(w,z),this.teamController.mergeSlowSyncPacket({hints:{[w]:z}})}e.sendStepResp(this.ctx.scope,f)}}const wi={createEngine:({execCtx:s,engineCtx:e,initState:n})=>{const{controller:t,scope:a}=e,o=t.getTeamControllerIfExists(a.teamId);return o===null?s.setErrCodeAndReturn(D.INVALID_TEAM,null):new zi(e,o,n)},engineIdentityFunc:s=>s};class vi{constructor(e,n){u(this,"ctx");u(this,"state");this.ctx=e,this.state=n}getPermissions(e){const n=this.ctx.server.getTeamController(e.teamId);if(!n.isPuzzleUnlocked(this.state.puzName))return N.ADMIN_ONLY;const{keyframeReq:t}=this.state;return t!==void 0&&!n.getIsConditionSatisfied(t)?N.ADMIN_ONLY:N.READ}getState(){return this.state}}const Ti={createEngine:({execCtx:s,engineCtx:e,initState:n})=>{const{server:t,scope:a}=e,o=t.puzzlesDB.keyframesData.keyframes[a.keyframeId];return o===void 0?s.setErrCodeAndReturn(D.INVALID_KEYFRAME,null):new vi(e,o)},engineIdentityFunc:s=>s};class Ei{constructor(e,n){u(this,"ctx");u(this,"teamController");this.ctx=e,this.teamController=n}getPermissions(e){return e.teamId===this.ctx.scope.teamId?N.FULL:N.ADMIN_ONLY}async handleStepAsync(e,n){const{server:t,scope:{teamId:a}}=this.ctx,{setCutsceneComplete:o,chooseDialogOption:r}=n;if(o!==void 0){const i=o,h=t.tryGetPuzzle(i);if(h===null||!(h.isStory??!1))return e.setErrCode(D.INVALID_PUZZLE);await this.teamController.modifyTeamProgressAsync(g=>{if(!e.conn.isAdmin&&!g.hasUnlockPuzzle(i))return e.setErrCode(D.INVALID_PUZZLE);if(i===de.cutsceneChoice.cutscenePuzName){const y=g.view.cutsceneChoices.get(de.cutsceneChoice.keyframeId);if(y===void 0)return e.setErrCode(D.INVALID_PUZZLE);if(y===de.cutsceneChoice.freePuzzleIndex){const f=`${de.customPuzzlePuzNamePrefix}${a}`,z=t.tryGetPuzzle(f);z!==null&&g.addUnlockPuzzle(z.puzName)}}return g.addSolvePuzzle(i),!1})}if(r!==void 0){const{keyframeId:i,index:h}=r,g=t.puzzlesDB.keyframesData.keyframes[i];if(g===void 0)return e.setErrCode(D.INVALID_KEYFRAME);const y=(g.dialogOptions??[]).length;return Number.isInteger(h)&&h>=0&&h<y?await this.teamController.modifyTeamProgressAsync(f=>{var O;const z=(O=g.dialogOptionsReqs)==null?void 0:O[h];return z===void 0||this.teamController.getIsConditionSatisfied(z)?(f.view.cutsceneChoices.get(i)===void 0&&f.addEvent(P.CUTSCENE_CHOICE,{keyframeId:i,index:h}),e.sendStepResp(this.ctx.scope,{})):e.sendStepResp(this.ctx.scope,{isDisallowed:!0})}):e.setBadRequest()}e.sendStepResp(this.ctx.scope,{})}}const _i={createEngine:({execCtx:s,engineCtx:e})=>{const{controller:n,scope:t}=e,a=n.getTeamControllerIfExists(t.teamId);return a===null?s.setErrCodeAndReturn(D.INVALID_TEAM,null):new Ei(e,a)},engineIdentityFunc:s=>s};class Ii{constructor(e,n){u(this,"ctx");u(this,"state");this.ctx=e,this.state=n??{submittedImages:{}}}getPermissions(e){return(this.ctx.server.opts.enableDevFeatures??!1)&&e.teamId===this.ctx.scope.teamId?N.FULL:N.ADMIN_ONLY}async handleReqAsync(e,n,t){const a={[Nn.DUMMY]:async()=>"Mock direct backend is up!",[Nn.SUBMIT_IMAGE]:async({slot:i})=>{if(t===void 0)return e.setBadRequestAndReturn(null);const h=e.conn.teamId,g=`${i}_${h}`;return this.state.submittedImages[g]=t,this.ctx.onModify(),await this.ctx.server.handleImageSubmissionAsync(h,i,t),""},[Nn.GET_ERRATUM_EMAILS]:async({puzName:i})=>["solver1@example.com","solver2@example.com","solver3@example.com"]},o=n.type,r=await a[o](n.payload);return r===null?null:{type:o,payload:r}}async handleStepAsync(e,n){const{req:t,file:a}=n,o=await this.handleReqAsync(e,t,a);o!==null&&e.sendStepResp(this.ctx.scope,o)}}const ki={createEngine:({engineCtx:s,initState:e})=>new Ii(s,e),engineIdentityFunc:s=>s},Fn=["🔎","🎪","💄","🪶","🌿","💎","💎","🍃","🪶","🔮","🎨","🌲","🐾","👯","🐧⚡️","🌿","👾","👾","👾","👾","🔥","🍙","🚑","🛸💜","🍬","🎹✨","🐏"],Gn=[":_bluestick:",":_bluestick:",":_bluestick:",":_bluestick:",":_psyllium12:",":_psyllium12:",":_psyllium12:",":_LSL:",":_LSL:",":_LSL:",":_psyllium6:",":_psyllium6:",":_psyllium6:",":_penraito:",":_penraito:",":_サイリウム:",":_サイリウム:",":_bluestick:",":_lightbulb:",":_lightbulb:",":_lightbulb:",":_lightbulb:",":_lightbulb:",":_lightbulb:",":_LSL:",":_LSL:",":_psyllium6:",":_psyllium6:",":_psyllium6:",":_penraito:",":_penraito:",":_サイリウム:",":_サイリウム:",":_irysLight2:",":_bluestick:",":_lightbulb:",":_はてな:",":_はてな:",":_はてな:",":_はてな:",":_lightbulb:",":_LSL:",":_LSL:",":_psyllium6:",":_psyllium6:",":_greenlight:",":_ameGatorIdol:",":_サイリウム:",":_サイリウム:",":_サイリウム:",":_irysLight2:",":_bluestick:",":_lightbulb:",":_lightbulb:",":_lightbulb:",":_lightbulb:",":_lightbulb:",":_lightbulb:",":_LSL:",":_psyllium6:",":_psyllium6:",":_pekoサイリウム:",":_song:",":_psyllium5:",":_ameGatorIdol:",":_サイリウム:",":_irysLight2:",":_irysLight2:",":_bluestick:",":_bluestick:",":_psyllium12:",":_psyllium12:",":_psyllium12:",":_LSL:",":_LSL:",":_LSL:",":_psyllium6:",":_glowstickR:",":_greenlight:",":_LSright:",":_song:",":_psyllium5:",":_ameGatorIdol:",":_irysLight2:",":_irysLight2:",":_bluestick:",":_bluestick:",":_psyllium12:",":_psyllium12:",":_psyllium12:",":_LSL:",":_LSL:",":_psyllium6:",":_ペンライト:",":_greenlight:",":_LSright:",":_light1:",":_psyllium8:",":_ペンラ8:",":_ameGatorIdol:",":_irysLight2:",":_irysLight2:",":_bluestick:",":_psyllium12:",":_psyllium12:",":_psyllium12:",":_LSL:",":_LSL:",":_LSL:",":_psyllium6:",":_greenlight:",":_light1:",":_スバルすばるさいりうむ:",":_LSright:",":_light1:",":_ペンラ8:",":_ameGatorIdol:",":_irysLight2:",":_irysLight2:",":_bluestick:",":_psyllium12:",":_psyllium12:",":_psyllium12:",":_LSL:",":_LSL:",":_greenlight:",":_light1:",":_irysBread2:",":_ペンラ8:",":_ペンラ8:",":_mioサイリウム:",":_light1:",":_LSright:",":_ameGatorIdol:",":_irysLight2:",":_pinklight:",":_psyllium12:",":_psyllium12:",":_psyllium12:",":_LSL:",":_LSL:",":_glowstickR:",":_LSright:",":_banana:",":_mioサイリウム:",":_irysBread2:",":_irysBread2:",":_ペンラ8:",":_light1:",":_greenlight:",":_ameGatorIdol:",":_irysLight2:",":_pinklight:",":_psyllium12:",":_psyllium12:",":_psyllium12:",":_LSL:",":_pekoサイリウム:",":_greenlight:",":_スバルすばるさいりうむ:",":_緑ペンラ:",":_banana:",":_mioサイリウム:",":_ペンラ8:",":_irysBread2:",":_light1:",":_LSright:",":_ameGatorIdol:",":_pinklight:",":_pinklight:",":_psyllium12:",":_psyllium12:",":_LSL:",":_ペンライト:",":_greenlight:",":_LSright:",":_スバルすばるさいりうむ:",":_緑ペンラ:",":_banana:",":_ペンラ8:",":_mioサイリウム:",":_light1:",":_greenlight:",":_ameGatorIdol:",":_irysLight2:",":_pinklight:",":_pinklight:",":_psyllium12:",":_psyllium12:",":_greenlight:",":_light1:",":_LSright:",":_スバルすばるさいりうむ:",":_LSright:",":_mioサイリウム:",":_ペンラ8:",":_banana:",":_light1:",":_LSright:",":_ameGatorIdol:",":_ameGatorIdol:",":_pinklight:",":_pinklight:",":_pinklight:",":_psyllium12:",":_LSL:",":_ameGatorIdol:",":_psyllium5:",":_light1:",":_light1:",":_light1:",":_light1:",":_light1:",":_light1:",":_greenlight:",":_ameGatorIdol:",":_ameGatorIdol:",":_irysLight2:",":_pinklight:",":_pinklight:",":_MOCOlight:",":_psyllium12:",":_LSL:",":_LSL:",":_ameGatorIdol:",":_psyllium5:",":_psyllium5:",":_ペンラ8:",":_psyllium5:",":_LSright:",":_LSright:",":_ameGatorIdol:",":_ameGatorIdol:",":_irysLight2:",":_pinklight:",":_pinklight:",":_pinklight:",":_MOCOlight:",":_LSL:",":_LSL:",":_LSL:",":_psyllium6:",":_psyllium6:",":_ameGatorIdol:",":_ameGatorIdol:",":_ameGatorIdol:",":_ameGatorIdol:",":_ameGatorIdol:",":_irysLight2:",":_irysLight2:",":_irysLight2:",":_pinklight:",":_pinklight:",":_MOCOlight:",":_MOCOlight:",":_LSL:",":_LSL:",":_psyllium6:",":_psyllium6:",":_psyllium6:",":_penraito:",":_penraito:",":_サイリウム:",":_サイリウム:",":_irysLight2:",":_irysLight2:",":_irysLight2:",":_pinklight:",":_pinklight:",":_pinklight:",":_MOCOlight:",":_MOCOlight:",":_LSL:",":_LSL:",":_psyllium6:",":_psyllium6:",":_penraito:",":_penraito:",":_サイリウム:",":_サイリウム:",":_サイリウム:",":_irysLight2:",":_irysLight2:",":_irysLight2:",":_pinklight:",":_pinklight:",":_MOCOlight:",":_MOCOlight:",":_MOCOlight:"];class Ai{constructor(e,n,t){u(this,"ctx");u(this,"teamController");u(this,"state");this.ctx=e,this.teamController=n,this.state={grid1:new Array(ye.grid1Length).fill(null),grid2:new Array(ye.grid2Width*ye.grid2Height).fill(null)};for(const a of(t==null?void 0:t.grid1Reveals)??[])this.state.grid1[Number(a)]=Fn[a];for(const a of(t==null?void 0:t.grid2Reveals)??[])this.state.grid2[Number(a)]=Gn[a]}getPermissions(e){return e.teamId===this.ctx.scope.teamId?N.FULL:N.ADMIN_ONLY}getState(){const e=this.teamController.progressTracker.view.getNumOliveWishes();return{...this.state,numWishes:e,numTotalGrid1Tokens:Math.min(6+3*e,ye.grid1Length),numTotalGrid2Tokens:Math.min(40+40*e,ye.grid2Width*ye.grid2Height)}}getSlowSyncState(){return{grid1Reveals:Object.entries(this.state.grid1).filter(([e,n])=>n!==null).map(([e,n])=>Number(e)),grid2Reveals:Object.entries(this.state.grid2).filter(([e,n])=>n!==null).map(([e,n])=>Number(e))}}handleTeamProgressUpdate(){const{numWishes:e,numTotalGrid1Tokens:n,numTotalGrid2Tokens:t}=this.getState();this.ctx.update(this.ctx.scope,{numWishes:e,numTotalGrid1Tokens:n,numTotalGrid2Tokens:t})}validateReveal(e,n,t){return!Number.isInteger(e)||e<0||e>=n.length||n[e]!==null?!1:n.filter(o=>o!==null).length<t}async handleStepAsync(e,n){const{revealGrid1:t,revealGrid2:a}=n,o={},r=this.getState(),i=ye.puzName;return!e.conn.isAdmin&&!this.teamController.isPuzzleUnlocked(i)?e.sendStepResp(this.ctx.scope,""):(t!==void 0&&this.validateReveal(t,this.state.grid1,r.numTotalGrid1Tokens)&&(this.state.grid1[t]=Fn[t],o.setGrid1={[t]:Fn[t]}),a!==void 0&&this.validateReveal(a,this.state.grid2,r.numTotalGrid2Tokens)&&(this.state.grid2[a]=Gn[a],o.setGrid2={[a]:Gn[a]}),this.ctx.update(this.ctx.scope,o),e.sendStepResp(this.ctx.scope,""))}}const Si={createEngine:({execCtx:s,engineCtx:e,initState:n})=>{const{controller:t,scope:a}=e,o=t.getTeamControllerIfExists(a.teamId);return o===null?s.setErrCodeAndReturn(D.INVALID_TEAM,null):new Ai(e,o,n)},engineIdentityFunc:s=>s};class Ni{constructor(e){u(this,"ctx");u(this,"state");this.ctx=e,this.state={tasks:{}}}getPermissions(e){return N.ADMIN_ONLY}getState(){return this.state}applyAndBroadcastUpdate(e){oe(v.ADMIN_QUEUE,this.state,e),this.ctx.update(this.ctx.scope,e)}addTask(e,n){const t=n.requestTime.toString(),a={type:v.ADMIN_QUEUE_TASK,taskId:t},{controller:o}=this.ctx,r=o.getEngineIfExists(a)??o.createEngine(new Oe,a,{task:e});if(r===null)throw new Error(`failed to create task engine for ${t}`);return this.applyAndBroadcastUpdate({setTasks:{[t]:n}}),r.notifyChangeToAdmin(!0),t}addSubmissionTask(e){const{submissionType:n,teamId:t}=e;return this.addTask({type:ce.PUZZLE_SUBMISSION,submissionType:n,teamId:t},e)}updateTask(e,n){const t=this.ctx.controller.getEngineIfExists({type:v.ADMIN_QUEUE_TASK,taskId:e});if(t===void 0)throw new Error(`could not find task engine for ${e}`);this.applyAndBroadcastUpdate({setTasks:{[e]:n}}),n.respondTime!==void 0&&n.respondTime===null&&t.clearClaimer(),t.notifyChangeToAdmin(!1)}}const Oi={createEngine:({engineCtx:s})=>new Ni(s),engineIdentityFunc:s=>s};class Pi{constructor(e,n){u(this,"ctx");u(this,"state");u(this,"notificationBackendState");this.ctx=e;const{notificationBackendState:t,...a}=n;this.state=a,this.notificationBackendState=t??{}}getPermissions(e){return N.ADMIN_ONLY}getState(){return this.state}getSlowSyncState(){return{...this.state,notificationBackendState:this.notificationBackendState}}notifyChangeToAdmin(e){const{server:n,controller:t,scope:{taskId:a}}=this.ctx,o=n.opts.adminNotifier;if(o===void 0)return;const r=n.getAdminQueueEngine().state.tasks[a],{task:i,claim:h}=this.state,g={taskSummary:r,claim:h,backendState:this.notificationBackendState,isInit:e},y=(()=>{switch(i.type){case ce.HINT:{const{hintId:f}=i,z=t.getEngineIfExists({type:v.HINT,hintId:f});if(z===void 0)throw new Error(`could not find hint engine for ${f}`);const w=z.state,E=n.getTeamController(w.teamId).displayName;return{...g,type:ce.HINT,hintId:f,hint:w,teamDisplayName:E}}case ce.PUZZLE_SUBMISSION:{const{submissionType:f,teamId:z}=i,w=n.getTeamController(z).displayName;return{...g,type:ce.PUZZLE_SUBMISSION,submissionType:f,teamDisplayName:w}}}})();(n.config.disableAdminNotifier??!1)||o.notifyTask(y).then(f=>{f!==void 0&&(this.notificationBackendState=f),this.ctx.onModify()},f=>console.warn("adminNotifier error:",f))}applyAndBroadcastUpdate(e){oe(v.ADMIN_QUEUE_TASK,this.state,e),this.ctx.update(this.ctx.scope,e),this.notifyChangeToAdmin(!1)}clearClaimer(){this.state.claim!==void 0&&this.applyAndBroadcastUpdate({claim:null})}async handleStepAsync(e,n){if(n.claim!==void 0){const{staffId:t,force:a}=n.claim;return this.state.claim!==void 0&&this.state.claim.staffId!==t&&!(a??!1)?e.sendStepResp(this.ctx.scope,!1):(this.applyAndBroadcastUpdate({claim:{staffId:t,claimTime:this.ctx.server.clock.genTimestamp()}}),e.sendStepResp(this.ctx.scope,!0))}return n.unclaim??!1?(this.clearClaimer(),e.sendStepResp(this.ctx.scope,!0)):e.sendStepResp(this.ctx.scope,!1)}}const Ci={createEngine:({execCtx:s,engineCtx:e,initState:n})=>n===void 0?s.setErrCodeAndReturn(D.PERMISSION_DENIED,null):new Pi(e,n),engineIdentityFunc:s=>s};class Ri{constructor(e,n){u(this,"ctx");u(this,"teamController");this.ctx=e,this.teamController=n}getPermissions(e){return N.READ}getCollectibleState(e){const{num:n=0,timestamp:t=0}=this.teamController.progressTracker.view.collectibleState.get(e)??{},{name:a,nounPrefix:o,icon:r,isHiddenFromTeamName:i}=this.ctx.server.puzzlesDB.collectiblesData[e];return{name:a,nounPrefix:o,icon:r,isHiddenFromTeamName:i,num:n,timestamp:t}}getState(){const{collectibleState:e}=this.teamController.progressTracker.view;return{collectibles:Object.fromEntries(Array.from(e.entries(),([n])=>[n,this.getCollectibleState(n)]))}}getIcons(){return Gs(this.getState(),this.ctx.server.huntEndTime)}handleTeamProgressUpdate(e){const{diffCollectibleState:n={}}=e;Object.keys(n).length!==0&&this.ctx.update(this.ctx.scope,{collectibles:Object.fromEntries(Object.keys(n).map(t=>[t,this.getCollectibleState(t)]))})}}const xi={createEngine:({execCtx:s,engineCtx:e})=>{const{controller:n,scope:t}=e,a=n.getTeamControllerIfExists(t.teamId);return a===null?s.setErrCodeAndReturn(D.INVALID_TEAM,null):new Ri(e,a)},engineIdentityFunc:s=>s},Di=s=>{if("AEIOULNSTR".includes(s))return 1;if("DG".includes(s))return 2;if("BCMP".includes(s))return 3;if("FHVWY".includes(s))return 4;if("K".includes(s))return 5;if("JX".includes(s))return 8;if("QZ".includes(s))return 10;throw new Error(`unhandled char ${s} for scrabble score`)},Ct=s=>[...s].reduce((e,n)=>e+Di(n),0),Rt=(s,e)=>{if(e.length<s.length)return!1;const n=[...e];for(const t of s){const a=n.indexOf(t);if(a===-1)return!1;n.splice(a,1)}return!0},Li=(s,e)=>{const n=Array.from(Array(s.length+1),()=>Array(e.length+1));for(let t=0;t<=s.length;t++)n[t][0]=t;for(let t=0;t<=e.length;t++)n[0][t]=t;for(let t=1;t<=s.length;t++)for(let a=1;a<=e.length;a++)s[t-1]===e[a-1]?n[t][a]=n[t-1][a-1]:n[t][a]=1+Math.min(n[t-1][a],n[t][a-1],n[t-1][a-1]);return n[s.length][e.length]},Hi=(s,e)=>{const n=Array.from(Array(s.length+1),()=>Array(e.length+1));for(let t=0;t<=s.length;t++)n[t][0]=0;for(let t=0;t<=e.length;t++)n[0][t]=0;for(let t=1;t<=s.length;t++)for(let a=1;a<=e.length;a++)s[t-1]===e[a-1]?n[t][a]=1+n[t-1][a-1]:n[t][a]=0;return Math.max(...n.map(t=>Math.max(...t)))},Fi=s=>{if("QWERTYUIOP".includes(s))return 1;if("ASDFGHJKL".includes(s))return 2;if("ZXCVBNM".includes(s))return 3;throw new Error(`unhandled char ${s} for keyboard row`)},Gi=(s,e)=>[...s].every(n=>!e.includes(n)),ra=({nodes:s,edges:e})=>{const n=Object.fromEntries(s.map(({nodeId:t})=>[t,new Set]));for(const{nodeId1:t,nodeId2:a}of e)n[t].add(a),n[a].add(t);return n},Jn=(s,e)=>{const n=s.nodes.map(({nodeId:h})=>h),t=ra(s),a=Object.fromEntries(Object.entries(t).map(([h,g])=>[h,g.size])),o=new Set,r=h=>{const g=new Set;for(const y of h)for(const f of t[y])o.has(f)||g.add(f);return g};let i=new Set(n.filter(h=>a[h]===1));for(const h of e){if(i.size!==h)return!1;const g=[...i].map(y=>a[y]);if(!g.every(y=>y===g[0]))return!1;for(const y of i)o.add(y);i=r(i)}return!0},Mi={imgName:"chain49",numNodes:49,checkGraph:s=>{const e=ra(s);return Object.values(e).every(n=>[1,2].includes(n.size))}},xt={imgName:"regular8",numNodes:8,checkGraph:s=>Jn(s,[6,2])},be={imgName:"regular26",numNodes:26,checkGraph:s=>Jn(s,[18,6,2])},Ui={imgName:"doublestar28",numNodes:28,checkGraph:s=>Jn(s,[26,2])},Bi=[{graphId:"base",displayName:"Base",targetGraphSpec:be},{graphId:"animals",displayName:"Animals",instruction:"Patches must be more animal-related than not.",category:{name:"animal",threshold:.3},targetGraphSpec:be,targetLetter:"U"},{graphId:"exclusive",displayName:"Exclusive",instruction:"Patches must be at least 4 letters long. Adjacent patches may not share any letters in common.",checkNode:s=>s.content.length>=4,checkEdge:(s,e)=>Gi(s.content,e.content),targetGraphSpec:be,targetLetter:"R"},{graphId:"anagrams",displayName:"Anagrams",instruction:"Patches must be at least 3 letters long. Adjacent patches must be anagrams of each other, with at most one letter added or removed.",checkNode:s=>s.content.length>=3,checkEdge:(s,e)=>Math.abs(s.content.length-e.content.length)<=1&&(Rt(s.content,e.content)||Rt(e.content,s.content)),targetGraphSpec:be,targetLetter:"N"},{graphId:"chain",displayName:"Chain",instruction:"Patches must be at least 4 letters long. For each pair of adjacent patches, the first letter of one patch must be the same as the last letter of the other patch.",checkNode:s=>s.content.length>=4,checkEdge:(s,e)=>s.content[s.content.length-1]===e.content[0]||s.content[0]===e.content[e.content.length-1],targetGraphSpec:Mi,targetLetter:"F"},{graphId:"music",displayName:"Music",instruction:"Patches must be more music-related than not.",category:{name:"music",threshold:.3},targetGraphSpec:be,targetLetter:"U"},{graphId:"edit",displayName:"Edit",instruction:"The edit distance between adjacent patches must be at most 2.",checkEdge:(s,e)=>Li(s.content,e.content)<=2,targetGraphSpec:be,targetLetter:"S"},{graphId:"scrabble",displayName:"Scrabble",instruction:"Adjacent patches must share the same scrabble score.",checkEdge:(s,e)=>Ct(s.content)===Ct(e.content),targetGraphSpec:xt,targetLetter:"H"},{graphId:"stars",displayName:"Stars",targetGraphSpec:Ui,targetLetter:"H"},{graphId:"sports",displayName:"Sports",instruction:"Patches must be more sports-related than not.",category:{name:"sports",threshold:.3},targetGraphSpec:be,targetLetter:"O"},{graphId:"substring",displayName:"Substring",instruction:"Adjacent patches must share a substring of at least 3 letters.",checkEdge:(s,e)=>Hi(s.content,e.content)>=3,targetGraphSpec:be,targetLetter:"O"},{graphId:"initials",displayName:"Initials",instruction:"Adjacent patches must start with the same letter.",checkEdge:(s,e)=>s.content[0]===e.content[0],targetGraphSpec:be,targetLetter:"E"},{graphId:"keyboard",displayName:"Keyboard",instruction:"Patches must be at least 3 letters long. Patches must be constructed out of letters from the top row of the keyboard.",checkNode:s=>s.content.length>=3&&[...s.content].every(e=>Fi(e)===1),targetGraphSpec:xt,targetLetter:"E"}],ji=[["base","substring"],["base","animals"],["base","exclusive"],["substring","scrabble"],["substring","keyboard"],["substring","anagrams"],["animals","stars"],["animals","sports"],["animals","music"],["exclusive","edit"],["exclusive","initials"],["exclusive","chain"]],hn=["scrabble","keyboard","anagrams","stars","sports","music","edit","initials","chain","substring","animals","exclusive"],fn="base",la=s=>s.sort(([e,n],[t,a])=>{const o=e.localeCompare(t);return o!==0?o:n.localeCompare(a)}),we=Object.fromEntries([...Bi].sort((s,e)=>s.graphId.localeCompare(e.graphId)).map(({graphId:s,...e})=>[s,e])),ua=la([...ji]),Wi=la(Array.from(Array(hn.length-1).keys(),s=>[hn[s],hn[s+1]]));if(we[fn]===void 0)throw new Error(`stage ${fn} doesn't exist`);for(const[s,e]of ua){if(we[s]===void 0)throw new Error(`stage ${s} doesn't exist`);if(we[e]===void 0)throw new Error(`stage ${e} doesn't exist`)}const Dt=hn.map(s=>{var n;const e=((n=we[s])==null?void 0:n.targetLetter)??null;if(e===null)throw new Error(`no extract letter found for stage ${s}`);return e}).join("");if(Dt!=="HENHOUSEFOUR")throw new Error(`farmer does not extract correctly, gives ${Dt}`);const qi="farmer",ca=({displayName:s,instruction:e,targetGraphSpec:n})=>({displayName:s,instruction:e,targetImgName:n==null?void 0:n.imgName,targetNumNodes:n==null?void 0:n.numNodes}),ha=s=>({metadata:ca(s),graph:Bs(),prevGraphs:[],nextGraphs:[]}),Lt=()=>({stages:{[fn]:ha(we[fn])},mapEdges:[],mapExtraEdges:[]}),da=(s,e,n)=>s.targetGraphSpec!==void 0&&e.nodes.length===s.targetGraphSpec.numNodes&&!n,Ht=(s,e,n)=>{const{targetGraphSpec:t,targetLetter:a}=s,o=da(s,e,n),r=t!==void 0&&o&&t.checkGraph(e);return o?{success:r,highlightNodes:r&&a!==void 0?e.nodes.filter(i=>i.content.includes(a)).map(i=>i.nodeId):void 0}:void 0};class Yi{constructor(e,n,t){u(this,"ctx");u(this,"teamController");u(this,"state");u(this,"nextNodeId");this.ctx=e,this.teamController=n,this.state=t!==void 0?{...t,stages:Object.fromEntries(Object.entries(t.stages).map(([a,o])=>[a,{metadata:ca(we[a]),...o}]))}:Lt(),this.nextNodeId=0}getPermissions(e){return e.teamId===this.ctx.scope.teamId?N.FULL:N.ADMIN_ONLY}getState(){return this.state}getSlowSyncState(){return{...this.state,stages:Object.fromEntries(Object.entries(this.state.stages).map(([e,n])=>{const{metadata:t,...a}=n;return[e,a]}))}}applyAndBroadcastUpdate(e){oe(v.TEAM_FARMER,this.state,e),this.ctx.update(this.ctx.scope,e)}genNodeId(){const e=`${this.ctx.server.sockServerId}_${this.nextNodeId}`;return this.nextNodeId++,e}getSolveUnlocksUpdate(e){const n=new Set(Object.entries(this.state.stages).filter(([i,h])=>h.isSolved).map(([i])=>i)),t=new Set([...n,e]),a=ua.filter(([i,h])=>t.has(i)||t.has(h)),o=new Set(Object.keys(this.state.stages)),r=[...new Set(a.flat())].filter(i=>!o.has(i));return{addStages:Object.fromEntries(Array.from(r,i=>[i,ha(we[i])])),mapEdges:a.map(([i,h])=>({nodeId1:i,nodeId2:h})),mapExtraEdges:Wi.filter(([i,h])=>t.has(i)&&t.has(h)).map(([i,h])=>({nodeId1:i,nodeId2:h}))}}async handleAddNodeAsync(e,n,t){var G;const{graphId:a,content:o}=n,r=(G=this.state.stages[a])==null?void 0:G.graph;if(r===void 0)return e.setPermissionDenied();const i=Se(o),h=we[a];if(h===void 0)throw new Error(`expect stage ${h} to exist if it is found in the scope state`);const{checkNode:g,checkEdge:y,category:f}=h;if(r.nodes.some(q=>q.content===i))return e.sendStepResp(this.ctx.scope,{addNodeResp:{type:me.DUPLICATE}});if(i.length<=0)return e.sendStepResp(this.ctx.scope,{addNodeResp:{type:me.INVALID_WORD}});if(da(h,r,t))return e.sendStepResp(this.ctx.scope,{addNodeResp:{type:me.TOO_MANY_NODES}});const z=this.genNodeId(),w={nodeId:z,content:i},E=r.nodes.filter(q=>y===void 0||y(q,w)),O=await this.ctx.server.farmerServerInterface.getSimilaritiesAsync({s:i,candidates:E.map(q=>q.content),category:f});switch(O.type){case un.ERROR:return e.sendStepResp(this.ctx.scope,{addNodeResp:{type:me.SERVER_ERROR}});case un.INVALID_WORD:return e.sendStepResp(this.ctx.scope,{addNodeResp:{type:me.INVALID_WORD}});case un.NOT_IN_CATEGORY:return e.sendStepResp(this.ctx.scope,{addNodeResp:{type:me.NOT_IN_CATEGORY}})}if(g!==void 0&&!g(w))return e.sendStepResp(this.ctx.scope,{addNodeResp:{type:me.INVALID_NODE}});if(r.nodes.length===0)return this.applyAndBroadcastUpdate({updStages:{[a]:{addNodes:[w]}}}),e.sendStepResp(this.ctx.scope,{addNodeResp:{type:me.SUCCESS}});if(E.length===0)return e.sendStepResp(this.ctx.scope,{addNodeResp:{type:me.NO_EDGE}});const{similarities:x}=O;if(x.length!==E.length)throw new Error(`got ${x.length} similarities but expected ${E.length}`);(this.ctx.server.opts.logWord2Vec??!1)&&console.log(i,Object.fromEntries(Ms(E.map(q=>q.content),x)));const{currBestNodeId:F}=E.reduce((q,{nodeId:$},ee)=>x[ee]<q.currBestScore?q:{currBestNodeId:$,currBestScore:x[ee]},{currBestNodeId:null,currBestScore:0}),L=F??E[0].nodeId,j={addNodes:[w],addEdges:[{nodeId1:L,nodeId2:z}]};oe(v.TEAM_FARMER,this.state,{updStages:{[a]:j}});const U=Ht(h,r,t),_=(U==null?void 0:U.success)??!1,H=_?this.getSolveUnlocksUpdate(a):void 0,C={evaluation:U,setSolved:_?!0:void 0};return oe(v.TEAM_FARMER,this.state,{updStages:{[a]:C},...H??{}}),this.ctx.update(this.ctx.scope,{updStages:{[a]:{...j,...C}},...H??{}}),e.sendStepResp(this.ctx.scope,{addNodeResp:{type:me.SUCCESS}})}async handleStepAsync(e,n){var z;const{isWorkshop:t=!1,addNode:a,undoGraph:o,redoGraph:r,resetGraph:i,adminSetGraphSolved:h,adminResetProgress:g}=n,y=qi,f=e.conn.isAdmin&&t;if(!e.conn.isAdmin&&!this.teamController.isPuzzleUnlocked(y))return e.sendStepResp(this.ctx.scope,{});if(a!==void 0)return await this.handleAddNodeAsync(e,a,f);if(o!==void 0){const w=this.state.stages[o];return w===void 0?e.setPermissionDenied():Us(w)?(this.applyAndBroadcastUpdate({updStages:{[o]:{undo:!0}}}),e.sendStepResp(this.ctx.scope,{})):e.sendStepResp(this.ctx.scope,{})}if(r!==void 0){const w=(z=this.state.stages[r])==null?void 0:z.graph;if(w===void 0)return e.setPermissionDenied();const E=we[r];if(E===void 0)throw new Error(`expect stage ${E} to exist if it is found in the scope state`);const O={redo:!0};oe(v.TEAM_FARMER,this.state,{updStages:{[r]:O}});const F={evaluation:Ht(E,w,f)};return oe(v.TEAM_FARMER,this.state,{updStages:{[r]:F}}),this.ctx.update(this.ctx.scope,{updStages:{[r]:{...O,...F}}}),e.sendStepResp(this.ctx.scope,{})}if(i!==void 0){const w=this.state.stages[i];return w===void 0?e.setPermissionDenied():w.graph.nodes.length<=0?e.sendStepResp(this.ctx.scope,{}):(this.applyAndBroadcastUpdate({updStages:{[i]:{reset:!0}}}),e.sendStepResp(this.ctx.scope,{}))}if(h!==void 0){if(!e.conn.isAdmin)return e.setPermissionDenied();const w=this.getSolveUnlocksUpdate(h);return this.applyAndBroadcastUpdate({...w,updStages:{[h]:{setSolved:!0}}}),e.sendStepResp(this.ctx.scope,{})}return g!==void 0?e.conn.isAdmin?(this.state=Lt(),this.ctx.assign(this.ctx.scope,this.state),e.sendStepResp(this.ctx.scope,{})):e.setPermissionDenied():e.sendStepResp(this.ctx.scope,{})}}const Vi={createEngine:({execCtx:s,engineCtx:e,initState:n})=>{const{controller:t,scope:a}=e,o=t.getTeamControllerIfExists(a.teamId);return o===null?s.setErrCodeAndReturn(D.INVALID_TEAM,null):new Yi(e,o,n)},engineIdentityFunc:s=>s},Ki=["SIRENS","ALLIANCE","SCIENCE","GUY","BILLNYE","SWEET","FLOWER","PRODUCT","NECTAR","NECKWEAR","BOWTIE","MALWARE","EMAIL","NOVEL","EVIL","PROGRAM","BOWLER","TELLER","PENN","PARTNER","FILLUP","PHILLIE","PHILLY","INITIAL","DOLLY","CLONE","SCHOOL","PARTING","PIANO","TUNER","FIXER"];class Ji{constructor(e,n){u(this,"ctx");u(this,"teamController");u(this,"rateLimiter");this.ctx=e,this.teamController=n,this.rateLimiter=new oa(this.ctx.server.clock,On.rateLimit.intervalMs,On.rateLimit.num)}getPermissions(e){return e.teamId===this.ctx.scope.teamId?N.FULL:N.ADMIN_ONLY}async handleStepAsync(e,n){const{checkAnswer:t}=n,a=On.puzName;return!e.conn.isAdmin&&!this.teamController.isPuzzleUnlocked(a)?e.sendStepResp(this.ctx.scope,{}):t!==void 0?this.rateLimiter.checkRequest(1)?e.sendStepResp(this.ctx.scope,{checkAnswerResp:{isCorrect:Ki.includes(t)}}):e.sendStepResp(this.ctx.scope,{checkAnswerResp:{isRateLimited:!0}}):e.sendStepResp(this.ctx.scope,{})}}const Zi={createEngine:({execCtx:s,engineCtx:e})=>{const{controller:n,scope:t}=e,a=n.getTeamControllerIfExists(t.teamId);return a===null?s.setErrCodeAndReturn(D.INVALID_TEAM,null):new Ji(e,a)},engineIdentityFunc:s=>s},Xi=s=>s/10*150;class Qi{constructor(e,n,t){u(this,"ctx");u(this,"teamController");u(this,"state");u(this,"adminQueueTaskId");this.ctx=e,this.teamController=n,this.state=t??{}}init(){const{req:e}=this.state;e!==void 0&&this.setAdminQueueTask()}getAdminQueueTask(){const{teamId:e}=this.ctx.scope,{req:n,resp:t}=this.state;if(n!==void 0)return{type:ce.PUZZLE_SUBMISSION,submissionType:Le.PUZZLE_144,teamId:e,requestTime:n.timestamp,respondTime:t==null?void 0:t.timestamp}}setAdminQueueTask(){const e=this.ctx.server.getAdminQueueEngine(),n=this.getAdminQueueTask();n!==void 0&&(this.adminQueueTaskId===void 0?this.adminQueueTaskId=e.addSubmissionTask(n):e.updateTask(this.adminQueueTaskId,n))}getPermissions(e){return e.teamId===this.ctx.scope.teamId?N.FULL:N.ADMIN_ONLY}getState(){return this.state}getSlowSyncState(){return this.state}applyAndBroadcastUpdate(e){oe(v.TEAM_PUZZLE_144,this.state,e),this.ctx.update(this.ctx.scope,e)}async setRespAsync(e){const n={...e,hopeGained:Xi(e.numPoints),timestamp:this.ctx.server.clock.genTimestamp()};await this.teamController.modifyTeamProgressAsync(t=>{t.addSolveAttempt(Pn.puzName,{isCorrect:!0},n.hopeGained)}),this.applyAndBroadcastUpdate({setResp:n}),this.setAdminQueueTask()}async handleStepAsync(e,n){const{submitReq:t,setResp:a}=n,o=Pn.puzName;if(!e.conn.isAdmin&&(!this.teamController.isPuzzleUnlocked(o)||this.teamController.isPuzzleSolvedOrPendingSolved(o)))return e.sendStepResp(this.ctx.scope,"");if(a!==void 0){if(!e.conn.isAdmin)return e.setPermissionDenied();const{adminQueueTaskId:r,state:{req:i}}=this;return r===void 0||i===void 0?e.setPermissionDenied():(await this.setRespAsync(a),e.sendStepResp(this.ctx.scope,""))}if(t!==void 0){if(this.state.req!==void 0)return e.sendStepResp(this.ctx.scope,"");if(t.text.length>Pn.maxLength)return e.setPermissionDenied();const r={...t,timestamp:this.ctx.server.clock.genTimestamp()};return this.applyAndBroadcastUpdate({setReq:r}),this.setAdminQueueTask(),e.sendStepResp(this.ctx.scope,"")}return e.setPermissionDenied()}}const $i={createEngine:({execCtx:s,engineCtx:e,initState:n})=>{const{controller:t,scope:a}=e,o=t.getTeamControllerIfExists(a.teamId);return o===null?s.setErrCodeAndReturn(D.INVALID_TEAM,null):new Qi(e,o,n)},engineIdentityFunc:s=>s};class er{constructor(e,n){u(this,"ctx");u(this,"state");u(this,"cycleId");this.ctx=e,this.state={poolAmt:(n==null?void 0:n.poolAmt)??0},this.cycleId=(n==null?void 0:n.cycleId)??0}getPermissions(e){return N.READ}getState(){return this.state}getSlowSyncState(){const{poolAmt:e}=this.state,{cycleId:n}=this;return{poolAmt:e,cycleId:n}}addHope(e){this.state.poolAmt+=e,this.ctx.assign(this.ctx.scope,this.getState())}advanceCycle(){this.state.poolAmt=0,this.cycleId++;for(const e of Object.values(this.ctx.controller.getEnginesForType(v.TEAM_HOPE_POOL)))e.broadcastAssign();this.ctx.assign(this.ctx.scope,this.getState())}}const nr={createEngine:({execCtx:s,engineCtx:e,initState:n})=>new er(e,n),engineIdentityFunc:s=>s};class tr{constructor(e,n){u(this,"ctx");u(this,"teamController");this.ctx=e,this.teamController=n}getPermissions(e){return e.teamId===this.ctx.scope.teamId?N.FULL:N.ADMIN_ONLY}async handleStepAsync(e,n){const{solve:t}=n,a=wt.puzName;return t??!1?(await this.teamController.modifyTeamProgressAsync(o=>gn(o.getTotalHope(),this.ctx.server.clock.genTimestamp())>=wt.hopeLimit?(e.sendStepResp(this.ctx.scope,""),!1):(o.addSolvePuzzle(a),!0)),e.sendStepResp(this.ctx.scope,"")):e.sendStepResp(this.ctx.scope,"")}}const ar={createEngine:({execCtx:s,engineCtx:e})=>{const{controller:n,scope:t}=e,a=n.getTeamControllerIfExists(t.teamId);return a===null?s.setErrCodeAndReturn(D.INVALID_TEAM,null):new tr(e,a)},engineIdentityFunc:s=>s};class sr{constructor(e,n){u(this,"ctx");u(this,"teamController");u(this,"state");this.ctx=e,this.teamController=n,this.state=this.calculateState()}getPermissions(e){const{server:n,scope:t}=this.ctx;return e.teamId===t.teamId?N.FULL:n.getIsHuntOver()?N.READ:N.ADMIN_ONLY}calculateState(){const e=this.teamController.progressTracker.getHopeChangeEvents().sort(({timestamp:a},{timestamp:o})=>a-o);let n=this.teamController.progressTracker.state.hopeSnapshot??null;const t=n===null?[]:[n];for(const a of e)n=jt(n,[a]),n!==null&&t.push(n);return t}getState(){return this.state}handleTeamProgressUpdate(){var t,a;const e=this.calculateState();let n=0;for(;n<this.state.length&&!(this.state[n].hope!==((t=e[n])==null?void 0:t.hope)||this.state[n].timestamp!==((a=e[n])==null?void 0:a.timestamp));n++);n===this.state.length&&n===e.length||(this.state=e,this.ctx.update(this.ctx.scope,{keep:n,add:e.slice(n)}))}}const or={createEngine:({execCtx:s,engineCtx:e})=>{const{controller:n,scope:t}=e,a=n.getTeamControllerIfExists(t.teamId);return a===null?s.setErrCodeAndReturn(D.INVALID_TEAM,null):new sr(e,a)},engineIdentityFunc:s=>s};class ir{constructor(e,n,t){u(this,"ctx");u(this,"teamController");u(this,"state");this.ctx=e,this.teamController=n,this.state=t??{titles:{}}}getPermissions(e){return e.teamId===this.ctx.scope.teamId?N.FULL:N.ADMIN_ONLY}getState(){var n;const e=(n=this.ctx.server.scopeEnginesController.getEngineIfExists({type:v.TEAM_PUZZLE_105,teamId:this.ctx.scope.teamId}))==null?void 0:n.state.confirmedTitles;return{titles:{...this.state.titles,...e}}}getSlowSyncState(){return this.state}applyAndBroadcastUpdate(e){oe(v.TEAM_TITLES,this.state,e),this.ctx.update(this.ctx.scope,e)}async handleStepAsync(e,n){const{setTitle:t}=n;if(t!==void 0){const{puzName:a,title:o}=t;return o.length>js?e.setBadRequest():(this.applyAndBroadcastUpdate({titles:{[a]:o}}),e.sendStepResp(this.ctx.scope,""))}return e.sendStepResp(this.ctx.scope,"")}}const rr={createEngine:({execCtx:s,engineCtx:e,initState:n})=>{const{controller:t,scope:a}=e,o=t.getTeamControllerIfExists(a.teamId);return o===null?s.setErrCodeAndReturn(D.INVALID_TEAM,null):new ir(e,o,n)},engineIdentityFunc:s=>s};class lr{constructor(e,n,t){u(this,"ctx");u(this,"teamController");u(this,"state");u(this,"adminQueueTaskId");this.ctx=e,this.teamController=n,this.state=t??{}}init(){this.setAdminQueueTask()}getAdminQueueTask(){const{sharePermission:e=Ke.NONE,status:n}=this.state,{teamId:t}=this.ctx.scope;if(n!==void 0)return{type:ce.PUZZLE_SUBMISSION,submissionType:Le.PUZZLE_139,teamId:t,requestTime:n.submitTime,respondTime:Ws(this.state)??void 0,isImagePrivate:e!==Ke.BOTH?!0:void 0,isPrivate:e===Ke.NONE?!0:void 0}}setAdminQueueTask(){const e=this.ctx.server.getAdminQueueEngine(),n=this.getAdminQueueTask();n!==void 0&&(this.adminQueueTaskId===void 0?this.adminQueueTaskId=e.addSubmissionTask(n):e.updateTask(this.adminQueueTaskId,n))}getPermissions(e){return e.teamId===this.ctx.scope.teamId?N.FULL:N.ADMIN_ONLY}getState(){return this.state}getSlowSyncState(){return this.state}applyAndBroadcastUpdate(e){oe(v.TEAM_PUZZLE_139,this.state,e),this.ctx.update(this.ctx.scope,e)}async handleImageSubmissionAsync(e){oe(v.TEAM_PUZZLE_139,this.state,{diagramUrl:e}),await this.ctx.fastSyncAsync(this.ctx.scope),this.ctx.update(this.ctx.scope,{diagramUrl:this.state.diagramUrl})}async setStatusAsync(e){const n=e.type===ke.REJECTED&&this.state.status!==void 0&&this.state.status.type!==ke.REJECTED,{puzName:t}=Cn,{server:a,scope:{teamId:o}}=this.ctx;e.type===ke.ACCEPTED&&await this.teamController.modifyTeamProgressAsync(r=>{r.addSolvePuzzle(t)}),this.applyAndBroadcastUpdate({setStatus:e}),n&&a.broadcastNotifToTeam(o,{type:Ce.SUBMISSION_REJECTED,puzName:t}),this.setAdminQueueTask()}async handleStepAsync(e,n){const{submit:t,downloadDiagramUrl:a,setStatus:o}=n,r=Cn.puzName,{server:i}=this.ctx;if(!e.conn.isAdmin&&(!this.teamController.isPuzzleUnlocked(r)||this.teamController.isPuzzleSolvedOrPendingSolved(r)||!qs(this.state)))return e.sendStepResp(this.ctx.scope,"");if(o!==void 0)return e.conn.isAdmin?(await this.setStatusAsync((()=>{switch(o.type){case ke.ACCEPTED:case ke.REJECTED:return{...o,reviewTime:i.clock.genTimestamp()};default:return o}})()),e.sendStepResp(this.ctx.scope,"")):e.setPermissionDenied();if(a??!1)return await i.triggerSlowSyncDownloadAsync(!0),e.sendStepResp(this.ctx.scope,"");if(t!==void 0){const{submissionText:h,sharePermission:g}=t;return h.length>Cn.maxLength?e.sendStepResp(this.ctx.scope,""):(this.applyAndBroadcastUpdate({submissionText:h,sharePermission:g}),await this.setStatusAsync({type:ke.PENDING,submitTime:i.clock.genTimestamp()}),e.sendStepResp(this.ctx.scope,""))}return e.setPermissionDenied()}}const ur={createEngine:({execCtx:s,engineCtx:e,initState:n})=>{const{controller:t,scope:a}=e,o=t.getTeamControllerIfExists(a.teamId);return o===null?s.setErrCodeAndReturn(D.INVALID_TEAM,null):new lr(e,o,n)},engineIdentityFunc:s=>s};var Ve=(s=>(s.HINT_ANSWERED="hint_answered",s.TEAM_MEMBERS="team_members",s.ERRATUM="erratum",s.SUBMIT_IMAGE="submit_image",s))(Ve||{}),Pe=(s=>(s.GET_INIT_DATA="get_init_data",s.GET_INIT_TEAM_DATA="get_init_team_data",s.SYNC_DATA="sync_data",s))(Pe||{});const Je=93,cr="TEST_TEAM",hr=20,ma=(s,e)=>new bn(()=>s,()=>e??{},()=>({}),new fa,0),dr=(s,e)=>{const{bootstrapTeam:n={teamId:cr,displayName:"Dev Test Team"},initUnlocks:t=!1,isDev:a=!1,initState:o}=e,r=Date.now();if(o!==void 0&&o.version!==Je)throw new Error(`Unable to migrate state from version ${o.version} to ${Je}`);const i=(o==null?void 0:o.teams)??{};if(t){const h={};for(const y of Object.values((o==null?void 0:o.scopeState)??{})){if(!(x=>x.scope.type===v.TEAM_PUZZLE_105)(y))continue;const{scope:z,state:w}=y;if(z.type!==v.TEAM_PUZZLE_105)continue;const{status:E}=w;if(E===void 0||E.type!==Q.ACCEPTED||!(E.isAvailableInGacha??!1))continue;const O=ia(z.teamId,w.formFields.title,w.formFields.answer,E,"","");h[O.puzName]=O}const g=ma(s,h);g.makeBootstrapProgress({unlockAllPuzzles:t}),a&&g.addEvent(P.GET_HINT_TOKEN,{num:5,reason:{type:he.MISC}}),i[n.teamId]={displayName:n.displayName,isInactive:!1,isHidden:!1,members:["team member 1","team member 2"],viewTimes:{},hints:a?{test_hint:{teamId:n.teamId,puzName:"puz1",request:{content:"this is an example hint for testing",timestamp:r},response:{type:Ge.REFUNDED,content:"this is an example hint response for testing",timestamp:r+1e3}},test_hint_2:{teamId:n.teamId,puzName:"puz1",request:{content:"this is a very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very, very long example hint for testing",timestamp:r+1e4,isFollowup:!0},response:{type:Ge.REFUNDED,content:"this is a refund just to make the hint count zero",timestamp:r+2e4}}}:{},teamProgress:g.state}}return{version:Je,nextSockServerId:Date.now(),defaultTeamId:(o==null?void 0:o.defaultTeamId)??n.teamId,teams:i,scopeState:(o==null?void 0:o.scopeState)??{},errata:a&&o===void 0?{0:{puzName:"puz1",updatesText:"we did a thing on $PUZZLE. this is test erratum 1, it won't show in prod",puzzleText:"we did a thing. this is test erratum 1, it won't show in prod",timestamp:r,isPublished:!0},1:{puzName:null,updatesText:"we did a thing. this is test erratum 2, it won't show in prod; this should only be displayed on the errata page",puzzleText:"",timestamp:r+1e3,isPublished:!0},2:{puzName:"puz1",updatesText:"we did a thing on $PUZZLE. this is test erratum 3, it won't show in prod; this should only be displayed for admin",puzzleText:"we did a thing. this is test erratum 3, it won't show in prod; this should only be displayed for admin",timestamp:r+2e3,isPublished:!1},3:{puzName:"puz1",updatesText:"we did a thing on $PUZZLE. this is test erratum 4, it won't show in prod; this should only be displayed on the errata page",puzzleText:"",timestamp:r+3e3,isPublished:!0},4:{puzName:"puz1",updatesText:"",puzzleText:"we did a thing. this is test erratum 5, it won't show in prod; this should only be displayed on the puzzle page",timestamp:r+4e3,isPublished:!0}}:{},notifs:[],puzzles:Object.fromEntries(Array.from(s.getPuzNames({}),h=>[h,!0]))}};class mr{constructor(e,n,t,a){u(this,"puzzlesDB");u(this,"saveDbFunc");u(this,"db");u(this,"isDirty");u(this,"isSaving");this.puzzlesDB=e,this.saveDbFunc=t,this.db=n===null||n.version<Je||(()=>{for(const o of Object.keys(n.puzzles))if(e.tryGetPuzzle(o,{})===null)return!0;for(const o of e.getPuzNames({}))if(!(n.puzzles[o]??!1))return!0;return!1})()?dr(e,a??{}):n,this.isDirty=!1,this.isSaving=!1}genSockServerId(){const e=`sockServer_${this.db.nextSockServerId}`;return this.db.nextSockServerId++,this.isDirty=!0,e}async getInitData(){return{sockServerId:this.genSockServerId(),teams:Object.fromEntries(await Promise.all(Object.keys(this.db.teams).map(e=>(async()=>[e,await this.getInitTeamData(e)])()))),maxGuessesPerPuzzle:hr,scopeState:Object.fromEntries(Object.entries(this.db.scopeState).filter(([e,{isArchived:n}])=>!(n??!1))),huntStartTime:Date.UTC(2024,8,20,22,28),huntEndTime:Date.UTC(2024,8,30,22,28),huntCloseTime:Date.UTC(2024,9,21,22,28),notifsNextIndex:this.db.notifs.length,errata:this.db.errata}}async getInitTeamData(e){this.db.teams[e]===void 0&&(console.log(`creating new team ${e}`),this.db.teams[e]={displayName:e,isInactive:!1,isHidden:!1,members:[],viewTimes:{},hints:{},teamProgress:ma(this.puzzlesDB).state});const{displayName:t,isInactive:a,isHidden:o,members:r,viewTimes:i,hints:h,teamProgress:g}=this.db.teams[e];return{userId:e,displayName:t,isInactive:a,isHidden:o,creationTime:0,members:r,views:Object.keys(i),hints:h,teamProgress:g}}getTeamData(e){if(this.db.teams[e]===void 0)throw new Error(`unknown team ${e}`);return this.db.teams[e]}async syncData(e){const{teamState:n,scopeState:t}=e;for(const[a,o]of Object.entries(n??{})){const{isInactive:r,isHidden:i,displayName:h,viewTimes:g,teamProgressUpd:y,hints:f}=o,z=this.getTeamData(a);r!==void 0&&(z.isInactive=r,this.isDirty=!0),i!==void 0&&(z.isHidden=i,this.isDirty=!0),h!==void 0&&(z.displayName=h,this.isDirty=!0);for(const[w,E]of Object.entries(g??{}))z.viewTimes[w]=E,this.isDirty=!0;y!==void 0&&(ea(z.teamProgress,y),this.isDirty=!0);for(const[w,E]of Object.entries(f??{}))z.hints[w]=E,this.isDirty=!0}for(const[a,o]of Object.entries(t??{}))this.db.scopeState[a]=o,this.isDirty=!0;return this.isDirty&&!this.isSaving&&(this.isDirty=!1,this.isSaving=!0,await this.saveDbFunc(this.db).finally(()=>{this.isSaving=!1})),{}}async sendReqAsyncNoCopy(e){const n={[Pe.GET_INIT_DATA]:a=>this.getInitData(),[Pe.GET_INIT_TEAM_DATA]:a=>this.getInitTeamData(a.teamId),[Pe.SYNC_DATA]:a=>this.syncData(a)},t=e.type;return{type:t,payload:await n[t](e.payload)}}getDefaultTeamId(){return this.db.defaultTeamId}async sendReqAsync(e){return Yn(await this.sendReqAsyncNoCopy(e))}}class pr{constructor(e){u(this,"ctx");this.ctx=e}getPermissions(e){return N.FULL}async handleStepAsync(e,n){const{downloadScopes:t,downloadTeams:a,downloadAll:o,downloadPublicCustomPuzzles:r,downloadPosthunt:i}=n,{server:h,controller:g}=this.ctx;if(!e.conn.isAdmin){if(!h.getIsHuntOver())return e.setPermissionDenied();const{downloadTeams:f,...z}=n;if(Object.keys(z).length>0)return e.setPermissionDenied();for(const w of f??[])if(w!==e.conn.teamId)return e.setPermissionDenied()}const y={version:Je,defaultTeamId:a!==void 0&&a.length===1?a[0]:void 0,teams:{},scopeState:{}};if((i??!1)||(r??!1))for(const f of Object.values(g.getEnginesForType(v.TEAM_PUZZLE_105))){const{scope:z}=f.ctx;if(!f.getHasPublicCustomPuzzle())continue;y.scopeState[ne(z)]={scope:z,state:f.getPublicState()};const{teamId:w}=z,{displayName:E,isInactive:O,isHidden:x,members:F}=h.getTeamController(w);y.teams[w]={displayName:E,isInactive:O,isHidden:x,members:F,viewTimes:{},hints:{},teamProgress:{events:{}},isPlaceholder:!0}}for(const f of t??[]){const z=g.getEngineIfExists(f);z!==void 0&&pn(z)&&(y.scopeState[ne(f)]={scope:f,state:z.getSlowSyncState()})}if(a!==void 0||(o??!1)||(i??!1)){const f=new Set(a??[]),z=Object.values(g.engines).map(w=>Object.values(w)).flat();Object.assign(y.scopeState,Object.fromEntries(z.filter(({scope:w})=>{if(o??!1)return!0;const{teamId:E}={teamId:void 0,...w};return E===void 0?!1:f.has(E)}).flatMap(({scope:w,engine:E})=>pn(E)?[[ne(w),{scope:w,state:E.getSlowSyncState()}]]:[])));for(const w of h.teamControllers.values()){const{teamId:E,displayName:O,isInactive:x,isHidden:F,members:L,progressTracker:j}=w;if(!((o??!1)||(i??!1)||f.has(E)))continue;const U=i??!1?[]:Object.values(w.getHintsEngine().state.hints).map(C=>Object.keys(C)).flat(),_=Object.fromEntries(U.flatMap(C=>{const G=g.getEngineIfExists({type:v.HINT,hintId:C});return G===void 0?[]:[[C,G.state]]})),H=(()=>{if(!(i??!1))return j.state;const{events:C,hopeSnapshot:G}=j.state;return{events:{[P.SOLVE_ATTEMPT]:C[P.SOLVE_ATTEMPT],[P.UNLOCK_PUZZLE]:C[P.UNLOCK_PUZZLE],[P.SPIN_GACHA]:C[P.SPIN_GACHA],[P.GET_HOPE]:C[P.GET_HOPE],[P.GET_COLLECTIBLE]:C[P.GET_COLLECTIBLE]},hopeSnapshot:G}})();y.teams[E]={displayName:O,isInactive:x,isHidden:F,members:L,viewTimes:{},hints:_,teamProgress:H}}}return e.sendStepResp(this.ctx.scope,y)}}const fr={createEngine:({engineCtx:s})=>new pr(s),engineIdentityFunc:s=>s};class gr{constructor(e){u(this,"ctx");u(this,"guesses");u(this,"state");u(this,"update");this.ctx=e,this.guesses=new Vn,this.state={},this.update={}}getPermissions(e){return N.ADMIN_ONLY}getState(){return this.state}handleSolveAttempt(e,n,t,a,o){const r=JSON.stringify([t,a,o]);switch(e){case W.ADD:return this.guesses.add(r,n)&&(this.update[r]=(this.update[r]??this.state[r]??0)+1),!0;case W.REMOVE:return this.guesses.delete(r,n)&&(this.update[r]=(this.update[r]??this.state[r]??0)-1),!0}}flushUpdate(){Object.keys(this.update).length!==0&&(this.ctx.update(this.ctx.scope,this.update),Object.assign(this.state,this.update),this.update={})}}const br={createEngine:({execCtx:s,engineCtx:e})=>new gr(e),engineIdentityFunc:s=>s};function Ze(s){let e=0;for(const n of s.values())e+=n;return e}function Ne(s,e,n,t){switch(e){case W.ADD:return s.has(n)?0:(s.set(n,t),t);case W.REMOVE:return s.has(n)?(s.delete(n),-t):0}}class yr{constructor(e){u(this,"ctx");u(this,"members");u(this,"wishes");u(this,"dust");u(this,"hintTokens");u(this,"fairplayGuesses");u(this,"fairplaySolves");u(this,"state");u(this,"update");this.ctx=e,this.members=new Map,this.wishes=new Map,this.dust=new Map,this.hintTokens=new Map,this.fairplayGuesses=new Map,this.fairplaySolves=new Map,this.state=this.calculateState(),this.update={}}getPermissions(e){return this.ctx.server.getIsHuntOver()||this.ctx.server.getTeamController(e.teamId).getIsFinished()?N.READ:N.ADMIN_ONLY}getState(){return this.state}calculateState(){const e={teams:this.members.size,members:Ze(this.members),wishes:this.wishes.size,dust:Ze(this.dust),hintTokens:Ze(this.hintTokens),fairplayGuesses:this.fairplayGuesses.size,fairplaySolves:this.fairplaySolves.size,puzzles:{}};for(const n of Object.values(this.ctx.server.scopeEnginesController.getEnginesForType(v.STATS)))e.puzzles[n.ctx.scope.puzName]=n.summary;return e}handleMembers(e,n,t){const a=this.members.get(n);switch(e){case W.ADD:return a===void 0&&(this.update.teams=(this.update.teams??0)+1),(a??0)!==t&&(this.update.members=(this.update.members??0)+t-(a??0)),this.members.set(n,t),!0;case W.REMOVE:return a!==void 0&&(this.update.teams=(this.update.teams??0)-1),(a??0)!==0&&(this.update.members=(this.update.members??0)-(a??0)),this.members.delete(n),!0}}handleSpinGacha(e,n){const t=Ne(this.wishes,e,n,1);t!==0&&(this.update.wishes=(this.update.wishes??0)+t)}handleGetCollectible(e,n,t,a){if(t!=="dust")return!0;const o=Ne(this.dust,e,n,a);o!==0&&(this.update.dust=(this.update.dust??0)+o)}handleGetHintToken(e,n,t){const a=Ne(this.hintTokens,e,n,t);a!==0&&(this.update.hintTokens=(this.update.hintTokens??0)+a)}handleSolveAttempt(e,n,t,a){if(Se(t)!=="FAIRPLAY")return!0;const o=Ne(this.fairplayGuesses,e,n,1);if(o!==0&&(this.update.fairplayGuesses=(this.update.fairplayGuesses??0)+o),a){const r=Ne(this.fairplaySolves,e,n,1);r!==0&&(this.update.fairplaySolves=(this.update.fairplaySolves??0)+r)}}flushAllUpdates(){var e;for(const n of Object.values(this.ctx.server.scopeEnginesController.getEnginesForType(v.ADMIN_STATS)))n.flushUpdate();for(const n of Object.values(this.ctx.server.scopeEnginesController.getEnginesForType(v.STATS)))n.flushUpdate()&&(((e=this.update).puzzles??(e.puzzles={}))[n.ctx.scope.puzName]=n.summary);Object.keys(this.update).length!==0&&(this.ctx.update(this.ctx.scope,this.update),this.state=this.calculateState(),this.update={})}}const zr={createEngine:({execCtx:s,engineCtx:e})=>new yr(e),engineIdentityFunc:s=>s};class wr{constructor(e){u(this,"ctx");u(this,"customEngine");u(this,"unlocks");u(this,"solves");u(this,"guesses");u(this,"hints");u(this,"getCannedHints");u(this,"openCannedHints");u(this,"state");u(this,"update");u(this,"summary");this.ctx=e;const{customPuzzleData:n}=e.server.getPuzzle(e.scope.puzName);this.customEngine=n===void 0?null:e.server.getOrCreateEngineOrThrow({type:v.TEAM_PUZZLE_105,teamId:n.srcTeamId}),this.unlocks=new Map,this.solves=new Map,this.guesses=new Vn,this.hints=new qn,this.getCannedHints=new Map,this.openCannedHints=new Map,this.state=this.calculateState(),this.update={},this.summary=this.calculateSummary()}getPermissions(e){var n;return this.ctx.server.getIsHuntOver()||e.teamId===((n=this.customEngine)==null?void 0:n.ctx.scope.teamId)?N.READ:N.ADMIN_ONLY}getState(){return this.state}calculateState(){const e={unlocks:Object.fromEntries(this.unlocks),solves:Object.fromEntries(this.solves),guesses:{},hints:0,getCannedHints:Ze(this.getCannedHints),openCannedHints:this.openCannedHints.size};for(const[n,t]of this.guesses.l1Entries())e.guesses[n]=t.size;for(const[n,t]of this.hints.l1Entries())e.hints+=t.size;return e}calculateSummary(){var t,a;const{order:e}=this.ctx.server.getPuzzle(this.ctx.scope.puzName),n={order:((a=(t=this.customEngine)==null?void 0:t.state.status)==null?void 0:a.submitTime)??e,unlocks:this.unlocks.size,solves:this.solves.size,guesses:0,hints:0,getCannedHints:Ze(this.getCannedHints),openCannedHints:this.openCannedHints.size,unhinted:0,hinted:0,unsolved:0};for(const[o,r]of this.guesses.l1Entries()){n.guesses+=r.size;const i=[...this.hints.l1Get(o).values()].some(h=>h);this.solves.has(o)?i?n.hinted++:n.unhinted++:n.unsolved++}for(const[o,r]of this.hints.l1Entries())n.hints+=r.size;return n}handleSolveAttempt(e,n,t,a){var o,r,i,h;switch(e){case W.ADD:return this.guesses.add(n,t)&&((o=this.update).guesses??(o.guesses={}),this.update.guesses[n]=(this.update.guesses[n]??0)+1),a&&!this.solves.has(n)&&(((r=this.update).solves??(r.solves={}))[n]=t,this.solves.set(n,t)),!0;case W.REMOVE:return this.guesses.delete(n,t)&&((i=this.update).guesses??(i.guesses={}),this.update.guesses[n]=(this.update.guesses[n]??0)-1),a&&this.solves.has(n)&&(((h=this.update).solves??(h.solves={}))[n]=null,this.solves.delete(n)),!0}}handleUnlockPuzzle(e,n,t){var a,o;switch(e){case W.ADD:return this.unlocks.has(n)||(((a=this.update).unlocks??(a.unlocks={}))[n]=t,this.unlocks.set(n,t)),!0;case W.REMOVE:return this.unlocks.has(n)&&(((o=this.update).unlocks??(o.unlocks={}))[n]=null,this.unlocks.delete(n)),!0}}handleHint(e,n,t,a){switch(e){case W.ADD:return this.hints.setIfAbsent(n,t,a)&&(this.update.hints=(this.update.hints??0)+1),!0;case W.REMOVE:return this.hints.delete(n,t)&&(this.update.hints=(this.update.hints??0)-1),!0}}handleGetCannedHint(e,n,t){const a=Ne(this.getCannedHints,e,n,t);a!==0&&(this.update.getCannedHints=(this.update.getCannedHints??0)+a)}handleOpenCannedHint(e,n){const t=Ne(this.openCannedHints,e,n,1);t!==0&&(this.update.openCannedHints=(this.update.openCannedHints??0)+t)}flushUpdate(){return Object.keys(this.update).length===0?!1:(this.ctx.update(this.ctx.scope,this.update),this.state=this.calculateState(),this.update={},this.summary=this.calculateSummary(),!0)}}const vr={createEngine:({execCtx:s,engineCtx:e})=>new wr(e),engineIdentityFunc:s=>s};class Tr{constructor(e,n){u(this,"ctx");u(this,"state");this.ctx=e,this.state=n??Ys()}getPermissions(e){return N.ADMIN_ONLY}getState(){return this.state}getSlowSyncState(){return this.state}async handleStepAsync(e,n){var r;const{id:t,claimer:a}=n,o=(r=this.state[t])==null?void 0:r.claimer;return a&&o&&a!==o?e.setErrCode(D.CLIENT_ERROR):(Vs(this.state,n),this.ctx.update(this.ctx.scope,n),e.sendStepResp(this.ctx.scope,!0))}}const Er={createEngine:({execCtx:s,engineCtx:e,initState:n})=>new Tr(e,n),engineIdentityFunc:s=>s};class _r{constructor(e){u(this,"ctx");u(this,"cachedState");this.ctx=e}getPermissions(e){return N.FULL}getStateNoCache(){const{controller:e,server:n}=this.ctx,{huntEndTime:t}=n,a={submissions:{}};for(const o of Object.values(e.getEnginesForType(v.TEAM_PUZZLE_105))){const{teamId:r}=o.ctx.scope,{status:i,formFields:{title:h,sharePermission:g}}=o.state;if(i!==void 0&&i.type===Q.ACCEPTED&&i.reviewTime<=t&&g!==null){const y=i.reviewTime.toString(),f=h.trim(),z={teamId:r,respondTime:i.reviewTime,displayName:f!==""?f:void 0};i.isAvailableInGacha??!1?a.submissions[y]={type:an.PUBLIC_CUSTOM_PUZZLE,...z}:g!==Yt.NONE&&(a.submissions[y]={type:an.PRIVATE_CUSTOM_PUZZLE,...z})}}for(const o of Object.values(e.getEnginesForType(v.TEAM_PUZZLE_139))){const{teamId:r}=o.ctx.scope,{status:i,sharePermission:h}=o.state;if(i!==void 0&&i.type===ke.ACCEPTED&&i.reviewTime<=t&&h!==void 0){const g=i.reviewTime.toString();h===Ke.BOTH?a.submissions[g]={type:an.HUG_A_TREE,teamId:r,respondTime:i.reviewTime}:h===Ke.FACT&&(a.submissions[g]={type:an.HUG_A_TREE_FACT_ONLY,teamId:r,respondTime:i.reviewTime})}}return a}getState(){return this.cachedState??(this.cachedState=this.getStateNoCache()),this.cachedState}}const Ir={createEngine:({engineCtx:s})=>new _r(s),engineIdentityFunc:s=>s},Zn={[v.DUMMY]:Go,[v.HUNT_ADMIN]:Uo,[v.SERVER_HEALTH]:jo,[v.BIG_BOARD]:qo,[v.TEAM_LIST]:Vo,[v.TEAM_MEMBERS]:Jo,[v.TEAM]:Xo,[v.TEAM_ANSWERABLE]:$o,[v.PUZZLE_CONTENT]:ni,[v.TEAM_PUZZLE_105]:oi,[v.ERRATUM_CONTENT]:ri,[v.TEAM_ERRATA]:ui,[v.SOLUTION_CONTENT]:hi,[v.CANNED_HINT]:mi,[v.HINT]:fi,[v.TEAM_GACHA]:Ho,[v.TEAM_CANNED_HINTS]:bi,[v.TEAM_HINTS]:wi,[v.KEYFRAME]:Ti,[v.TEAM_CUTSCENES]:_i,[v.MOCK_DIRECT_BACKEND]:ki,[v.TEAM_OLIVE]:Si,[v.ADMIN_QUEUE]:Oi,[v.ADMIN_QUEUE_TASK]:Ci,[v.TEAM_BLOCKS]:fo,[v.TEAM_COLLECTIBLES]:xi,[v.TEAM_FARMER]:Vi,[v.TEAM_BIG_BRANCH]:Zi,[v.TEAM_PUZZLE_144]:$i,[v.HOPE_POOL]:nr,[v.TEAM_HOPE_POOL]:No,[v.TEAM_HOPELESS]:ar,[v.TEAM_HISTORY]:or,[v.TEAM_TITLES]:rr,[v.TEAM_PUZZLE_139]:ur,[v.STATE_DOWNLOAD]:fr,[v.ADMIN_STATS]:br,[v.STATS]:vr,[v.HUNT_STATS]:zr,[v.WRAPUP]:Er,[v.PUBLIC_SUBMISSIONS]:Ir},kr=Zn,Ar=Zn,Sr=Zn,Nr=(s,e)=>Sr[s].engineIdentityFunc(e);var Me=(s=>(s.FAST="fast",s.MISC="misc",s))(Me||{});class Xn{constructor(e){u(this,"isSyncInFlight");u(this,"pendingCallbacks");u(this,"runSyncAsync");this.isSyncInFlight=!1,this.pendingCallbacks=[],this.runSyncAsync=e}async triggerLoopAsync(){if(!this.isSyncInFlight){for(this.isSyncInFlight=!0;;){const e=this.pendingCallbacks.length;let n=!1;try{n=await this.runSyncAsync()}catch(t){console.error(t);break}for(const t of this.pendingCallbacks.splice(0,e))try{t()}catch(a){console.error(a)}if(n)break}this.isSyncInFlight=!1}}async triggerLoopAndWaitAsync(){await new Promise((e,n)=>{this.pendingCallbacks.push(e),this.triggerLoopAsync().catch(n)})}}class jn{constructor(e,n,t,a){u(this,"serverConfig");u(this,"clock");u(this,"syncType");u(this,"onDirtyStateChange");u(this,"revNumber");u(this,"syncedRevNumber");u(this,"modifyTime");u(this,"syncTime");u(this,"syncingRevNumber");this.serverConfig=e,this.clock=n,this.syncType=t,this.onDirtyStateChange=a,this.revNumber=0,this.syncedRevNumber=0;const o=this.clock.genTimestamp();this.modifyTime=o,this.syncTime=o,this.syncingRevNumber=null}snapshot(){return this.revNumber===this.syncedRevNumber||this.clock.genTimestamp()-this.syncTime<this.serverConfig.slowSyncThrottle[this.syncType]?!1:(this.syncingRevNumber=this.revNumber,this.onDirtyStateChange({type:sn.SYNCING,lastSyncTime:this.syncTime}),!0)}handleModify(){const e=this.clock.genTimestamp();this.revNumber===this.syncedRevNumber&&(this.syncTime=e),this.modifyTime=e,this.revNumber++,this.onDirtyStateChange({type:sn.DIRTY,lastSyncTime:this.syncTime})}handleSyncResult(e){if(e){if(this.syncTime=this.clock.genTimestamp(),this.syncingRevNumber===null)throw new Error("no sync in progress");this.syncedRevNumber=this.syncingRevNumber}this.syncingRevNumber=null,this.onDirtyStateChange({type:e?sn.SYNCED:sn.FAILED,lastSyncTime:this.syncTime})}}class pa{constructor(e,n,t){u(this,"syncTracker");u(this,"makeEmptyUpd");u(this,"mergeUpdatesFunc");u(this,"pendingUpdate");u(this,"inFlightUpdate");this.syncTracker=e,this.makeEmptyUpd=n,this.mergeUpdatesFunc=t}mergeUpdate(e){this.pendingUpdate===void 0?this.pendingUpdate=e:this.mergeUpdatesFunc(this.pendingUpdate,e),this.syncTracker.handleModify()}mergePendingUpdateIntoInFlightUpdate(){if(this.pendingUpdate===void 0)return;const e=this.inFlightUpdate??this.makeEmptyUpd();this.mergeUpdatesFunc(e,this.pendingUpdate),this.inFlightUpdate=e,delete this.pendingUpdate}startSync(){if(!this.syncTracker.snapshot())return null;this.mergePendingUpdateIntoInFlightUpdate();const e=this.inFlightUpdate??null;return e===null?(this.syncTracker.handleSyncResult(!0),null):e}endSync(e){e&&delete this.inFlightUpdate,this.syncTracker.handleSyncResult(e)}}const Ft=(s,e,n)=>{if(e.isAdmin)return!0;switch(s){case N.ADMIN_ONLY:return!1;case N.READ:return n;case N.FULL:return!0}};class Or{constructor(e){u(this,"server");u(this,"engines");u(this,"syncLoopController");u(this,"seenScopes");u(this,"fastSyncTasks");this.server=e,this.engines={},this.syncLoopController=new Xn(async()=>await this.runSyncAsync()),this.seenScopes=new Set,this.fastSyncTasks=[]}teardown(){this.engines={}}getTeamControllerIfExists(e){return this.server.teamControllers.get(e)??null}getAnswerableControllerIfUnlocked(e,n,t){const a=this.getTeamControllerIfExists(n);return a===null?e.setErrCodeAndReturn(D.INVALID_TEAM,null):a.isPuzzleUnlocked(t)?this.server.getPuzzle(t).answer===null?e.setErrCodeAndReturn(D.INVALID_PUZZLE,null):a.getAnswerableController(t):e.setErrCodeAndReturn(D.INVALID_PUZZLE,null)}getEngineTrackingStateForType(e){const n=this.engines[e];if(n!==void 0)return n;const t={};return this.engines[e]=t,t}getEnginesForType(e){return Object.fromEntries(Object.entries(this.getEngineTrackingStateForType(e)).map(([n,{engine:t}])=>[n,t]))}createCacheTag(e){return`${this.server.sockServerId}__${e.revNumber}`}handleModify(e){const n=this.getEngineTrackingStateIfExists(e);if(n===void 0)throw new Error(`tried to modify unknown scope ${ne(e)}`);const{syncTracker:t}=n;t.handleModify(),delete n.cachedSerializedStatePacket;const a=this.createCacheTag(t);return n.cacheTag=a,a}fastSyncAsync(e){return new Promise((n,t)=>{const a=this.getEngineTrackingStateIfExists(e);if(a===void 0)throw new Error(`tried to fast sync unknown scope ${ne(e)}`);const{syncTracker:o}=a;o.handleModify(),this.fastSyncTasks.push({scope:e,revNumber:o.revNumber,callbacks:{resolve:n,reject:t}}),this.syncLoopController.triggerLoopAsync().catch(t)})}createEngineContext(e){return{scope:e,server:this.server,controller:this,assign:(n,t)=>{const a=this.handleModify(n);this.server.broadcastScopeAssign(n,t,a)},update:(n,t)=>{const a=this.handleModify(n);this.server.broadcastScopeUpdate(n,t,a)},onModify:()=>this.handleModify(e),fastSyncAsync:n=>this.fastSyncAsync(n)}}createEngineTrackingState(e,n,t){const a=this.getEngineTrackingStateForType(n.type),o=ne(n);if(a[o]!==void 0)throw new Error(`engine for ${o} already exists`);const r=n.type,i=kr[r].createEngine({execCtx:e,engineCtx:this.createEngineContext(Ks(n)),initState:t});if(i===null)return null;const h=new jn(this.server.config,this.server.clock,Me.MISC,g=>{});return a[o]={scope:n,engine:i,syncTracker:h,cacheTag:this.createCacheTag(h)},a[o]}createEngine(e,n,t,a){var r,i;const o=((r=this.createEngineTrackingState(e,n,t))==null?void 0:r.engine)??null;return(a??!1)||(i=o==null?void 0:o.init)==null||i.call(o),o}getEngineTrackingStateIfExists(e){const n=ne(e);return this.getEngineTrackingStateForType(e.type)[n]}getOrCreateEngineTrackingState(e,n){const t=this.getEngineTrackingStateIfExists(n);return t!==void 0?t:this.createEngineTrackingState(e,n)}getEngineIfExists(e){var n;return(n=this.getEngineTrackingStateIfExists(e))==null?void 0:n.engine}getOrCreateEngine(e,n){const t=this.getOrCreateEngineTrackingState(e,n);return(t==null?void 0:t.engine)??null}handleSubscribe(e,n,t){const a=this.getOrCreateEngineTrackingState(e,n);if(a===null)return!1;const{engine:o,cachedSerializedStatePacket:r,cacheTag:i}=a,h=o.getPermissions(e.conn);if(!Ft(h,e.conn,!0))return this.server.opts.logRequestErrDebugInfoAsync!==void 0&&this.server.opts.logRequestErrDebugInfoAsync(`got permission denied while requesting for scope ${JSON.stringify(n)}`).catch(y=>console.error(y)),e.setErrCodeAndReturn(D.PERMISSION_DENIED,!1);if(t!==void 0&&i!==void 0&&i===t)return!0;const g=r??(()=>{const y={type:ue.SCOPE_ASSIGN,assign:{scope:n,state:o.getState(),tag:i}},f=JSON.stringify(y),z=n.type;return(Ar[z].cacheStatePacket??!1)&&(a.cachedSerializedStatePacket=f),f})();return e.conn.sendRaw(g),!0}async handleStepAsync(e,n){const{conn:t}=e,{scope:a,payload:o}=n,r=this.getOrCreateEngineTrackingState(e,a);if(r===null)return;const{engine:i}=r,h=i.getPermissions(t);if(!Ft(h,t,!1))return e.setErrCode(D.PERMISSION_DENIED);const g=a.type;r.stepLock??(r.stepLock=new mn);const y=Nr(g,i);await r.stepLock.acquireAndRunAsync(async()=>await y.handleStepAsync(e,o))}async runSyncAsync(){const e={},n=[],t=(i,h,g)=>{const y=ne(i);e[y]===void 0&&g.snapshot()&&(e[y]={scope:i,state:h},n.push(g),this.seenScopes.add(y))};for(const{scope:i,revNumber:h}of this.fastSyncTasks){if(Object.keys(e).length>=this.server.config.scopesSyncLimit)break;const g=this.getEngineTrackingStateIfExists(i);if(g===void 0)throw new Error(`tried to fast sync unknown scope ${ne(i)}`);const{engine:y,syncTracker:f}=g;if(!pn(y))throw new Error(`engine for ${ne(i)} doesn't have sync state`);f.syncedRevNumber>=h||t(i,y.getSlowSyncState(),f)}for(const i of Js(this.engines))for(const[h,{scope:g,engine:y,syncTracker:f}]of Object.entries(this.engines[i]??{})){if(!pn(y)||Object.keys(e).length>=this.server.config.scopesSyncLimit)break;this.seenScopes.has(h)||t(g,y.getSlowSyncState(),f)}if(Object.keys(e).length===0)return this.seenScopes.clear(),!0;const a=await(async()=>{try{return await this.server.syncDataThrottledAsync({scopeState:e}),!0}catch(i){return console.error(i),!1}})();for(const i of n)i.handleSyncResult(a);const o=[],r=[];for(const i of this.fastSyncTasks){const{scope:h,revNumber:g}=i,y=this.getEngineTrackingStateIfExists(h);if(y===void 0)throw new Error(`could not find scope ${ne(h)} to complete fast sync`);y.syncTracker.syncedRevNumber<g?r.push(i):o.push(i)}this.fastSyncTasks=r;for(const{callbacks:i}of o)i.resolve();return!1}}class Pr{constructor(e,n,t){u(this,"server");u(this,"connId");u(this,"client");u(this,"teamId");u(this,"spectateTeamId");u(this,"isAdmin");u(this,"cursorGroupName");u(this,"handleMsgLock");u(this,"activeStepId");this.server=e,this.connId=n,this.client=t,this.isAdmin=!1,this.handleMsgLock=new mn}close(){this.client.close()}sendRaw(e){this.client.send(e)}send(e){this.sendRaw(JSON.stringify(e))}sendErr(e){this.send({type:ue.ERROR,err:e,stepId:this.activeStepId}),delete this.activeStepId}sendErrCode(e){this.sendErr({errCode:e})}sendStepResp(e,n){this.activeStepId!==void 0&&(this.send({type:ue.SCOPE_STEP_RESPONSE,stepResponse:{scope:e,payload:n},stepId:this.activeStepId}),delete this.activeStepId)}}const Gt=s=>s.teamId!==void 0,We={fullHopePoolClaimChance:.5,hopePoolActIntervalRangeMs:{min:0,max:15*60*1e3},hopePoolNumAddRange:{min:1,max:5}};class Cr{constructor(e){u(this,"server");u(this,"nextHopePoolActTime");this.server=e}runHopePoolTasks(){const e=this.server.getOrCreateEngineOrThrow({type:v.HOPE_POOL});if(e.state.poolAmt>=Ie.minToClaim&&Math.random()<We.fullHopePoolClaimChance){e.advanceCycle();return}e.addHope(Math.floor(Xe(We.hopePoolNumAddRange.min,We.hopePoolNumAddRange.max))*Ie.contributionAmt)}async runPeriodicTasksAsync(){const e=this.server.clock.genTimestamp();if(e<this.server.huntEndTime)return;this.server.opts.isPosthunt&&(this.nextHopePoolActTime!==void 0&&e>=this.nextHopePoolActTime&&(delete this.nextHopePoolActTime,this.runHopePoolTasks()),this.nextHopePoolActTime===void 0&&(this.nextHopePoolActTime=e+Xe(We.hopePoolActIntervalRangeMs.min,We.hopePoolActIntervalRangeMs.max)));const n=this.server.getOrCreateEngineOrThrow({type:v.ADMIN_QUEUE});for(const[t,{respondTime:a}]of Object.entries(n.state.tasks)){if(a!==void 0)continue;const{task:o}=this.server.getOrCreateEngineOrThrow({type:v.ADMIN_QUEUE_TASK,taskId:t}).state;await(async()=>{var r,i;switch(o.type){case ce.HINT:{const{hintId:h}=o;return await this.server.getOrCreateEngineOrThrow({type:v.HINT,hintId:h}).setResponseAsync({type:Ge.ANSWERED,content:"We can't answer hints now that the hunt has ended, but we hope you'll figure it out soon!"}),!0}case ce.PUZZLE_SUBMISSION:{const{teamId:h,submissionType:g}=o;switch(g){case Le.PUZZLE_105:{const y=this.server.getOrCreateEngineOrThrow({type:v.TEAM_PUZZLE_105,teamId:h});return await y.setStatusAsync({type:Q.ACCEPTED,moonickDialogue:"Well, it meets the requirements. Of course, it won't be added to the pool.",reviewTime:this.server.clock.genTimestamp(),submitTime:((r=y.state.status)==null?void 0:r.submitTime)??this.server.clock.genTimestamp()}),!0}case Le.PUZZLE_139:{const y=this.server.getOrCreateEngineOrThrow({type:v.TEAM_PUZZLE_139,teamId:h});return await y.setStatusAsync({type:ke.ACCEPTED,comment:"Hope you enjoyed a breath of fresh air! If you didn't, you should feel very obligated to get one now.",reviewTime:this.server.clock.genTimestamp(),submitTime:((i=y.state.status)==null?void 0:i.submitTime)??this.server.clock.genTimestamp()}),!0}case Le.PUZZLE_144:return await this.server.getOrCreateEngineOrThrow({type:v.TEAM_PUZZLE_144,teamId:h}).setRespAsync({text:"Thank you for your submission! Hope you took the question seriously. It'll become useful someday!",numPoints:4}),!0}break}}})()}}}class Rr{constructor(e){u(this,"dumpRequests");u(this,"backend");this.dumpRequests=e.dumpBackendRequests,this.backend=e.backend}getDefaultTeamId(){return this.backend.getDefaultTeamId()}async sendReqAsync(e){this.dumpRequests&&console.log(`backend < ${JSON.stringify(e,null,2)}`);const n=await this.backend.sendReqAsync(e);return this.dumpRequests&&console.log(`backend > ${JSON.stringify(n,null,2)}`),n}}const xr=(s,e)=>{e.teamProgressUpd!==void 0&&(s.teamProgressUpd===void 0?s.teamProgressUpd=e.teamProgressUpd:$t(s.teamProgressUpd,e.teamProgressUpd))},Dr=(s,e)=>s;class Lr{constructor(e,n,t){u(this,"teamId");u(this,"syncUpdatesTracker");u(this,"teamProgressTracker");this.teamId=e,this.syncUpdatesTracker=new pa(n,()=>({}),(a,o)=>xr(a,o)),this.teamProgressTracker=t.clone()}mergeUpdate({teamProgressUpd:e,...n}){e!==void 0&&this.modifyTeamProgress(t=>this.teamProgressTracker.applyUpdate(e)),this.syncUpdatesTracker.mergeUpdate(n)}modifyTeamProgress(e){const n=e(this.teamProgressTracker),t=this.teamProgressTracker.triggerUpdatesAndFlush();return t!==null&&this.syncUpdatesTracker.mergeUpdate({teamProgressUpd:t}),n}startSync(){return this.syncUpdatesTracker.startSync()}endSync(e){this.syncUpdatesTracker.endSync(e)}}const Hr=(s,e)=>{const{isInactive:n,isHidden:t,displayName:a,viewTimes:o,hints:r}=e;n!==void 0&&(s.isInactive=n),t!==void 0&&(s.isHidden=t),a!==void 0&&(s.displayName=a),s.viewTimes=Object.assign(s.viewTimes??{},o??{}),s.hints=Object.assign(s.hints??{},r??{})};class Fr extends pa{constructor(e){super(e,()=>({}),(n,t)=>Hr(n,t))}}class Gr{constructor(){u(this,"dirtyState");u(this,"pendingDirtyStateUpd");this.dirtyState={teams:{}},this.pendingDirtyStateUpd={teams:{}}}update(e){Zs(this.pendingDirtyStateUpd,e)}commitUpds(){Xs(this.dirtyState,this.pendingDirtyStateUpd),this.pendingDirtyStateUpd={teams:{}}}}class Ae{constructor(e,n){u(this,"clock");u(this,"intervalLength");u(this,"totNumEvents");u(this,"lastEventTime");u(this,"prevNumEvents");u(this,"currNumEvents");this.clock=e,this.intervalLength=n,this.totNumEvents=0,this.lastEventTime=0,this.prevNumEvents=0,this.currNumEvents=0}record(){this.update(!0)}update(e){const n=this.clock.genTimestamp(),t=Math.floor(this.lastEventTime/this.intervalLength),a=Math.floor(n/this.intervalLength);t!==a&&(this.prevNumEvents=t+1===a?this.currNumEvents:0,this.currNumEvents=0),(e??!1)&&(this.lastEventTime=n,this.currNumEvents++,this.totNumEvents++)}getSummary(){return this.update(),{intervalLength:this.intervalLength,totNumEvents:this.totNumEvents,lastEventTime:this.lastEventTime,numPerInterval:this.prevNumEvents}}getSummaryString(){return Qs(this.getSummary(),this.clock.genTimestamp())}}class Mr{constructor(e){u(this,"server");u(this,"numAuthsSummaries");u(this,"numRequestsSummaries");u(this,"numAuthsUpds");u(this,"numRequestsUpds");this.server=e,this.numAuthsSummaries={},this.numRequestsSummaries={},this.numAuthsUpds=new Set,this.numRequestsUpds=new Set}recordAuth(e){this.numAuthsUpds.add(e)}recordRequest(e){this.numRequestsUpds.add(e)}getAndCommitUpds(){const e={teamNumAuthsMetrics:Object.fromEntries(Array.from(this.numAuthsUpds,n=>[n,this.server.getTeamController(n).numAuthsMetrics.getSummary()])),teamNumRequestsMetrics:Object.fromEntries(Array.from(this.numRequestsUpds,n=>[n,this.server.getTeamController(n).numRequestsMetrics.getSummary()]))};return Object.assign(this.numAuthsSummaries,e.teamNumAuthsMetrics),Object.assign(this.numRequestsSummaries,e.teamNumRequestsMetrics),this.numAuthsUpds.clear(),this.numRequestsUpds.clear(),e}}class Ur{constructor(){u(this,"state");u(this,"pendingUpds");this.state={},this.pendingUpds={}}addTeam(e,n){this.state[e]=n}updateTeam(e,n){if(this.state[e]===void 0)return;const t=this.pendingUpds[e];if(t===void 0){this.pendingUpds[e]=n;return}$s(t,n),this.removeRedundantTeamUpdates(e)}removeRedundantTeamUpdates(e){const n=this.pendingUpds[e],t=this.state[e];if(n===void 0)return;if(t===void 0)throw new Error("expect to only receive updates for existing teams");const{numHintsTotal:a,unlocks:o}=n;if(a!==void 0&&a===t.numHintsTotal&&delete n.numHintsTotal,o!==void 0){for(const[r,i]of Object.entries(o)){if(i===null){t.unlocks[r]===void 0&&delete o[r];continue}if(t.unlocks[r]===void 0)continue;const h=t.unlocks[r],{solveTime:g,numHintsUsed:y,numWrongGuesses:f,numMembers:z}=i;g!==void 0&&h.solveTime!==void 0&&g===h.solveTime&&delete i.solveTime,y!==void 0&&y===(h.numHintsUsed??0)&&delete i.numHintsUsed,f!==void 0&&f===(h.numWrongGuesses??0)&&delete i.numWrongGuesses,z!==void 0&&z===(h.numMembers??0)&&delete i.numMembers,Object.keys(i).length===0&&delete o[r]}Object.keys(o).length===0&&delete n.unlocks}Object.keys(n).length===0&&delete this.pendingUpds[e]}commitUpds(){for(const[e,n]of Object.entries(this.pendingUpds)){if(this.state[e]===void 0)throw new Error("expect to only receive updates for existing teams");eo(this.state[e],n)}this.pendingUpds={}}}class Br{constructor(e,n,t){u(this,"teamId");u(this,"puzName");u(this,"server");this.teamId=e,this.puzName=n,this.server=t}getTeamController(){return this.server.getTeamController(this.teamId)}getNumWrongGuesses(){var n;const{progressTracker:e}=this.getTeamController();return[...((n=e.getPuzzleSolveAttempts().l1Get(this.puzName))==null?void 0:n.values())??[]].filter(t=>t.info.isWrong??!1).length??0}getNumGuessesRemaining(){const{progressTracker:e}=this.getTeamController();return this.server.maxGuessesPerPuzzle+(e.view.puzzleNumExtraGuesses.get(this.puzName)??0)-this.getNumWrongGuesses()}handleUpdate(e){const n=this.getNumGuessesRemaining();this.server.bigBoardStateTracker.updateTeam(this.teamId,{unlocks:{[this.puzName]:{numWrongGuesses:this.getNumWrongGuesses()}}});const t=this.server.scopeEnginesController.getEngineIfExists({type:v.TEAM_ANSWERABLE,teamId:this.teamId,puzName:this.puzName});t!==void 0&&t.ctx.update(t.ctx.scope,{updSubmissions:e,numGuessesRemaining:n})}async checkAnswerAsync(e,n){const t=this.server.getPuzzle(this.puzName),{answer:a}=t;if(a===null)return e.setErrCodeAndReturn(D.INVALID_PUZZLE,null);const o=this.getTeamController(),{progressTracker:r}=o;if(r.hasSolvePuzzle(this.puzName))return{type:ae.ALREADY_SOLVED};const i=[...r.getSolveAttemptRecordsForPuzzle(this.puzName)].flatMap(({info:y})=>y.answer===void 0?[]:[y.answer]),h=this.server.puzzlesDB.puzzleMessages[this.puzName]??{};if(!(this.server.opts.isPosthunt??!1)&&this.getNumGuessesRemaining()<=0)return{type:ae.NO_GUESSES};this.server.checkAnswerMetrics.record();const g=Ao(n,a,t,h,i);return g.type===ae.SUCCESS&&await o.modifyTeamProgressAsync(y=>{var E;const f=g.info,z=O=>y.addSolveAttempt(this.puzName,{...f,...O}),w=O=>z({message:O});if(this.puzName==="puz322"){const O=y.view.puzzleNumTotalCannedHints.get(this.puzName)??0;(E=f.message)!=null&&E.includes("Check the canned hints")&&O===0&&y.addEvent(P.GET_CANNED_HINT,{num:1,puzName:this.puzName,reason:{type:he.MISC}})}if(te.unlockPrizePuzNames.includes(this.puzName)&&(f.isCorrect??!1)){const O=this.server.getOrCreateEngineOrThrow({type:v.TEAM_GACHA,teamId:this.teamId}),x=O.computeAnalysis(y),F=O.getPuzzlePrize(y,x);return F===null?w("You solved the puzzle, but you didn't get anything for it..."):(y.addUnlockPuzzle(F.puzName),w("You solved the puzzle, but all you got was another puzzle..."))}if(te.hintPrizePuzNames.includes(this.puzName)&&(f.isCorrect??!1)){const O=this.server.getOrCreateEngineOrThrow({type:v.TEAM_GACHA,teamId:this.teamId}),x=O.computeAnalysis(y);x.cannedHintEligiblePuzzles.delete(this.puzName);const F=O.getCannedHintPrize(y,x);return F===null?w("You solved the puzzle! Unfortunately, none of your open puzzles were eligible for a free hint."):(y.addEvent(P.GET_CANNED_HINT,{num:1,puzName:F.puzName,reason:{type:he.MISC}}),z({solveHintPrizePuzName:F.puzName}))}return z()}),g}}class jr{constructor(e,n,t){u(this,"isInactive");u(this,"isHidden");u(this,"isTempBlocked");u(this,"userId");u(this,"teamId");u(this,"displayName");u(this,"creationTime");u(this,"members");u(this,"server");u(this,"answerableControllers");u(this,"views");u(this,"progressTracker");u(this,"nextHintId");u(this,"numAuthsMetrics");u(this,"numRequestsMetrics");u(this,"fastSyncTracking");u(this,"slowSyncTracking");const{userId:a,displayName:o,isInactive:r,isHidden:i,creationTime:h,members:g,views:y,teamProgress:f}=n;this.userId=a,this.teamId=e,this.displayName=o,this.creationTime=h,this.members=g,this.server=t,this.answerableControllers=new Map,this.views=new Set(y),this.numAuthsMetrics=new Ae(this.server.clock,ze.healthMonitoringIntervalMs),this.numRequestsMetrics=new Ae(this.server.clock,ze.healthMonitoringIntervalMs),this.progressTracker=new bn(()=>this.server.puzzlesDB,()=>this.server.customPuzzles,()=>this.server.customPuzzlesCannedHints,this.server.clock,this.server.huntEndTime,Yn(f)),this.fastSyncTracking={syncLoopController:new Xn(async()=>await this.runFastSyncAsync()),fastSyncTracker:new Lr(this.teamId,new jn(this.server.config,this.server.clock,Me.FAST,z=>{this.server.dirtyStateTracker.update({teams:{[this.teamId]:{fastSync:z}}})}),this.progressTracker)},this.slowSyncTracking={slowSyncTracker:new Fr(new jn(this.server.config,this.server.clock,Me.MISC,z=>{this.server.dirtyStateTracker.update({teams:{[this.teamId]:{misc:z}}})}))},this.isInactive=r,this.isHidden=i,this.isTempBlocked=!1,this.nextHintId=0}init(e){if(e!==void 0){const{hints:n}=e,t=this.getHintsEngine();t.applyUpdate({setNumTotalTokens:this.progressTracker.view.getNumTotalHintTokens()});for(const[a,o]of Object.entries(n))t.addHint(a,o)}this.initStats()}async initTeamProgressAsync(){await this.modifyTeamProgressAsync(e=>{e.applyUpdate({})})}initStats(){this.server.statsController.registerTeam(this.teamId)}handleTeamUpdate(e){const n=this.server.scopeEnginesController.getEngineIfExists({type:v.TEAM,teamId:this.teamId});n!==void 0&&n.ctx.update(n.ctx.scope,e)}getAnswerableController(e){const n=this.answerableControllers.get(e);if(n!==void 0)return n;const t=new Br(this.teamId,e,this.server);return this.answerableControllers.set(e,t),t}getAnswerableEngineIfExists(e){return this.server.scopeEnginesController.getEngineIfExists({type:v.TEAM_ANSWERABLE,teamId:this.teamId,puzName:e})}getCannedHintsEngine(){return this.server.getOrCreateEngineOrThrow({type:v.TEAM_CANNED_HINTS,teamId:this.teamId})}getHintsEngine(){return this.server.getOrCreateEngineOrThrow({type:v.TEAM_HINTS,teamId:this.teamId})}getCollectiblesEngine(){return this.server.getOrCreateEngineOrThrow({type:v.TEAM_COLLECTIBLES,teamId:this.teamId})}getPuzzleSolveTime(e){return this.progressTracker.getSolveTimes()[e]}getPuzzleUnlockTime(e){return this.progressTracker.getUnlockTimes()[e]}isPuzzleSolvedOrPendingSolved(e){return this.fastSyncTracking.fastSyncTracker.teamProgressTracker.hasSolvePuzzle(e)}isPuzzleSolved(e){return this.progressTracker.hasSolvePuzzle(e)}isPuzzleUnlocked(e){return this.progressTracker.hasUnlockPuzzle(e)}getClientAnswer(e){const n=this.progressTracker.view.puzzleSolves.get(e);if(n===void 0)return;const{info:{answer:t}}=n;if(e===te.repeatAnswerPuzName||te.rangeAnswers[e]!==void 0)return t;const{answer:a}=this.server.getPuzzle(e);if(a!==null)return t===void 0?a:t}getClientPuzzleState(e){const n=this.server.getPuzzle(e),t=this.progressTracker.view.puzzleUnlocks.get(e),a=this.progressTracker.view.puzzleSolves.get(e);if(t===void 0)throw new Error(`tried to get client state for locked puzzle ${e}`);const{timestamp:o,info:{untitledPuzzleIndex:r}}=t,{timestamp:i}=a??{info:{}},{slug:h,displayName:g,answer:y,answerNormalization:f,isStory:z,isCelestial:w,isFindCelestial:E,isBigMeta:O,isMeta:x,sequenceId:F,constellationEdges:L,rarity:j,displayedRarity:U,mapPos:_,customPuzzleData:H,cutsceneImages:C}=n;return{puzName:e,slug:h,displayName:g,hasAnswer:y!==null?!0:void 0,answerNormalization:f,answer:this.getClientAnswer(e),isNew:this.views.has(e)?void 0:!0,unlockTime:o,solveTime:i,isStory:z,isCelestial:w,isFindCelestial:E,isBigMeta:O,isMeta:x,isFinalCutscene:e===te.cutscenePuzNames.final?!0:void 0,sequenceId:F===void 0||[ti].includes(F)?void 0:F,constellationEdges:L,rarity:U??(j===se.COMMON?void 0:j),mapPos:_,customPuzzleData:H,cutsceneImages:C,untitledPuzzleIndex:r,areHintsDisabledUntilAllCannedHintsFound:te.hintsDisabledUntilAllCannedHintsFoundPuzNames.includes(e)?!0:void 0,isScrambleSequel:te.scrambleSequelPuzName===e?!0:void 0,noCannedHints:this.server.getCannedHintsForPuzzle(e).length<=0?!0:void 0,hasMultipleAnswers:(y==null?void 0:y.includes("/"))??!1?!0:void 0}}getLeaderboardNumSolves(){const e=this.server.getOrCreateEngineOrThrow({type:v.TEAM_PUZZLE_105,teamId:this.teamId}).getHasPublicCustomPuzzle();return this.progressTracker.view.displayedSolveCount+(e?1:0)}getClientAdminData(){const{userId:e,displayName:n,isHidden:t,isInactive:a,isTempBlocked:o}=this;return{userId:e,displayName:n,isHidden:t,isInactive:a,isTempBlocked:o}}getHintsUsedMap(){return this.getHintsEngine().state.puzzleNumUsedTokens}getClientBigBoardState(){const e=this.getHintsUsedMap();return{numHintsTotal:this.getHintsEngine().state.numTotalTokens,unlocks:Object.fromEntries(Object.values(this.progressTracker.getEventsForType(P.UNLOCK_PUZZLE)).map(({info:{puzName:n}})=>{var t;return[n,{solveTime:this.getPuzzleSolveTime(n),numHintsUsed:e[n],numWrongGuesses:(t=this.answerableControllers.get(n))==null?void 0:t.getNumWrongGuesses()}]})),hope:this.progressTracker.getTotalHope()}}getLastSolveTime(){const e=this.progressTracker.getSolveTimes();return Object.keys(e).length===0?void 0:Math.max(0,...Object.entries(e).filter(([n,t])=>Wn(this.server.getPuzzle(n))&&t<=this.server.huntEndTime).map(([n,t])=>t))}getCompletionTime(){const e=this.getPuzzleSolveTime(te.cutscenePuzNames.final);if(!(e===void 0||e>=this.server.huntEndTime))return e}getTeamSummaryState(){const{teamId:e,displayName:n,isHidden:t}=this,a=this.getCollectiblesEngine().getIcons();return{teamId:e,displayName:n,numSolves:this.getLeaderboardNumSolves(),lastSolveTime:this.getLastSolveTime(),completionTime:this.getCompletionTime(),isHidden:t?!0:void 0,collectibleIcons:a.length>0?a:void 0}}genHintId(){const e=`${this.server.sockServerId}__${this.teamId}__${this.nextHintId}`;return this.nextHintId++,e}getIsFinished(){return this.progressTracker.hasSolvePuzzle(te.cutscenePuzNames.final)}getFinishedData(){if(!this.server.getIsHuntOver()&&!this.getIsFinished())return;const e=Object.values(this.server.customPuzzles).filter(n=>n.isCustomPuzzleAvailableInGacha).length;return{numSolveCountPuzzles:this.server.puzzlesDB.numSolveCountPuzzles,numCustomPuzzles:e}}getLockedSolutions(){return Object.fromEntries([...this.server.getPuzNames()].filter(e=>this.progressTracker.hasSolvePuzzle(e)&&!this.progressTracker.isPuzzleSolutionReqsSatisfied(e)).map(e=>[e,!0]))}getIsConditionSatisfied(e){return no(e,{cutsceneChoices:Object.fromEntries(this.progressTracker.view.cutsceneChoices)})}async runFastSyncAsync(){var C,G,q,$,ee;const{fastSyncTracker:e}=this.fastSyncTracking,n=e.startSync();if(n===null)return!0;const t=this.getIsFinished(),a=Dr(n,this.teamId),{teamProgressUpd:o}=n;let r=!1;this.server.fastSyncMetrics.record();try{await this.server.syncDataThrottledAsync({teamState:{[this.teamId]:a}}),r=!0}finally{e.endSync(r)}const i=o===void 0?aa():this.progressTracker.applyCompleteUpdateAndFlush(o),{solveRecords:h}=i,g=Object.fromEntries(Object.entries(h).map(([M,K])=>[M,K===null?null:K.timestamp])),y=Object.fromEntries(Object.entries(h).flatMap(([M,K])=>{if(K===null)return[];const ie=this.getClientAnswer(M);return ie===void 0?[]:[[M,ie]]})),f=Object.fromEntries(Object.entries(i.cutsceneChoices??{}).filter(([M,K])=>Wt.includes(M))),z=Object.keys(f).length>0?f:void 0,w=Object.fromEntries(Object.entries(i.unlocks).map(([M,K])=>K?[M,this.getClientPuzzleState(M)]:[M,null])),E=Object.keys(w).length>0,O=Object.keys(g).length>0,x=!t&&this.getIsFinished(),F=t&&!this.getIsFinished(),L=Object.fromEntries(Object.keys(i.diffPuzzleNumExtraGuesses??{}).map(M=>[M,this.progressTracker.view.puzzleNumExtraGuesses.get(M)??0]));this.handleTeamUpdate({solveTimes:g,answers:y,unlocks:w,hopeSnapshot:this.progressTracker.getTotalHope(),finishedData:this.server.getIsHuntOver()?void 0:x?this.getFinishedData():F?null:void 0,cutsceneChoices:z,lockedSolutions:E||O?this.getLockedSolutions():void 0,extraGuesses:Object.keys(L).length>0?L:void 0});for(const M of Object.keys(i.diffPuzzleNumExtraGuesses??{}))(C=this.getAnswerableEngineIfExists(M))==null||C.handleUpdateNumGuessesRemaining();this.getCannedHintsEngine().handleTeamProgressUpdate(i),this.getHintsEngine().handleTeamProgressUpdate(i),((G=i.diffTeamGlobalCounters)==null?void 0:G[P.GET_OLIVE_WISH])!==void 0&&this.server.getOrCreateEngineOrThrow({type:v.TEAM_OLIVE,teamId:this.teamId}).handleTeamProgressUpdate(),((q=i.diffTeamGlobalCounters)==null?void 0:q[P.GET_BLOCKS_WISH])!==void 0&&this.server.getOrCreateEngineOrThrow({type:v.TEAM_BLOCKS,teamId:this.teamId}).handleTeamProgressUpdate(),i.needInvalidateHopeSnapshot&&this.server.getOrCreateEngineOrThrow({type:v.TEAM_HISTORY,teamId:this.teamId}).handleTeamProgressUpdate();const j=Object.keys(i.diffCollectibleState??{}).length>0,U=this.getCollectiblesEngine();j&&U.handleTeamProgressUpdate(i),(O||j)&&this.server.handleTeamSummaryUpdate(this.teamId,{...O?{numSolves:this.getLeaderboardNumSolves(),lastSolveTime:this.getLastSolveTime(),completionTime:this.getCompletionTime()}:{},...j?{collectibleIcons:U.getIcons()}:{}});const _=this.getHintsUsedMap();this.server.bigBoardStateTracker.updateTeam(this.teamId,{unlocks:Object.fromEntries(Object.values(this.progressTracker.getEventsForType(P.UNLOCK_PUZZLE)).map(({info:{puzName:M}})=>{var K;return[M,{solveTime:this.getPuzzleSolveTime(M),numHintsUsed:_[M],numWrongGuesses:(K=this.answerableControllers.get(M))==null?void 0:K.getNumWrongGuesses()}]})),hope:this.progressTracker.getTotalHope()??void 0});for(const[M,K]of Object.entries(i.solveAttempts)){const{answer:ie}=this.server.getPuzzle(M);ie!==null&&this.getAnswerableController(M).handleUpdate(Object.fromEntries(Object.entries(K).map(([fe,Re])=>{if(Re===null)return[fe,null];const{timestamp:ve,info:{puzName:yn,...zn}}=Re;return[fe,{timestamp:ve,...zn}]})))}const H=($=o==null?void 0:o.events)==null?void 0:$[P.SPIN_GACHA];return H!==void 0&&((ee=this.server.scopeEnginesController.getEngineIfExists({type:v.TEAM_GACHA,teamId:this.teamId}))==null||ee.handleUpdate({newPulls:Object.fromEntries(Object.values(H).map(M=>{if(M.type!==W.ADD)throw new Error(`unexpected spin gacha update type ${M.type}`);const{eventRecord:{timestamp:K,info:{pullId:ie,prize:fe}}}=M;return[ie,{...fe,timestamp:K}]}))})),o!==void 0&&this.server.statsController.handleTeamUpdates(this.teamId,o),x&&this.server.broadcastNotifToTeam(this.teamId,{type:Ce.VICTORY}),!1}async modifyTeamProgressAsync(e){const{fastSyncTracker:n,syncLoopController:t}=this.fastSyncTracking,a=n.modifyTeamProgress(e);return await t.triggerLoopAndWaitAsync(),a}setTeamInactive(e){if(e!==this.isInactive){if(this.isInactive=e,this.mergeSlowSyncPacket({isInactive:e}),e){const n=this.server.teamConns.get(this.teamId);if(n!==void 0)for(const t of n.values())t.close()}this.server.handleHuntAdminUpdate({updTeams:{[this.teamId]:{isInactive:e}}})}}setTeamHidden(e){e!==this.isHidden&&(this.isHidden=e,this.mergeSlowSyncPacket({isHidden:e}),e?this.server.statsController.hideTeam(this.teamId):this.server.statsController.unhideTeam(this.teamId),this.server.handleTeamSummaryUpdate(this.teamId,{isHidden:e}))}setTeamTempBlocked(e){if(e!==this.isTempBlocked&&(this.isTempBlocked=e,e)){const n=this.server.teamConns.get(this.teamId);if(n!==void 0)for(const t of n.values())t.isAdmin||(t.sendErrCode(D.TEAM_TEMP_BLOCKED),t.close())}}setDisplayName(e){this.displayName=e,this.mergeSlowSyncPacket({displayName:e}),this.handleTeamUpdate({displayName:e}),this.server.handleTeamSummaryUpdate(this.teamId,{displayName:e})}handleSetMembers(e){this.members=e;const n=this.server.scopeEnginesController.getEngineIfExists({type:v.TEAM_MEMBERS,teamId:this.teamId});n!==void 0&&n.ctx.update(n.ctx.scope,{members:e}),this.server.statsController.setMembers(this.teamId)}viewPuzzle(e,n){if(!this.isPuzzleUnlocked(n))return e.setErrCode(D.INVALID_PUZZLE);const t=this.server.clock.genTimestamp(),a={};this.views.has(n)||(a[n]=t);for(const o of Object.keys(a))this.views.add(o),this.handleTeamUpdate({updPuzzles:{[o]:{isNew:!1}}});this.mergeSlowSyncPacket({viewTimes:a})}async mergeFastSyncUpdateAndWaitAsync(e){const{fastSyncTracker:n,syncLoopController:t}=this.fastSyncTracking;n.mergeUpdate(e),await t.triggerLoopAndWaitAsync()}mergeSlowSyncPacket(e){this.slowSyncTracking.slowSyncTracker.mergeUpdate(e)}}class Wr{constructor(e){u(this,"server");this.server=e}getAdminStatsEngine(e){return this.server.getOrCreateEngineOrThrow({type:v.ADMIN_STATS,puzName:e})}getStatsEngine(e){return this.server.getOrCreateEngineOrThrow({type:v.STATS,puzName:e})}getHuntStatsEngine(){return this.server.getOrCreateEngineOrThrow({type:v.HUNT_STATS})}handleUpdate(e,n){for(const{type:t,eventRecord:{timestamp:a,info:o}}of Object.values(pe(n,P.SOLVE_ATTEMPT))){if(a>=this.server.huntEndTime)continue;const{puzName:r,answer:i="",isCorrect:h=!1,isWrong:g=!1}=o;this.getAdminStatsEngine(r).handleSolveAttempt(t,a,i,h,g),this.getStatsEngine(r).handleSolveAttempt(t,e,a,h),this.getHuntStatsEngine().handleSolveAttempt(t,a,i,h)}for(const{type:t,eventRecord:{timestamp:a,info:o}}of Object.values(pe(n,P.UNLOCK_PUZZLE))){if(a>=this.server.huntEndTime)continue;const{puzName:r}=o;this.getStatsEngine(r).handleUnlockPuzzle(t,e,a)}for(const{type:t,eventRecord:{timestamp:a}}of Object.values(pe(n,P.SPIN_GACHA)))a>=this.server.huntEndTime||this.getHuntStatsEngine().handleSpinGacha(t,a);for(const{type:t,eventRecord:{timestamp:a,info:o}}of Object.values(pe(n,P.GET_CANNED_HINT))){if(a>=this.server.huntEndTime)continue;const{puzName:r,num:i}=o;this.getStatsEngine(r).handleGetCannedHint(t,a,i)}for(const{type:t,eventRecord:{timestamp:a,info:o}}of Object.values(pe(n,P.OPEN_CANNED_HINT))){if(a>=this.server.huntEndTime)continue;const{puzName:r}=o;this.getStatsEngine(r).handleOpenCannedHint(t,a)}for(const{type:t,eventRecord:{timestamp:a,info:o}}of Object.values(pe(n,P.GET_HINT_TOKEN))){if(a>=this.server.huntEndTime)continue;const{num:r}=o;this.getHuntStatsEngine().handleGetHintToken(t,a,r)}for(const{type:t,eventRecord:{timestamp:a,info:o}}of Object.values(pe(n,P.GET_COLLECTIBLE))){if(a>=this.server.huntEndTime)continue;const{collectibleId:r,num:i}=o;this.getHuntStatsEngine().handleGetCollectible(t,a,r,i)}}handleMembers(e,n){const{members:t,creationTime:a}=this.server.getTeamController(e);a>=this.server.huntEndTime||this.getHuntStatsEngine().handleMembers(n,e,t.length)}handleHint(e,n){const{teamId:t,puzName:a,request:o,response:r}=e,{timestamp:i}=o;if(i>=this.server.huntEndTime)return;const h=dn(o,r);this.getStatsEngine(a).handleHint(n,t,i,h)}processTeam(e,n){const t=this.server.getTeamController(e),{state:a}=t.progressTracker;this.handleUpdate(e,sa(a,n)),this.handleMembers(e,n);const{hints:o}=t.getHintsEngine().getState();for(const r of Object.values(o))for(const i of Object.keys(r)){const h=this.server.scopeEnginesController.getEngineIfExists({type:v.HINT,hintId:i});h&&this.handleHint(h.getState(),n)}}registerTeam(e){this.server.getTeamController(e).isHidden||this.processTeam(e,W.ADD)}handleTeamUpdates(e,n){this.server.getTeamController(e).isHidden||this.handleUpdate(e,n)}hideTeam(e){this.processTeam(e,W.REMOVE)}unhideTeam(e){this.processTeam(e,W.ADD)}setMembers(e){this.server.getTeamController(e).isHidden||this.handleMembers(e,W.ADD)}addHint(e){this.server.getTeamController(e.teamId).isHidden||this.handleHint(e,W.ADD)}}var Fe=(s=>(s.MOVE="move",s.REMOVE="remove",s.CLICK="click",s))(Fe||{});class qr{constructor(e){u(this,"server");u(this,"cursorGroups");this.server=e,this.cursorGroups=new Map}getTeamCursorGroups(e){const n=this.cursorGroups.get(e);if(n!==void 0)return n;const t=new Map;return this.cursorGroups.set(e,t),t}getCursorGroup(e,n){const t=this.getTeamCursorGroups(e),a=t.get(n);if(a!==void 0)return a;const o=new Yr;return t.set(n,o),o}getConnCursorGroup(e){const{teamId:n,cursorGroupName:t}=e;return t===void 0?null:this.getCursorGroup(n,t)}removeConnFromGroup(e){this.broadcastEvent(e,{type:Fe.REMOVE});const{teamId:n,cursorGroupName:t}=e;if(t===void 0)return;const a=this.cursorGroups.get(n);if(a===void 0){console.error("expect team cursor group to exist");return}const o=a.get(t);if(o===void 0){console.error("expect cursor group to exist");return}o.conns.delete(e.connId),o.conns.size===0&&a.delete(t),a.size===0&&this.cursorGroups.delete(n),delete e.cursorGroupName}addConnToGroup(e,n){this.removeConnFromGroup(e);const{teamId:t}=e;this.getCursorGroup(t,n).conns.set(e.connId,e),e.cursorGroupName=n}broadcastEvent(e,n){if(e.cursorGroupName===void 0)return;const t=this.getConnCursorGroup(e);t!==null&&(t.addEvent(e,n),!t.locked&&(t.locked=!0,(async()=>{await new Promise(o=>setTimeout(o,0));const a=t.pullEvents();for(const o of t.conns.values()){const r=a.filter(({connId:i})=>o.connId!==i);r.length&&o.send({type:ue.CURSOR_EVENT,events:r})}t.locked=!1})().catch(console.error)))}}class Yr{constructor(){u(this,"conns");u(this,"queuedMoves");u(this,"queuedEvents");u(this,"locked");this.conns=new Map,this.queuedMoves=new Map,this.queuedEvents=[],this.locked=!1}addEvent({connId:e},n){n.type==Fe.MOVE?this.queuedMoves.set(e,n):this.queuedEvents.push([e,n])}pullEvents(){const e=[...this.queuedMoves.entries(),...this.queuedEvents];return this.queuedMoves.clear(),this.queuedEvents.length=0,e.map(([n,t])=>({connId:n,event:t}))}}class Vr{constructor(){u(this,"subscriptionsByScope");u(this,"subscriptionsByConn");this.subscriptionsByScope=new qn,this.subscriptionsByConn=new Vn}isSubscribed(e,n){const t=ne(n);return this.subscriptionsByConn.has(e.connId,t)}subscribe(e,n){const{conn:t}=e,a=ne(n);if(!this.subscriptionsByConn.add(t.connId,a))throw new Error(`connection is already subscribed to scope ${a}`);if(!this.subscriptionsByScope.setIfAbsent(a,t.connId,t))throw new Error("subscription tracking structures not in sync");return!0}unsubscribe(e,n){const{conn:t}=e,a=ne(n);if(!this.subscriptionsByConn.delete(t.connId,a))return e.setErrCodeAndReturn(D.NOT_SUBSCRIBED,!1);if(!this.subscriptionsByScope.delete(a,t.connId))throw new Error("subscription tracking structures not in sync");return!0}clearConnSubscriptions(e){for(const n of this.subscriptionsByConn.l1Get(e.connId))this.subscriptionsByScope.delete(n,e.connId);this.subscriptionsByConn.l1Delete(e.connId)}deleteScope(e){const n=ne(e);for(const[t,a]of this.subscriptionsByScope.l1Get(n))this.subscriptionsByConn.delete(t,n);this.subscriptionsByScope.l1Delete(n)}getSubscribedConns(e){const n=ne(e);return this.subscriptionsByScope.l1Get(n)}}class Kr{constructor(e){u(this,"server");u(this,"seenTeamIds");u(this,"syncLoopController");this.server=e,this.seenTeamIds=new Set,this.syncLoopController=new Xn(async()=>await this.runSyncAsync())}async runSyncAsync(){const e={};for(const t of this.server.teamControllers.values()){if(this.seenTeamIds.has(t.teamId))continue;if(Object.keys(e).length>=this.server.config.miscTeamStateTeamsSyncLimit)break;const{teamId:a,slowSyncTracking:{slowSyncTracker:o}}=t,r=o.startSync();r!==null&&(this.seenTeamIds.add(a),e[a]=r)}if(Object.keys(e).length===0)return this.seenTeamIds.clear(),!0;this.server.recordSlowSyncPacket();const n=await(async()=>{try{return await this.server.syncDataThrottledAsync({teamState:e}),!0}catch(t){return console.error(t),!1}})();for(const[t,a]of Object.entries(e)){const o=this.server.getTeamController(t),{slowSyncTracker:r}=o.slowSyncTracking;r.endSync(n)}return!1}}const Jr=s=>{if(typeof s!="object"||typeof s.type!="string")return null;switch(s.type){case Fe.REMOVE:return s;case Fe.MOVE:case Fe.CLICK:{const{rX:e,rY:n}=s;return typeof e!="number"||typeof n!="number"?null:s}}return null};class fa{constructor(){u(this,"latestTime");u(this,"forcedTime");this.latestTime=0}genTimestamp(){const e=Math.max(this.forcedTime??Date.now(),this.latestTime+1);return this.bumpLatestTime(e),e}bumpLatestTime(e){this.latestTime=Math.max(e,this.latestTime)}setForcedTime(e){this.forcedTime=e,this.latestTime=0}}const Zr=()=>({miscTeamStateTeamsSyncLimit:10,syncThrottleParallelism:2,scopesSyncLimit:10,slowSyncThrottle:{[Me.FAST]:0,[Me.MISC]:0}});class Xr{constructor(e){u(this,"sockServerId");u(this,"puzzlesDB");u(this,"opts");u(this,"onReadyCallbacks");u(this,"maxGuessesPerPuzzle");u(this,"huntStartTime");u(this,"huntEndTime");u(this,"huntCloseTime");u(this,"backend");u(this,"clock");u(this,"numActiveConns");u(this,"teamConns");u(this,"teamControllers");u(this,"scopeEnginesController");u(this,"statsController");u(this,"cursorsController");u(this,"subscriptionsTracker");u(this,"dirtyStateTracker");u(this,"bigBoardStateTracker");u(this,"teamMetricsTracker");u(this,"farmerServerInterface");u(this,"mockHuntStaff");u(this,"fastSyncMetrics");u(this,"slowSyncMetrics");u(this,"checkAnswerMetrics");u(this,"cursorEventsMetrics");u(this,"numAuthsMetrics");u(this,"numRequestsMetrics");u(this,"metricsDumpTracking");u(this,"isInitPending");u(this,"isReady");u(this,"isStopped");u(this,"teamInitLocks");u(this,"nextConnId");u(this,"nextAnswerSubmissionId");u(this,"syncThrottle");u(this,"slowSyncTracking");u(this,"numActivePeriodicTasksHandlers");u(this,"periodicSyncInterval");u(this,"periodicTasksTimer");u(this,"customPuzzles");u(this,"customPuzzlesCannedHints");u(this,"jwtCache");u(this,"config");this.sockServerId="__UNINITIALIZED__",this.maxGuessesPerPuzzle=0,this.huntStartTime=0,this.huntEndTime=0,this.huntCloseTime=0,this.puzzlesDB=mo(),this.opts=e,this.onReadyCallbacks=[],this.backend=new Rr({backend:this.opts.backend,dumpBackendRequests:this.opts.dumpBackendRequests}),this.clock=new fa,this.numActiveConns=0,this.teamConns=new Map,this.teamControllers=new Map,this.scopeEnginesController=new Or(this),this.statsController=new Wr(this),this.cursorsController=new qr(this),this.subscriptionsTracker=new Vr,this.dirtyStateTracker=new Gr,this.bigBoardStateTracker=new Ur,this.teamMetricsTracker=new Mr(this),this.farmerServerInterface=this.opts.farmerServerInterface,this.mockHuntStaff=new Cr(this),this.fastSyncMetrics=new Ae(this.clock,ze.healthMonitoringIntervalMs),this.slowSyncMetrics=new Ae(this.clock,ze.healthMonitoringIntervalMs),this.checkAnswerMetrics=new Ae(this.clock,ze.healthMonitoringIntervalMs),this.cursorEventsMetrics=new Ae(this.clock,ze.cursorEventsMonitoringIntervalMs),this.numAuthsMetrics=new Ae(this.clock,ze.healthMonitoringIntervalMs),this.numRequestsMetrics=new Ae(this.clock,ze.healthMonitoringIntervalMs),this.metricsDumpTracking={lastDumpTime:0,lastUserTime:0,lastSystemTime:0,userTimeUsage:0,systemTimeUsage:0},this.isInitPending=!1,this.isReady=!1,this.isStopped=!1,this.teamInitLocks=new Map,this.nextConnId=0,this.nextAnswerSubmissionId=0,this.syncThrottle=new Vt(()=>this.config.syncThrottleParallelism),this.slowSyncTracking={downloadLock:new mn,miscTeamStateSyncController:new Kr(this),notifsNextIndex:0},this.numActivePeriodicTasksHandlers=0,this.periodicSyncInterval=this.opts.periodicSyncInterval??3e3,this.periodicTasksTimer=setInterval(()=>{this.runPeriodicTasks()},this.periodicSyncInterval),this.customPuzzles={},this.customPuzzlesCannedHints={},this.jwtCache=new Map,this.config=Zr(),(this.opts.isPosthunt??!1)&&(Ye.celestialRigging.thresholds=[.1,.2,.32,.45,.59,.74,.9],Ye.huntWidthRigging.solvesBuff={min:5/180,max:10/180},Ye.huntWidthRigging.ignoreProbability=0,Ye.huntWidthRigging.dustContribution=1/1e5)}teardown(){this.periodicTasksTimer!==void 0&&clearInterval(this.periodicTasksTimer);for(const e of this.teamConns.values())for(const n of e.values())n.close();this.isStopped=!0}genConnId(){const e=this.nextConnId;return this.nextConnId++,`${e}`}getTeamController(e){const n=this.teamControllers.get(e);if(n===void 0)throw new Error(`team ${e} not initialized yet`);return n}tryGetPuzzle(e){return this.puzzlesDB.tryGetPuzzle(e,this.customPuzzles)}getPuzzle(e){return this.puzzlesDB.getPuzzle(e,this.customPuzzles)}getPuzNames(){return this.puzzlesDB.getPuzNames(this.customPuzzles)}getPuzzles(){return this.puzzlesDB.getPuzzles(this.customPuzzles)}getCannedHints(){return this.puzzlesDB.getCannedHints(this.customPuzzlesCannedHints)}getCannedHintsForPuzzle(e){return this.puzzlesDB.getCannedHintsForPuzzle(e,this.customPuzzlesCannedHints)}getIsHuntOver(){return this.clock.genTimestamp()>=this.huntEndTime}setCustomPuzzle(e,n){var y;const{puzName:t}=e,a=this.customPuzzles[t]===void 0;this.customPuzzles[t]=e;const o=n!==void 0?[n]:[],r=o.length!==this.getCannedHintsForPuzzle(t).length;if(this.customPuzzlesCannedHints[t]=o,r){this.handleHuntAdminUpdate({numCannedHints:{[t]:o.length}});for(const f of Object.values(this.scopeEnginesController.getEnginesForType(v.TEAM_CANNED_HINTS)))f.handlePuzzlesUpdate([t])}for(let f=0;f<o.length;f++)(y=this.scopeEnginesController.getEngineIfExists({type:v.CANNED_HINT,puzName:t,index:f}))==null||y.updateContent();a&&this.handleHuntAdminUpdate({addPuzzles:{[t]:e}});const i=this.scopeEnginesController.getEngineIfExists({type:v.PUZZLE_CONTENT,puzName:t});i!==void 0&&i.rawContent===void 0&&i.ctx.assign(i.ctx.scope,i.getState());const h=this.scopeEnginesController.getEngineIfExists({type:v.SOLUTION_CONTENT,puzName:t});h!==void 0&&h.rawContent===void 0&&h.ctx.assign(h.ctx.scope,h.getState());const g=Object.values(this.customPuzzles).filter(f=>f.isCustomPuzzleAvailableInGacha).length;for(const f of this.teamControllers.values())(this.getIsHuntOver()||f.getIsFinished())&&f.handleTeamUpdate({finishedData:{numSolveCountPuzzles:this.puzzlesDB.numSolveCountPuzzles,numCustomPuzzles:g}})}async waitForReadyAsync(){this.isReady||await new Promise((e,n)=>{this.onReadyCallbacks.push(e)})}async tryInitAsync(){var e;if(!this.isReady&&!this.isInitPending){this.isInitPending=!0;try{const n=await(async()=>{try{return(await this.backend.sendReqAsync({type:Pe.GET_INIT_DATA,payload:{workerId:"main_worker"}})).payload}catch(t){console.error(t)}})();if(n!==void 0){const{sockServerId:t,teams:a,scopeState:o,maxGuessesPerPuzzle:r,huntStartTime:i,huntEndTime:h,huntCloseTime:g,notifsNextIndex:y,errata:f}=n;this.sockServerId=t,this.maxGuessesPerPuzzle=r,this.huntStartTime=i,this.huntEndTime=this.opts.forceHuntEnd??!1?Math.min(this.clock.genTimestamp(),h):h,this.huntCloseTime=g,this.slowSyncTracking.notifsNextIndex=y;for(const[w,E]of Object.entries(f))E!==null&&this.scopeEnginesController.createEngine(new Oe,{type:v.ERRATUM_CONTENT,erratumId:w},E);for(const[w,E]of Object.entries(a))this.createTeamController(w,E);const z=Object.values(o).map(({scope:w,state:E})=>{const O=this.scopeEnginesController.createEngine(new Oe,w,E,!0);if(O===null)throw new Error(`error creating init engine for ${ne(w)}`);return O});for(const w of z)(e=w.init)==null||e.call(w);for(const[w,E]of Object.entries(a))await this.initTeamControllerAsync(w,E);this.isReady=!0;for(const w of this.onReadyCallbacks)w();this.onReadyCallbacks=[],console.log("Sock server init complete.")}}catch(n){throw this.scopeEnginesController.teardown(),n}finally{this.isInitPending=!1}}}async initAsync(){if(this.isReady||this.isInitPending)throw new Error("don't expect to request init more than once");if(this.opts.cursorsMode??!1){this.isReady=!0;return}await this.loadPuzzlesAsync(),await this.tryInitAsync(),await this.waitForReadyAsync()}addClient(e,n){this.numActiveConns++;const t=new Pr(this,n??this.genConnId(),{send:a=>{this.opts.dumpWsMessages&&console.log(`${t.connId} < ${JSON.stringify(JSON.parse(a),null,2)}`),e.send(a)},close:()=>e.close()});return{handleMsg:a=>{const o=new yi(t,this.opts.logRequestErrDebugInfoAsync);(async()=>{await t.handleMsgLock.acquireAndRunAsync(async()=>{o.activeMsgRaw=a;try{await this.handleMsgAsync(o,a)}catch(r){console.error(r),t.sendErrCode(D.SERVER_ERROR)}finally{o.flushErr(),delete o.activeMsgRaw}})})().catch(r=>console.error)},removeClient:()=>{this.removeClient(t)}}}isCtxAuthed(e){return Gt(e.conn)}removeClient(e){this.numActiveConns--,Gt(e)&&this.removeClientAuthed(e)}removeClientAuthed(e){const{connId:n,teamId:t}=e;this.subscriptionsTracker.clearConnSubscriptions(e),this.cursorsController.removeConnFromGroup(e);const a=this.teamConns.get(t);if(a===void 0)throw new Error("expect team conns to be defined for team");a.delete(n)}createTeamController(e,n){const t=new jr(e,n,this);this.teamControllers.set(e,t)}async initTeamControllerAsync(e,n){const t=this.getTeamController(e);t.init(n),this.handleHuntAdminUpdate({addTeams:{[e]:t.getClientAdminData()}}),this.handleTeamListAddTeam(e),this.getHuntAdminEngine().addTeam(e);const a=t.getClientBigBoardState();this.bigBoardStateTracker.addTeam(e,a),this.handleBigBoardUpdate({addTeams:{[e]:a}}),await t.initTeamProgressAsync()}async initTeamAsync(e){var t;let n=null;try{n=(await this.backend.sendReqAsync({type:Pe.GET_INIT_TEAM_DATA,payload:{teamId:e}})).payload}catch(a){console.error(a)}if(n!==null){if(this.createTeamController(e,n),await this.initTeamControllerAsync(e),!(this.opts.cursorsMode??!1)){const a=this.getTeamController(e);for(let o=0;o<(((t=this.teamConns.get(e))==null?void 0:t.size)??0);o++)a.numAuthsMetrics.record(),this.teamMetricsTracker.recordAuth(e)}this.broadcastRespToTeam(e,{type:ue.AUTH_SUCCESS,result:{teamId:e}})}}async loadPuzzlesAsync(){this.setPuzzlesDB(await this.opts.loadPuzzlesDBAsync())}setPuzzlesDB(e){const n=[...this.getPuzNames()].filter(t=>e.getCannedHintsForPuzzle(t,this.customPuzzlesCannedHints).length!==this.getCannedHintsForPuzzle(t).length);this.puzzlesDB=e;for(const t of Object.values(this.scopeEnginesController.getEnginesForType(v.TEAM_PUZZLE_105)))t.updateCustomPuzzle();if(this.isReady){for(const t of Object.values(this.scopeEnginesController.getEnginesForType(v.PUZZLE_CONTENT)))t.updateContent();for(const t of Object.values(this.scopeEnginesController.getEnginesForType(v.SOLUTION_CONTENT)))t.updateContent();for(const t of Object.values(this.scopeEnginesController.getEnginesForType(v.CANNED_HINT)))t.updateContent();if(this.getHuntAdminEngine().refresh(),n.length>0)for(const t of Object.values(this.scopeEnginesController.getEnginesForType(v.TEAM_CANNED_HINTS)))t.handlePuzzlesUpdate(n)}}isHuntClosed(){return this.clock.genTimestamp()>=this.huntCloseTime}subscribeToUpdates(e,n,t){return this.subscriptionsTracker.isSubscribed(e.conn,n)?e.setErrCodeAndReturn(D.ALREADY_SUBSCRIBED,!1):!(!this.scopeEnginesController.handleSubscribe(e,n,t)||!this.subscriptionsTracker.subscribe(e,n))}unsubscribeFromUpdates(e,n){return!!this.subscriptionsTracker.unsubscribe(e,n)}sendRespMultiple(e,n){const t=JSON.stringify(n);for(const a of e)a.sendRaw(t)}async handleMsgAsync(e,n){await this.waitForReadyAsync();const{conn:t}=e;if(this.isStopped){t.close();return}delete t.activeStepId,this.numRequestsMetrics.record();const a=JSON.parse(n.toString());if(typeof a!="object"||typeof a.type!="string")return e.setBadRequest();if(this.opts.dumpWsMessages&&console.log(`${t.connId} > ${JSON.stringify(a,null,2)}`),a.type===_e.AUTH){const{jwt:o}=a;if(typeof o!="string")return e.setBadRequest();this.numAuthsMetrics.record();const r=this.jwtCache.get(o)??this.opts.authInterface.verify(o);if(r===null)return e.setErrCode(D.AUTH_ERROR);const{teamId:i=this.backend.getDefaultTeamId(),isAdmin:h=!1}=r;if(i===null)return e.setPermissionDenied();const g=Object.assign(t,{teamId:i,isAdmin:h}),y=this.teamConns.get(i);if(y===void 0){const f=new Map;f.set(g.connId,g),this.teamConns.set(i,f)}else y.set(g.connId,g);if(!(this.opts.cursorsMode??!1)){await(()=>{const w=this.teamInitLocks.get(i);if(w!==void 0)return w;const E=new mn;return this.teamInitLocks.set(i,E),E})().acquireAndRunAsync(async()=>{this.teamControllers.has(i)||await this.initTeamAsync(i)});const z=this.teamControllers.get(i);if(z===void 0)throw new Error(`team ${i} not initialized`);this.teamMetricsTracker.recordAuth(i),z.numAuthsMetrics.record()}g.send({type:ue.AUTH_SUCCESS,result:{teamId:i}});return}if(!this.isCtxAuthed(e))return e.setErrCode(D.PERMISSION_DENIED,!0);await this.handleReqAuthedAsync(e,a)}async handleReqAuthedAsync(e,n){const{conn:t}=e,{teamId:a}=t;switch(n.type){case _e.PING:{t.send({type:ue.PONG});return}case _e.SET_CURSOR_GROUP:{if(!("reqId"in n)||!("cursorGroupName"in n))return e.setBadRequest();const{reqId:i,cursorGroupName:h}=n;if(typeof i!="number"||!(h===null||typeof h=="string"))return e.setBadRequest();h===null?this.cursorsController.removeConnFromGroup(t):this.cursorsController.addConnToGroup(t,h),t.send({type:ue.SET_CURSOR_GROUP_ACK,reqId:i});return}case _e.CURSOR_EVENT:{if(!("event"in n))return e.setBadRequest();const{event:i}=n;if(typeof i!="object")return e.setBadRequest();const h=Jr(i);if(h===null)return e.setBadRequest();this.cursorsController.broadcastEvent(t,h),this.cursorEventsMetrics.record();return}}const o=this.teamControllers.get(a);if(o===void 0)return e.setErrCode(D.PERMISSION_DENIED,!0);if(o.isInactive&&!t.isAdmin)return e.setErrCode(D.TEAM_INACTIVE,!0);if(o.isTempBlocked&&!t.isAdmin)return e.setErrCode(D.TEAM_TEMP_BLOCKED,!0);if(this.teamMetricsTracker.recordRequest(a),o.numRequestsMetrics.record(),!this.opts.isWSReq(n))return e.setBadRequest();await this.handleValidatedReqAsync(e,n,o)}async handleValidatedReqAsync(e,n,t){const{conn:a}=e;if(a.spectateTeamId!==void 0&&n.type!==_e.UPDATE_SUBSCRIPTIONS)return e.setErrCode(D.SPECTATE_ACTION);switch(n.type){case _e.SCOPE_STEP:{a.activeStepId=n.stepId,await this.handleScopeStepAsync(e,n.step.scope,n.step.payload);break}case _e.VIEW_PUZZLE:{const{puzName:o}=n;t.viewPuzzle(e,o);break}case _e.UPDATE_SUBSCRIPTIONS:{const o=[];for(const r of n.upds){const{scope:i}=r,h=(()=>{switch(r.type){case vt.ADD:return this.subscribeToUpdates(e,i,r.tag);case vt.REMOVE:return this.unsubscribeFromUpdates(e,i)}})(),g=e.flushErr(!1);h!==(g===void 0)&&console.error(`expected error to match success flag, but got ${g} (${h})`),g!==void 0&&o.push({type:r.type,scope:i,err:g})}o.length>0&&e.conn.send({type:ue.UPDATE_SUBSCRIPTIONS_ERRORS,errors:o});break}}}async handleScopeStepAsync(e,n,t){await this.scopeEnginesController.handleStepAsync(e,{scope:n,payload:t})}broadcastToScope(e,n){const t=this.subscriptionsTracker.getSubscribedConns(e);this.sendRespMultiple(t.values(),n)}broadcastScopeAssign(e,n,t){return this.broadcastToScope(e,{type:ue.SCOPE_ASSIGN,assign:{scope:e,state:n,tag:t}})}broadcastScopeUpdate(e,n,t){return this.broadcastToScope(e,{type:ue.SCOPE_UPDATE,upd:{scope:e,payload:n,tag:t}})}handleHuntAdminUpdate(e){this.getHuntAdminEngine().ctx.update({type:v.HUNT_ADMIN},e)}getOrCreateEngineOrThrow(e){const n=this.scopeEnginesController.getOrCreateEngine(new Oe,e);if(n===null)throw new Error(`failed to create engine for ${ne(e)}`);return n}getHuntAdminEngine(){return this.getOrCreateEngineOrThrow({type:v.HUNT_ADMIN})}getBigBoardEngine(){return this.getOrCreateEngineOrThrow({type:v.BIG_BOARD})}getServerHealthEngine(){return this.getOrCreateEngineOrThrow({type:v.SERVER_HEALTH})}getTeamListEngine(){return this.getOrCreateEngineOrThrow({type:v.TEAM_LIST})}getAdminQueueEngine(){return this.getOrCreateEngineOrThrow({type:v.ADMIN_QUEUE})}handleTeamSummaryUpdate(e,n){this.getTeamListEngine().updateTeam(e,n);const{isHidden:t,displayName:a}=n;Object.values({isHidden:t,displayName:a}).filter(r=>r!==void 0).length>0&&this.handleHuntAdminUpdate({updTeams:{[e]:n}})}handleTeamListAddTeam(e){const t=this.getTeamController(e).getTeamSummaryState();this.getTeamListEngine().addTeam(e,t)}handleTeamListRemoveTeam(e){this.getTeamListEngine().removeTeam(e)}broadcastAndCommitTeamSummaryUpdates(){const{pendingUpds:e}=this.getTeamListEngine();Object.keys(e).length<=0||this.getTeamListEngine().commitUpds()}handleBigBoardUpdate(e){this.getBigBoardEngine().ctx.update({type:v.BIG_BOARD},e)}broadcastRespToTeam(e,n){const t=this.teamConns.get(e);t!==void 0&&this.sendRespMultiple(t.values(),n)}broadcastNotifToTeam(e,n){this.broadcastRespToTeam(e,{type:ue.NOTIFICATION,notif:n})}async handleImageSubmissionAsync(e,n,t){switch(n){case Rn.DUMMY:return!0;case Rn.PUZZLE_105:return await this.getOrCreateEngineOrThrow({type:v.TEAM_PUZZLE_105,teamId:e}).handleImageSubmissionAsync(t),!0;case Rn.PUZZLE_139:return await this.getOrCreateEngineOrThrow({type:v.TEAM_PUZZLE_139,teamId:e}).handleImageSubmissionAsync(t),!0}}async syncDataThrottledAsync(e){return await this.syncThrottle.acquireAndRunAsync(async()=>(await this.backend.sendReqAsync({type:Pe.SYNC_DATA,payload:e})).payload)}async triggerSlowSyncDownloadUnderLockAsync(){var a;const e={notifsStartIndex:this.slowSyncTracking.notifsNextIndex},{notifs:n,notifsNextIndex:t}=await this.syncDataThrottledAsync(e);t!==void 0&&(this.slowSyncTracking.notifsNextIndex=t);for(const o of n??[])try{switch(o.type){case Ve.HINT_ANSWERED:{const{hintId:r,response:i}=o,h=this.scopeEnginesController.getEngineIfExists({type:v.HINT,hintId:r});if(h===void 0)throw new Error(`received hint response for unknown hint ${r}`);h.handleResponseNoBackendSync(i);break}case Ve.TEAM_MEMBERS:{const{teamId:r,members:i}=o;(a=this.teamControllers.get(r))==null||a.handleSetMembers(i);break}case Ve.ERRATUM:{const{erratumId:r}=o;await this.handleErratumUpdateAsync(r,o);break}case Ve.SUBMIT_IMAGE:{const{teamId:r,slot:i,url:h}=o;await this.handleImageSubmissionAsync(r,i,h);break}}}catch(r){console.error(r)}}async triggerSlowSyncDownloadAsync(e){const{downloadLock:n}=this.slowSyncTracking;!(e??!1)&&n.getIsActive()||await n.acquireAndRunAsync(()=>this.triggerSlowSyncDownloadUnderLockAsync())}async triggerSlowSyncUpload(){await this.scopeEnginesController.syncLoopController.triggerLoopAsync(),await this.slowSyncTracking.miscTeamStateSyncController.syncLoopController.triggerLoopAsync()}async runPeriodicSyncTasks(){for(const[e,n]of this.teamControllers)try{await n.fastSyncTracking.syncLoopController.triggerLoopAsync()}catch(t){console.error(t)}try{await this.triggerSlowSyncUpload()}catch(e){console.error(e)}try{await this.triggerSlowSyncDownloadAsync()}catch(e){console.error(e)}}runPeriodicTasks(){(async()=>{var e,n,t,a,o,r;if(!this.isReady){await this.tryInitAsync();return}try{const i=this.clock.genTimestamp(),{lastDumpTime:h,lastUserTime:g,lastSystemTime:y}=this.metricsDumpTracking;if(i>h+(this.opts.metricsDumpInterval??30*1e3)){const{user:f,system:z}=((n=(e=this.opts).getCpuUsage)==null?void 0:n.call(e))??{user:0,system:0},w=(f-g)/1e3/(i-h),E=(z-y)/1e3/(i-h);this.metricsDumpTracking={lastDumpTime:i,lastUserTime:f,lastSystemTime:z,userTimeUsage:w,systemTimeUsage:E},await((a=(t=this.opts).logMetrics)==null?void 0:a.call(t,`[${i}] Metrics: ${JSON.stringify([0,this.fastSyncMetrics.getSummary().totNumEvents,this.slowSyncMetrics.getSummary().totNumEvents,this.checkAnswerMetrics.getSummary().totNumEvents,this.numAuthsMetrics.getSummary().totNumEvents,this.numRequestsMetrics.getSummary().totNumEvents,this.syncThrottle.getNumWaitingOrActive(),this.numActivePeriodicTasksHandlers,0,f,z])}`))}}catch(i){console.error(i)}this.numActivePeriodicTasksHandlers++;try{this.cursorEventsMetrics.prevNumEvents>0&&await((r=(o=this.opts).logCursorsMetrics)==null?void 0:r.call(o,`[${new Date().toLocaleString()}] Cursor events: ${this.cursorEventsMetrics.getSummaryString()}`))}catch(i){console.error(i)}if(!(this.opts.cursorsMode??!1)){try{this.getServerHealthEngine().runPeriodicTasks()}catch(i){console.error(i)}try{this.broadcastAndCommitTeamSummaryUpdates()}catch(i){console.error(i)}try{const{pendingUpds:i}=this.bigBoardStateTracker;Object.keys(i).length>0&&(this.handleBigBoardUpdate({updTeams:i}),this.bigBoardStateTracker.commitUpds())}catch(i){console.error(i)}try{this.statsController.getHuntStatsEngine().flushAllUpdates()}catch(i){console.error(i)}await this.runPeriodicSyncTasks();try{this.mockHuntStaff!==void 0&&await this.mockHuntStaff.runPeriodicTasksAsync()}catch(i){console.error(i)}}this.numActivePeriodicTasksHandlers--})().catch(console.error)}recordSlowSyncPacket(){this.slowSyncMetrics.record()}async handleErratumUpdateAsync(e,n){const{isPublished:t}=n,{engine:a,isAlreadyPublished:o}=(()=>{const h=this.scopeEnginesController.getEngineIfExists({type:v.ERRATUM_CONTENT,erratumId:e});if(h===void 0){const g=this.scopeEnginesController.createEngine(new Oe,{type:v.ERRATUM_CONTENT,erratumId:e},n);if(g===null)throw new Error(`failed to create engine for erratum ${e}`);return{engine:g,isAlreadyPublished:!1}}else{const g=h.state.isPublished;return h.overrideContent(n),{engine:h,isAlreadyPublished:g}}})(),r=a.getSummary();if(this.handleHuntAdminUpdate({setErrata:{[e]:r}}),t){const h={[e]:r};for(const g of Object.values(this.scopeEnginesController.getEnginesForType(v.TEAM_ERRATA)))g.ctx.update(g.ctx.scope,h)}if(!o&&t)for(const h of this.teamControllers.keys())a.isVisibleToTeam(h)&&this.broadcastNotifToTeam(h,{type:Ce.ERRATUM})}}class Qr{verify(e){return JSON.parse(e)}}const $r="ciGh9ijeOopud4aGrohQu8eila1hieNe";class el{constructor(e){u(this,"ws");u(this,"conn");u(this,"isActive");u(this,"onOpenEvent");u(this,"onRespOrCloseEvent");u(this,"reconnectCounter");u(this,"nextStepId");u(this,"stepLock");this.ws=e,this.isActive=!0,this.onOpenEvent=new Tt,this.onRespOrCloseEvent=new Tt,this.reconnectCounter=0,this.nextStepId=0,this.stepLock=new Vt(100)}genStepId(){const e=`farmer_step_${this.nextStepId}`;return this.nextStepId++,e}makeConnection(){const e=this.ws.makeConnection(()=>{this.reconnectCounter=0,this.onOpenEvent.fire(e)},()=>{this.isActive&&(this.onRespOrCloseEvent.fire(null),(async()=>{await to(Math.min(this.reconnectCounter,5)*1e3),this.reconnectCounter++,this.makeConnection()})().catch(console.error))},n=>{this.onRespOrCloseEvent.fire(JSON.parse(n))},n=>{console.error(n)});return this.conn=e,e}async lazyInitAsync(){if(!this.isActive)throw new Error("attempt to use farmer while inactive");const e=this.conn??this.makeConnection();return e.isOpen()?e:await this.onOpenEvent.waitAsync()}async sendReqAsync(e){(await this.lazyInitAsync()).send(JSON.stringify(e))}async getSimilaritiesAsync(e){return await this.stepLock.acquireAndRunAsync(async()=>{const n=this.genStepId();await this.sendReqAsync({type:"step",stepId:n,password:$r,step:e});const{resp:t}=await this.onRespOrCloseEvent.waitForAsync(a=>a===null||a.type==="error"||a.type==="step_response"&&a.stepId===n?{resp:a}:null);return t===null||t.type==="error"?{type:un.ERROR}:t.stepResponse})}getLocksContention(){return this.stepLock.getNumWaitingOrActive()}teardown(){var e;(e=this.conn)==null||e.close(),delete this.conn,this.isActive=!1}}class nl{constructor(e){u(this,"clients");this.clients=e.map(n=>new el(n))}getSimilaritiesAsync(e){return this.clients[Math.floor(Math.random()*this.clients.length)].getSimilaritiesAsync(e)}getLocksContention(){return Math.max(...this.clients.map(e=>e.getLocksContention()))}teardown(){for(const e of this.clients)e.teardown()}}const Mt=`{
  "version": 93,
  "teams": {
    "4": {
      "displayName": "simplicissimus",
      "isInactive": false,
      "isHidden": false,
      "members": [
        "sevenkplus",
        "散兵",
        "The Celestial Force"
      ],
      "viewTimes": {},
      "hints": {},
      "teamProgress": {
        "events": {}
      },
      "isPlaceholder": true
    },
    "12": {
      "displayName": "StriketeamOrbit(How did you lock in your astronomical coordinate????)",
      "isInactive": false,
      "isHidden": false,
      "members": [
        "3Strikerz🔫",
        "TonyWild😎",
        "🐤zyzyvaa🐤",
        "Cocopalm🍇",
        "Thread 🧶",
        "tualli 🌟"
      ],
      "viewTimes": {},
      "hints": {},
      "teamProgress": {
        "events": {}
      },
      "isPlaceholder": true
    },
    "17": {
      "displayName": "Sea Lionses",
      "isInactive": false,
      "isHidden": false,
      "members": [
        "Sea Lion",
        "Sea Lioness (hi Kirsty and Marianne we are enjoying the micropuzzles (they are a good size when we don't have a lot of free time)) (the baby is called Ethan)"
      ],
      "viewTimes": {},
      "hints": {},
      "teamProgress": {
        "events": {}
      },
      "isPlaceholder": true
    },
    "18": {
      "displayName": "Les Gaulois",
      "isInactive": false,
      "isHidden": false,
      "members": [
        "enigmatix"
      ],
      "viewTimes": {},
      "hints": {},
      "teamProgress": {
        "events": {}
      },
      "isPlaceholder": true
    },
    "23": {
      "displayName": "kwargers",
      "isInactive": false,
      "isHidden": false,
      "members": [
        "Shiny",
        "Aziz",
        "Jess",
        "Jaded",
        "crizbae"
      ],
      "viewTimes": {},
      "hints": {},
      "teamProgress": {
        "events": {}
      },
      "isPlaceholder": true
    },
    "24": {
      "displayName": "Singles Ready to Stay Inside",
      "isInactive": false,
      "isHidden": false,
      "members": [
        "Martin Ingle"
      ],
      "viewTimes": {},
      "hints": {},
      "teamProgress": {
        "events": {}
      },
      "isPlaceholder": true
    },
    "25": {
      "displayName": "For Deep Universe",
      "isInactive": false,
      "isHidden": false,
      "members": [
        "amway"
      ],
      "viewTimes": {},
      "hints": {},
      "teamProgress": {
        "events": {}
      },
      "isPlaceholder": true
    },
    "35": {
      "displayName": "Quarks and Gluons",
      "isInactive": false,
      "isHidden": false,
      "members": [
        "Adam Rosenfield",
        "Andrew Spann",
        "Eleanor Lin",
        "Halftime",
        "Marla Slusky",
        "Jason Rute"
      ],
      "viewTimes": {},
      "hints": {},
      "teamProgress": {
        "events": {}
      },
      "isPlaceholder": true
    },
    "36": {
      "displayName": "Aurora borealis? At this time of year? At this time of day? In this part of the country? Localized entirely within your stargazing trip?",
      "isInactive": false,
      "isHidden": false,
      "members": [
        "Patrick Star",
        "The Star (H.G. Wells)"
      ],
      "viewTimes": {},
      "hints": {},
      "teamProgress": {
        "events": {}
      },
      "isPlaceholder": true
    },
    "37": {
      "displayName": "idk",
      "isInactive": false,
      "isHidden": false,
      "members": [
        "wen",
        "boboquack",
        "mo",
        "chi",
        "m"
      ],
      "viewTimes": {},
      "hints": {},
      "teamProgress": {
        "events": {}
      },
      "isPlaceholder": true
    },
    "43": {
      "displayName": "ghostbloods",
      "isInactive": false,
      "isHidden": false,
      "members": [
        "Michael",
        "Darshan",
        "Matthew"
      ],
      "viewTimes": {},
      "hints": {},
      "teamProgress": {
        "events": {}
      },
      "isPlaceholder": true
    },
    "45": {
      "displayName": "TruFact™",
      "isInactive": false,
      "isHidden": false,
      "members": [
        "Tanis",
        "John",
        "TK",
        "Chris",
        "shMike",
        "JSchweck"
      ],
      "viewTimes": {},
      "hints": {},
      "teamProgress": {
        "events": {}
      },
      "isPlaceholder": true
    },
    "47": {
      "displayName": "🌮🌮taquito",
      "isInactive": false,
      "isHidden": false,
      "members": [
        "Jan Chong",
        "Nina Hinrichs",
        "Misha Jamy",
        "Justin Graham",
        "Yar Woo",
        "Christopher Yao"
      ],
      "viewTimes": {},
      "hints": {},
      "teamProgress": {
        "events": {}
      },
      "isPlaceholder": true
    },
    "69": {
      "displayName": "Puzzles are for Slo❤️ers",
      "isInactive": false,
      "isHidden": false,
      "members": [
        "Josiah Schwab",
        "Annelise Beck",
        "Bryan Changala",
        "Claire McLellan-Cassivi",
        "Kaylee Bonawitz",
        "Marissa Weichman"
      ],
      "viewTimes": {},
      "hints": {},
      "teamProgress": {
        "events": {}
      },
      "isPlaceholder": true
    },
    "73": {
      "displayName": "Thread Waffle House",
      "isInactive": false,
      "isHidden": false,
      "members": [
        "Aura",
        "CERiNG",
        "Frenzy",
        "oatmealine",
        "sorae",
        "Tetaes"
      ],
      "viewTimes": {},
      "hints": {},
      "teamProgress": {
        "events": {}
      },
      "isPlaceholder": true
    },
    "74": {
      "displayName": "TWITCH.TV/NOBLORD 🎛️👑 HEARTHSTONE PRO 🌀🃏 DREAMHACK ATLANTA 2017 RUNNER UP 💭💻🥈  ANA PRODIGY 💉💤 UNSELFISH TAGPROER 🔴🔵🚩 CRYPTIC EXPERT 🧠 LOGIC MASTER 🔢✏️ 諸葛亮 👲 AI HAYASAKA #1 FAN + friends",
      "isInactive": false,
      "isHidden": false,
      "members": [
        "TWITCH.TV/NOBLORD 🎛️👑 HEARTHSTONE PRO 🌀🃏 DREAMHACK ATLANTA 2017 RUNNER UP 💭💻🥈  ANA PRODIGY 💉💤 UNSELFISH TAGPROER 🔴🔵🚩 CRYPTIC EXPERT 🧠 LOGIC MASTER 🔢✏️ 諸葛亮 👲 AI HAYASAKA #1 FAN",
        "friend1"
      ],
      "viewTimes": {},
      "hints": {},
      "teamProgress": {
        "events": {}
      },
      "isPlaceholder": true
    },
    "82": {
      "displayName": "weeklies.enigmatics.org",
      "isInactive": false,
      "isHidden": false,
      "members": [
        "Ghosts the Elder",
        "umsyt",
        "alpha_514",
        "Thesis",
        "wwm",
        "prismarc"
      ],
      "viewTimes": {},
      "hints": {},
      "teamProgress": {
        "events": {}
      },
      "isPlaceholder": true
    },
    "87": {
      "displayName": "🥦 Broccoli Brawlers 🥦",
      "isInactive": false,
      "isHidden": false,
      "members": [
        "sirtafeb",
        "Madmahogany",
        "Paul",
        "Shogia"
      ],
      "viewTimes": {},
      "hints": {},
      "teamProgress": {
        "events": {}
      },
      "isPlaceholder": true
    },
    "97": {
      "displayName": "Incessantly Observing Halley's",
      "isInactive": false,
      "isHidden": false,
      "members": [
        "Adalbert (not stuck in a time loop)"
      ],
      "viewTimes": {},
      "hints": {},
      "teamProgress": {
        "events": {}
      },
      "isPlaceholder": true
    },
    "114": {
      "displayName": "Puzzkill",
      "isInactive": false,
      "isHidden": false,
      "members": [
        "Ricky",
        "Emily F",
        "Paul D",
        "Wei Han",
        "Mark Spindler"
      ],
      "viewTimes": {},
      "hints": {},
      "teamProgress": {
        "events": {}
      },
      "isPlaceholder": true
    },
    "121": {
      "displayName": "Hee-ho",
      "isInactive": false,
      "isHidden": false,
      "members": [
        "limjz",
        "ets",
        "glitterkitty",
        "HJ",
        "j",
        "Mysti"
      ],
      "viewTimes": {},
      "hints": {},
      "teamProgress": {
        "events": {}
      },
      "isPlaceholder": true
    },
    "133": {
      "displayName": "Eclectic Constellation of /r/PictureGame",
      "isInactive": false,
      "isHidden": false,
      "members": [
        "Segin",
        "Avior",
        "Ginan",
        "Aljanah",
        "Achird"
      ],
      "viewTimes": {},
      "hints": {},
      "teamProgress": {
        "events": {}
      },
      "isPlaceholder": true
    },
    "141": {
      "displayName": "tfti",
      "isInactive": false,
      "isHidden": false,
      "members": [
        "Justin Beaver",
        "Jdoge"
      ],
      "viewTimes": {},
      "hints": {},
      "teamProgress": {
        "events": {}
      },
      "isPlaceholder": true
    },
    "144": {
      "displayName": "Universal Solvents",
      "isInactive": false,
      "isHidden": false,
      "members": [
        "Stephanie",
        "Rick",
        "Anh",
        "Cassie"
      ],
      "viewTimes": {},
      "hints": {},
      "teamProgress": {
        "events": {}
      },
      "isPlaceholder": true
    },
    "151": {
      "displayName": "this puzzle intentionally left huggs",
      "isInactive": false,
      "isHidden": false,
      "members": [
        "Michelle",
        "KST",
        "Natalie",
        "Jeff",
        "YLi",
        "Chenyu"
      ],
      "viewTimes": {},
      "hints": {},
      "teamProgress": {
        "events": {}
      },
      "isPlaceholder": true
    },
    "160": {
      "displayName": "[URGENT] JUST A DAY TILL GPH2024 STARTS! BECAUSE FOR EVERY 24 HOURS FROM NOW ON, I'M GONNA BANG MY HEAD SO HARD, FORGET EVERYTHING, AND JUST A DAY TILL GPH2024 STARTS! I CAN'T WAIT!",
      "isInactive": false,
      "isHidden": false,
      "members": [
        "kri",
        "jh",
        "alex9801",
        "namseo",
        "'^'"
      ],
      "viewTimes": {},
      "hints": {},
      "teamProgress": {
        "events": {}
      },
      "isPlaceholder": true
    },
    "172": {
      "displayName": "dijkstrawberries",
      "isInactive": false,
      "isHidden": false,
      "members": [
        "esc",
        "COL",
        "CallMeMushroom",
        "Fivero",
        "mathlover",
        "NanoApe, and the 7th member: Answer OVERCOMER"
      ],
      "viewTimes": {},
      "hints": {},
      "teamProgress": {
        "events": {}
      },
      "isPlaceholder": true
    },
    "181": {
      "displayName": "AAAAA beginers' utopia",
      "isInactive": false,
      "isHidden": false,
      "members": [
        "BigDipper",
        "SmallDumpling",
        "Zer0",
        "Zer0",
        "Zer0"
      ],
      "viewTimes": {},
      "hints": {},
      "teamProgress": {
        "events": {}
      },
      "isPlaceholder": true
    },
    "186": {
      "displayName": "给猫铲屎去了",
      "isInactive": false,
      "isHidden": false,
      "members": [
        "OKBob",
        "TUTUTU",
        "Makapaka",
        "dodomos",
        "Look at the stars. Look how they shine for you. And everything you do. Yeah, they were all yellow. I came along. I wrote a song for you. And all the things you do. And it was called Yellow",
        "namehard"
      ],
      "viewTimes": {},
      "hints": {},
      "teamProgress": {
        "events": {}
      },
      "isPlaceholder": true
    },
    "187": {
      "displayName": "dajiangyou",
      "isInactive": false,
      "isHidden": false,
      "members": [
        "FlyingOmelet",
        "pyl",
        "kiron",
        "placeholder",
        "isaacpei"
      ],
      "viewTimes": {},
      "hints": {},
      "teamProgress": {
        "events": {}
      },
      "isPlaceholder": true
    },
    "197": {
      "displayName": "Kevin",
      "isInactive": false,
      "isHidden": false,
      "members": [
        "Kevin Orfield"
      ],
      "viewTimes": {},
      "hints": {},
      "teamProgress": {
        "events": {}
      },
      "isPlaceholder": true
    },
    "203": {
      "displayName": "*dinality",
      "isInactive": false,
      "isHidden": false,
      "members": [
        "Benji",
        "Sushi",
        "Max",
        "Ryan",
        "Belinda",
        "Herman"
      ],
      "viewTimes": {},
      "hints": {},
      "teamProgress": {
        "events": {}
      },
      "isPlaceholder": true
    },
    "204": {
      "displayName": "Duck Soup",
      "isInactive": false,
      "isHidden": false,
      "members": [
        "Glenn Magus Harvey",
        "Kagami Ame",
        "kitbeard",
        "tanoshimi",
        "plipster",
        "Mebibyte"
      ],
      "viewTimes": {},
      "hints": {},
      "teamProgress": {
        "events": {}
      },
      "isPlaceholder": true
    },
    "210": {
      "displayName": "Sufficiently Large N",
      "isInactive": false,
      "isHidden": false,
      "members": [
        "antara",
        "birb",
        "orie",
        "legend",
        "chris"
      ],
      "viewTimes": {},
      "hints": {},
      "teamProgress": {
        "events": {}
      },
      "isPlaceholder": true
    },
    "217": {
      "displayName": "Not A Hunter",
      "isInactive": false,
      "isHidden": false,
      "members": [
        "Not A Number",
        "Tinily A Master, Nearly a Meower",
        "Unlike An Other (Zhiyuan)",
        "Seldom A Sieger",
        "Hardly A Color",
        "Except An O'ranger(s)"
      ],
      "viewTimes": {},
      "hints": {},
      "teamProgress": {
        "events": {}
      },
      "isPlaceholder": true
    },
    "218": {
      "displayName": "ME AND KERO KISSING (illegal)",
      "isInactive": false,
      "isHidden": false,
      "members": [
        "kerofan001",
        "kerofan002",
        "kerofan003",
        "kerofan004",
        "kerofan005"
      ],
      "viewTimes": {},
      "hints": {},
      "teamProgress": {
        "events": {}
      },
      "isPlaceholder": true
    },
    "251": {
      "displayName": "Stone Rage Warehouse: Iron Proof",
      "isInactive": false,
      "isHidden": false,
      "members": [
        "Adrian",
        "Amos",
        "Glenn",
        "Eli",
        "Caroline",
        "Darby"
      ],
      "viewTimes": {},
      "hints": {},
      "teamProgress": {
        "events": {}
      },
      "isPlaceholder": true
    },
    "255": {
      "displayName": "Nulliphi",
      "isInactive": false,
      "isHidden": false,
      "members": [
        "Null",
        "Phi"
      ],
      "viewTimes": {},
      "hints": {},
      "teamProgress": {
        "events": {}
      },
      "isPlaceholder": true
    },
    "257": {
      "displayName": "Just-Us League",
      "isInactive": false,
      "isHidden": false,
      "members": [
        "Mark Navarrete",
        "Jimmy Williams",
        "Ashutosh Sodhani",
        "Vincent Roscioli",
        "Nathan Schwalm",
        "Zack Pierpoint"
      ],
      "viewTimes": {},
      "hints": {},
      "teamProgress": {
        "events": {}
      },
      "isPlaceholder": true
    },
    "260": {
      "displayName": "Guess Who's Backsolving, Backsolving Again",
      "isInactive": false,
      "isHidden": false,
      "members": [
        "Jon",
        "schizophoenix",
        "Celestine",
        "Vot"
      ],
      "viewTimes": {},
      "hints": {},
      "teamProgress": {
        "events": {}
      },
      "isPlaceholder": true
    },
    "265": {
      "displayName": "Dirty Bayes",
      "isInactive": false,
      "isHidden": false,
      "members": [
        "Matt",
        "Andy",
        "Alex",
        "Matto"
      ],
      "viewTimes": {},
      "hints": {},
      "teamProgress": {
        "events": {}
      },
      "isPlaceholder": true
    },
    "267": {
      "displayName": "bodofronto",
      "isInactive": false,
      "isHidden": false,
      "members": [
        "Henry",
        "Riley Pinkerton",
        "Jenny Iglesias"
      ],
      "viewTimes": {},
      "hints": {},
      "teamProgress": {
        "events": {}
      },
      "isPlaceholder": true
    },
    "269": {
      "displayName": "Molar Dilemma",
      "isInactive": false,
      "isHidden": false,
      "members": [
        "Ita",
        "Nikola",
        "Denis",
        "Željko",
        "Antun"
      ],
      "viewTimes": {},
      "hints": {},
      "teamProgress": {
        "events": {}
      },
      "isPlaceholder": true
    },
    "275": {
      "displayName": "FloorOfLava",
      "isInactive": false,
      "isHidden": false,
      "members": [
        "LargoDream",
        "cl1694",
        "Mr.Raindrop",
        "Aqua Cat"
      ],
      "viewTimes": {},
      "hints": {},
      "teamProgress": {
        "events": {}
      },
      "isPlaceholder": true
    },
    "278": {
      "displayName": "Meowzle",
      "isInactive": false,
      "isHidden": false,
      "members": [
        "Meow Mix",
        "thepersonwhodied",
        "Sheepiroo",
        "danielq987",
        "ThaBooVX",
        "solstice23"
      ],
      "viewTimes": {},
      "hints": {},
      "teamProgress": {
        "events": {}
      },
      "isPlaceholder": true
    },
    "284": {
      "displayName": "Will decide later",
      "isInactive": false,
      "isHidden": false,
      "members": [
        "Just black",
        "mutsuki",
        "starxingchenc",
        "Inferno",
        "Suika_predator",
        "winfrid"
      ],
      "viewTimes": {},
      "hints": {},
      "teamProgress": {
        "events": {}
      },
      "isPlaceholder": true
    },
    "287": {
      "displayName": "Dan City",
      "isInactive": false,
      "isHidden": false,
      "members": [
        "Zer0",
        "gophish",
        "immeanttodothat",
        "Vivsakat",
        "firefin",
        "im yeah"
      ],
      "viewTimes": {},
      "hints": {},
      "teamProgress": {
        "events": {}
      },
      "isPlaceholder": true
    },
    "288": {
      "displayName": "α-ratz Astronauts",
      "isInactive": false,
      "isHidden": false,
      "members": [
        "Tiger64",
        "Kneeckoh",
        "yoshikirby26",
        "ThatOneGuy",
        "5ully_",
        "NikoJazz"
      ],
      "viewTimes": {},
      "hints": {},
      "teamProgress": {
        "events": {}
      },
      "isPlaceholder": true
    },
    "291": {
      "displayName": "stɹeɪjə maɪt",
      "isInactive": false,
      "isHidden": false,
      "members": [
        "tl",
        "|octember〉",
        "turt"
      ],
      "viewTimes": {},
      "hints": {},
      "teamProgress": {
        "events": {}
      },
      "isPlaceholder": true
    },
    "294": {
      "displayName": "Beta Pictoris C",
      "isInactive": false,
      "isHidden": false,
      "members": [
        "benpigchu",
        "Nameless",
        "BCMonomial",
        "Nitroro",
        "CPK",
        "Yuzuo"
      ],
      "viewTimes": {},
      "hints": {},
      "teamProgress": {
        "events": {}
      },
      "isPlaceholder": true
    },
    "296": {
      "displayName": "String Cheese Theory",
      "isInactive": false,
      "isHidden": false,
      "members": [
        "djack",
        "spiffycoffee",
        "hedgy",
        "Kopazzynth",
        "Chessterr"
      ],
      "viewTimes": {},
      "hints": {},
      "teamProgress": {
        "events": {}
      },
      "isPlaceholder": true
    },
    "305": {
      "displayName": "Hungergame😋",
      "isInactive": false,
      "isHidden": false,
      "members": [
        "Xiaoji",
        "firegod",
        "Epi",
        "Heartfelt.",
        "Sang",
        "regina"
      ],
      "viewTimes": {},
      "hints": {},
      "teamProgress": {
        "events": {}
      },
      "isPlaceholder": true
    },
    "308": {
      "displayName": "zitmen",
      "isInactive": false,
      "isHidden": false,
      "members": [
        "Euphonium",
        "Daviscartes",
        "Zitman",
        "Selenium",
        "Pinkbat",
        "Infrasonic"
      ],
      "viewTimes": {},
      "hints": {},
      "teamProgress": {
        "events": {}
      },
      "isPlaceholder": true
    },
    "343": {
      "displayName": "The Hunt Slayers",
      "isInactive": false,
      "isHidden": false,
      "members": [
        "Iam_Modern",
        "oledres",
        "raspberry",
        "west",
        "Xtrimi",
        "Eggdog"
      ],
      "viewTimes": {},
      "hints": {},
      "teamProgress": {
        "events": {}
      },
      "isPlaceholder": true
    },
    "354": {
      "displayName": "Isotopes Puzzle United",
      "isInactive": false,
      "isHidden": false,
      "members": [
        "Zeldaxlove64ever",
        "Ryxy",
        "Bingo",
        "zz459557920",
        "LOST_TREE"
      ],
      "viewTimes": {},
      "hints": {},
      "teamProgress": {
        "events": {}
      },
      "isPlaceholder": true
    },
    "357": {
      "displayName": "Literally Chocolate",
      "isInactive": false,
      "isHidden": false,
      "members": [
        "wolf",
        "Trevor Birenbaum",
        "Sniper",
        "TangentOfA",
        "majickace",
        "CoyoteCreed"
      ],
      "viewTimes": {},
      "hints": {},
      "teamProgress": {
        "events": {}
      },
      "isPlaceholder": true
    },
    "359": {
      "displayName": "Literally Graham Crackers",
      "isInactive": false,
      "isHidden": false,
      "members": [
        "Dc",
        "Bollo",
        "ThoseCrazyGuys",
        "Chris Kani",
        "Sean M",
        "Ryker"
      ],
      "viewTimes": {},
      "hints": {},
      "teamProgress": {
        "events": {}
      },
      "isPlaceholder": true
    },
    "361": {
      "displayName": "RSVPuzzle",
      "isInactive": false,
      "isHidden": false,
      "members": [
        "Amanda",
        "Ken",
        "Sigek",
        "Aukal"
      ],
      "viewTimes": {},
      "hints": {},
      "teamProgress": {
        "events": {}
      },
      "isPlaceholder": true
    },
    "362": {
      "displayName": "TheMagpie",
      "isInactive": false,
      "isHidden": false,
      "members": [
        "Simon Anthony",
        "Neil Talbott",
        "Mark Goodliffe",
        "Rachel Munro",
        "Roger Phillips",
        "Lilie Weaver"
      ],
      "viewTimes": {},
      "hints": {},
      "teamProgress": {
        "events": {}
      },
      "isPlaceholder": true
    },
    "367": {
      "displayName": "clobular cluster tran",
      "isInactive": false,
      "isHidden": false,
      "members": [
        "fish",
        "maven",
        "rosie",
        "coby",
        "lucas",
        "claire"
      ],
      "viewTimes": {},
      "hints": {},
      "teamProgress": {
        "events": {}
      },
      "isPlaceholder": true
    },
    "368": {
      "displayName": "Peacefully Observing Nighttime Domains",
      "isInactive": false,
      "isHidden": false,
      "members": [
        "Bazinga",
        "ItzShaun",
        "Sandblast",
        "som1",
        "pmp",
        "Morgan"
      ],
      "viewTimes": {},
      "hints": {},
      "teamProgress": {
        "events": {}
      },
      "isPlaceholder": true
    },
    "370": {
      "displayName": "Yacana Constellation",
      "isInactive": false,
      "isHidden": false,
      "members": [
        "Andrew",
        "Alison",
        "D",
        "Aaron",
        "Matt",
        "MJ"
      ],
      "viewTimes": {},
      "hints": {},
      "teamProgress": {
        "events": {}
      },
      "isPlaceholder": true
    },
    "380": {
      "displayName": "Quarantine Decrypters: Scorpio",
      "isInactive": false,
      "isHidden": false,
      "members": [
        "Edam_Cheese",
        "FlameZ",
        "Rinqed",
        "Uhtoff",
        "Enzoid",
        "Hidden Villager"
      ],
      "viewTimes": {},
      "hints": {},
      "teamProgress": {
        "events": {}
      },
      "isPlaceholder": true
    },
    "394": {
      "displayName": "Shower Pomelo 🍈",
      "isInactive": false,
      "isHidden": false,
      "members": [
        "A Knee",
        "Cyn",
        "Alex",
        "Tian",
        "Evan",
        "Elly"
      ],
      "viewTimes": {},
      "hints": {},
      "teamProgress": {
        "events": {}
      },
      "isPlaceholder": true
    },
    "403": {
      "displayName": "Scenic Travelers",
      "isInactive": false,
      "isHidden": false,
      "members": [
        "Doug Orleans",
        "Sarah Mendelowitz",
        "Jerry Hsu",
        "Dean Sturtevant",
        "Hugh Robinson",
        "Diane Christoforo"
      ],
      "viewTimes": {},
      "hints": {},
      "teamProgress": {
        "events": {}
      },
      "isPlaceholder": true
    },
    "406": {
      "displayName": "huh?",
      "isInactive": false,
      "isHidden": false,
      "members": [
        "onefin ✰",
        "niv 💫",
        "luny 🍮",
        "clarity 🎀"
      ],
      "viewTimes": {},
      "hints": {},
      "teamProgress": {
        "events": {}
      },
      "isPlaceholder": true
    },
    "408": {
      "displayName": "Vehemelgeuse...",
      "isInactive": false,
      "isHidden": false,
      "members": [
        "xxsecretcodexx",
        "BuzzBee",
        "DuxDucks",
        "Scoping Landscape",
        "Vimto",
        "Zomperzon"
      ],
      "viewTimes": {},
      "hints": {},
      "teamProgress": {
        "events": {}
      },
      "isPlaceholder": true
    },
    "409": {
      "displayName": "...Vehemelgeuse...",
      "isInactive": false,
      "isHidden": false,
      "members": [
        "Noah",
        "saltyeyes",
        "Trom",
        "Knifey",
        "AnAverageJoe",
        "Jeff"
      ],
      "viewTimes": {},
      "hints": {},
      "teamProgress": {
        "events": {}
      },
      "isPlaceholder": true
    },
    "410": {
      "displayName": "...Vehemelgeuse",
      "isInactive": false,
      "isHidden": false,
      "members": [
        "awesome_cupcake",
        "robotticelli",
        "exhaustrovert",
        "7max18",
        "PsychOut",
        "LatentMoths"
      ],
      "viewTimes": {},
      "hints": {},
      "teamProgress": {
        "events": {}
      },
      "isPlaceholder": true
    },
    "415": {
      "displayName": "Constellation Prize",
      "isInactive": false,
      "isHidden": false,
      "members": [
        "Zoe",
        "sweeee",
        "Seth",
        "Amber"
      ],
      "viewTimes": {},
      "hints": {},
      "teamProgress": {
        "events": {}
      },
      "isPlaceholder": true
    },
    "420": {
      "displayName": "Yuki",
      "isInactive": false,
      "isHidden": false,
      "members": [
        "thamblurr",
        "Robin",
        "katian",
        "こまどり",
        "LJ",
        "Brian"
      ],
      "viewTimes": {},
      "hints": {},
      "teamProgress": {
        "events": {}
      },
      "isPlaceholder": true
    },
    "423": {
      "displayName": "See the Libra Complexity",
      "isInactive": false,
      "isHidden": false,
      "members": [
        "Alex",
        "Joe",
        "Kris",
        "Logan",
        "Marcy",
        "Thomas"
      ],
      "viewTimes": {},
      "hints": {},
      "teamProgress": {
        "events": {}
      },
      "isPlaceholder": true
    },
    "436": {
      "displayName": "Cosmos Contemplating Campers",
      "isInactive": false,
      "isHidden": false,
      "members": [
        "Jam",
        "Lily",
        "Samon",
        "Jeff"
      ],
      "viewTimes": {},
      "hints": {},
      "teamProgress": {
        "events": {}
      },
      "isPlaceholder": true
    },
    "440": {
      "displayName": "Lustin Djinn",
      "isInactive": false,
      "isHidden": false,
      "members": [
        "Justin",
        "Dalton",
        "Derrick",
        "Adam"
      ],
      "viewTimes": {},
      "hints": {},
      "teamProgress": {
        "events": {}
      },
      "isPlaceholder": true
    },
    "445": {
      "displayName": "PonX",
      "isInactive": false,
      "isHidden": false,
      "members": [
        "Gokigen Naname"
      ],
      "viewTimes": {},
      "hints": {},
      "teamProgress": {
        "events": {}
      },
      "isPlaceholder": true
    },
    "448": {
      "displayName": "Star-Deuce Valley",
      "isInactive": false,
      "isHidden": false,
      "members": [
        "Dee Ruttenberg",
        "Adam Maresca",
        "Caryn Krakauer",
        "Patrick Smadbeck",
        "Mack Fischer",
        "Corey Levinson"
      ],
      "viewTimes": {},
      "hints": {},
      "teamProgress": {
        "events": {}
      },
      "isPlaceholder": true
    },
    "456": {
      "displayName": "Galaxy-Enjoying Mathemagicians Inhabit Nature’s Immenseness",
      "isInactive": false,
      "isHidden": false,
      "members": [
        "JackTheFlop",
        "Kusane",
        "Kfcruan",
        "PlatPangPan",
        "dpad",
        "cjamiejx"
      ],
      "viewTimes": {},
      "hints": {},
      "teamProgress": {
        "events": {}
      },
      "isPlaceholder": true
    },
    "457": {
      "displayName": "come back to us later",
      "isInactive": false,
      "isHidden": false,
      "members": [
        "galarian meowth",
        "galarian ponyta",
        "galarian rapidash",
        "hattrem"
      ],
      "viewTimes": {},
      "hints": {},
      "teamProgress": {
        "events": {}
      },
      "isPlaceholder": true
    },
    "465": {
      "displayName": "Reviver Team",
      "isInactive": false,
      "isHidden": false,
      "members": [
        "Bluebell",
        "Lazy_Labs",
        "SpadeA261",
        "hhoppitree"
      ],
      "viewTimes": {},
      "hints": {},
      "teamProgress": {
        "events": {}
      },
      "isPlaceholder": true
    },
    "470": {
      "displayName": "Eggplant Parms",
      "isInactive": false,
      "isHidden": false,
      "members": [
        "Level \\"Janja Garnbret fanboy\\" 51",
        "lovemathboy",
        "ALT",
        "Mistrals",
        "moo",
        "talkingtree"
      ],
      "viewTimes": {},
      "hints": {},
      "teamProgress": {
        "events": {}
      },
      "isPlaceholder": true
    },
    "477": {
      "displayName": "Line Rider Artists Collective",
      "isInactive": false,
      "isHidden": false,
      "members": [
        "punkband",
        "September",
        "simitone",
        "tilez",
        "Malizma",
        "Jamie"
      ],
      "viewTimes": {},
      "hints": {},
      "teamProgress": {
        "events": {}
      },
      "isPlaceholder": true
    },
    "482": {
      "displayName": "The Inedibles",
      "isInactive": false,
      "isHidden": false,
      "members": [
        "Ingrid",
        "Matthew",
        "Nix",
        "Billy"
      ],
      "viewTimes": {},
      "hints": {},
      "teamProgress": {
        "events": {}
      },
      "isPlaceholder": true
    },
    "487": {
      "displayName": "The Blobs",
      "isInactive": false,
      "isHidden": false,
      "members": [
        "Rusty",
        "Kyra",
        "Usernam3",
        "Roger Wrightshoe",
        "Jay"
      ],
      "viewTimes": {},
      "hints": {},
      "teamProgress": {
        "events": {}
      },
      "isPlaceholder": true
    },
    "489": {
      "displayName": "GameHaus",
      "isInactive": false,
      "isHidden": false,
      "members": [
        "Max",
        "Jeff",
        "Jandro",
        "clobug",
        "wowy"
      ],
      "viewTimes": {},
      "hints": {},
      "teamProgress": {
        "events": {}
      },
      "isPlaceholder": true
    },
    "490": {
      "displayName": "Unexpected Flying Objects in Stargazing Area",
      "isInactive": false,
      "isHidden": false,
      "members": [
        "Raspberry Ale",
        "Fish Gill",
        "Dad",
        "Pope Gadget LXIX"
      ],
      "viewTimes": {},
      "hints": {},
      "teamProgress": {
        "events": {}
      },
      "isPlaceholder": true
    },
    "531": {
      "displayName": "Live Fast Die Young",
      "isInactive": false,
      "isHidden": false,
      "members": [
        "cuteziran",
        "ClashのRPC",
        "42i196",
        "o0OjackyO0o",
        "YuYi_gy",
        "FireWither, wymcaT"
      ],
      "viewTimes": {},
      "hints": {},
      "teamProgress": {
        "events": {}
      },
      "isPlaceholder": true
    },
    "555": {
      "displayName": "RVing to Nine Planets",
      "isInactive": false,
      "isHidden": false,
      "members": [
        "Michelle Storch",
        "AMZB",
        "Kendall",
        "Cameron"
      ],
      "viewTimes": {},
      "hints": {},
      "teamProgress": {
        "events": {}
      },
      "isPlaceholder": true
    },
    "574": {
      "displayName": "Zappy Starrats and the Rodents From Mars",
      "isInactive": false,
      "isHidden": false,
      "members": [
        "Tracy Cobbs",
        "nilradical"
      ],
      "viewTimes": {},
      "hints": {},
      "teamProgress": {
        "events": {}
      },
      "isPlaceholder": true
    },
    "576": {
      "displayName": "quack",
      "isInactive": false,
      "isHidden": false,
      "members": [
        "tckmn",
        "redstonerodent"
      ],
      "viewTimes": {},
      "hints": {},
      "teamProgress": {
        "events": {}
      },
      "isPlaceholder": true
    },
    "595": {
      "displayName": "No Enigmas Skyward",
      "isInactive": false,
      "isHidden": false,
      "members": [
        "Michael",
        "Mihir",
        "Jason",
        "Tony",
        "Kathy"
      ],
      "viewTimes": {},
      "hints": {},
      "teamProgress": {
        "events": {}
      },
      "isPlaceholder": true
    },
    "598": {
      "displayName": "interstellarnality",
      "isInactive": false,
      "isHidden": false,
      "members": [
        "akira, ali",
        "ben",
        "kevin",
        "linda",
        "peter",
        "yujie"
      ],
      "viewTimes": {},
      "hints": {},
      "teamProgress": {
        "events": {}
      },
      "isPlaceholder": true
    },
    "599": {
      "displayName": "Vlaamse Sterren",
      "isInactive": false,
      "isHidden": false,
      "members": [
        "Jim",
        "Dan",
        "Bradley"
      ],
      "viewTimes": {},
      "hints": {},
      "teamProgress": {
        "events": {}
      },
      "isPlaceholder": true
    },
    "610": {
      "displayName": "astronomers = moon haters",
      "isInactive": false,
      "isHidden": false,
      "members": [
        "Seamus",
        "Jonathan",
        "Robin",
        "Abby",
        "Simon"
      ],
      "viewTimes": {},
      "hints": {},
      "teamProgress": {
        "events": {}
      },
      "isPlaceholder": true
    },
    "615": {
      "displayName": "天南地北",
      "isInactive": false,
      "isHidden": false,
      "members": [
        "北地南天"
      ],
      "viewTimes": {},
      "hints": {},
      "teamProgress": {
        "events": {}
      },
      "isPlaceholder": true
    },
    "617": {
      "displayName": "Aquila",
      "isInactive": false,
      "isHidden": false,
      "members": [
        "Aquila"
      ],
      "viewTimes": {},
      "hints": {},
      "teamProgress": {
        "events": {}
      },
      "isPlaceholder": true
    },
    "621": {
      "displayName": "Unplughed",
      "isInactive": false,
      "isHidden": false,
      "members": [
        "Andrey",
        "Sophia \\"Rubix\\" Caspe",
        "NYWanderer",
        "Fuzzy",
        "Cenarius",
        "JJ"
      ],
      "viewTimes": {},
      "hints": {},
      "teamProgress": {
        "events": {}
      },
      "isPlaceholder": true
    },
    "630": {
      "displayName": "Greedy Entrepeneuring Mathemagicians Imitate Nemeses' Inventions",
      "isInactive": false,
      "isHidden": false,
      "members": [
        "Tim",
        "Jimne",
        "Nathan",
        "Skynet",
        "Unnamed teammate 5",
        "Unnamed teammate 6"
      ],
      "viewTimes": {},
      "hints": {},
      "teamProgress": {
        "events": {}
      },
      "isPlaceholder": true
    },
    "631": {
      "displayName": "idk either",
      "isInactive": false,
      "isHidden": false,
      "members": [
        "cl",
        "Grape",
        "hyakinthos",
        "crispydab"
      ],
      "viewTimes": {},
      "hints": {},
      "teamProgress": {
        "events": {}
      },
      "isPlaceholder": true
    },
    "633": {
      "displayName": "hamm sandwich but it's stargazing themed",
      "isInactive": false,
      "isHidden": false,
      "members": [
        "awepi",
        "hanss314",
        "Ath",
        "Meowy",
        "Koopa",
        "nuthatch"
      ],
      "viewTimes": {},
      "hints": {},
      "teamProgress": {
        "events": {}
      },
      "isPlaceholder": true
    },
    "637": {
      "displayName": "Needlessly Eating Supernovae",
      "isInactive": false,
      "isHidden": false,
      "members": [
        "Zach",
        "James",
        "Myelin",
        "Will",
        "Katie",
        "Keaton"
      ],
      "viewTimes": {},
      "hints": {},
      "teamProgress": {
        "events": {}
      },
      "isPlaceholder": true
    },
    "639": {
      "displayName": "Emerging Celestials of r/PictureGame",
      "isInactive": false,
      "isHidden": false,
      "members": [
        "Evening Calm",
        "Everlasting Candescence",
        "Espying Comets",
        "Eponymous Crimson",
        "Eternal Cosmos"
      ],
      "viewTimes": {},
      "hints": {},
      "teamProgress": {
        "events": {}
      },
      "isPlaceholder": true
    },
    "642": {
      "displayName": "Give me my Romeo; and, when he shall die, Take him and cut him out in little puzzle pieces, And he will make the face of heaven so fine That all the world will be in love with jigsaws And pay no worsh",
      "isInactive": false,
      "isHidden": false,
      "members": [
        "Yorick 💀",
        "Brutus 🗡",
        "Hamlet 🐖",
        "Titanya 😼",
        "Dromio🤡",
        "Minor Character 3 🎹"
      ],
      "viewTimes": {},
      "hints": {},
      "teamProgress": {
        "events": {}
      },
      "isPlaceholder": true
    },
    "643": {
      "displayName": "SeptaCube",
      "isInactive": false,
      "isHidden": false,
      "members": [
        "SeptaCube"
      ],
      "viewTimes": {},
      "hints": {},
      "teamProgress": {
        "events": {}
      },
      "isPlaceholder": true
    },
    "646": {
      "displayName": "androMETA galaxy",
      "isInactive": false,
      "isHidden": false,
      "members": [
        "🌌🌌🌌Andrometan Trendsetters🌌🌌🌌",
        "Nishant",
        "Alex Gotsis",
        "Connor Tilley",
        "Jacqui Fashimpaur",
        "Ariel Uy"
      ],
      "viewTimes": {},
      "hints": {},
      "teamProgress": {
        "events": {}
      },
      "isPlaceholder": true
    },
    "647": {
      "displayName": "White Maria",
      "isInactive": false,
      "isHidden": false,
      "members": [
        "Syx",
        "maria12",
        "Jaren",
        "William"
      ],
      "viewTimes": {},
      "hints": {},
      "teamProgress": {
        "events": {}
      },
      "isPlaceholder": true
    },
    "654": {
      "displayName": "🚀 Providence Land Observations 🚀",
      "isInactive": false,
      "isHidden": false,
      "members": [
        "Ricky Cruz",
        "paolo p",
        "Jane",
        "Chewy",
        "david g",
        "Meta \\"Thomas\\" Terminal"
      ],
      "viewTimes": {},
      "hints": {},
      "teamProgress": {
        "events": {}
      },
      "isPlaceholder": true
    },
    "657": {
      "displayName": "Unencrypted",
      "isInactive": false,
      "isHidden": false,
      "members": [
        "Matt K"
      ],
      "viewTimes": {},
      "hints": {},
      "teamProgress": {
        "events": {}
      },
      "isPlaceholder": true
    },
    "663": {
      "displayName": "Embedded Cluster of /r/PictureGame",
      "isInactive": false,
      "isHidden": false,
      "members": [
        "Earth-centric Copernicism",
        "Eddie Curphy",
        "Exatellarknight Constellar"
      ],
      "viewTimes": {},
      "hints": {},
      "teamProgress": {
        "events": {}
      },
      "isPlaceholder": true
    },
    "681": {
      "displayName": "Neptune Eclipsing Sirius",
      "isInactive": false,
      "isHidden": false,
      "members": [
        "Mindren",
        "Andrew",
        "Joey",
        "Richard",
        "Paolo",
        "Matt"
      ],
      "viewTimes": {},
      "hints": {},
      "teamProgress": {
        "events": {}
      },
      "isPlaceholder": true
    },
    "706": {
      "displayName": "Nebulardinality",
      "isInactive": false,
      "isHidden": false,
      "members": [
        "Dan",
        "InvalidD",
        "Ellibereth",
        "Buck",
        "GT"
      ],
      "viewTimes": {},
      "hints": {},
      "teamProgress": {
        "events": {}
      },
      "isPlaceholder": true
    },
    "712": {
      "displayName": "1cool3me",
      "isInactive": false,
      "isHidden": false,
      "members": [
        "M"
      ],
      "viewTimes": {},
      "hints": {},
      "teamProgress": {
        "events": {}
      },
      "isPlaceholder": true
    },
    "713": {
      "displayName": "Purple Clouds",
      "isInactive": false,
      "isHidden": false,
      "members": [
        "Darius Bopp",
        "Joeri",
        "Colin",
        "Christina",
        "Cute Mage"
      ],
      "viewTimes": {},
      "hints": {},
      "teamProgress": {
        "events": {}
      },
      "isPlaceholder": true
    },
    "714": {
      "displayName": ":ConstellationMorning: Universe",
      "isInactive": false,
      "isHidden": false,
      "members": [
        "kaz",
        "kiera",
        "nellie",
        "sam",
        "russell",
        "jace"
      ],
      "viewTimes": {},
      "hints": {},
      "teamProgress": {
        "events": {}
      },
      "isPlaceholder": true
    },
    "715": {
      "displayName": "Shooting Star Inspires Wonder",
      "isInactive": false,
      "isHidden": false,
      "members": [
        "bags",
        "mbingo",
        "noneuclidean",
        "sarathegood",
        "Skaldskaparmal",
        "West"
      ],
      "viewTimes": {},
      "hints": {},
      "teamProgress": {
        "events": {}
      },
      "isPlaceholder": true
    },
    "719": {
      "displayName": "Team CTC",
      "isInactive": false,
      "isHidden": false,
      "members": [
        "Alon",
        "Can",
        "quinn",
        "Eke",
        "Alia",
        "Altafen"
      ],
      "viewTimes": {},
      "hints": {},
      "teamProgress": {
        "events": {}
      },
      "isPlaceholder": true
    },
    "735": {
      "displayName": "bmtreammate",
      "isInactive": false,
      "isHidden": false,
      "members": [
        "Austin",
        "Justin",
        "Kaity",
        "Sebastian",
        "Rohit",
        "Eugene"
      ],
      "viewTimes": {},
      "hints": {},
      "teamProgress": {
        "events": {}
      },
      "isPlaceholder": true
    },
    "737": {
      "displayName": "initially mathemagicians grieve undisplayed, restricted [.] characters over maximum [/zSswjUk]",
      "isInactive": false,
      "isHidden": false,
      "members": [
        "Zimodo",
        "Creative Name",
        "riley",
        "Shadow of Apollo",
        "jatloe12345",
        "CosineLong"
      ],
      "viewTimes": {},
      "hints": {},
      "teamProgress": {
        "events": {}
      },
      "isPlaceholder": true
    },
    "748": {
      "displayName": "The Puzzledome",
      "isInactive": false,
      "isHidden": false,
      "members": [
        "Conqueror",
        "BT",
        "Gamina"
      ],
      "viewTimes": {},
      "hints": {},
      "teamProgress": {
        "events": {}
      },
      "isPlaceholder": true
    },
    "749": {
      "displayName": "⋯ MATHEMATICAL OPERATORS ORION'S BELT",
      "isInactive": false,
      "isHidden": false,
      "members": [
        "且 ManyPinkHats",
        "ᐇ duckmedic",
        "ꗃ TheGreatEscaper",
        "⪥ Deusovi",
        "೧ SoftFro",
        "끼 Sp3000"
      ],
      "viewTimes": {},
      "hints": {},
      "teamProgress": {
        "events": {}
      },
      "isPlaceholder": true
    },
    "755": {
      "displayName": "Team Constructed Adventures",
      "isInactive": false,
      "isHidden": false,
      "members": [
        "ChrispyK",
        "BlizzardMist",
        "AsciiT",
        "galofuf",
        "holden",
        "cyhg"
      ],
      "viewTimes": {},
      "hints": {},
      "teamProgress": {
        "events": {}
      },
      "isPlaceholder": true
    },
    "771": {
      "displayName": "By occupying the leaderboard spot above or below this team, your team hereby agrees to enter trial by combat with the other team adjacent to this one. If we are in first place please disregard",
      "isInactive": false,
      "isHidden": false,
      "members": [
        "bryan",
        "alex",
        "navi",
        "cameron",
        "sir egmund"
      ],
      "viewTimes": {},
      "hints": {},
      "teamProgress": {
        "events": {}
      },
      "isPlaceholder": true
    },
    "777": {
      "displayName": "ꙮ CYRILLIC LETTER MULTIOCULAR JAMES WEBB SPACE TELESCOPE",
      "isInactive": false,
      "isHidden": false,
      "members": [
        "Projectyl",
        "Justin",
        "Scott",
        "Ricky"
      ],
      "viewTimes": {},
      "hints": {},
      "teamProgress": {
        "events": {}
      },
      "isPlaceholder": true
    },
    "782": {
      "displayName": "puzzles too hard :c",
      "isInactive": false,
      "isHidden": false,
      "members": [
        "elara",
        "e"
      ],
      "viewTimes": {},
      "hints": {},
      "teamProgress": {
        "events": {}
      },
      "isPlaceholder": true
    },
    "791": {
      "displayName": "stargazing_under_the_stars",
      "isInactive": false,
      "isHidden": false,
      "members": [
        "Dashy"
      ],
      "viewTimes": {},
      "hints": {},
      "teamProgress": {
        "events": {}
      },
      "isPlaceholder": true
    },
    "792": {
      "displayName": "Callsign: 17th Shard",
      "isInactive": false,
      "isHidden": false,
      "members": [
        "chocoMint",
        "Sart",
        "Alex"
      ],
      "viewTimes": {},
      "hints": {},
      "teamProgress": {
        "events": {}
      },
      "isPlaceholder": true
    },
    "794": {
      "displayName": "DragonEngineer",
      "isInactive": false,
      "isHidden": false,
      "members": [
        "Eann Lawing"
      ],
      "viewTimes": {},
      "hints": {},
      "teamProgress": {
        "events": {}
      },
      "isPlaceholder": true
    },
    "869": {
      "displayName": "Hummus Appreciation Society",
      "isInactive": false,
      "isHidden": false,
      "members": [
        "Moor Xu",
        "Nathan Wong",
        "Andrew Liu"
      ],
      "viewTimes": {},
      "hints": {},
      "teamProgress": {
        "events": {}
      },
      "isPlaceholder": true
    },
    "894": {
      "displayName": "tsunami flowerpot",
      "isInactive": false,
      "isHidden": false,
      "members": [
        "alex"
      ],
      "viewTimes": {},
      "hints": {},
      "teamProgress": {
        "events": {}
      },
      "isPlaceholder": true
    },
    "954": {
      "displayName": "Shalev",
      "isInactive": false,
      "isHidden": false,
      "members": [
        "Shalev",
        "Milanvis",
        "Brandon"
      ],
      "viewTimes": {},
      "hints": {},
      "teamProgress": {
        "events": {}
      },
      "isPlaceholder": true
    },
    "976": {
      "displayName": "Wyrm and Friends",
      "isInactive": false,
      "isHidden": false,
      "members": [
        "Max",
        "Tracey and Wyrm",
        "Linda",
        "Andrew",
        "Cat",
        "Kevin"
      ],
      "viewTimes": {},
      "hints": {},
      "teamProgress": {
        "events": {}
      },
      "isPlaceholder": true
    },
    "1054": {
      "displayName": "mí Hoegaı",
      "isInactive": false,
      "isHidden": false,
      "members": [
        "Laqme",
        "Emma",
        "Kıa",
        "Luna(?)",
        "Evie"
      ],
      "viewTimes": {},
      "hints": {},
      "teamProgress": {
        "events": {}
      },
      "isPlaceholder": true
    },
    "1128": {
      "displayName": "All About the Meta",
      "isInactive": false,
      "isHidden": false,
      "members": [
        "Alice",
        "Ken",
        "Geoff",
        "Jack",
        "Belle",
        "Oli"
      ],
      "viewTimes": {},
      "hints": {},
      "teamProgress": {
        "events": {}
      },
      "isPlaceholder": true
    }
  },
  "scopeState": {
    "team_puzzle_105__715": {
      "scope": {
        "type": "team_puzzle_105",
        "teamId": "715",
        "puzzle": null
      },
      "state": {
        "confirmedTitles": {},
        "order": [
          "puz19",
          "puz104",
          "puz22",
          "puz69",
          "puz96",
          "puz114",
          "puz94",
          "puz93",
          "puz91",
          "puz103"
        ],
        "enums": {},
        "formFields": {
          "title": "",
          "answer": "DEEP",
          "hexColor": "000000",
          "difficulty": 0,
          "flavortext": "",
          "solution": "",
          "instructions": "",
          "notes": "",
          "sharePermission": "full"
        },
        "status": {
          "type": "accepted",
          "moonickDialogue": "",
          "isAvailableInGacha": true,
          "submitTime": 1726985603071,
          "rarity": "common",
          "cannedHint": "Combine pairs of symbols from a common cipher to form four letters.",
          "reviewTime": 1727121046742
        }
      }
    },
    "team_puzzle_105__654": {
      "scope": {
        "type": "team_puzzle_105",
        "teamId": "654",
        "puzzle": null
      },
      "state": {
        "confirmedTitles": {},
        "order": [
          "puz19",
          "puz104",
          "puz22",
          "puz69",
          "puz96",
          "puz114",
          "puz94",
          "puz93",
          "puz91",
          "puz103"
        ],
        "enums": {},
        "formFields": {
          "title": "",
          "answer": "AREA",
          "hexColor": "8ACE00",
          "difficulty": 0,
          "flavortext": "",
          "solution": "",
          "instructions": "",
          "notes": "",
          "sharePermission": "full"
        },
        "status": {
          "type": "accepted",
          "moonickDialogue": "",
          "isAvailableInGacha": true,
          "submitTime": 1726939465601,
          "rarity": "common",
          "cannedHint": "Once you've found the four-letter word, the music reference is no longer relevant. Look for a diet instead.",
          "reviewTime": 1727120894846
        }
      }
    },
    "team_puzzle_105__749": {
      "scope": {
        "type": "team_puzzle_105",
        "teamId": "749",
        "puzzle": null
      },
      "state": {
        "confirmedTitles": {},
        "order": [
          "puz19",
          "puz104",
          "puz22",
          "puz69",
          "puz96",
          "puz114",
          "puz94",
          "puz93",
          "puz91",
          "puz103"
        ],
        "enums": {},
        "formFields": {
          "title": "50|50",
          "answer": "BLOOMS",
          "hexColor": "EB9834",
          "difficulty": 0,
          "flavortext": "",
          "solution": "",
          "instructions": "",
          "notes": "",
          "sharePermission": "full"
        },
        "status": {
          "type": "accepted",
          "moonickDialogue": "",
          "isAvailableInGacha": true,
          "submitTime": 1726931849076,
          "rarity": "common",
          "cannedHint": "Make up each word by putting one word on the left and one word on the right!",
          "unlockInEdges": [
            {
              "unlockGroupId": "fifty",
              "val": 1
            }
          ],
          "reviewTime": 1727120875654
        }
      }
    },
    "team_puzzle_105__771": {
      "scope": {
        "type": "team_puzzle_105",
        "teamId": "771",
        "puzzle": null
      },
      "state": {
        "confirmedTitles": {},
        "order": [
          "puz19",
          "puz104",
          "puz22",
          "puz69",
          "puz96",
          "puz114",
          "puz94",
          "puz93",
          "puz91",
          "puz103"
        ],
        "enums": {},
        "formFields": {
          "title": "Waiver and Release of Liability for Trial by Combat",
          "answer": "DISARMAMENTTREATY",
          "hexColor": "840029",
          "difficulty": 0,
          "flavortext": "",
          "solution": "",
          "instructions": "",
          "notes": "",
          "sharePermission": "full"
        },
        "status": {
          "type": "accepted",
          "moonickDialogue": "",
          "isAvailableInGacha": true,
          "submitTime": 1726948549368,
          "rarity": "common",
          "cannedHint": "You'll need to use the team names of two of this hunt's finishing teams.",
          "reviewTime": 1727120913911
        }
      }
    },
    "team_puzzle_105__642": {
      "scope": {
        "type": "team_puzzle_105",
        "teamId": "642",
        "puzzle": null
      },
      "state": {
        "confirmedTitles": {},
        "order": [
          "puz19",
          "puz104",
          "puz22",
          "puz69",
          "puz96",
          "puz114",
          "puz94",
          "puz93",
          "puz91",
          "puz103"
        ],
        "enums": {},
        "formFields": {
          "title": "Party Games",
          "answer": "SUPERSTAR",
          "hexColor": "FF0000",
          "difficulty": 0,
          "flavortext": "",
          "solution": "",
          "instructions": "",
          "notes": "",
          "sharePermission": "full"
        },
        "status": {
          "type": "accepted",
          "moonickDialogue": "",
          "isAvailableInGacha": true,
          "submitTime": 1726916785490,
          "rarity": "uncommon",
          "cannedHint": "This puzzle is about minigames in a series of games from the Mario franchise.",
          "reviewTime": 1727121085355
        }
      }
    },
    "team_puzzle_105__203": {
      "scope": {
        "type": "team_puzzle_105",
        "teamId": "203",
        "puzzle": null
      },
      "state": {
        "confirmedTitles": {},
        "order": [
          "puz19",
          "puz104",
          "puz22",
          "puz69",
          "puz96",
          "puz114",
          "puz94",
          "puz93",
          "puz91",
          "puz103"
        ],
        "enums": {},
        "formFields": {
          "title": "Undespaired",
          "answer": "UNDESIRED",
          "hexColor": "0AF3D1",
          "difficulty": 0,
          "flavortext": "",
          "solution": "",
          "instructions": "",
          "notes": "",
          "sharePermission": "full"
        },
        "status": {
          "type": "accepted",
          "moonickDialogue": "",
          "isAvailableInGacha": true,
          "submitTime": 1726953969491,
          "rarity": "common",
          "cannedHint": "This puzzle also involves silly wordplay. Remove a two-letter substring from the title to get your final answer.",
          "unlockInEdges": [
            {
              "unlockGroupId": "despair",
              "val": 1
            }
          ],
          "reviewTime": 1727120925349
        }
      }
    },
    "team_puzzle_105__4": {
      "scope": {
        "type": "team_puzzle_105",
        "teamId": "4",
        "puzzle": null
      },
      "state": {
        "confirmedTitles": {},
        "order": [
          "puz19",
          "puz104",
          "puz22",
          "puz69",
          "puz96",
          "puz114",
          "puz94",
          "puz93",
          "puz91",
          "puz103"
        ],
        "enums": {},
        "formFields": {
          "title": "Map of Mountain Domain",
          "answer": "CHICKEN",
          "hexColor": "CCBC16",
          "difficulty": 0,
          "flavortext": "",
          "solution": "",
          "instructions": "",
          "notes": "",
          "sharePermission": "full"
        },
        "status": {
          "type": "accepted",
          "moonickDialogue": "",
          "isAvailableInGacha": true,
          "submitTime": 1726980869097,
          "rarity": "uncommon",
          "cannedHint": "Each of the answers to the clues belong to a certain set; the enumerations below are for the names of the sets. The question in the flavortext lets you derive an index into the names of the sets to extract the final answer.",
          "reviewTime": 1727660172924
        }
      }
    },
    "team_puzzle_105__470": {
      "scope": {
        "type": "team_puzzle_105",
        "teamId": "470",
        "puzzle": null
      },
      "state": {
        "confirmedTitles": {},
        "order": [
          "puz19",
          "puz104",
          "puz22",
          "puz69",
          "puz96",
          "puz114",
          "puz94",
          "puz93",
          "puz91",
          "puz103"
        ],
        "enums": {},
        "formFields": {
          "title": "1025|1025",
          "answer": "LATIAS / AIPOM",
          "hexColor": "614051",
          "difficulty": 0,
          "flavortext": "",
          "solution": "",
          "instructions": "",
          "notes": "",
          "sharePermission": "full"
        },
        "status": {
          "type": "accepted",
          "moonickDialogue": "",
          "isAvailableInGacha": true,
          "submitTime": 1727211839954,
          "rarity": "common",
          "cannedHint": "Find a list of all Pokemon and search for substrings there. You may need to reuse Pokemon to complete the grid.",
          "unlockInEdges": [
            {
              "unlockGroupId": "unlock__puz105_custom_749",
              "val": 1,
              "isUnlockOnly": true
            }
          ],
          "reviewTime": 1727286352502
        }
      }
    },
    "team_puzzle_105__714": {
      "scope": {
        "type": "team_puzzle_105",
        "teamId": "714",
        "puzzle": null
      },
      "state": {
        "confirmedTitles": {},
        "order": [
          "puz19",
          "puz104",
          "puz22",
          "puz69",
          "puz96",
          "puz114",
          "puz94",
          "puz93",
          "puz91",
          "puz103"
        ],
        "enums": {},
        "formFields": {
          "title": "Speedrunning a trip to IKEA",
          "answer": "NIGHTTIME",
          "hexColor": "B9EEFA",
          "difficulty": 0,
          "flavortext": "",
          "solution": "",
          "instructions": "",
          "notes": "",
          "sharePermission": "full"
        },
        "status": {
          "type": "accepted",
          "moonickDialogue": "",
          "isAvailableInGacha": true,
          "submitTime": 1726965796164,
          "rarity": "uncommon",
          "cannedHint": "Searching some of the text in the image should lead you to a different hunt that ran earlier this year. In fact, all of the images are from that particular hunt.",
          "reviewTime": 1727120951500
        }
      }
    },
    "team_puzzle_105__706": {
      "scope": {
        "type": "team_puzzle_105",
        "teamId": "706",
        "puzzle": null
      },
      "state": {
        "confirmedTitles": {},
        "order": [
          "puz19",
          "puz104",
          "puz22",
          "puz69",
          "puz96",
          "puz114",
          "puz94",
          "puz93",
          "puz91",
          "puz103"
        ],
        "enums": {},
        "formFields": {
          "title": "FI VE BI TS",
          "answer": "KIND",
          "hexColor": "0366FC",
          "difficulty": 0,
          "flavortext": "",
          "solution": "",
          "instructions": "",
          "notes": "",
          "sharePermission": "full"
        },
        "status": {
          "type": "accepted",
          "moonickDialogue": "",
          "isAvailableInGacha": true,
          "submitTime": 1727032488880,
          "rarity": "common",
          "cannedHint": "Each bigram should give you five bits, one for each image, that you can use to extract a letter in 5-bit binary.",
          "reviewTime": 1727121289474
        }
      }
    },
    "team_puzzle_105__737": {
      "scope": {
        "type": "team_puzzle_105",
        "teamId": "737",
        "puzzle": null
      },
      "state": {
        "confirmedTitles": {},
        "order": [
          "puz19",
          "puz104",
          "puz22",
          "puz69",
          "puz96",
          "puz114",
          "puz94",
          "puz93",
          "puz91",
          "puz103"
        ],
        "enums": {},
        "formFields": {
          "title": "In the Name of the Law",
          "answer": "REGULATORY",
          "hexColor": "21F0D0",
          "difficulty": 0,
          "flavortext": "",
          "solution": "",
          "instructions": "",
          "notes": "",
          "sharePermission": "full"
        },
        "status": {
          "type": "accepted",
          "moonickDialogue": "",
          "isAvailableInGacha": true,
          "submitTime": 1727253033720,
          "rarity": "common",
          "cannedHint": "Some bills in the U.S. Congress have interesting names.",
          "reviewTime": 1727257637595
        }
      }
    },
    "team_puzzle_105__12": {
      "scope": {
        "type": "team_puzzle_105",
        "teamId": "12",
        "puzzle": null
      },
      "state": {
        "confirmedTitles": {},
        "order": [
          "puz19",
          "puz104",
          "puz22",
          "puz69",
          "puz96",
          "puz114",
          "puz94",
          "puz93",
          "puz91",
          "puz103"
        ],
        "enums": {},
        "formFields": {
          "title": "Extremely Elementary Puzzle",
          "answer": "BUTTERY",
          "hexColor": "00FFCD",
          "difficulty": 0,
          "flavortext": "",
          "solution": "",
          "instructions": "",
          "notes": "",
          "sharePermission": "full"
        },
        "status": {
          "type": "accepted",
          "moonickDialogue": "",
          "isAvailableInGacha": true,
          "submitTime": 1727028018007,
          "rarity": "common",
          "cannedHint": "These are all elements of the periodic table. The elements share a commonality, clued by the flavortext.",
          "reviewTime": 1727121238125
        }
      }
    },
    "team_puzzle_105__82": {
      "scope": {
        "type": "team_puzzle_105",
        "teamId": "82",
        "puzzle": null
      },
      "state": {
        "confirmedTitles": {},
        "order": [
          "puz19",
          "puz104",
          "puz22",
          "puz69",
          "puz96",
          "puz114",
          "puz94",
          "puz93",
          "puz91",
          "puz103"
        ],
        "enums": {},
        "formFields": {
          "title": "Hexadactyly",
          "answer": "PERMIT",
          "hexColor": "666666",
          "difficulty": 0,
          "flavortext": "",
          "solution": "",
          "instructions": "",
          "notes": "",
          "sharePermission": "full"
        },
        "status": {
          "type": "accepted",
          "moonickDialogue": "",
          "isAvailableInGacha": true,
          "submitTime": 1727012357105,
          "rarity": "common",
          "cannedHint": "Take the first letters. As for what to use for the unmarked finger, remember that one is Extra.",
          "reviewTime": 1727122575245
        }
      }
    },
    "team_puzzle_105__257": {
      "scope": {
        "type": "team_puzzle_105",
        "teamId": "257",
        "puzzle": null
      },
      "state": {
        "confirmedTitles": {},
        "order": [
          "puz19",
          "puz104",
          "puz22",
          "puz69",
          "puz96",
          "puz114",
          "puz94",
          "puz93",
          "puz91",
          "puz103"
        ],
        "enums": {},
        "formFields": {
          "title": "The Creed",
          "answer": "TOWER",
          "hexColor": "FF0000",
          "difficulty": 0,
          "flavortext": "",
          "solution": "",
          "instructions": "",
          "notes": "",
          "sharePermission": "full"
        },
        "status": {
          "type": "accepted",
          "moonickDialogue": "",
          "isAvailableInGacha": true,
          "submitTime": 1726965210311,
          "rarity": "common",
          "cannedHint": "The protagonists of a popular game series, clued by the title, is relevant here.",
          "reviewTime": 1727120937651
        }
      }
    },
    "team_puzzle_105__637": {
      "scope": {
        "type": "team_puzzle_105",
        "teamId": "637",
        "puzzle": null
      },
      "state": {
        "confirmedTitles": {},
        "order": [
          "puz19",
          "puz104",
          "puz22",
          "puz69",
          "puz96",
          "puz114",
          "puz94",
          "puz93",
          "puz91",
          "puz103"
        ],
        "enums": {},
        "formFields": {
          "title": "Cooling Down",
          "answer": "ALMANAC",
          "hexColor": "420F69",
          "difficulty": 0,
          "flavortext": "",
          "solution": "",
          "instructions": "",
          "notes": "",
          "sharePermission": "full"
        },
        "status": {
          "type": "accepted",
          "moonickDialogue": "",
          "isAvailableInGacha": true,
          "submitTime": 1726988671346,
          "rarity": "uncommon",
          "cannedHint": "You'll want to append two thematic letters to the end of every clue on the left to match the clues on the right.",
          "reviewTime": 1727388840723
        }
      }
    },
    "team_puzzle_105__160": {
      "scope": {
        "type": "team_puzzle_105",
        "teamId": "160",
        "puzzle": null
      },
      "state": {
        "confirmedTitles": {},
        "order": [
          "puz19",
          "puz104",
          "puz22",
          "puz69",
          "puz96",
          "puz114",
          "puz94",
          "puz93",
          "puz91",
          "puz103"
        ],
        "enums": {},
        "formFields": {
          "title": "50-50",
          "answer": "SHOHEIOHTANI",
          "hexColor": "005A9C",
          "difficulty": 0,
          "flavortext": "",
          "solution": "",
          "instructions": "",
          "notes": "",
          "sharePermission": "full"
        },
        "status": {
          "type": "accepted",
          "moonickDialogue": "",
          "isAvailableInGacha": true,
          "submitTime": 1727008548405,
          "rarity": "common",
          "cannedHint": "The clue is for the \\"50-50 club\\".",
          "unlockInEdges": [
            {
              "unlockGroupId": "fifty",
              "val": 1
            }
          ],
          "reviewTime": 1727121096266
        }
      }
    },
    "team_puzzle_105__630": {
      "scope": {
        "type": "team_puzzle_105",
        "teamId": "630",
        "puzzle": null
      },
      "state": {
        "confirmedTitles": {},
        "order": [
          "puz19",
          "puz104",
          "puz22",
          "puz69",
          "puz96",
          "puz114",
          "puz94",
          "puz93",
          "puz91",
          "puz103"
        ],
        "enums": {},
        "formFields": {
          "title": "Are you having fun?",
          "answer": "YES | NO",
          "hexColor": "314159",
          "difficulty": 0,
          "flavortext": "",
          "solution": "",
          "instructions": "",
          "notes": "",
          "sharePermission": "full"
        },
        "status": {
          "type": "accepted",
          "moonickDialogue": "",
          "isAvailableInGacha": true,
          "submitTime": 1727577389677,
          "rarity": "common",
          "cannedHint": "Answer the question in the title. The image provides the list of accepted responses.",
          "reviewTime": 1727583000453
        }
      }
    },
    "team_puzzle_105__681": {
      "scope": {
        "type": "team_puzzle_105",
        "teamId": "681",
        "puzzle": null
      },
      "state": {
        "confirmedTitles": {},
        "order": [
          "puz19",
          "puz104",
          "puz22",
          "puz69",
          "puz96",
          "puz114",
          "puz94",
          "puz93",
          "puz91",
          "puz103"
        ],
        "enums": {},
        "formFields": {
          "title": "Haptic Star Battle",
          "answer": "HOE",
          "hexColor": "000000",
          "difficulty": 0,
          "flavortext": "",
          "solution": "",
          "instructions": "",
          "notes": "",
          "sharePermission": "full"
        },
        "status": {
          "type": "accepted",
          "moonickDialogue": "",
          "isAvailableInGacha": true,
          "submitTime": 1726977749875,
          "rarity": "uncommon",
          "cannedHint": "First, solve a Star Battle with 1 star per region. Then, you should be able to feel the answer.",
          "reviewTime": 1727120991741
        }
      }
    },
    "team_puzzle_105__357": {
      "scope": {
        "type": "team_puzzle_105",
        "teamId": "357",
        "puzzle": null
      },
      "state": {
        "confirmedTitles": {},
        "order": [
          "puz19",
          "puz104",
          "puz22",
          "puz69",
          "puz96",
          "puz114",
          "puz94",
          "puz93",
          "puz91",
          "puz103"
        ],
        "enums": {},
        "formFields": {
          "title": "Not Without Precedent",
          "answer": "PEARLS",
          "hexColor": "800000",
          "difficulty": 0,
          "flavortext": "",
          "solution": "",
          "instructions": "",
          "notes": "",
          "sharePermission": "full"
        },
        "status": {
          "type": "accepted",
          "moonickDialogue": "",
          "isAvailableInGacha": true,
          "submitTime": 1726972139473,
          "rarity": "common",
          "cannedHint": "The word BEFORE is central to the puzzle. To extract, think about what might be thematic for a puzzle about BEFORE.",
          "reviewTime": 1727120978648
        }
      }
    },
    "team_puzzle_105__45": {
      "scope": {
        "type": "team_puzzle_105",
        "teamId": "45",
        "puzzle": null
      },
      "state": {
        "confirmedTitles": {},
        "order": [
          "puz19",
          "puz104",
          "puz22",
          "puz69",
          "puz96",
          "puz114",
          "puz94",
          "puz93",
          "puz91",
          "puz103"
        ],
        "enums": {},
        "formFields": {
          "title": "Leading Re-bus",
          "answer": "WIBBLEWOBBLE",
          "hexColor": "000000",
          "difficulty": 0,
          "flavortext": "",
          "solution": "",
          "instructions": "",
          "notes": "",
          "sharePermission": "full"
        },
        "status": {
          "type": "accepted",
          "moonickDialogue": "",
          "isAvailableInGacha": true,
          "submitTime": 1727076866321,
          "rarity": "common",
          "cannedHint": "You'll need to re-peat the bus before taking leading letters.",
          "reviewTime": 1727122505844
        }
      }
    },
    "team_puzzle_105__448": {
      "scope": {
        "type": "team_puzzle_105",
        "teamId": "448",
        "puzzle": null
      },
      "state": {
        "confirmedTitles": {},
        "order": [
          "puz19",
          "puz104",
          "puz22",
          "puz69",
          "puz96",
          "puz114",
          "puz94",
          "puz93",
          "puz91",
          "puz103"
        ],
        "enums": {},
        "formFields": {
          "title": "Extremely Good Puzzle",
          "answer": "SUPERTRAMP",
          "hexColor": "00BA09",
          "difficulty": 0,
          "flavortext": "",
          "solution": "",
          "instructions": "",
          "notes": "",
          "sharePermission": "full"
        },
        "status": {
          "type": "accepted",
          "moonickDialogue": "",
          "isAvailableInGacha": true,
          "submitTime": 1726971925680,
          "rarity": "common",
          "cannedHint": "The flavortext is a reference to a quote from Megamind, referring to the difference between villains and supervillains. You'll want to apply a similar transformation to what is clued by each image.",
          "reviewTime": 1727120964012
        }
      }
    },
    "team_puzzle_105__370": {
      "scope": {
        "type": "team_puzzle_105",
        "teamId": "370",
        "puzzle": null
      },
      "state": {
        "confirmedTitles": {},
        "order": [
          "puz19",
          "puz104",
          "puz22",
          "puz69",
          "puz96",
          "puz114",
          "puz94",
          "puz93",
          "puz91",
          "puz103"
        ],
        "enums": {},
        "formFields": {
          "title": "REVENGE OF THE SAD SLIM LASS",
          "answer": "REVENGEOFTHESADSLIMLASS",
          "hexColor": "00FF00",
          "difficulty": 0,
          "flavortext": "",
          "solution": "",
          "instructions": "",
          "notes": "",
          "sharePermission": "full"
        },
        "status": {
          "type": "accepted",
          "moonickDialogue": "",
          "isAvailableInGacha": true,
          "submitTime": 1727066388542,
          "rarity": "uncommon",
          "cannedHint": "The characters from each section draw an X-shape on the keyboard.",
          "unlockInEdges": [
            {
              "unlockGroupId": "jfk",
              "val": 1
            }
          ],
          "reviewTime": 1727122493144
        }
      }
    },
    "team_puzzle_105__621": {
      "scope": {
        "type": "team_puzzle_105",
        "teamId": "621",
        "puzzle": null
      },
      "state": {
        "confirmedTitles": {},
        "order": [
          "puz19",
          "puz104",
          "puz22",
          "puz69",
          "puz96",
          "puz114",
          "puz94",
          "puz93",
          "puz91",
          "puz103"
        ],
        "enums": {},
        "formFields": {
          "title": "Various Star Chasers",
          "answer": "STARTLING",
          "hexColor": "000000",
          "difficulty": 0,
          "flavortext": "",
          "solution": "",
          "instructions": "",
          "notes": "",
          "sharePermission": "full"
        },
        "status": {
          "type": "accepted",
          "moonickDialogue": "",
          "isAvailableInGacha": true,
          "submitTime": 1727385812534,
          "rarity": "uncommon",
          "cannedHint": "You can access special phone functionality by dialing a * in front of some numbers.",
          "reviewTime": 1727415040865
        }
      }
    },
    "team_puzzle_105__663": {
      "scope": {
        "type": "team_puzzle_105",
        "teamId": "663",
        "puzzle": null
      },
      "state": {
        "confirmedTitles": {},
        "order": [
          "puz19",
          "puz104",
          "puz22",
          "puz69",
          "puz96",
          "puz114",
          "puz94",
          "puz93",
          "puz91",
          "puz103"
        ],
        "enums": {},
        "formFields": {
          "title": "Extreme Anagrams",
          "answer": "HALLEYSCOMET",
          "hexColor": "0BB296",
          "difficulty": 0,
          "flavortext": "",
          "solution": "",
          "instructions": "",
          "notes": "",
          "sharePermission": "full"
        },
        "status": {
          "type": "accepted",
          "moonickDialogue": "",
          "isAvailableInGacha": true,
          "submitTime": 1726979310117,
          "rarity": "common",
          "cannedHint": "This puzzle has appeared somewhere else before. You don't need to solve it again.",
          "reviewTime": 1727121019560
        }
      }
    },
    "team_puzzle_105__408": {
      "scope": {
        "type": "team_puzzle_105",
        "teamId": "408",
        "puzzle": null
      },
      "state": {
        "confirmedTitles": {},
        "order": [
          "puz19",
          "puz104",
          "puz22",
          "puz69",
          "puz96",
          "puz114",
          "puz94",
          "puz93",
          "puz91",
          "puz103"
        ],
        "enums": {},
        "formFields": {
          "title": "Role Model",
          "answer": "GENERALKNOWLEDGE",
          "hexColor": "F94510",
          "difficulty": 0,
          "flavortext": "",
          "solution": "",
          "instructions": "",
          "notes": "",
          "sharePermission": "full"
        },
        "status": {
          "type": "accepted",
          "moonickDialogue": "",
          "isAvailableInGacha": true,
          "submitTime": 1726979633383,
          "rarity": "rare",
          "cannedHint": "Each item appears in a line from a song by Gilbert and Sullivan. Index into the line that each item appears in.",
          "reviewTime": 1727121031213
        }
      }
    },
    "team_puzzle_105__639": {
      "scope": {
        "type": "team_puzzle_105",
        "teamId": "639",
        "puzzle": null
      },
      "state": {
        "confirmedTitles": {},
        "order": [
          "puz19",
          "puz104",
          "puz22",
          "puz69",
          "puz96",
          "puz114",
          "puz94",
          "puz93",
          "puz91",
          "puz103"
        ],
        "enums": {},
        "formFields": {
          "title": "Edge Case",
          "answer": "EROTICALLY",
          "hexColor": "ECEC00",
          "difficulty": 0,
          "flavortext": "",
          "solution": "",
          "instructions": "",
          "notes": "",
          "sharePermission": "full"
        },
        "status": {
          "type": "accepted",
          "moonickDialogue": "",
          "isAvailableInGacha": true,
          "submitTime": 1727022432055,
          "rarity": "uncommon",
          "cannedHint": "Most of these clues don't fit in the grid. Use the clues that do fit to extract.",
          "reviewTime": 1727121193389
        }
      }
    },
    "team_puzzle_105__976": {
      "scope": {
        "type": "team_puzzle_105",
        "teamId": "976",
        "puzzle": null
      },
      "state": {
        "confirmedTitles": {},
        "order": [
          "puz19",
          "puz104",
          "puz22",
          "puz69",
          "puz96",
          "puz114",
          "puz94",
          "puz93",
          "puz91",
          "puz103"
        ],
        "enums": {},
        "formFields": {
          "title": "Around the World",
          "answer": "MEMORIES",
          "hexColor": "FFBF34",
          "difficulty": 0,
          "flavortext": "",
          "solution": "",
          "instructions": "",
          "notes": "",
          "sharePermission": "full"
        },
        "status": {
          "type": "accepted",
          "moonickDialogue": "",
          "isAvailableInGacha": true,
          "submitTime": 1726983014583,
          "rarity": "common",
          "cannedHint": "Each line holds the name of a country. The country names are not anagrammed, but some wrapping may be involved.",
          "reviewTime": 1727122412299
        }
      }
    },
    "team_puzzle_105__595": {
      "scope": {
        "type": "team_puzzle_105",
        "teamId": "595",
        "puzzle": null
      },
      "state": {
        "confirmedTitles": {},
        "order": [
          "puz19",
          "puz104",
          "puz22",
          "puz69",
          "puz96",
          "puz114",
          "puz94",
          "puz93",
          "puz91",
          "puz103"
        ],
        "enums": {},
        "formFields": {
          "title": "5050",
          "answer": "GAUSS",
          "hexColor": "505050",
          "difficulty": 0,
          "flavortext": "",
          "solution": "",
          "instructions": "",
          "notes": "",
          "sharePermission": "full"
        },
        "status": {
          "type": "accepted",
          "moonickDialogue": "",
          "isAvailableInGacha": true,
          "submitTime": 1727058982188,
          "rarity": "common",
          "cannedHint": "The answer is the name of a mathematician who famously quickly performed a calculation that evaluated to 5050.",
          "reviewTime": 1727122660013
        }
      }
    },
    "team_puzzle_105__288": {
      "scope": {
        "type": "team_puzzle_105",
        "teamId": "288",
        "puzzle": null
      },
      "state": {
        "confirmedTitles": {},
        "order": [
          "puz19",
          "puz104",
          "puz22",
          "puz69",
          "puz96",
          "puz114",
          "puz94",
          "puz93",
          "puz91",
          "puz103"
        ],
        "enums": {},
        "formFields": {
          "title": "O-stars",
          "answer": "ALLUPINARMIS",
          "hexColor": "5EDDEC",
          "difficulty": 0,
          "flavortext": "",
          "solution": "",
          "instructions": "",
          "notes": "",
          "sharePermission": "full"
        },
        "status": {
          "type": "accepted",
          "moonickDialogue": "",
          "isAvailableInGacha": true,
          "submitTime": 1727028669140,
          "rarity": "rare",
          "cannedHint": "These are members of the Holostars English branch of Hololive. Each member has another member's oshi marks, forming a cycle.",
          "reviewTime": 1727122341470
        }
      }
    },
    "team_puzzle_105__420": {
      "scope": {
        "type": "team_puzzle_105",
        "teamId": "420",
        "puzzle": null
      },
      "state": {
        "confirmedTitles": {},
        "order": [
          "puz19",
          "puz104",
          "puz22",
          "puz69",
          "puz96",
          "puz114",
          "puz94",
          "puz93",
          "puz91",
          "puz103"
        ],
        "enums": {},
        "formFields": {
          "title": "Reading Rainbow",
          "answer": "PALETTE",
          "hexColor": "FFCC00",
          "difficulty": 0,
          "flavortext": "",
          "solution": "",
          "instructions": "",
          "notes": "",
          "sharePermission": "full"
        },
        "status": {
          "type": "accepted",
          "moonickDialogue": "",
          "isAvailableInGacha": true,
          "submitTime": 1727100473260,
          "rarity": "rare",
          "cannedHint": "The letter on the top left of the 7x7 grid is C. To extract, select one star from each column based on the colors of the stars, then read top to bottom. Note that there are two ways to orient the grid; the last part of the flavortext, interpreted cryptically, tells you which orientation to use.",
          "reviewTime": 1727122647717
        }
      }
    },
    "team_puzzle_105__423": {
      "scope": {
        "type": "team_puzzle_105",
        "teamId": "423",
        "puzzle": null
      },
      "state": {
        "confirmedTitles": {},
        "order": [
          "puz19",
          "puz104",
          "puz22",
          "puz69",
          "puz96",
          "puz114",
          "puz94",
          "puz93",
          "puz91",
          "puz103"
        ],
        "enums": {},
        "formFields": {
          "title": "Wonderful Puzzle",
          "answer": "FRANKCAPRACORN",
          "hexColor": "000000",
          "difficulty": 0,
          "flavortext": "",
          "solution": "",
          "instructions": "",
          "notes": "",
          "sharePermission": "full"
        },
        "status": {
          "type": "accepted",
          "moonickDialogue": "",
          "isAvailableInGacha": true,
          "submitTime": 1726995274531,
          "rarity": "uncommon",
          "cannedHint": "You will need to order the letters based on the Braille, but you'll need a different order other than alphabetical. To find all the videos, you can start from the last one, and repeatedly click on the link in the description to go to the previous one in the duet chain.",
          "reviewTime": 1727663884798
        }
      }
    },
    "team_puzzle_105__576": {
      "scope": {
        "type": "team_puzzle_105",
        "teamId": "576",
        "puzzle": null
      },
      "state": {
        "confirmedTitles": {},
        "order": [
          "puz19",
          "puz104",
          "puz22",
          "puz69",
          "puz96",
          "puz114",
          "puz94",
          "puz93",
          "puz91",
          "puz103"
        ],
        "enums": {},
        "formFields": {
          "title": "50%50",
          "answer": "STARLING",
          "hexColor": "B0858F",
          "difficulty": 0,
          "flavortext": "",
          "solution": "",
          "instructions": "",
          "notes": "",
          "sharePermission": "full"
        },
        "status": {
          "type": "accepted",
          "moonickDialogue": "",
          "isAvailableInGacha": true,
          "submitTime": 1727054080034,
          "rarity": "common",
          "cannedHint": "The flavortext formatting is only used to clue that the title should be URL-decoded to \\"50p\\", a British coin.",
          "unlockInEdges": [
            {
              "unlockGroupId": "fifty",
              "val": 1
            }
          ],
          "reviewTime": 1727122402606
        }
      }
    },
    "team_puzzle_105__409": {
      "scope": {
        "type": "team_puzzle_105",
        "teamId": "409",
        "puzzle": null
      },
      "state": {
        "confirmedTitles": {},
        "order": [
          "puz19",
          "puz104",
          "puz22",
          "puz69",
          "puz96",
          "puz114",
          "puz94",
          "puz93",
          "puz91",
          "puz103"
        ],
        "enums": {},
        "formFields": {
          "title": "The Naming of Puzzles",
          "answer": "DOMESTIC",
          "hexColor": "F6C500",
          "difficulty": 0,
          "flavortext": "",
          "solution": "",
          "instructions": "",
          "notes": "",
          "sharePermission": "full"
        },
        "status": {
          "type": "accepted",
          "moonickDialogue": "",
          "isAvailableInGacha": true,
          "submitTime": 1727032322709,
          "rarity": "rare",
          "cannedHint": "You'll find some catty characters from a poem that shares a similar title when speaking out paths of images.",
          "reviewTime": 1727121251533
        }
      }
    },
    "team_puzzle_105__291": {
      "scope": {
        "type": "team_puzzle_105",
        "teamId": "291",
        "puzzle": null
      },
      "state": {
        "confirmedTitles": {},
        "order": [
          "puz19",
          "puz104",
          "puz22",
          "puz69",
          "puz96",
          "puz114",
          "puz94",
          "puz93",
          "puz91",
          "puz103"
        ],
        "enums": {},
        "formFields": {
          "title": "Optional Puzzle",
          "answer": "FRANKSINATRA",
          "hexColor": "1E90FF",
          "difficulty": 0,
          "flavortext": "",
          "solution": "",
          "instructions": "",
          "notes": "",
          "sharePermission": "full"
        },
        "status": {
          "type": "accepted",
          "moonickDialogue": "",
          "isAvailableInGacha": true,
          "submitTime": 1726987394517,
          "rarity": "common",
          "cannedHint": "The drawing looks like a key on the keyboard of a Mac.",
          "reviewTime": 1727121060058
        }
      }
    },
    "team_puzzle_105__436": {
      "scope": {
        "type": "team_puzzle_105",
        "teamId": "436",
        "puzzle": null
      },
      "state": {
        "confirmedTitles": {},
        "order": [
          "puz19",
          "puz104",
          "puz22",
          "puz69",
          "puz96",
          "puz114",
          "puz94",
          "puz93",
          "puz91",
          "puz103"
        ],
        "enums": {},
        "formFields": {
          "title": "",
          "answer": "BILL",
          "hexColor": "FFFFFF",
          "difficulty": 0,
          "flavortext": "",
          "solution": "",
          "instructions": "",
          "notes": "",
          "sharePermission": "full"
        },
        "status": {
          "type": "accepted",
          "moonickDialogue": "",
          "isAvailableInGacha": true,
          "submitTime": 1727026227499,
          "rarity": "uncommon",
          "cannedHint": "Each light display and price above describes an equation. You may ignore all letters besides R, G and B.",
          "reviewTime": 1727121204074
        }
      }
    },
    "team_puzzle_105__415": {
      "scope": {
        "type": "team_puzzle_105",
        "teamId": "415",
        "puzzle": null
      },
      "state": {
        "confirmedTitles": {},
        "order": [
          "puz19",
          "puz104",
          "puz22",
          "puz69",
          "puz96",
          "puz114",
          "puz94",
          "puz93",
          "puz91",
          "puz103"
        ],
        "enums": {},
        "formFields": {
          "title": "What's this herCip?",
          "answer": "FAIRPLAY",
          "hexColor": "000000",
          "difficulty": 0,
          "flavortext": "",
          "solution": "",
          "instructions": "",
          "notes": "",
          "sharePermission": "full"
        },
        "status": {
          "type": "accepted",
          "moonickDialogue": "",
          "isAvailableInGacha": true,
          "submitTime": 1727125521499,
          "rarity": "common",
          "cannedHint": "Stonewheat cipher? No, that's not right...",
          "reviewTime": 1727128766039
        }
      }
    },
    "team_puzzle_105__43": {
      "scope": {
        "type": "team_puzzle_105",
        "teamId": "43",
        "puzzle": null
      },
      "state": {
        "confirmedTitles": {},
        "order": [
          "puz19",
          "puz104",
          "puz22",
          "puz69",
          "puz96",
          "puz114",
          "puz94",
          "puz93",
          "puz91",
          "puz103"
        ],
        "enums": {},
        "formFields": {
          "title": "",
          "answer": "AVOCADO",
          "hexColor": "578104",
          "difficulty": 0,
          "flavortext": "",
          "solution": "",
          "instructions": "",
          "notes": "",
          "sharePermission": "full"
        },
        "status": {
          "type": "accepted",
          "moonickDialogue": "",
          "isAvailableInGacha": true,
          "submitTime": 1727049871390,
          "rarity": "common",
          "cannedHint": "The letters are written kinda weirdly, but the answer is staring right at you.",
          "reviewTime": 1727122387014
        }
      }
    },
    "team_puzzle_105__97": {
      "scope": {
        "type": "team_puzzle_105",
        "teamId": "97",
        "puzzle": null
      },
      "state": {
        "confirmedTitles": {},
        "order": [
          "puz19",
          "puz104",
          "puz22",
          "puz69",
          "puz96",
          "puz114",
          "puz94",
          "puz93",
          "puz91",
          "puz103"
        ],
        "enums": {},
        "formFields": {
          "title": "Dust to Dust",
          "answer": "CONDOR",
          "hexColor": "ADA1BE",
          "difficulty": 0,
          "flavortext": "",
          "solution": "",
          "instructions": "",
          "notes": "",
          "sharePermission": "full"
        },
        "status": {
          "type": "accepted",
          "moonickDialogue": "",
          "isAvailableInGacha": true,
          "submitTime": 1727421182610,
          "rarity": "common",
          "cannedHint": "This puzzle is about things that are not dust. You might not have everything you need to solve this puzzle, but other teams might. (Note that you're still not supposed to communicate with other teams.) To extract, reuse the theme of the puzzle.",
          "reviewTime": 1727466436870
        }
      }
    },
    "team_puzzle_105__284": {
      "scope": {
        "type": "team_puzzle_105",
        "teamId": "284",
        "puzzle": null
      },
      "state": {
        "confirmedTitles": {},
        "order": [
          "puz19",
          "puz104",
          "puz22",
          "puz69",
          "puz96",
          "puz114",
          "puz94",
          "puz93",
          "puz91",
          "puz103"
        ],
        "enums": {},
        "formFields": {
          "title": "CROSSWORD/CROSSWORD/CROSSWORD/CROSSWORD/CROSSWORD/CROSSWORD/CROSSWORD/CROSSWORD/CROSSWORD",
          "answer": "PLURALITIES",
          "hexColor": "000724",
          "difficulty": 0,
          "flavortext": "",
          "solution": "",
          "instructions": "",
          "notes": "",
          "sharePermission": "full"
        },
        "status": {
          "type": "accepted",
          "moonickDialogue": "",
          "isAvailableInGacha": true,
          "submitTime": 1727065825966,
          "rarity": "uncommon",
          "cannedHint": "The grid to fill in is indeed 9 by 9. All the down clues sound like plurals of certain things.",
          "unlockInEdges": [
            {
              "unlockGroupId": "crossword",
              "val": 3,
              "isUnlockOnly": true
            }
          ],
          "reviewTime": 1727702103483
        }
      }
    },
    "team_puzzle_105__598": {
      "scope": {
        "type": "team_puzzle_105",
        "teamId": "598",
        "puzzle": null
      },
      "state": {
        "confirmedTitles": {},
        "order": [
          "puz19",
          "puz104",
          "puz22",
          "puz69",
          "puz96",
          "puz114",
          "puz94",
          "puz93",
          "puz91",
          "puz103"
        ],
        "enums": {},
        "formFields": {
          "title": "Dance Break",
          "answer": "FREE",
          "hexColor": "28676D",
          "difficulty": 0,
          "flavortext": "",
          "solution": "",
          "instructions": "",
          "notes": "",
          "sharePermission": "full"
        },
        "status": {
          "type": "accepted",
          "moonickDialogue": "",
          "isAvailableInGacha": true,
          "submitTime": 1727158603992,
          "rarity": "uncommon",
          "cannedHint": "The answers to these clues all rhyme with a certain person clued by the flavortext (and kangaroo emoji).",
          "reviewTime": 1727159339852
        }
      }
    },
    "team_puzzle_105__47": {
      "scope": {
        "type": "team_puzzle_105",
        "teamId": "47",
        "puzzle": null
      },
      "state": {
        "confirmedTitles": {},
        "order": [
          "puz19",
          "puz104",
          "puz22",
          "puz69",
          "puz96",
          "puz114",
          "puz94",
          "puz93",
          "puz91",
          "puz103"
        ],
        "enums": {},
        "formFields": {
          "title": "Freebie",
          "answer": "CELESTIAL",
          "hexColor": "E9AB17",
          "difficulty": 0,
          "flavortext": "",
          "solution": "",
          "instructions": "",
          "notes": "",
          "sharePermission": "full"
        },
        "status": {
          "type": "accepted",
          "moonickDialogue": "",
          "isAvailableInGacha": true,
          "submitTime": 1727099941101,
          "rarity": "common",
          "cannedHint": "Each answer for a clue on the left column needs to be matched with an answer for a clue on the right column by removing a thematic two-letter word.",
          "reviewTime": 1727123885370
        }
      }
    },
    "team_puzzle_105__275": {
      "scope": {
        "type": "team_puzzle_105",
        "teamId": "275",
        "puzzle": null
      },
      "state": {
        "confirmedTitles": {},
        "order": [
          "puz19",
          "puz104",
          "puz22",
          "puz69",
          "puz96",
          "puz114",
          "puz94",
          "puz93",
          "puz91",
          "puz103"
        ],
        "enums": {},
        "formFields": {
          "title": "一道好题",
          "answer": "REDHERRING",
          "hexColor": "00FFFF",
          "difficulty": 0,
          "flavortext": "",
          "solution": "",
          "instructions": "",
          "notes": "",
          "sharePermission": "full"
        },
        "status": {
          "type": "accepted",
          "moonickDialogue": "",
          "isAvailableInGacha": true,
          "submitTime": 1727029043710,
          "rarity": "common",
          "cannedHint": "Don't overthink it. The title is not relevant.",
          "reviewTime": 1727121225009
        }
      }
    },
    "team_puzzle_105__121": {
      "scope": {
        "type": "team_puzzle_105",
        "teamId": "121",
        "puzzle": null
      },
      "state": {
        "confirmedTitles": {},
        "order": [
          "puz19",
          "puz104",
          "puz22",
          "puz69",
          "puz96",
          "puz114",
          "puz94",
          "puz93",
          "puz91",
          "puz103"
        ],
        "enums": {},
        "formFields": {
          "title": "Dot Hunt",
          "answer": "BOBA",
          "hexColor": "FC0300",
          "difficulty": 0,
          "flavortext": "",
          "solution": "",
          "instructions": "",
          "notes": "",
          "sharePermission": "full"
        },
        "status": {
          "type": "accepted",
          "moonickDialogue": "",
          "isAvailableInGacha": true,
          "submitTime": 1727125968202,
          "rarity": "common",
          "cannedHint": "This is a reference to a different puzzle hunt, called the REDDOT Hunt.",
          "reviewTime": 1727127310304
        }
      }
    },
    "team_puzzle_105__487": {
      "scope": {
        "type": "team_puzzle_105",
        "teamId": "487",
        "puzzle": null
      },
      "state": {
        "confirmedTitles": {},
        "order": [
          "puz19",
          "puz104",
          "puz22",
          "puz69",
          "puz96",
          "puz114",
          "puz94",
          "puz93",
          "puz91",
          "puz103"
        ],
        "enums": {},
        "formFields": {
          "title": "Galactic Puzzle",
          "answer": "COSMIC",
          "hexColor": "830083",
          "difficulty": 0,
          "flavortext": "",
          "solution": "",
          "instructions": "",
          "notes": "",
          "sharePermission": "full"
        },
        "status": {
          "type": "accepted",
          "moonickDialogue": "",
          "isAvailableInGacha": true,
          "submitTime": 1727143544642,
          "rarity": "uncommon",
          "cannedHint": "This puzzle is about the galaxies in Super Mario Galaxy. You'll need to apply the same operation to those galaxies and the puzzle entries as one that would get you P from SUPER and HAPPY, I from MARIO and LOGIC, and G from GALAXY and GENIUS.",
          "reviewTime": 1727145990061
        }
      }
    },
    "team_puzzle_105__218": {
      "scope": {
        "type": "team_puzzle_105",
        "teamId": "218",
        "puzzle": null
      },
      "state": {
        "confirmedTitles": {},
        "order": [
          "puz19",
          "puz104",
          "puz22",
          "puz69",
          "puz96",
          "puz114",
          "puz94",
          "puz93",
          "puz91",
          "puz103"
        ],
        "enums": {},
        "formFields": {
          "title": "Backwards Engineering",
          "answer": "GNIREENIGNE",
          "hexColor": "BADA55",
          "difficulty": 0,
          "flavortext": "",
          "solution": "",
          "instructions": "",
          "notes": "",
          "sharePermission": "full"
        },
        "status": {
          "type": "accepted",
          "moonickDialogue": "",
          "isAvailableInGacha": true,
          "submitTime": 1727060826578,
          "rarity": "common",
          "cannedHint": "While it is possible to write a program to bruteforce the hash after taking the constraints into consideration, it's probably easier to try an educated guess from the title.",
          "reviewTime": 1727122449494
        }
      }
    },
    "team_puzzle_105__251": {
      "scope": {
        "type": "team_puzzle_105",
        "teamId": "251",
        "puzzle": null
      },
      "state": {
        "confirmedTitles": {},
        "order": [
          "puz19",
          "puz104",
          "puz22",
          "puz69",
          "puz96",
          "puz114",
          "puz94",
          "puz93",
          "puz91",
          "puz103"
        ],
        "enums": {},
        "formFields": {
          "title": "Denumeration",
          "answer": "EMOJIS",
          "hexColor": "000000",
          "difficulty": 0,
          "flavortext": "",
          "solution": "",
          "instructions": "",
          "notes": "",
          "sharePermission": "full"
        },
        "status": {
          "type": "accepted",
          "moonickDialogue": "",
          "isAvailableInGacha": true,
          "submitTime": 1727036528156,
          "rarity": "common",
          "cannedHint": "The numbers after the clues on the left are not enumerations, but rather things to be appended to the answers.",
          "reviewTime": 1727122354950
        }
      }
    },
    "team_puzzle_105__359": {
      "scope": {
        "type": "team_puzzle_105",
        "teamId": "359",
        "puzzle": null
      },
      "state": {
        "confirmedTitles": {},
        "order": [
          "puz19",
          "puz104",
          "puz22",
          "puz69",
          "puz96",
          "puz114",
          "puz94",
          "puz93",
          "puz91",
          "puz103"
        ],
        "enums": {},
        "formFields": {
          "title": "A Necklace of Stars",
          "answer": "REDFOX",
          "hexColor": "800869",
          "difficulty": 0,
          "flavortext": "",
          "solution": "",
          "instructions": "",
          "notes": "",
          "sharePermission": "full"
        },
        "status": {
          "type": "accepted",
          "moonickDialogue": "",
          "isAvailableInGacha": true,
          "submitTime": 1727047851259,
          "rarity": "uncommon",
          "cannedHint": "This is two logic puzzles. The first one you must solve is a Star Battle, and the second is one is a Masyu.",
          "unlockInEdges": [
            {
              "unlockGroupId": "necklace",
              "val": 1
            }
          ],
          "reviewTime": 1727122372541
        }
      }
    },
    "team_puzzle_105__181": {
      "scope": {
        "type": "team_puzzle_105",
        "teamId": "181",
        "puzzle": null
      },
      "state": {
        "confirmedTitles": {},
        "order": [
          "puz19",
          "puz104",
          "puz22",
          "puz69",
          "puz96",
          "puz114",
          "puz94",
          "puz93",
          "puz91",
          "puz103"
        ],
        "enums": {},
        "formFields": {
          "title": "AWESOME LIFE",
          "answer": "WIFE",
          "hexColor": "EF8A6E",
          "difficulty": 0,
          "flavortext": "",
          "solution": "",
          "instructions": "",
          "notes": "",
          "sharePermission": "full"
        },
        "status": {
          "type": "accepted",
          "moonickDialogue": "",
          "isAvailableInGacha": true,
          "submitTime": 1727141630726,
          "rarity": "common",
          "cannedHint": "Each 2 is written in a color that matches the colors on the shirt.",
          "reviewTime": 1727141783582
        }
      }
    },
    "team_puzzle_105__782": {
      "scope": {
        "type": "team_puzzle_105",
        "teamId": "782",
        "puzzle": null
      },
      "state": {
        "confirmedTitles": {},
        "order": [
          "puz19",
          "puz104",
          "puz22",
          "puz69",
          "puz96",
          "puz114",
          "puz94",
          "puz93",
          "puz91",
          "puz103"
        ],
        "enums": {},
        "formFields": {
          "title": "\\"Free\\" Games",
          "answer": "LOADING",
          "hexColor": "B39863",
          "difficulty": 0,
          "flavortext": "",
          "solution": "",
          "instructions": "",
          "notes": "",
          "sharePermission": "full"
        },
        "status": {
          "type": "accepted",
          "moonickDialogue": "",
          "isAvailableInGacha": true,
          "submitTime": 1727049830736,
          "rarity": "uncommon",
          "cannedHint": "The two video games referenced by this puzzle contain elements that share the same name.",
          "reviewTime": 1727122363250
        }
      }
    },
    "team_puzzle_105__260": {
      "scope": {
        "type": "team_puzzle_105",
        "teamId": "260",
        "puzzle": null
      },
      "state": {
        "confirmedTitles": {},
        "order": [
          "puz19",
          "puz104",
          "puz22",
          "puz69",
          "puz96",
          "puz114",
          "puz94",
          "puz93",
          "puz91",
          "puz103"
        ],
        "enums": {},
        "formFields": {
          "title": "Constellations",
          "answer": "LONGEST",
          "hexColor": "000000",
          "difficulty": 0,
          "flavortext": "",
          "solution": "",
          "instructions": "",
          "notes": "",
          "sharePermission": "full"
        },
        "status": {
          "type": "accepted",
          "moonickDialogue": "",
          "isAvailableInGacha": true,
          "submitTime": 1727505874588,
          "rarity": "common",
          "cannedHint": "These aren't real constellations, but you should have seen all the stars before. You'll need to drag-pan to see all of them.",
          "unlockInEdges": [
            {
              "unlockGroupId": "wikipedia",
              "val": 4
            },
            {
              "unlockGroupId": "clues",
              "val": 8
            },
            {
              "unlockGroupId": "solve__puz185",
              "val": 1
            },
            {
              "unlockGroupId": "name",
              "val": 4
            },
            {
              "unlockGroupId": "title",
              "val": 7
            },
            {
              "unlockGroupId": "difficulty",
              "val": 4
            },
            {
              "unlockGroupId": "greek",
              "val": 4
            },
            {
              "unlockGroupId": "five",
              "val": 10
            }
          ],
          "reviewTime": 1727513952891
        }
      }
    },
    "team_puzzle_105__792": {
      "scope": {
        "type": "team_puzzle_105",
        "teamId": "792",
        "puzzle": null
      },
      "state": {
        "confirmedTitles": {},
        "order": [
          "puz19",
          "puz104",
          "puz22",
          "puz69",
          "puz96",
          "puz114",
          "puz94",
          "puz93",
          "puz91",
          "puz103"
        ],
        "enums": {},
        "formFields": {
          "title": "False Soap",
          "answer": "LYES",
          "hexColor": "FF9081",
          "difficulty": 0,
          "flavortext": "",
          "solution": "",
          "instructions": "",
          "notes": "",
          "sharePermission": "full"
        },
        "status": {
          "type": "accepted",
          "moonickDialogue": "",
          "isAvailableInGacha": true,
          "submitTime": 1727062932554,
          "rarity": "common",
          "cannedHint": "The Namystic solves to a word that describes the star. The white dots in some order make the answer, which sounds like something that might appropriately describe the assertions made in the flavortext.",
          "reviewTime": 1727122482484
        }
      }
    },
    "team_puzzle_105__456": {
      "scope": {
        "type": "team_puzzle_105",
        "teamId": "456",
        "puzzle": null
      },
      "state": {
        "confirmedTitles": {},
        "order": [
          "puz19",
          "puz104",
          "puz22",
          "puz69",
          "puz96",
          "puz114",
          "puz94",
          "puz93",
          "puz91",
          "puz103"
        ],
        "enums": {},
        "formFields": {
          "title": "Across The Sky",
          "answer": "HALLEYSCOMET",
          "hexColor": "420F69",
          "difficulty": 0,
          "flavortext": "",
          "solution": "",
          "instructions": "",
          "notes": "",
          "sharePermission": "full"
        },
        "status": {
          "type": "accepted",
          "moonickDialogue": "",
          "isAvailableInGacha": true,
          "submitTime": 1727057548594,
          "rarity": "common",
          "cannedHint": "The answers to the clues all share something in common. Extract the letters indicated by the green circles.",
          "reviewTime": 1727122436817
        }
      }
    },
    "team_puzzle_105__133": {
      "scope": {
        "type": "team_puzzle_105",
        "teamId": "133",
        "puzzle": null
      },
      "state": {
        "confirmedTitles": {},
        "order": [
          "puz19",
          "puz104",
          "puz22",
          "puz69",
          "puz96",
          "puz114",
          "puz94",
          "puz93",
          "puz91",
          "puz103"
        ],
        "enums": {},
        "formFields": {
          "title": "One Lion",
          "answer": "LEONIDS",
          "hexColor": "93685B",
          "difficulty": 0,
          "flavortext": "",
          "solution": "",
          "instructions": "",
          "notes": "",
          "sharePermission": "full"
        },
        "status": {
          "type": "accepted",
          "moonickDialogue": "",
          "isAvailableInGacha": true,
          "submitTime": 1727168329908,
          "rarity": "common",
          "cannedHint": "This is a real constellation. The letters you get from the stars won't make a compelling word. You'll need to prepend something to it to get your final answer.",
          "reviewTime": 1727474832308
        }
      }
    },
    "team_puzzle_105__445": {
      "scope": {
        "type": "team_puzzle_105",
        "teamId": "445",
        "puzzle": null
      },
      "state": {
        "confirmedTitles": {},
        "order": [
          "puz19",
          "puz104",
          "puz22",
          "puz69",
          "puz96",
          "puz114",
          "puz94",
          "puz93",
          "puz91",
          "puz103"
        ],
        "enums": {},
        "formFields": {
          "title": "Milky Way Trailblazers",
          "answer": "DOZEN",
          "hexColor": "123456",
          "difficulty": 0,
          "flavortext": "",
          "solution": "",
          "instructions": "",
          "notes": "",
          "sharePermission": "full"
        },
        "status": {
          "type": "accepted",
          "moonickDialogue": "",
          "isAvailableInGacha": true,
          "submitTime": 1727064078196,
          "rarity": "common",
          "cannedHint": "These clue finishing teams in the hunt leaderboard. One of the clues is a translation of a (romanized) Japanese team name into English. Another clue interprets a long team name cryptically.",
          "reviewTime": 1727418136685
        }
      }
    },
    "team_puzzle_105__633": {
      "scope": {
        "type": "team_puzzle_105",
        "teamId": "633",
        "puzzle": null
      },
      "state": {
        "confirmedTitles": {},
        "order": [
          "puz19",
          "puz104",
          "puz22",
          "puz69",
          "puz96",
          "puz114",
          "puz94",
          "puz93",
          "puz91",
          "puz103"
        ],
        "enums": {},
        "formFields": {
          "title": "Bonus Puzzle 14",
          "answer": "GARDENER",
          "hexColor": "9E2356",
          "difficulty": 0,
          "flavortext": "",
          "solution": "",
          "instructions": "",
          "notes": "",
          "sharePermission": "full"
        },
        "status": {
          "type": "accepted",
          "moonickDialogue": "",
          "isAvailableInGacha": true,
          "submitTime": 1727080067196,
          "rarity": "common",
          "cannedHint": "This puzzle depicts a Final Fantasy XIV raid party. You'll need to reorder the jobs to extract.",
          "reviewTime": 1727122532659
        }
      }
    },
    "team_puzzle_105__777": {
      "scope": {
        "type": "team_puzzle_105",
        "teamId": "777",
        "puzzle": null
      },
      "state": {
        "confirmedTitles": {},
        "order": [
          "puz19",
          "puz104",
          "puz22",
          "puz69",
          "puz96",
          "puz114",
          "puz94",
          "puz93",
          "puz91",
          "puz103"
        ],
        "enums": {},
        "formFields": {
          "title": "It's All Sorts of Thematic!",
          "answer": "LAZY",
          "hexColor": "000000",
          "difficulty": 0,
          "flavortext": "",
          "solution": "",
          "instructions": "",
          "notes": "",
          "sharePermission": "full"
        },
        "status": {
          "type": "accepted",
          "moonickDialogue": "",
          "isAvailableInGacha": true,
          "submitTime": 1727158851690,
          "rarity": "uncommon",
          "cannedHint": "The clues solve to answers each starting with a different letter. Each answer contains a thematic set of four letters in some order.",
          "reviewTime": 1727160392508
        }
      }
    },
    "team_puzzle_105__394": {
      "scope": {
        "type": "team_puzzle_105",
        "teamId": "394",
        "puzzle": null
      },
      "state": {
        "confirmedTitles": {},
        "order": [
          "puz19",
          "puz104",
          "puz22",
          "puz69",
          "puz96",
          "puz114",
          "puz94",
          "puz93",
          "puz91",
          "puz103"
        ],
        "enums": {},
        "formFields": {
          "title": "OKI! WRITE CENTRED LETTERS, CAPEESH?? TNX",
          "answer": "KITTEN",
          "hexColor": "000000",
          "difficulty": 0,
          "flavortext": "",
          "solution": "",
          "instructions": "",
          "notes": "",
          "sharePermission": "full"
        },
        "status": {
          "type": "accepted",
          "moonickDialogue": "",
          "isAvailableInGacha": true,
          "submitTime": 1727092031541,
          "rarity": "common",
          "cannedHint": "Extract one letter from each word in the title.",
          "unlockInEdges": [
            {
              "unlockGroupId": "title",
              "val": 2,
              "isUnlockOnly": true
            }
          ],
          "reviewTime": 1727388766973
        }
      }
    },
    "team_puzzle_105__74": {
      "scope": {
        "type": "team_puzzle_105",
        "teamId": "74",
        "puzzle": null
      },
      "state": {
        "confirmedTitles": {},
        "order": [
          "puz19",
          "puz104",
          "puz22",
          "puz69",
          "puz96",
          "puz114",
          "puz94",
          "puz93",
          "puz91",
          "puz103"
        ],
        "enums": {},
        "formFields": {
          "title": "The Ultimate Puzzle",
          "answer": "PROGAMERS",
          "hexColor": "000000",
          "difficulty": 0,
          "flavortext": "",
          "solution": "",
          "instructions": "",
          "notes": "",
          "sharePermission": "full"
        },
        "status": {
          "type": "accepted",
          "moonickDialogue": "",
          "isAvailableInGacha": true,
          "submitTime": 1727073797951,
          "rarity": "uncommon",
          "cannedHint": "These are all quotes from a video game. Each of them is spoken during a thematic action.",
          "reviewTime": 1727122518481
        }
      }
    },
    "team_puzzle_105__712": {
      "scope": {
        "type": "team_puzzle_105",
        "teamId": "712",
        "puzzle": null
      },
      "state": {
        "confirmedTitles": {},
        "order": [
          "puz19",
          "puz104",
          "puz22",
          "puz69",
          "puz96",
          "puz114",
          "puz94",
          "puz93",
          "puz91",
          "puz103"
        ],
        "enums": {},
        "formFields": {
          "title": "What's the answer? LIV",
          "answer": "ABRAHAM",
          "hexColor": "DEFACE",
          "difficulty": 0,
          "flavortext": "",
          "solution": "",
          "instructions": "",
          "notes": "",
          "sharePermission": "full"
        },
        "status": {
          "type": "accepted",
          "moonickDialogue": "",
          "isAvailableInGacha": true,
          "submitTime": 1727060644118,
          "rarity": "common",
          "cannedHint": "His last name is Ancer, which sounds suspiciously familiar.",
          "unlockInEdges": [
            {
              "unlockGroupId": "whats",
              "val": 3
            }
          ],
          "reviewTime": 1727122460691
        }
      }
    },
    "team_puzzle_105__18": {
      "scope": {
        "type": "team_puzzle_105",
        "teamId": "18",
        "puzzle": null
      },
      "state": {
        "confirmedTitles": {},
        "order": [
          "puz19",
          "puz104",
          "puz22",
          "puz69",
          "puz96",
          "puz114",
          "puz94",
          "puz93",
          "puz91",
          "puz103"
        ],
        "enums": {},
        "formFields": {
          "title": "In terms of number of letters",
          "answer": "AND",
          "hexColor": "CC11FF",
          "difficulty": 0,
          "flavortext": "",
          "solution": "",
          "instructions": "",
          "notes": "",
          "sharePermission": "full"
        },
        "status": {
          "type": "accepted",
          "moonickDialogue": "",
          "isAvailableInGacha": true,
          "submitTime": 1727427371695,
          "rarity": "common",
          "cannedHint": "Interpret the statement both as a statement about the answer's length as well the answer's location.",
          "reviewTime": 1727442834472
        }
      }
    },
    "team_puzzle_105__265": {
      "scope": {
        "type": "team_puzzle_105",
        "teamId": "265",
        "puzzle": null
      },
      "state": {
        "confirmedTitles": {},
        "order": [
          "puz19",
          "puz104",
          "puz22",
          "puz69",
          "puz96",
          "puz114",
          "puz94",
          "puz93",
          "puz91",
          "puz103"
        ],
        "enums": {},
        "formFields": {
          "title": "Countdown",
          "answer": "ORDINARY",
          "hexColor": "FFD700",
          "difficulty": 0,
          "flavortext": "",
          "solution": "",
          "instructions": "",
          "notes": "",
          "sharePermission": "full"
        },
        "status": {
          "type": "accepted",
          "moonickDialogue": "",
          "isAvailableInGacha": true,
          "submitTime": 1727447804936,
          "rarity": "uncommon",
          "cannedHint": "Each of these clues has an answer that starts with an ordinal number. The specific wording of the clues matters.",
          "reviewTime": 1727463296762
        }
      }
    },
    "team_puzzle_105__406": {
      "scope": {
        "type": "team_puzzle_105",
        "teamId": "406",
        "puzzle": null
      },
      "state": {
        "confirmedTitles": {},
        "order": [
          "puz19",
          "puz104",
          "puz22",
          "puz69",
          "puz96",
          "puz114",
          "puz94",
          "puz93",
          "puz91",
          "puz103"
        ],
        "enums": {},
        "formFields": {
          "title": "👽50",
          "answer": "SAUCERY",
          "hexColor": "39FF14",
          "difficulty": 0,
          "flavortext": "",
          "solution": "",
          "instructions": "",
          "notes": "",
          "sharePermission": "full"
        },
        "status": {
          "type": "accepted",
          "moonickDialogue": "",
          "isAvailableInGacha": true,
          "submitTime": 1727154958068,
          "rarity": "common",
          "cannedHint": "The pictures illustrate the names of the games in the collection (the art of the games themselves is not relevant). You will need to reorder.",
          "reviewTime": 1727156352415
        }
      }
    },
    "team_puzzle_105__410": {
      "scope": {
        "type": "team_puzzle_105",
        "teamId": "410",
        "puzzle": null
      },
      "state": {
        "confirmedTitles": {},
        "order": [
          "puz19",
          "puz104",
          "puz22",
          "puz69",
          "puz96",
          "puz114",
          "puz94",
          "puz93",
          "puz91",
          "puz103"
        ],
        "enums": {},
        "formFields": {
          "title": "Blind בs",
          "answer": "ALCHEMISTS",
          "hexColor": "FC6358",
          "difficulty": 0,
          "flavortext": "",
          "solution": "",
          "instructions": "",
          "notes": "",
          "sharePermission": "full"
        },
        "status": {
          "type": "accepted",
          "moonickDialogue": "",
          "isAvailableInGacha": true,
          "submitTime": 1727276810724,
          "rarity": "rare",
          "cannedHint": "Two languages are relevant here that can be matched up glyph by glyph. You don't need to use anything from Balatro besides the blinds.",
          "reviewTime": 1727411706710
        }
      }
    },
    "team_puzzle_105__69": {
      "scope": {
        "type": "team_puzzle_105",
        "teamId": "69",
        "puzzle": null
      },
      "state": {
        "confirmedTitles": {},
        "order": [
          "puz19",
          "puz104",
          "puz22",
          "puz69",
          "puz96",
          "puz114",
          "puz94",
          "puz93",
          "puz91",
          "puz103"
        ],
        "enums": {},
        "formFields": {
          "title": "Gravitas Free Zone",
          "answer": "SHIP",
          "hexColor": "9DC6F0",
          "difficulty": 0,
          "flavortext": "",
          "solution": "",
          "instructions": "",
          "notes": "",
          "sharePermission": "full"
        },
        "status": {
          "type": "accepted",
          "moonickDialogue": "",
          "isAvailableInGacha": true,
          "submitTime": 1727147900561,
          "rarity": "common",
          "cannedHint": "The title references something specific from a book series. The answers to the clues are the same kind of thing.",
          "reviewTime": 1727148968920
        }
      }
    },
    "team_puzzle_105__631": {
      "scope": {
        "type": "team_puzzle_105",
        "teamId": "631",
        "puzzle": null
      },
      "state": {
        "confirmedTitles": {},
        "order": [
          "puz19",
          "puz104",
          "puz22",
          "puz69",
          "puz96",
          "puz114",
          "puz94",
          "puz93",
          "puz91",
          "puz103"
        ],
        "enums": {},
        "formFields": {
          "title": "Stronger Magic Puzzles",
          "answer": "OBVIOUSMOVES",
          "hexColor": "CCFF00",
          "difficulty": 0,
          "flavortext": "",
          "solution": "",
          "instructions": "",
          "notes": "",
          "sharePermission": "full"
        },
        "status": {
          "type": "accepted",
          "moonickDialogue": "",
          "isAvailableInGacha": true,
          "submitTime": 1727312409515,
          "rarity": "common",
          "cannedHint": "This puzzle is about a simple game. Make all the unique optimal moves.",
          "unlockInEdges": [
            {
              "unlockGroupId": "solve__puz158",
              "val": 1
            }
          ],
          "reviewTime": 1727696445612
        }
      }
    },
    "team_puzzle_105__24": {
      "scope": {
        "type": "team_puzzle_105",
        "teamId": "24",
        "puzzle": null
      },
      "state": {
        "confirmedTitles": {},
        "order": [
          "puz19",
          "puz104",
          "puz22",
          "puz69",
          "puz96",
          "puz114",
          "puz94",
          "puz93",
          "puz91",
          "puz103"
        ],
        "enums": {},
        "formFields": {
          "title": "Singles Staying Inside",
          "answer": "E",
          "hexColor": "000000",
          "difficulty": 0,
          "flavortext": "",
          "solution": "",
          "instructions": "",
          "notes": "",
          "sharePermission": "full"
        },
        "status": {
          "type": "accepted",
          "moonickDialogue": "",
          "isAvailableInGacha": true,
          "submitTime": 1727244204387,
          "rarity": "common",
          "cannedHint": "Doubled letters are important. Extract the singles staying inside.",
          "reviewTime": 1727244714651
        }
      }
    },
    "team_puzzle_105__735": {
      "scope": {
        "type": "team_puzzle_105",
        "teamId": "735",
        "puzzle": null
      },
      "state": {
        "confirmedTitles": {},
        "order": [
          "puz19",
          "puz104",
          "puz22",
          "puz69",
          "puz96",
          "puz114",
          "puz94",
          "puz93",
          "puz91",
          "puz103"
        ],
        "enums": {},
        "formFields": {
          "title": "Galactic History Project",
          "answer": "SPHEROIDAL",
          "hexColor": "03DFFC",
          "difficulty": 0,
          "flavortext": "",
          "solution": "",
          "instructions": "",
          "notes": "",
          "sharePermission": "full"
        },
        "status": {
          "type": "accepted",
          "moonickDialogue": "",
          "isAvailableInGacha": true,
          "submitTime": 1727120908843,
          "rarity": "uncommon",
          "cannedHint": "All you need from the presentation notes are the referenced puzzles and their rankings. Note that there are two sets of rankings.",
          "reviewTime": 1727396185523
        }
      }
    },
    "team_puzzle_105__646": {
      "scope": {
        "type": "team_puzzle_105",
        "teamId": "646",
        "puzzle": null
      },
      "state": {
        "confirmedTitles": {},
        "order": [
          "puz19",
          "puz104",
          "puz22",
          "puz69",
          "puz96",
          "puz114",
          "puz94",
          "puz93",
          "puz91",
          "puz103"
        ],
        "enums": {},
        "formFields": {
          "title": "Just Wait an Hour",
          "answer": "MONOTONY",
          "hexColor": "ABCDEF",
          "difficulty": 0,
          "flavortext": "",
          "solution": "",
          "instructions": "",
          "notes": "",
          "sharePermission": "full"
        },
        "status": {
          "type": "accepted",
          "moonickDialogue": "",
          "isAvailableInGacha": true,
          "submitTime": 1727592246274,
          "rarity": "rare",
          "cannedHint": "While you could feasibly wait an hour, it's probably faster to find a tool that splits the GIF into frames with timing information.",
          "reviewTime": 1727604053570
        }
      }
    },
    "team_puzzle_105__713": {
      "scope": {
        "type": "team_puzzle_105",
        "teamId": "713",
        "puzzle": null
      },
      "state": {
        "confirmedTitles": {},
        "order": [
          "puz19",
          "puz104",
          "puz22",
          "puz69",
          "puz96",
          "puz114",
          "puz94",
          "puz93",
          "puz91",
          "puz103"
        ],
        "enums": {},
        "formFields": {
          "title": "Everything You Know Is Sean",
          "answer": "THISHASSEANONTOOFAR",
          "hexColor": "000000",
          "difficulty": 0,
          "flavortext": "",
          "solution": "",
          "instructions": "",
          "notes": "",
          "sharePermission": "full"
        },
        "status": {
          "type": "accepted",
          "moonickDialogue": "",
          "isAvailableInGacha": true,
          "submitTime": 1727295622521,
          "rarity": "rare",
          "cannedHint": "Come up with better names for the puzzles (you don't need to worry about the existing names). Then use the answers to extract. Think of \\"SEAN\\" as four separate letters.",
          "reviewTime": 1727297990969
        }
      }
    },
    "team_puzzle_105__343": {
      "scope": {
        "type": "team_puzzle_105",
        "teamId": "343",
        "puzzle": null
      },
      "state": {
        "confirmedTitles": {},
        "order": [
          "puz19",
          "puz104",
          "puz22",
          "puz69",
          "puz96",
          "puz114",
          "puz94",
          "puz93",
          "puz91",
          "puz103"
        ],
        "enums": {},
        "formFields": {
          "title": "Scatterbrain",
          "answer": "ONE",
          "hexColor": "4D8230",
          "difficulty": 0,
          "flavortext": "",
          "solution": "",
          "instructions": "",
          "notes": "",
          "sharePermission": "full"
        },
        "status": {
          "type": "accepted",
          "moonickDialogue": "",
          "isAvailableInGacha": true,
          "submitTime": 1727623249109,
          "rarity": "uncommon",
          "cannedHint": "The title and flavortext clue a specific song. There is a specific image associated with that song, containing its lyrics, that you can use to extract a cluephrase with enumeration (6 4). Use the cluephrase, in combination with the puzzle's title, to find the final 3-letter answer.",
          "reviewTime": 1727652273164
        }
      }
    },
    "team_puzzle_105__367": {
      "scope": {
        "type": "team_puzzle_105",
        "teamId": "367",
        "puzzle": null
      },
      "state": {
        "confirmedTitles": {},
        "order": [
          "puz19",
          "puz104",
          "puz22",
          "puz69",
          "puz96",
          "puz114",
          "puz94",
          "puz93",
          "puz91",
          "puz103"
        ],
        "enums": {},
        "formFields": {
          "title": "Hungarian-Risotto diagram",
          "answer": "GOMBA",
          "hexColor": "FEF3D3",
          "difficulty": 0,
          "flavortext": "",
          "solution": "",
          "instructions": "",
          "notes": "",
          "sharePermission": "full"
        },
        "status": {
          "type": "accepted",
          "moonickDialogue": "",
          "isAvailableInGacha": true,
          "submitTime": 1727372682572,
          "rarity": "common",
          "cannedHint": "Use classes from another H-R diagram commonly associated with stars.",
          "reviewTime": 1727373834297
        }
      }
    },
    "team_puzzle_105__362": {
      "scope": {
        "type": "team_puzzle_105",
        "teamId": "362",
        "puzzle": null
      },
      "state": {
        "confirmedTitles": {},
        "order": [
          "puz19",
          "puz104",
          "puz22",
          "puz69",
          "puz96",
          "puz114",
          "puz94",
          "puz93",
          "puz91",
          "puz103"
        ],
        "enums": {},
        "formFields": {
          "title": "Short answer 2: More intuition",
          "answer": "PICAPICA",
          "hexColor": "000000",
          "difficulty": 0,
          "flavortext": "",
          "solution": "",
          "instructions": "",
          "notes": "",
          "sharePermission": "full"
        },
        "status": {
          "type": "accepted",
          "moonickDialogue": "",
          "isAvailableInGacha": true,
          "submitTime": 1727688225435,
          "rarity": "uncommon",
          "cannedHint": "This puzzle is actually about typography, disguised with some musical-sounding notation.",
          "unlockInEdges": [
            {
              "unlockGroupId": "solve__puz144",
              "val": 1
            }
          ],
          "reviewTime": 1727696238350
        }
      }
    },
    "team_puzzle_105__380": {
      "scope": {
        "type": "team_puzzle_105",
        "teamId": "380",
        "puzzle": null
      },
      "state": {
        "confirmedTitles": {},
        "order": [
          "puz19",
          "puz104",
          "puz22",
          "puz69",
          "puz96",
          "puz114",
          "puz94",
          "puz93",
          "puz91",
          "puz103"
        ],
        "enums": {},
        "formFields": {
          "title": "Placeholder Puzzle",
          "answer": "GIBBERISH",
          "hexColor": "FFA500",
          "difficulty": 0,
          "flavortext": "",
          "solution": "",
          "instructions": "",
          "notes": "",
          "sharePermission": "full"
        },
        "status": {
          "type": "accepted",
          "moonickDialogue": "",
          "isAvailableInGacha": true,
          "submitTime": 1727188850821,
          "rarity": "common",
          "cannedHint": "Use the position of each word in the original source.",
          "reviewTime": 1727196908671
        }
      }
    },
    "team_puzzle_105__599": {
      "scope": {
        "type": "team_puzzle_105",
        "teamId": "599",
        "puzzle": null
      },
      "state": {
        "confirmedTitles": {},
        "order": [
          "puz19",
          "puz104",
          "puz22",
          "puz69",
          "puz96",
          "puz114",
          "puz94",
          "puz93",
          "puz91",
          "puz103"
        ],
        "enums": {},
        "formFields": {
          "title": "A Good Star",
          "answer": "JOSHGROBAN",
          "hexColor": "6AAA64",
          "difficulty": 0,
          "flavortext": "",
          "solution": "",
          "instructions": "",
          "notes": "",
          "sharePermission": "full"
        },
        "status": {
          "type": "accepted",
          "moonickDialogue": "",
          "isAvailableInGacha": true,
          "submitTime": 1727135854489,
          "rarity": "common",
          "cannedHint": "Start by solving the lower part as a sudoku to get the green letters, then play Wordle to get the other letters in the middle. There are multiple people associated with the piece of media referenced by the final cluephrase; the flavor suggests to focus on the On-Broadway production.",
          "reviewTime": 1727137406673
        }
      }
    },
    "team_puzzle_105__403": {
      "scope": {
        "type": "team_puzzle_105",
        "teamId": "403",
        "puzzle": null
      },
      "state": {
        "confirmedTitles": {},
        "order": [
          "puz19",
          "puz104",
          "puz22",
          "puz69",
          "puz96",
          "puz114",
          "puz94",
          "puz93",
          "puz91",
          "puz103"
        ],
        "enums": {},
        "formFields": {
          "title": "Our Bright Astronomers",
          "answer": "SEGINUS",
          "hexColor": "A020F0",
          "difficulty": 0,
          "flavortext": "",
          "solution": "",
          "instructions": "",
          "notes": "",
          "sharePermission": "full"
        },
        "status": {
          "type": "accepted",
          "moonickDialogue": "",
          "isAvailableInGacha": true,
          "submitTime": 1727585780920,
          "rarity": "common",
          "cannedHint": "This puzzle is about an astronomical mnemonic that begins with Our Bright Astronomers, which can be used to convert the stars into letters.",
          "reviewTime": 1727606623056
        }
      }
    },
    "team_puzzle_105__1054": {
      "scope": {
        "type": "team_puzzle_105",
        "teamId": "1054",
        "puzzle": null
      },
      "state": {
        "confirmedTitles": {},
        "order": [
          "puz19",
          "puz104",
          "puz22",
          "puz69",
          "puz96",
          "puz114",
          "puz94",
          "puz93",
          "puz91",
          "puz103"
        ],
        "enums": {},
        "formFields": {
          "title": "",
          "answer": "CANDLE",
          "hexColor": "FF8000",
          "difficulty": 0,
          "flavortext": "",
          "solution": "",
          "instructions": "",
          "notes": "",
          "sharePermission": "full"
        },
        "status": {
          "type": "accepted",
          "moonickDialogue": "",
          "isAvailableInGacha": true,
          "submitTime": 1727268220132,
          "rarity": "common",
          "cannedHint": "These are ASCII characters, and the numbers are written in decimal.",
          "reviewTime": 1727269157611
        }
      }
    },
    "team_puzzle_105__197": {
      "scope": {
        "type": "team_puzzle_105",
        "teamId": "197",
        "puzzle": null
      },
      "state": {
        "confirmedTitles": {},
        "order": [
          "puz19",
          "puz104",
          "puz22",
          "puz69",
          "puz96",
          "puz114",
          "puz94",
          "puz93",
          "puz91",
          "puz103"
        ],
        "enums": {},
        "formFields": {
          "title": "What's the answer? IV",
          "answer": "SHELLS",
          "hexColor": "000000",
          "difficulty": 0,
          "flavortext": "",
          "solution": "",
          "instructions": "",
          "notes": "",
          "sharePermission": "full"
        },
        "status": {
          "type": "accepted",
          "moonickDialogue": "",
          "isAvailableInGacha": true,
          "submitTime": 1727466650373,
          "rarity": "common",
          "cannedHint": "This puzzle continues a series of other puzzles in this hunt. You'll need to speak the answer into the submission box.",
          "unlockInEdges": [
            {
              "unlockGroupId": "whats",
              "val": 3
            }
          ],
          "reviewTime": 1727467914904
        }
      }
    },
    "team_puzzle_105__617": {
      "scope": {
        "type": "team_puzzle_105",
        "teamId": "617",
        "puzzle": null
      },
      "state": {
        "confirmedTitles": {},
        "order": [
          "puz19",
          "puz104",
          "puz22",
          "puz69",
          "puz96",
          "puz114",
          "puz94",
          "puz93",
          "puz91",
          "puz103"
        ],
        "enums": {},
        "formFields": {
          "title": "C/ROS/SWORD",
          "answer": "TURNTABLE",
          "hexColor": "808080",
          "difficulty": 0,
          "flavortext": "",
          "solution": "",
          "instructions": "",
          "notes": "",
          "sharePermission": "full"
        },
        "status": {
          "type": "accepted",
          "moonickDialogue": "",
          "isAvailableInGacha": true,
          "submitTime": 1727125069575,
          "rarity": "common",
          "cannedHint": "The grid is not symmetric.",
          "unlockInEdges": [
            {
              "unlockGroupId": "crossword",
              "val": 1,
              "isUnlockOnly": true
            }
          ],
          "reviewTime": 1727128995645
        }
      }
    },
    "team_puzzle_105__37": {
      "scope": {
        "type": "team_puzzle_105",
        "teamId": "37",
        "puzzle": null
      },
      "state": {
        "confirmedTitles": {},
        "order": [
          "puz19",
          "puz104",
          "puz22",
          "puz69",
          "puz96",
          "puz114",
          "puz94",
          "puz93",
          "puz91",
          "puz103"
        ],
        "enums": {},
        "formFields": {
          "title": "Positive Integers",
          "answer": "GRAHAMSNUMBER",
          "hexColor": "042069",
          "difficulty": 0,
          "flavortext": "",
          "solution": "",
          "instructions": "",
          "notes": "",
          "sharePermission": "full"
        },
        "status": {
          "type": "accepted",
          "moonickDialogue": "",
          "isAvailableInGacha": true,
          "submitTime": 1727134723945,
          "rarity": "epic",
          "cannedHint": "The initial message is subtly different from the original puzzle. Make sure to follow the naming rules on Wiktionary.",
          "unlockInEdges": [
            {
              "unlockGroupId": "titin",
              "val": 1
            },
            {
              "unlockGroupId": "celestials",
              "val": 7
            }
          ],
          "reviewTime": 1727171836191
        }
      }
    },
    "team_puzzle_105__647": {
      "scope": {
        "type": "team_puzzle_105",
        "teamId": "647",
        "puzzle": null
      },
      "state": {
        "confirmedTitles": {},
        "order": [
          "puz19",
          "puz104",
          "puz22",
          "puz69",
          "puz96",
          "puz114",
          "puz94",
          "puz93",
          "puz91",
          "puz103"
        ],
        "enums": {},
        "formFields": {
          "title": "",
          "answer": "CLAP",
          "hexColor": "FFFFFF",
          "difficulty": 0,
          "flavortext": "",
          "solution": "",
          "instructions": "",
          "notes": "",
          "sharePermission": "full"
        },
        "status": {
          "type": "accepted",
          "moonickDialogue": "",
          "isAvailableInGacha": true,
          "submitTime": 1727409031207,
          "rarity": "common",
          "cannedHint": "The answers contain a common substring, which is an abbreviation related to the theme of this puzzle.",
          "reviewTime": 1727411927101
        }
      }
    },
    "team_puzzle_105__368": {
      "scope": {
        "type": "team_puzzle_105",
        "teamId": "368",
        "puzzle": null
      },
      "state": {
        "confirmedTitles": {},
        "order": [
          "puz19",
          "puz104",
          "puz22",
          "puz69",
          "puz96",
          "puz114",
          "puz94",
          "puz93",
          "puz91",
          "puz103"
        ],
        "enums": {},
        "formFields": {
          "title": "Clue with Answer",
          "answer": "FOUR",
          "hexColor": "444444",
          "difficulty": 0,
          "flavortext": "",
          "solution": "",
          "instructions": "",
          "notes": "",
          "sharePermission": "full"
        },
        "status": {
          "type": "accepted",
          "moonickDialogue": "",
          "isAvailableInGacha": true,
          "submitTime": 1727327128101,
          "rarity": "common",
          "cannedHint": "This is a crossword clue with an enumeration, except that the enumeration (i.e. length of the answer) is the answer to this puzzle.",
          "reviewTime": 1727335667787
        }
      }
    },
    "team_puzzle_105__755": {
      "scope": {
        "type": "team_puzzle_105",
        "teamId": "755",
        "puzzle": null
      },
      "state": {
        "confirmedTitles": {},
        "order": [
          "puz19",
          "puz104",
          "puz22",
          "puz69",
          "puz96",
          "puz114",
          "puz94",
          "puz93",
          "puz91",
          "puz103"
        ],
        "enums": {},
        "formFields": {
          "title": "Two-By-Five-By-One",
          "answer": "STELLE",
          "hexColor": "FF0000",
          "difficulty": 0,
          "flavortext": "",
          "solution": "",
          "instructions": "",
          "notes": "",
          "sharePermission": "full"
        },
        "status": {
          "type": "accepted",
          "moonickDialogue": "",
          "isAvailableInGacha": true,
          "submitTime": 1727665284489,
          "rarity": "uncommon",
          "cannedHint": "The answers to the clues can be paired up. Write letters on each segment, going from the smaller word to the larger one.",
          "unlockInEdges": [
            {
              "unlockGroupId": "metameta",
              "val": 1
            }
          ],
          "reviewTime": 1727666325156
        }
      }
    },
    "team_puzzle_105__490": {
      "scope": {
        "type": "team_puzzle_105",
        "teamId": "490",
        "puzzle": null
      },
      "state": {
        "confirmedTitles": {},
        "order": [
          "puz19",
          "puz104",
          "puz22",
          "puz69",
          "puz96",
          "puz114",
          "puz94",
          "puz93",
          "puz91",
          "puz103"
        ],
        "enums": {},
        "formFields": {
          "title": "Oh, What a Night",
          "answer": "STEELERS",
          "hexColor": "000080",
          "difficulty": 0,
          "flavortext": "",
          "solution": "",
          "instructions": "",
          "notes": "",
          "sharePermission": "full"
        },
        "status": {
          "type": "accepted",
          "moonickDialogue": "",
          "isAvailableInGacha": true,
          "submitTime": 1727165133441,
          "rarity": "common",
          "cannedHint": "The poem has been adapted to refer to a notable day. Finally, take a look at the scores of that these teams achieved.",
          "reviewTime": 1727183146733
        }
      }
    },
    "team_puzzle_105__25": {
      "scope": {
        "type": "team_puzzle_105",
        "teamId": "25",
        "puzzle": null
      },
      "state": {
        "confirmedTitles": {},
        "order": [
          "puz19",
          "puz104",
          "puz22",
          "puz69",
          "puz96",
          "puz114",
          "puz94",
          "puz93",
          "puz91",
          "puz103"
        ],
        "enums": {},
        "formFields": {
          "title": "AB = C",
          "answer": "ORDERLY",
          "hexColor": "000000",
          "difficulty": 0,
          "flavortext": "",
          "solution": "",
          "instructions": "",
          "notes": "",
          "sharePermission": "full"
        },
        "status": {
          "type": "accepted",
          "moonickDialogue": "",
          "isAvailableInGacha": true,
          "submitTime": 1727334866087,
          "rarity": "common",
          "cannedHint": "FI = O, and so on.",
          "unlockInEdges": [
            {
              "unlockGroupId": "solve__puz89",
              "val": 1
            }
          ],
          "reviewTime": 1727337163500
        }
      }
    },
    "team_puzzle_105__308": {
      "scope": {
        "type": "team_puzzle_105",
        "teamId": "308",
        "puzzle": null
      },
      "state": {
        "confirmedTitles": {},
        "order": [
          "puz19",
          "puz104",
          "puz22",
          "puz69",
          "puz96",
          "puz114",
          "puz94",
          "puz93",
          "puz91",
          "puz103"
        ],
        "enums": {},
        "formFields": {
          "title": "A Clueless Crossword by ...",
          "answer": "ZITMEN",
          "hexColor": "8C7292",
          "difficulty": 0,
          "flavortext": "",
          "solution": "",
          "instructions": "",
          "notes": "",
          "sharePermission": "full"
        },
        "status": {
          "type": "accepted",
          "moonickDialogue": "",
          "isAvailableInGacha": true,
          "submitTime": 1727338636753,
          "rarity": "common",
          "cannedHint": "Fill in the team members in all caps, except that one of them fell sideways.",
          "reviewTime": 1727342963615
        }
      }
    },
    "team_puzzle_105__172": {
      "scope": {
        "type": "team_puzzle_105",
        "teamId": "172",
        "puzzle": null
      },
      "state": {
        "confirmedTitles": {},
        "order": [
          "puz19",
          "puz104",
          "puz22",
          "puz69",
          "puz96",
          "puz114",
          "puz94",
          "puz93",
          "puz91",
          "puz103"
        ],
        "enums": {},
        "formFields": {
          "title": "Find the Answer IX",
          "answer": "OVERCOMER",
          "hexColor": "FFDCC2",
          "difficulty": 0,
          "flavortext": "",
          "solution": "",
          "instructions": "",
          "notes": "",
          "sharePermission": "full"
        },
        "status": {
          "type": "accepted",
          "moonickDialogue": "",
          "isAvailableInGacha": true,
          "submitTime": 1727199538125,
          "rarity": "common",
          "cannedHint": "This should look very similar to a link on the same page, but with all the letters replaced with Xs.",
          "unlockInEdges": [
            {
              "unlockGroupId": "find",
              "val": 8
            }
          ],
          "reviewTime": 1727200133414
        }
      }
    },
    "team_puzzle_105__791": {
      "scope": {
        "type": "team_puzzle_105",
        "teamId": "791",
        "puzzle": null
      },
      "state": {
        "confirmedTitles": {},
        "order": [
          "puz19",
          "puz104",
          "puz22",
          "puz69",
          "puz96",
          "puz114",
          "puz94",
          "puz93",
          "puz91",
          "puz103"
        ],
        "enums": {},
        "formFields": {
          "title": "The Math Ain't Mathing",
          "answer": "CUE",
          "hexColor": "EDE4C2",
          "difficulty": 0,
          "flavortext": "",
          "solution": "",
          "instructions": "",
          "notes": "",
          "sharePermission": "full"
        },
        "status": {
          "type": "accepted",
          "moonickDialogue": "",
          "isAvailableInGacha": true,
          "submitTime": 1727501912471,
          "rarity": "common",
          "cannedHint": "Each line below is a well-known meme or reference. You do not need to use the image on top at all to solve the puzzle; it's just the Math Lady meme.",
          "reviewTime": 1727511274872
        }
      }
    },
    "team_puzzle_105__186": {
      "scope": {
        "type": "team_puzzle_105",
        "teamId": "186",
        "puzzle": null
      },
      "state": {
        "confirmedTitles": {},
        "order": [
          "puz19",
          "puz104",
          "puz22",
          "puz69",
          "puz96",
          "puz114",
          "puz94",
          "puz93",
          "puz91",
          "puz103"
        ],
        "enums": {},
        "formFields": {
          "title": "A Controllable Word Puzzle with a 3 Letter Answer",
          "answer": "AIR",
          "hexColor": "1F1E33",
          "difficulty": 0,
          "flavortext": "",
          "solution": "",
          "instructions": "",
          "notes": "",
          "sharePermission": "full"
        },
        "status": {
          "type": "accepted",
          "moonickDialogue": "",
          "isAvailableInGacha": true,
          "submitTime": 1727361980075,
          "rarity": "common",
          "cannedHint": "The image depicts three operations in Microsoft Word.",
          "reviewTime": 1727373872287
        }
      }
    },
    "team_puzzle_105__267": {
      "scope": {
        "type": "team_puzzle_105",
        "teamId": "267",
        "puzzle": null
      },
      "state": {
        "confirmedTitles": {},
        "order": [
          "puz19",
          "puz104",
          "puz22",
          "puz69",
          "puz96",
          "puz114",
          "puz94",
          "puz93",
          "puz91",
          "puz103"
        ],
        "enums": {},
        "formFields": {
          "title": "CRO/SSW ORD",
          "answer": "EXPANSION",
          "hexColor": "FFA500",
          "difficulty": 0,
          "flavortext": "",
          "solution": "",
          "instructions": "",
          "notes": "",
          "sharePermission": "full"
        },
        "status": {
          "type": "accepted",
          "moonickDialogue": "",
          "isAvailableInGacha": true,
          "submitTime": 1727398998922,
          "rarity": "common",
          "cannedHint": "The grid is symmetric and looks like a worm.",
          "unlockInEdges": [
            {
              "unlockGroupId": "crossword",
              "val": 1,
              "isUnlockOnly": true
            }
          ],
          "reviewTime": 1727399545990
        }
      }
    },
    "team_puzzle_105__87": {
      "scope": {
        "type": "team_puzzle_105",
        "teamId": "87",
        "puzzle": null
      },
      "state": {
        "confirmedTitles": {},
        "order": [
          "puz19",
          "puz104",
          "puz22",
          "puz69",
          "puz96",
          "puz114",
          "puz94",
          "puz93",
          "puz91",
          "puz103"
        ],
        "enums": {},
        "formFields": {
          "title": "Bla(n)c(k) Squares",
          "answer": "GENE / SLOG",
          "hexColor": "000000",
          "difficulty": 0,
          "flavortext": "",
          "solution": "",
          "instructions": "",
          "notes": "",
          "sharePermission": "full"
        },
        "status": {
          "type": "accepted",
          "moonickDialogue": "",
          "isAvailableInGacha": true,
          "submitTime": 1727587986187,
          "rarity": "uncommon",
          "cannedHint": "Omitting either of the parenthesized letters in the title clues a different answer to this puzzle. Note that one of the possible titles has a word that is not in English.",
          "unlockInEdges": [
            {
              "unlockGroupId": "blank",
              "val": 3,
              "isUnlockOnly": true
            }
          ],
          "reviewTime": 1727606001339
        }
      }
    },
    "team_puzzle_105__23": {
      "scope": {
        "type": "team_puzzle_105",
        "teamId": "23",
        "puzzle": null
      },
      "state": {
        "confirmedTitles": {},
        "order": [
          "puz19",
          "puz104",
          "puz22",
          "puz69",
          "puz96",
          "puz114",
          "puz94",
          "puz93",
          "puz91",
          "puz103"
        ],
        "enums": {},
        "formFields": {
          "title": "Extremely Fast Puzzle",
          "answer": "WEAPONS",
          "hexColor": "FFD1DC",
          "difficulty": 0,
          "flavortext": "",
          "solution": "",
          "instructions": "",
          "notes": "",
          "sharePermission": "full"
        },
        "status": {
          "type": "accepted",
          "moonickDialogue": "",
          "isAvailableInGacha": true,
          "submitTime": 1727342273669,
          "rarity": "common",
          "cannedHint": "These are excerpts from songs by the same \\"fast\\" artist, and so is the cluephrase.",
          "reviewTime": 1727344805119
        }
      }
    },
    "team_puzzle_105__296": {
      "scope": {
        "type": "team_puzzle_105",
        "teamId": "296",
        "puzzle": null
      },
      "state": {
        "confirmedTitles": {},
        "order": [
          "puz19",
          "puz104",
          "puz22",
          "puz69",
          "puz96",
          "puz114",
          "puz94",
          "puz93",
          "puz91",
          "puz103"
        ],
        "enums": {},
        "formFields": {
          "title": "Unnamed Puzzle",
          "answer": "RETITLE",
          "hexColor": "BF40BF",
          "difficulty": 0,
          "flavortext": "",
          "solution": "",
          "instructions": "",
          "notes": "",
          "sharePermission": "full"
        },
        "status": {
          "type": "accepted",
          "moonickDialogue": "",
          "isAvailableInGacha": true,
          "submitTime": 1727240832719,
          "rarity": "common",
          "cannedHint": "Compared to the answers on the left, the answers on the right are unNAMEd.",
          "reviewTime": 1727241367284
        }
      }
    },
    "team_puzzle_105__361": {
      "scope": {
        "type": "team_puzzle_105",
        "teamId": "361",
        "puzzle": null
      },
      "state": {
        "confirmedTitles": {},
        "order": [
          "puz19",
          "puz104",
          "puz22",
          "puz69",
          "puz96",
          "puz114",
          "puz94",
          "puz93",
          "puz91",
          "puz103"
        ],
        "enums": {},
        "formFields": {
          "title": "Lucia Tan Travels",
          "answer": "CHIME",
          "hexColor": "4E3561",
          "difficulty": 0,
          "flavortext": "",
          "solution": "",
          "instructions": "",
          "notes": "",
          "sharePermission": "full"
        },
        "status": {
          "type": "accepted",
          "moonickDialogue": "",
          "isAvailableInGacha": true,
          "submitTime": 1727317704682,
          "rarity": "uncommon",
          "cannedHint": "You'll want to transform the country flags according to the story. For extraction, anagramming \\"Lucia Tan\\" is helpful.",
          "reviewTime": 1727338004402
        }
      }
    },
    "team_puzzle_105__457": {
      "scope": {
        "type": "team_puzzle_105",
        "teamId": "457",
        "puzzle": null
      },
      "state": {
        "confirmedTitles": {},
        "order": [
          "puz19",
          "puz104",
          "puz22",
          "puz69",
          "puz96",
          "puz114",
          "puz94",
          "puz93",
          "puz91",
          "puz103"
        ],
        "enums": {},
        "formFields": {
          "title": "Named Star 120",
          "answer": "STARDUST",
          "hexColor": "E4272C",
          "difficulty": 0,
          "flavortext": "",
          "solution": "",
          "instructions": "",
          "notes": "",
          "sharePermission": "full"
        },
        "status": {
          "type": "accepted",
          "moonickDialogue": "",
          "isAvailableInGacha": true,
          "submitTime": 1727591755674,
          "rarity": "common",
          "cannedHint": "Pokémon have a chance to hold an item when caught in the wild. The stated probability is true from Generations III onward.",
          "reviewTime": 1727640574813
        }
      }
    },
    "team_puzzle_105__489": {
      "scope": {
        "type": "team_puzzle_105",
        "teamId": "489",
        "puzzle": null
      },
      "state": {
        "confirmedTitles": {},
        "order": [
          "puz19",
          "puz104",
          "puz22",
          "puz69",
          "puz96",
          "puz114",
          "puz94",
          "puz93",
          "puz91",
          "puz103"
        ],
        "enums": {},
        "formFields": {
          "title": "Minor Puzzle 2",
          "answer": "LINEAR",
          "hexColor": "000000",
          "difficulty": 0,
          "flavortext": "",
          "solution": "",
          "instructions": "",
          "notes": "",
          "sharePermission": "full"
        },
        "status": {
          "type": "accepted",
          "moonickDialogue": "",
          "isAvailableInGacha": true,
          "submitTime": 1727278751666,
          "rarity": "common",
          "cannedHint": "You'll need to use the same part of the same song again.",
          "unlockInEdges": [
            {
              "unlockGroupId": "solve__puz153",
              "val": 1
            }
          ],
          "reviewTime": 1727288315105
        }
      }
    },
    "team_puzzle_105__615": {
      "scope": {
        "type": "team_puzzle_105",
        "teamId": "615",
        "puzzle": null
      },
      "state": {
        "confirmedTitles": {},
        "order": [
          "puz19",
          "puz104",
          "puz22",
          "puz69",
          "puz96",
          "puz114",
          "puz94",
          "puz93",
          "puz91",
          "puz103"
        ],
        "enums": {},
        "formFields": {
          "title": "↖Find the Answer",
          "answer": "STAR",
          "hexColor": "000000",
          "difficulty": 0,
          "flavortext": "",
          "solution": "",
          "instructions": "",
          "notes": "",
          "sharePermission": "full"
        },
        "status": {
          "type": "accepted",
          "moonickDialogue": "",
          "isAvailableInGacha": true,
          "submitTime": 1727331480503,
          "rarity": "common",
          "cannedHint": "The arrow in the title indicates where to look. Everything you need is between 🏕️ and 🔊.",
          "unlockInEdges": [
            {
              "unlockGroupId": "find",
              "val": 8,
              "isUnlockOnly": true
            }
          ],
          "reviewTime": 1727335036503
        }
      }
    },
    "team_puzzle_105__217": {
      "scope": {
        "type": "team_puzzle_105",
        "teamId": "217",
        "puzzle": null
      },
      "state": {
        "confirmedTitles": {},
        "order": [
          "puz19",
          "puz104",
          "puz22",
          "puz69",
          "puz96",
          "puz114",
          "puz94",
          "puz93",
          "puz91",
          "puz103"
        ],
        "enums": {},
        "formFields": {
          "title": "",
          "answer": "HORIZON",
          "hexColor": "123456",
          "difficulty": 0,
          "flavortext": "",
          "solution": "",
          "instructions": "",
          "notes": "",
          "sharePermission": "full"
        },
        "status": {
          "type": "accepted",
          "moonickDialogue": "",
          "isAvailableInGacha": true,
          "submitTime": 1727237343077,
          "rarity": "common",
          "cannedHint": "Rotations are important for this one.",
          "reviewTime": 1727237822770
        }
      }
    },
    "team_puzzle_105__204": {
      "scope": {
        "type": "team_puzzle_105",
        "teamId": "204",
        "puzzle": null
      },
      "state": {
        "confirmedTitles": {},
        "order": [
          "puz19",
          "puz104",
          "puz22",
          "puz69",
          "puz96",
          "puz114",
          "puz94",
          "puz93",
          "puz91",
          "puz103"
        ],
        "enums": {},
        "formFields": {
          "title": "Bridging The Gap",
          "answer": "CONNECT",
          "hexColor": "191970",
          "difficulty": 0,
          "flavortext": "",
          "solution": "",
          "instructions": "",
          "notes": "",
          "sharePermission": "full"
        },
        "status": {
          "type": "accepted",
          "moonickDialogue": "",
          "isAvailableInGacha": true,
          "submitTime": 1727385382400,
          "rarity": "common",
          "cannedHint": "Add something in between each pair to bridge the gap between the two-letter codes.",
          "reviewTime": 1727387858066
        }
      }
    },
    "team_puzzle_105__531": {
      "scope": {
        "type": "team_puzzle_105",
        "teamId": "531",
        "puzzle": null
      },
      "state": {
        "confirmedTitles": {},
        "order": [
          "puz19",
          "puz104",
          "puz22",
          "puz69",
          "puz96",
          "puz114",
          "puz94",
          "puz93",
          "puz91",
          "puz103"
        ],
        "enums": {},
        "formFields": {
          "title": "Is this...?",
          "answer": "HUNTGOINGTOINCLUDEACARDGAME",
          "hexColor": "000000",
          "difficulty": 0,
          "flavortext": "",
          "solution": "",
          "instructions": "",
          "notes": "",
          "sharePermission": "full"
        },
        "status": {
          "type": "accepted",
          "moonickDialogue": "",
          "isAvailableInGacha": true,
          "submitTime": 1727268066130,
          "rarity": "common",
          "cannedHint": "This puzzle references a different page in this hunt's website.",
          "reviewTime": 1727268317976
        }
      }
    },
    "team_puzzle_105__482": {
      "scope": {
        "type": "team_puzzle_105",
        "teamId": "482",
        "puzzle": null
      },
      "state": {
        "confirmedTitles": {},
        "order": [
          "puz19",
          "puz104",
          "puz22",
          "puz69",
          "puz96",
          "puz114",
          "puz94",
          "puz93",
          "puz91",
          "puz103"
        ],
        "enums": {},
        "formFields": {
          "title": "NNNNAAAAMMMMEEEESSSS",
          "answer": "CUEBALL",
          "hexColor": "FF0000",
          "difficulty": 0,
          "flavortext": "",
          "solution": "",
          "instructions": "",
          "notes": "",
          "sharePermission": "full"
        },
        "status": {
          "type": "accepted",
          "moonickDialogue": "",
          "isAvailableInGacha": true,
          "submitTime": 1727549977983,
          "rarity": "common",
          "cannedHint": "Consider the long form names of these things.",
          "reviewTime": 1727557177125
        }
      }
    },
    "team_puzzle_105__294": {
      "scope": {
        "type": "team_puzzle_105",
        "teamId": "294",
        "puzzle": null
      },
      "state": {
        "confirmedTitles": {},
        "order": [
          "puz19",
          "puz104",
          "puz22",
          "puz69",
          "puz96",
          "puz114",
          "puz94",
          "puz93",
          "puz91",
          "puz103"
        ],
        "enums": {},
        "formFields": {
          "title": "",
          "answer": "COLOR",
          "hexColor": "FF7F00",
          "difficulty": 0,
          "flavortext": "",
          "solution": "",
          "instructions": "",
          "notes": "",
          "sharePermission": "full"
        },
        "status": {
          "type": "accepted",
          "moonickDialogue": "",
          "isAvailableInGacha": true,
          "submitTime": 1727450178803,
          "rarity": "common",
          "cannedHint": "These stars are from our hunt. You may find the camp or your team page helpful here.",
          "reviewTime": 1727464854245
        }
      }
    },
    "team_puzzle_105__748": {
      "scope": {
        "type": "team_puzzle_105",
        "teamId": "748",
        "puzzle": null
      },
      "state": {
        "confirmedTitles": {},
        "order": [
          "puz19",
          "puz104",
          "puz22",
          "puz69",
          "puz96",
          "puz114",
          "puz94",
          "puz93",
          "puz91",
          "puz103"
        ],
        "enums": {},
        "formFields": {
          "title": "Alien Changes",
          "answer": "WARCRIME",
          "hexColor": "123456",
          "difficulty": 0,
          "flavortext": "",
          "solution": "",
          "instructions": "",
          "notes": "",
          "sharePermission": "full"
        },
        "status": {
          "type": "accepted",
          "moonickDialogue": "",
          "isAvailableInGacha": true,
          "submitTime": 1727420577063,
          "rarity": "common",
          "cannedHint": "This is about the covers of a children's book series that show humans turning into animals.",
          "reviewTime": 1727420821196
        }
      }
    },
    "team_puzzle_105__114": {
      "scope": {
        "type": "team_puzzle_105",
        "teamId": "114",
        "puzzle": null
      },
      "state": {
        "confirmedTitles": {},
        "order": [
          "puz19",
          "puz104",
          "puz22",
          "puz69",
          "puz96",
          "puz114",
          "puz94",
          "puz93",
          "puz91",
          "puz103"
        ],
        "enums": {},
        "formFields": {
          "title": "Gator Idol",
          "answer": "TEAMATES",
          "hexColor": "F5DBB6",
          "difficulty": 0,
          "flavortext": "",
          "solution": "",
          "instructions": "",
          "notes": "",
          "sharePermission": "full"
        },
        "status": {
          "type": "accepted",
          "moonickDialogue": "",
          "isAvailableInGacha": true,
          "submitTime": 1727632448390,
          "rarity": "uncommon",
          "cannedHint": "Each line describes a group of fans of one of the talents of Hololive English.",
          "unlockInEdges": [
            {
              "unlockGroupId": "solve__olive",
              "val": 1
            }
          ],
          "reviewTime": 1727649310132
        }
      }
    },
    "team_puzzle_105__477": {
      "scope": {
        "type": "team_puzzle_105",
        "teamId": "477",
        "puzzle": null
      },
      "state": {
        "confirmedTitles": {},
        "order": [
          "puz19",
          "puz104",
          "puz22",
          "puz69",
          "puz96",
          "puz114",
          "puz94",
          "puz93",
          "puz91",
          "puz103"
        ],
        "enums": {},
        "formFields": {
          "title": "Top Ten",
          "answer": "ROOTED",
          "hexColor": "FFFFFF",
          "difficulty": 0,
          "flavortext": "",
          "solution": "",
          "instructions": "",
          "notes": "",
          "sharePermission": "full"
        },
        "status": {
          "type": "accepted",
          "moonickDialogue": "",
          "isAvailableInGacha": true,
          "submitTime": 1727313904369,
          "rarity": "uncommon",
          "cannedHint": "These are \\"Top Ten\\" Line Rider tracks.",
          "reviewTime": 1727357397169
        }
      }
    },
    "team_puzzle_105__719": {
      "scope": {
        "type": "team_puzzle_105",
        "teamId": "719",
        "puzzle": null
      },
      "state": {
        "confirmedTitles": {},
        "order": [
          "puz19",
          "puz104",
          "puz22",
          "puz69",
          "puz96",
          "puz114",
          "puz94",
          "puz93",
          "puz91",
          "puz103"
        ],
        "enums": {},
        "formFields": {
          "title": "Surrounding States",
          "answer": "SACRAMENTO",
          "hexColor": "0000FF",
          "difficulty": 0,
          "flavortext": "",
          "solution": "",
          "instructions": "",
          "notes": "",
          "sharePermission": "full"
        },
        "status": {
          "type": "accepted",
          "moonickDialogue": "",
          "isAvailableInGacha": true,
          "submitTime": 1727394889723,
          "rarity": "uncommon",
          "cannedHint": "Put each answer on the right into a state abbreviation to get an answer on the left. Once you're done, the first sentence of the flavortext hints at how to extract.",
          "reviewTime": 1727397823709
        }
      }
    },
    "team_puzzle_105__305": {
      "scope": {
        "type": "team_puzzle_105",
        "teamId": "305",
        "puzzle": null
      },
      "state": {
        "confirmedTitles": {},
        "order": [
          "puz19",
          "puz104",
          "puz22",
          "puz69",
          "puz96",
          "puz114",
          "puz94",
          "puz93",
          "puz91",
          "puz103"
        ],
        "enums": {},
        "formFields": {
          "title": "Artistic and Factual",
          "answer": "HUNGER",
          "hexColor": "7ECC31",
          "difficulty": 0,
          "flavortext": "",
          "solution": "",
          "instructions": "",
          "notes": "",
          "sharePermission": "full"
        },
        "status": {
          "type": "accepted",
          "moonickDialogue": "",
          "isAvailableInGacha": true,
          "submitTime": 1727515207409,
          "rarity": "common",
          "cannedHint": "The arrow points to some important things that the team that submitted this puzzle received in this hunt. You'll want to use the ordering there, instead of the ordering on their team page.",
          "reviewTime": 1727520084125
        }
      }
    },
    "team_puzzle_105__210": {
      "scope": {
        "type": "team_puzzle_105",
        "teamId": "210",
        "puzzle": null
      },
      "state": {
        "confirmedTitles": {},
        "order": [
          "puz19",
          "puz104",
          "puz22",
          "puz69",
          "puz96",
          "puz114",
          "puz94",
          "puz93",
          "puz91",
          "puz103"
        ],
        "enums": {},
        "formFields": {
          "title": "Four-By-Four",
          "answer": "WRANGLER",
          "hexColor": "3A2596",
          "difficulty": 0,
          "flavortext": "",
          "solution": "",
          "instructions": "",
          "notes": "",
          "sharePermission": "full"
        },
        "status": {
          "type": "accepted",
          "moonickDialogue": "",
          "isAvailableInGacha": true,
          "submitTime": 1727643039169,
          "rarity": "uncommon",
          "cannedHint": "The first clue solves to AMEBA and should be placed in the grid starting from the top-left. The last letter will have to go out of the box.",
          "unlockInEdges": [
            {
              "unlockGroupId": "five",
              "val": 1
            }
          ],
          "reviewTime": 1727644074953
        }
      }
    },
    "team_puzzle_105__36": {
      "scope": {
        "type": "team_puzzle_105",
        "teamId": "36",
        "puzzle": null
      },
      "state": {
        "confirmedTitles": {},
        "order": [
          "puz19",
          "puz104",
          "puz22",
          "puz69",
          "puz96",
          "puz114",
          "puz94",
          "puz93",
          "puz91",
          "puz103"
        ],
        "enums": {},
        "formFields": {
          "title": "Let's Sausage!",
          "answer": "RUFFALOS",
          "hexColor": "FFAD90",
          "difficulty": 0,
          "flavortext": "",
          "solution": "",
          "instructions": "",
          "notes": "",
          "sharePermission": "full"
        },
        "status": {
          "type": "accepted",
          "moonickDialogue": "",
          "isAvailableInGacha": true,
          "submitTime": 1727441438553,
          "rarity": "rare",
          "cannedHint": "https://www.youtube.com/watch?v=v6YJd0Swv3w&start=123",
          "reviewTime": 1727517104681
        }
      }
    },
    "team_puzzle_105__187": {
      "scope": {
        "type": "team_puzzle_105",
        "teamId": "187",
        "puzzle": null
      },
      "state": {
        "confirmedTitles": {},
        "order": [
          "puz19",
          "puz104",
          "puz22",
          "puz69",
          "puz96",
          "puz114",
          "puz94",
          "puz93",
          "puz91",
          "puz103"
        ],
        "enums": {},
        "formFields": {
          "title": "6+11, 6+501, 6+101",
          "answer": "LIVED",
          "hexColor": "C0FFEE",
          "difficulty": 0,
          "flavortext": "",
          "solution": "",
          "instructions": "",
          "notes": "",
          "sharePermission": "full"
        },
        "status": {
          "type": "accepted",
          "moonickDialogue": "",
          "isAvailableInGacha": true,
          "submitTime": 1727575810610,
          "rarity": "common",
          "cannedHint": "This refers to a phrase by Julius Caesar. Interpret the words as the kind of numbers Caesar would have used.",
          "reviewTime": 1727576020511
        }
      }
    },
    "team_puzzle_105__278": {
      "scope": {
        "type": "team_puzzle_105",
        "teamId": "278",
        "puzzle": null
      },
      "state": {
        "confirmedTitles": {},
        "order": [
          "puz19",
          "puz104",
          "puz22",
          "puz69",
          "puz96",
          "puz114",
          "puz94",
          "puz93",
          "puz91",
          "puz103"
        ],
        "enums": {},
        "formFields": {
          "title": "Aye Be Sea, EZ S 123",
          "answer": "BEAUTYANDEXCELLENCY",
          "hexColor": "000000",
          "difficulty": 0,
          "flavortext": "",
          "solution": "",
          "instructions": "",
          "notes": "",
          "sharePermission": "full"
        },
        "status": {
          "type": "accepted",
          "moonickDialogue": "",
          "isAvailableInGacha": true,
          "submitTime": 1727604825807,
          "rarity": "uncommon",
          "cannedHint": "Sound out the letters; they should sound like words.",
          "reviewTime": 1727606061299
        }
      }
    },
    "team_puzzle_105__35": {
      "scope": {
        "type": "team_puzzle_105",
        "teamId": "35",
        "puzzle": null
      },
      "state": {
        "confirmedTitles": {},
        "order": [
          "puz19",
          "puz104",
          "puz22",
          "puz69",
          "puz96",
          "puz114",
          "puz94",
          "puz93",
          "puz91",
          "puz103"
        ],
        "enums": {},
        "formFields": {
          "title": "2x2",
          "answer": "LOSS",
          "hexColor": "22B22B",
          "difficulty": 0,
          "flavortext": "",
          "solution": "",
          "instructions": "",
          "notes": "",
          "sharePermission": "full"
        },
        "status": {
          "type": "accepted",
          "moonickDialogue": "",
          "isAvailableInGacha": true,
          "submitTime": 1727640489435,
          "rarity": "common",
          "cannedHint": "\\"Two By Two\\" is a song from a particular musical; a portion of the lyrics is depicted in this grid.",
          "reviewTime": 1727652055586
        }
      }
    },
    "team_puzzle_105__869": {
      "scope": {
        "type": "team_puzzle_105",
        "teamId": "869",
        "puzzle": null
      },
      "state": {
        "confirmedTitles": {},
        "order": [
          "puz19",
          "puz104",
          "puz22",
          "puz69",
          "puz96",
          "puz114",
          "puz94",
          "puz93",
          "puz91",
          "puz103"
        ],
        "enums": {},
        "formFields": {
          "title": "What's My Name?",
          "answer": "HUMMUS",
          "hexColor": "826B4B",
          "difficulty": 0,
          "flavortext": "",
          "solution": "",
          "instructions": "",
          "notes": "",
          "sharePermission": "full"
        },
        "status": {
          "type": "accepted",
          "moonickDialogue": "",
          "isAvailableInGacha": true,
          "submitTime": 1727602010004,
          "rarity": "common",
          "cannedHint": "Refer to the submitting team's name for the answer.",
          "reviewTime": 1727603449497
        }
      }
    },
    "team_puzzle_105__465": {
      "scope": {
        "type": "team_puzzle_105",
        "teamId": "465",
        "puzzle": null
      },
      "state": {
        "confirmedTitles": {},
        "order": [
          "puz19",
          "puz104",
          "puz22",
          "puz69",
          "puz96",
          "puz114",
          "puz94",
          "puz93",
          "puz91",
          "puz103"
        ],
        "enums": {},
        "formFields": {
          "title": "Centric",
          "answer": "REVIVER",
          "hexColor": "66CCFF",
          "difficulty": 0,
          "flavortext": "",
          "solution": "",
          "instructions": "",
          "notes": "",
          "sharePermission": "full"
        },
        "status": {
          "type": "accepted",
          "moonickDialogue": "",
          "isAvailableInGacha": true,
          "submitTime": 1727575355951,
          "rarity": "uncommon",
          "cannedHint": "The black letters clue why \\"Z\\" is the midpoint of \\"A\\" and \\"s\\". Find the other midpoints.",
          "reviewTime": 1727582238327
        }
      }
    },
    "team_puzzle_105__643": {
      "scope": {
        "type": "team_puzzle_105",
        "teamId": "643",
        "puzzle": null
      },
      "state": {
        "confirmedTitles": {},
        "order": [
          "puz19",
          "puz104",
          "puz22",
          "puz69",
          "puz96",
          "puz114",
          "puz94",
          "puz93",
          "puz91",
          "puz103"
        ],
        "enums": {},
        "formFields": {
          "title": "",
          "answer": "BLACK",
          "hexColor": "000000",
          "difficulty": 0,
          "flavortext": "",
          "solution": "",
          "instructions": "",
          "notes": "",
          "sharePermission": "full"
        },
        "status": {
          "type": "accepted",
          "moonickDialogue": "",
          "isAvailableInGacha": true,
          "submitTime": 1727409495366,
          "rarity": "uncommon",
          "cannedHint": "Abbreviations for a common set of seven things go in the top 7 lines. The bottom line is how you might refer to all seven things collectively. The red line is only used for extraction.",
          "reviewTime": 1727410402205
        }
      }
    },
    "team_puzzle_105__894": {
      "scope": {
        "type": "team_puzzle_105",
        "teamId": "894",
        "puzzle": null
      },
      "state": {
        "confirmedTitles": {},
        "order": [
          "puz19",
          "puz104",
          "puz22",
          "puz69",
          "puz96",
          "puz114",
          "puz94",
          "puz93",
          "puz91",
          "puz103"
        ],
        "enums": {},
        "formFields": {
          "title": "Penguin",
          "answer": "PENNAME",
          "hexColor": "CD6763",
          "difficulty": 0,
          "flavortext": "",
          "solution": "",
          "instructions": "",
          "notes": "",
          "sharePermission": "full"
        },
        "status": {
          "type": "accepted",
          "moonickDialogue": "",
          "isAvailableInGacha": true,
          "submitTime": 1727552776269,
          "rarity": "common",
          "cannedHint": "The penguins are from Polar Bear Cafe.",
          "reviewTime": 1727559658902
        }
      }
    },
    "team_puzzle_105__555": {
      "scope": {
        "type": "team_puzzle_105",
        "teamId": "555",
        "puzzle": null
      },
      "state": {
        "confirmedTitles": {},
        "order": [
          "puz19",
          "puz104",
          "puz22",
          "puz69",
          "puz96",
          "puz114",
          "puz94",
          "puz93",
          "puz91",
          "puz103"
        ],
        "enums": {},
        "formFields": {
          "title": "Clues with Cryptic Answers",
          "answer": "ENIGMATIC",
          "hexColor": "33FFC1",
          "difficulty": 0,
          "flavortext": "",
          "solution": "",
          "instructions": "",
          "notes": "",
          "sharePermission": "full"
        },
        "status": {
          "type": "accepted",
          "moonickDialogue": "",
          "isAvailableInGacha": true,
          "submitTime": 1727506277579,
          "rarity": "uncommon",
          "cannedHint": "The six cryptic clues each use a different type of wordplay. For extraction, treat the answers as another clue, with the last word being the enumeration.",
          "reviewTime": 1727510235282
        }
      }
    },
    "team_puzzle_105__151": {
      "scope": {
        "type": "team_puzzle_105",
        "teamId": "151",
        "puzzle": null
      },
      "state": {
        "confirmedTitles": {},
        "order": [
          "puz19",
          "puz104",
          "puz22",
          "puz69",
          "puz96",
          "puz114",
          "puz94",
          "puz93",
          "puz91",
          "puz103"
        ],
        "enums": {},
        "formFields": {
          "title": "80-80",
          "answer": "GABBA",
          "hexColor": "808080",
          "difficulty": 0,
          "flavortext": "",
          "solution": "",
          "instructions": "",
          "notes": "",
          "sharePermission": "full"
        },
        "status": {
          "type": "accepted",
          "moonickDialogue": "",
          "isAvailableInGacha": true,
          "submitTime": 1727557816707,
          "rarity": "common",
          "cannedHint": "The answer is five letters and shaped like a 80wl.",
          "unlockInEdges": [
            {
              "unlockGroupId": "solve__puz233",
              "val": 1
            }
          ],
          "reviewTime": 1727606944215
        }
      }
    },
    "team_puzzle_105__440": {
      "scope": {
        "type": "team_puzzle_105",
        "teamId": "440",
        "puzzle": null
      },
      "state": {
        "confirmedTitles": {},
        "order": [
          "puz19",
          "puz104",
          "puz22",
          "puz69",
          "puz96",
          "puz114",
          "puz94",
          "puz93",
          "puz91",
          "puz103"
        ],
        "enums": {},
        "formFields": {
          "title": "Exile Art",
          "answer": "BOAT",
          "hexColor": "23B614",
          "difficulty": 0,
          "flavortext": "",
          "solution": "",
          "instructions": "",
          "notes": "",
          "sharePermission": "full"
        },
        "status": {
          "type": "accepted",
          "moonickDialogue": "",
          "isAvailableInGacha": true,
          "submitTime": 1727593828773,
          "rarity": "common",
          "cannedHint": "Draw out a path of adjacent nodes using the provided list.",
          "reviewTime": 1727603790764
        }
      }
    },
    "team_puzzle_105__73": {
      "scope": {
        "type": "team_puzzle_105",
        "teamId": "73",
        "puzzle": null
      },
      "state": {
        "confirmedTitles": {},
        "order": [
          "puz19",
          "puz104",
          "puz22",
          "puz69",
          "puz96",
          "puz114",
          "puz94",
          "puz93",
          "puz91",
          "puz103"
        ],
        "enums": {},
        "formFields": {
          "title": "🄿 🅄 🅉 🅉 🄻 🄴",
          "answer": "REFUGE",
          "hexColor": "F9ED01",
          "difficulty": 0,
          "flavortext": "",
          "solution": "",
          "instructions": "",
          "notes": "",
          "sharePermission": "full"
        },
        "status": {
          "type": "accepted",
          "moonickDialogue": "",
          "isAvailableInGacha": true,
          "submitTime": 1727592356756,
          "rarity": "common",
          "cannedHint": "Add a letter to each of these to get a location of a restaurant chain.",
          "reviewTime": 1727648625870
        }
      }
    },
    "team_puzzle_105__794": {
      "scope": {
        "type": "team_puzzle_105",
        "teamId": "794",
        "puzzle": null
      },
      "state": {
        "confirmedTitles": {},
        "order": [
          "puz19",
          "puz104",
          "puz22",
          "puz69",
          "puz96",
          "puz114",
          "puz94",
          "puz93",
          "puz91",
          "puz103"
        ],
        "enums": {},
        "formFields": {
          "title": "Dragon Management",
          "answer": "FIREBREATH",
          "hexColor": "C0C0C0",
          "difficulty": 0,
          "flavortext": "",
          "solution": "",
          "instructions": "",
          "notes": "",
          "sharePermission": "full"
        },
        "status": {
          "type": "accepted",
          "moonickDialogue": "",
          "isAvailableInGacha": true,
          "submitTime": 1727552792358,
          "rarity": "uncommon",
          "cannedHint": "These are all species names in a particular thematic film franchise.",
          "reviewTime": 1727553486368
        }
      }
    },
    "team_puzzle_105__610": {
      "scope": {
        "type": "team_puzzle_105",
        "teamId": "610",
        "puzzle": null
      },
      "state": {
        "confirmedTitles": {},
        "order": [
          "puz19",
          "puz104",
          "puz22",
          "puz69",
          "puz96",
          "puz114",
          "puz94",
          "puz93",
          "puz91",
          "puz103"
        ],
        "enums": {},
        "formFields": {
          "title": "Atomic Diplomacy",
          "answer": "FRANCE",
          "hexColor": "0055A4",
          "difficulty": 0,
          "flavortext": "",
          "solution": "",
          "instructions": "",
          "notes": "",
          "sharePermission": "full"
        },
        "status": {
          "type": "accepted",
          "moonickDialogue": "",
          "isAvailableInGacha": true,
          "submitTime": 1727584626787,
          "rarity": "common",
          "cannedHint": "Name the country indicated by the question mark. The countries are placed in a particular way.",
          "unlockInEdges": [
            {
              "unlockGroupId": "jfk",
              "val": 2
            }
          ],
          "reviewTime": 1727584938028
        }
      }
    },
    "team_puzzle_105__657": {
      "scope": {
        "type": "team_puzzle_105",
        "teamId": "657",
        "puzzle": null
      },
      "state": {
        "confirmedTitles": {},
        "order": [
          "puz19",
          "puz104",
          "puz22",
          "puz69",
          "puz96",
          "puz114",
          "puz94",
          "puz93",
          "puz91",
          "puz103"
        ],
        "enums": {},
        "formFields": {
          "title": "High Five",
          "answer": "PALMS",
          "hexColor": "008F11",
          "difficulty": 0,
          "flavortext": "",
          "solution": "",
          "instructions": "",
          "notes": "",
          "sharePermission": "full"
        },
        "status": {
          "type": "accepted",
          "moonickDialogue": "",
          "isAvailableInGacha": true,
          "submitTime": 1727581717777,
          "rarity": "common",
          "cannedHint": "Each clue clues a big tech company. Despite the fact that the list is currently alphabetically sorted, you do not need to resort the list.",
          "reviewTime": 1727582722845
        }
      }
    },
    "team_puzzle_105__269": {
      "scope": {
        "type": "team_puzzle_105",
        "teamId": "269",
        "puzzle": null
      },
      "state": {
        "confirmedTitles": {},
        "order": [
          "puz19",
          "puz104",
          "puz22",
          "puz69",
          "puz96",
          "puz114",
          "puz94",
          "puz93",
          "puz91",
          "puz103"
        ],
        "enums": {},
        "formFields": {
          "title": "50🏃❤️",
          "answer": "TEARS",
          "hexColor": "F9E5AE",
          "difficulty": 0,
          "flavortext": "",
          "solution": "",
          "instructions": "",
          "notes": "",
          "sharePermission": "full"
        },
        "status": {
          "type": "accepted",
          "moonickDialogue": "",
          "isAvailableInGacha": true,
          "submitTime": 1727462645003,
          "rarity": "common",
          "cannedHint": "This references lines from a song clued by the title and the first letters of the clues.",
          "unlockInEdges": [
            {
              "unlockGroupId": "fifty",
              "val": 1
            }
          ],
          "reviewTime": 1727469215193
        }
      }
    },
    "team_puzzle_105__574": {
      "scope": {
        "type": "team_puzzle_105",
        "teamId": "574",
        "puzzle": null
      },
      "state": {
        "confirmedTitles": {},
        "order": [
          "puz19",
          "puz104",
          "puz22",
          "puz69",
          "puz96",
          "puz114",
          "puz94",
          "puz93",
          "puz91",
          "puz103"
        ],
        "enums": {},
        "formFields": {
          "title": "Where No Puzzle Has Gone Before",
          "answer": "STARGAZER",
          "hexColor": "0095B6",
          "difficulty": 0,
          "flavortext": "",
          "solution": "",
          "instructions": "",
          "notes": "",
          "sharePermission": "full"
        },
        "status": {
          "type": "accepted",
          "moonickDialogue": "",
          "isAvailableInGacha": true,
          "submitTime": 1727630780798,
          "rarity": "common",
          "cannedHint": "The title is a reference to a sci-fi franchise that is relevant to the rest of the puzzle.",
          "reviewTime": 1727647650668
        }
      }
    },
    "team_puzzle_105__1128": {
      "scope": {
        "type": "team_puzzle_105",
        "teamId": "1128",
        "puzzle": null
      },
      "state": {
        "confirmedTitles": {},
        "order": [
          "puz19",
          "puz104",
          "puz22",
          "puz69",
          "puz96",
          "puz114",
          "puz94",
          "puz93",
          "puz91",
          "puz103"
        ],
        "enums": {},
        "formFields": {
          "title": "The Meeting of Stars",
          "answer": "SIXDEGREESOFSEPARATION",
          "hexColor": "000000",
          "difficulty": 0,
          "flavortext": "",
          "solution": "",
          "instructions": "",
          "notes": "",
          "sharePermission": "full"
        },
        "status": {
          "type": "accepted",
          "moonickDialogue": "",
          "isAvailableInGacha": true,
          "submitTime": 1727588705993,
          "rarity": "rare",
          "cannedHint": "Here, stars refer to actors and actresses. Where do they \\"meet\\"? Repeat this process twice more.",
          "reviewTime": 1727589030248
        }
      }
    },
    "team_puzzle_105__954": {
      "scope": {
        "type": "team_puzzle_105",
        "teamId": "954",
        "puzzle": null
      },
      "state": {
        "confirmedTitles": {},
        "order": [
          "puz19",
          "puz104",
          "puz22",
          "puz69",
          "puz96",
          "puz114",
          "puz94",
          "puz93",
          "puz91",
          "puz103"
        ],
        "enums": {},
        "formFields": {
          "title": "if oNLy these were homonyms",
          "answer": "WORST",
          "hexColor": "FFC3C3",
          "difficulty": 0,
          "flavortext": "",
          "solution": "",
          "instructions": "",
          "notes": "",
          "sharePermission": "full"
        },
        "status": {
          "type": "accepted",
          "moonickDialogue": "",
          "isAvailableInGacha": true,
          "submitTime": 1727671558458,
          "rarity": "rare",
          "cannedHint": "These are about homonyms in Dutch. Index the numbers from the bottom clues into the answers to the top clues.",
          "reviewTime": 1727672050917
        }
      }
    },
    "team_puzzle_105__17": {
      "scope": {
        "type": "team_puzzle_105",
        "teamId": "17",
        "puzzle": null
      },
      "state": {
        "confirmedTitles": {},
        "order": [
          "puz19",
          "puz104",
          "puz22",
          "puz69",
          "puz96",
          "puz114",
          "puz94",
          "puz93",
          "puz91",
          "puz103"
        ],
        "enums": {},
        "formFields": {
          "title": "Layer",
          "answer": "JANE",
          "hexColor": "FFD500",
          "difficulty": 0,
          "flavortext": "",
          "solution": "",
          "instructions": "",
          "notes": "",
          "sharePermission": "full"
        },
        "status": {
          "type": "accepted",
          "moonickDialogue": "",
          "isAvailableInGacha": true,
          "submitTime": 1727566842397,
          "rarity": "uncommon",
          "cannedHint": "The flavortext suggests the CFOP method of cubing. There are mnemonics for last layer algorithms (PLL), for which different configurations are labeled by letters.",
          "unlockInEdges": [
            {
              "unlockGroupId": "solve__puz297",
              "val": 1
            }
          ],
          "reviewTime": 1727629871851
        }
      }
    },
    "team_puzzle_105__354": {
      "scope": {
        "type": "team_puzzle_105",
        "teamId": "354",
        "puzzle": null
      },
      "state": {
        "confirmedTitles": {},
        "order": [
          "puz19",
          "puz104",
          "puz22",
          "puz69",
          "puz96",
          "puz114",
          "puz94",
          "puz93",
          "puz91",
          "puz103"
        ],
        "enums": {},
        "formFields": {
          "title": "一道孬题",
          "answer": "NAUGHTY",
          "hexColor": "000000",
          "difficulty": 0,
          "flavortext": "",
          "solution": "",
          "instructions": "",
          "notes": "",
          "sharePermission": "full"
        },
        "status": {
          "type": "accepted",
          "moonickDialogue": "",
          "isAvailableInGacha": true,
          "submitTime": 1727515532550,
          "rarity": "common",
          "cannedHint": "There's no trick here; just follow the instructions. You should get two words at the end, a 3-letter and a 7-letter word.",
          "unlockInEdges": [
            {
              "unlockGroupId": "unlock__puz105_custom_275",
              "val": 1,
              "isUnlockOnly": true
            }
          ],
          "reviewTime": 1727518753269
        }
      }
    },
    "team_puzzle_105__255": {
      "scope": {
        "type": "team_puzzle_105",
        "teamId": "255",
        "puzzle": null
      },
      "state": {
        "confirmedTitles": {},
        "order": [
          "puz19",
          "puz104",
          "puz22",
          "puz69",
          "puz96",
          "puz114",
          "puz94",
          "puz93",
          "puz91",
          "puz103"
        ],
        "enums": {},
        "formFields": {
          "title": "Hey Puzzle Puzzle",
          "answer": "JAPES",
          "hexColor": "5B3E4C",
          "difficulty": 0,
          "flavortext": "",
          "solution": "",
          "instructions": "",
          "notes": "",
          "sharePermission": "full"
        },
        "status": {
          "type": "accepted",
          "moonickDialogue": "",
          "isAvailableInGacha": true,
          "submitTime": 1727610234865,
          "rarity": "common",
          "cannedHint": "This puzzle is about a podcast where the three hosts solve puzzles. The hosts' names can be found in the capitalized letters of the flavortext.",
          "reviewTime": 1727633628146
        }
      }
    },
    "team_puzzle_105__141": {
      "scope": {
        "type": "team_puzzle_105",
        "teamId": "141",
        "puzzle": null
      },
      "state": {
        "confirmedTitles": {},
        "order": [
          "puz19",
          "puz104",
          "puz22",
          "puz69",
          "puz96",
          "puz114",
          "puz94",
          "puz93",
          "puz91",
          "puz103"
        ],
        "enums": {},
        "formFields": {
          "title": "Extremely Intelligent Puzzle",
          "answer": "SMART",
          "hexColor": "000000",
          "difficulty": 0,
          "flavortext": "",
          "solution": "",
          "instructions": "",
          "notes": "",
          "sharePermission": "full"
        },
        "status": {
          "type": "accepted",
          "moonickDialogue": "",
          "isAvailableInGacha": true,
          "submitTime": 1727631242578,
          "rarity": "common",
          "cannedHint": "Each image clues a word with the given enumeration. All these words share something in common, in terms of letters.",
          "reviewTime": 1727652692477
        }
      }
    },
    "team_puzzle_105__287": {
      "scope": {
        "type": "team_puzzle_105",
        "teamId": "287",
        "puzzle": null
      },
      "state": {
        "confirmedTitles": {},
        "order": [
          "puz19",
          "puz104",
          "puz22",
          "puz69",
          "puz96",
          "puz114",
          "puz94",
          "puz93",
          "puz91",
          "puz103"
        ],
        "enums": {},
        "formFields": {
          "title": "THE ANSWER IS THE ANSWER TO ANOTHER PUZZLE",
          "answer": "THEANSWERTOANOTHERPUZZLE",
          "hexColor": "A5453D",
          "difficulty": 0,
          "flavortext": "",
          "solution": "",
          "instructions": "",
          "notes": "",
          "sharePermission": "full"
        },
        "status": {
          "type": "accepted",
          "moonickDialogue": "",
          "isAvailableInGacha": true,
          "submitTime": 1727613139038,
          "rarity": "common",
          "cannedHint": "The answer a substring of the puzzle title.",
          "reviewTime": 1727613876081
        }
      }
    },
    "team_puzzle_105__144": {
      "scope": {
        "type": "team_puzzle_105",
        "teamId": "144",
        "puzzle": null
      },
      "state": {
        "confirmedTitles": {},
        "order": [
          "puz19",
          "puz104",
          "puz22",
          "puz69",
          "puz96",
          "puz114",
          "puz94",
          "puz93",
          "puz91",
          "puz103"
        ],
        "enums": {},
        "formFields": {
          "title": "A Very Original Puzzle",
          "answer": "FIFTYFIFTY",
          "hexColor": "005050",
          "difficulty": 0,
          "flavortext": "",
          "solution": "",
          "instructions": "",
          "notes": "",
          "sharePermission": "full"
        },
        "status": {
          "type": "accepted",
          "moonickDialogue": "",
          "isAvailableInGacha": true,
          "submitTime": 1727600500568,
          "rarity": "common",
          "cannedHint": "All the clues clue the same answer. Submit it twice.",
          "unlockInEdges": [
            {
              "unlockGroupId": "fifty",
              "val": 3
            }
          ],
          "reviewTime": 1727602781280
        }
      }
    }
  }
}`,Ut="__mockdb";let qe,Mn=!1;const ga=async(s,e)=>{const n=_t.createInstance({driver:_t.INDEXEDDB,name:s.browserStoragePrefix});if(qe===void 0||e!==void 0&&!Mn){e!==void 0&&(Mn=!0,await n.clear());const t=qe,a=await n.getItem(Ut),o=(s.isPosthunt??!1)&&Mt!==""?JSON.parse(Mt):void 0,r=(()=>{if(e===void 0)return a===null?o:void 0;if(e.initState===void 0)return o;if(o===void 0)return e.initState;if(e.initState.version!==o.version)throw new Error(`Unable to migrate state from version ${e.initState.version} to ${o.version}`);const i=o;i.defaultTeamId=e.initState.defaultTeamId,Object.assign(i.scopeState,e.initState.scopeState);for(const[h,g]of Object.entries(e.initState.teams))i.teams[h]!==void 0&&(g.isPlaceholder??!1)||(i.teams[h]=g);return i})();qe=new Xr({backend:new mr(It,a,async i=>{await n.setItem(Ut,i)},{bootstrapTeam:s.bootstrapTeam,initUnlocks:e===void 0,isDev:!s.isPosthunt,initState:r}),dumpWsMessages:!1,dumpBackendRequests:s.dumpBackendRequests??!1,loadPuzzlesDBAsync:async()=>It,periodicSyncInterval:200,authInterface:new Qr,isWSReq:i=>!0,enableDevFeatures:!0,logRequestErrDebugInfoAsync:async i=>{console.error(i)},farmerServerInterface:new nl(s.farmerWsEndpoints.map(i=>new ao(i))),logWord2Vec:!0,forceHuntEnd:s.forceHuntEnd,isPosthunt:s.isPosthunt}),await qe.initAsync(),t!==void 0&&t.teardown(),e&&(Mn=!1)}return qe};class tl{constructor(e){u(this,"mockServerInterface");u(this,"callbacks");this.mockServerInterface=new Et(e)}init(e){this.callbacks=e,this.mockServerInterface.init(e)}send(e){this.mockServerInterface.send(e)}reconnect(){this.mockServerInterface.reconnect()}close(){this.mockServerInterface.close()}resetServer(e){(async()=>{if(this.mockServerInterface=new Et(await ga(Kt,{initState:e})),this.callbacks===void 0)throw new Error("expect callbacks to be defined");this.mockServerInterface.init(this.callbacks)})().catch(console.error)}}const il=async s=>new tl(await ga(Kt));export{il as default};
//# sourceMappingURL=makeClientMockServerInterface-CFjDln-6.js.map
