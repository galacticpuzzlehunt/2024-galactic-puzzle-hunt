{"version":3,"file":"sharedWorkerServer-sz5AnNjt.js","sources":["../../interactive/src/sock-server/server-interface/SharedWorkerInterface.ts","../src/sharedWorkerServer.ts"],"sourcesContent":["import { MockServerOpts } from \"sockapi/server-config\";\nimport { SavedHuntBackendState } from \"sockapi/scope-specs/state-download-spec\";\nimport {\n  ServerInterface,\n  ServerInterfaceCallbacks,\n} from \"sock-server/server-interface/ServerInterface\";\n\nexport enum SharedWorkerReqType {\n  INIT = \"init\",\n  HANDLE_MSG = \"handle_msg\",\n  REMOVE_CLIENT = \"remove_client\",\n}\n\nexport type SharedWorkerReq =\n  | {\n      type: SharedWorkerReqType.INIT;\n      mockServerOpts: MockServerOpts;\n      connUid?: string;\n      resetServer?: {\n        initState?: SavedHuntBackendState;\n      };\n    }\n  | {\n      type: SharedWorkerReqType.HANDLE_MSG;\n      msg: string;\n    }\n  | {\n      type: SharedWorkerReqType.REMOVE_CLIENT;\n    };\n\nexport enum SharedWorkerRespType {\n  INIT_ACK = \"init_ack\",\n  RESP = \"resp\",\n  CLOSE = \"close\",\n}\n\ntype SharedWorkerResp =\n  | {\n      type: SharedWorkerRespType.INIT_ACK;\n    }\n  | {\n      type: SharedWorkerRespType.RESP;\n      msg: string;\n    }\n  | {\n      type: SharedWorkerRespType.CLOSE;\n    };\n\nexport class SharedWorkerInterface implements ServerInterface {\n  worker: SharedWorker;\n  callbacks?: ServerInterfaceCallbacks;\n  mockServerOpts: MockServerOpts;\n  connUid?: string;\n  handleMsg: (msg: string) => void;\n  disconnect: () => void;\n  isClosed: boolean;\n\n  constructor(\n    worker: SharedWorker,\n    mockServerOpts: MockServerOpts,\n    connUid?: string\n  ) {\n    this.worker = worker;\n    this.mockServerOpts = mockServerOpts;\n    this.connUid = connUid;\n    this.handleMsg = () => {\n      throw new Error(\"connection not initialized yet\");\n    };\n    this.disconnect = () => {\n      throw new Error(\"connection not initialized yet\");\n    };\n    this.isClosed = false;\n  }\n\n  init(callbacks: ServerInterfaceCallbacks) {\n    this.callbacks = callbacks;\n    this.connect();\n  }\n\n  private connect(): void {\n    if (this.callbacks === undefined)\n      throw new Error(\"expect callbacks to be defined\");\n    const { onOpen, onResp, afterDisconnect } = this.callbacks;\n\n    this.worker.port.onmessage = ({ data }: MessageEvent<SharedWorkerResp>) => {\n      switch (data.type) {\n        case SharedWorkerRespType.INIT_ACK: {\n          onOpen();\n          break;\n        }\n        case SharedWorkerRespType.RESP: {\n          if (this.isClosed) return;\n          Promise.resolve()\n            .then(() => {\n              onResp(data.msg);\n            })\n            .catch(console.error);\n          break;\n        }\n        case SharedWorkerRespType.CLOSE: {\n          this.reconnect();\n          break;\n        }\n      }\n    };\n\n    this.handleMsg = (msg) => {\n      this.worker.port.postMessage({\n        type: SharedWorkerReqType.HANDLE_MSG,\n        msg,\n      });\n    };\n\n    this.disconnect = () => {\n      this.worker.port.postMessage({\n        type: SharedWorkerReqType.REMOVE_CLIENT,\n      });\n      afterDisconnect({\n        numReconnections: 0,\n        reconnectDelayInSeconds: 0,\n      });\n    };\n\n    this.worker.port.start();\n\n    this.worker.port.postMessage({\n      type: SharedWorkerReqType.INIT,\n      mockServerOpts: this.mockServerOpts,\n      connUid: this.connUid,\n    });\n  }\n\n  send(msg: string) {\n    Promise.resolve()\n      .then(() => {\n        this.handleMsg(msg);\n      })\n      .catch(console.error);\n  }\n\n  reconnect() {\n    this.disconnect();\n    this.connect();\n  }\n\n  close() {\n    this.disconnect();\n    this.isClosed = true;\n    this.worker.port.close();\n  }\n\n  resetServer(initState?: SavedHuntBackendState) {\n    this.worker.port.postMessage({\n      type: SharedWorkerReqType.INIT,\n      mockServerOpts: this.mockServerOpts,\n      connUid: this.connUid,\n      resetServer: { initState },\n    });\n  }\n}\n","import { MockServerOpts } from \"sockapi/server-config\";\nimport { SavedHuntBackendState } from \"sockapi/scope-specs/state-download-spec\";\nimport {\n  SharedWorkerReq,\n  SharedWorkerReqType,\n  SharedWorkerRespType,\n} from \"sock-server/server-interface/SharedWorkerInterface\";\n\nclass SharedWorkerPortController {\n  port: MessagePort;\n  handleMsg?: (msg: string) => void;\n  removeClient?: () => void;\n  isClosed: boolean;\n\n  constructor(port: MessagePort) {\n    this.port = port;\n    this.isClosed = false;\n  }\n\n  init() {\n    this.port.onmessage = (msg) => {\n      this.handlePortMsg(msg).catch(console.error);\n    };\n    this.port.start();\n  }\n\n  async handleInit(\n    mockServerOpts: MockServerOpts,\n    connUid?: string,\n    resetServer?: { initState?: SavedHuntBackendState }\n  ) {\n    if (import.meta.env.MODE !== \"production\") {\n      const makeMockServer = (await import(\"makeMockServer\")).default;\n\n      if (resetServer !== undefined) {\n        // Resetting the server will cause the old one to disconnect us,\n        // resulting in another INIT call. We'll rely on that INIT call\n        // to set up the connection.\n        await makeMockServer(mockServerOpts, resetServer);\n        return;\n      }\n\n      // This creates a mock server singleton, or returns the existing one.\n      const sockServer = await makeMockServer(mockServerOpts);\n\n      const clientInterface = sockServer.addClient(\n        {\n          send: (msg) => {\n            this.port.postMessage({\n              type: SharedWorkerRespType.RESP,\n              msg,\n            });\n          },\n          close: () => {\n            this.port.postMessage({\n              type: SharedWorkerRespType.CLOSE,\n            });\n          },\n        },\n        connUid\n      );\n\n      this.handleMsg = clientInterface.handleMsg;\n      this.removeClient = clientInterface.removeClient;\n\n      this.port.postMessage({\n        type: SharedWorkerRespType.INIT_ACK,\n      });\n    }\n  }\n\n  async handlePortMsg({ data }: MessageEvent<SharedWorkerReq>) {\n    if (this.isClosed) return;\n\n    switch (data.type) {\n      case SharedWorkerReqType.INIT: {\n        await this.handleInit(\n          data.mockServerOpts,\n          data.connUid,\n          data.resetServer\n        );\n        break;\n      }\n      case SharedWorkerReqType.HANDLE_MSG: {\n        this.handleMsg?.(data.msg);\n        break;\n      }\n      case SharedWorkerReqType.REMOVE_CLIENT: {\n        this.removeClient?.();\n        break;\n      }\n    }\n  }\n}\n\n// @ts-expect-error: global types are hard\nonconnect = (e: MessageEvent) => {\n  const portController = new SharedWorkerPortController(e.ports[0]);\n  portController.init();\n};\n"],"names":["SharedWorkerReqType","SharedWorkerRespType","SharedWorkerPortController","port","__publicField","msg","mockServerOpts","connUid","resetServer","makeMockServer","clientInterface","data","_a","_b","e"],"mappings":"oKAOY,IAAAA,GAAAA,IACVA,EAAA,KAAO,OACPA,EAAA,WAAa,aACbA,EAAA,cAAgB,gBAHNA,IAAAA,GAAA,CAAA,CAAA,EAuBAC,GAAAA,IACVA,EAAA,SAAW,WACXA,EAAA,KAAO,OACPA,EAAA,MAAQ,QAHEA,IAAAA,GAAA,CAAA,CAAA,ECtBZ,MAAMC,CAA2B,CAM/B,YAAYC,EAAmB,CAL/BC,EAAA,aACAA,EAAA,kBACAA,EAAA,qBACAA,EAAA,iBAGE,KAAK,KAAOD,EACZ,KAAK,SAAW,EAClB,CAEA,MAAO,CACA,KAAA,KAAK,UAAaE,GAAQ,CAC7B,KAAK,cAAcA,CAAG,EAAE,MAAM,QAAQ,KAAK,CAAA,EAE7C,KAAK,KAAK,OACZ,CAEA,MAAM,WACJC,EACAC,EACAC,EACA,CAC2C,CACzC,MAAMC,GAAkB,KAAM,QAAO,8BAAgB,GAAG,QAExD,GAAID,IAAgB,OAAW,CAIvB,MAAAC,EAAeH,EAAgBE,CAAW,EAChD,MACF,CAKA,MAAME,GAFa,MAAMD,EAAeH,CAAc,GAEnB,UACjC,CACE,KAAOD,GAAQ,CACb,KAAK,KAAK,YAAY,CACpB,KAAMJ,EAAqB,KAC3B,IAAAI,CAAA,CACD,CACH,EACA,MAAO,IAAM,CACX,KAAK,KAAK,YAAY,CACpB,KAAMJ,EAAqB,KAAA,CAC5B,CACH,CACF,EACAM,CAAA,EAGF,KAAK,UAAYG,EAAgB,UACjC,KAAK,aAAeA,EAAgB,aAEpC,KAAK,KAAK,YAAY,CACpB,KAAMT,EAAqB,QAAA,CAC5B,CACH,CACF,CAEA,MAAM,cAAc,CAAE,KAAAU,GAAuC,CDhEnD,IAAAC,EAAAC,ECiER,GAAI,MAAK,SAET,OAAQF,EAAK,KAAM,CACjB,KAAKX,EAAoB,KAAM,CAC7B,MAAM,KAAK,WACTW,EAAK,eACLA,EAAK,QACLA,EAAK,WAAA,EAEP,KACF,CACA,KAAKX,EAAoB,WAAY,EAC9BY,EAAA,KAAA,YAAA,MAAAA,EAAA,UAAYD,EAAK,KACtB,KACF,CACA,KAAKX,EAAoB,cAAe,EACtCa,EAAA,KAAK,eAAL,MAAAA,EAAA,WACA,KACF,CACF,CACF,CACF,CAGA,UAAaC,GAAoB,CACR,IAAIZ,EAA2BY,EAAE,MAAM,CAAC,CAAC,EACjD,KAAK,CACtB"}